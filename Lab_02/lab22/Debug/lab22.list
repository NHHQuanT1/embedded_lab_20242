
lab22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010570  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e64  08010720  08010720  00011720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011584  08011584  00013088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011584  08011584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801158c  0801158c  00013088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801158c  0801158c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011590  08011590  00012590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08011594  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013088  2**0
                  CONTENTS
 10 .bss          000093f0  20000088  20000088  00013088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009478  20009478  00013088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b8c6  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006380  00000000  00000000  0003e97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002470  00000000  00000000  00044d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c33  00000000  00000000  00047170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cbf0  00000000  00000000  00048da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e39c  00000000  00000000  00075993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f65d4  00000000  00000000  000a3d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019a303  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009fa0  00000000  00000000  0019a348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001a42e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010708 	.word	0x08010708

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08010708 	.word	0x08010708

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t SH1106_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SH1106_I2C, SH1106_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005d2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80005d6:	2201      	movs	r2, #1
 80005d8:	2178      	movs	r1, #120	@ 0x78
 80005da:	484c      	ldr	r0, [pc, #304]	@ (800070c <SH1106_Init+0x140>)
 80005dc:	f005 fa86 	bl	8005aec <HAL_I2C_IsDeviceReady>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SH1106_Init+0x1e>
		/* Return false */
		return 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e08b      	b.n	8000702 <SH1106_Init+0x136>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005ea:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80005ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005f0:	e002      	b.n	80005f8 <SH1106_Init+0x2c>
		p--;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f9      	bne.n	80005f2 <SH1106_Init+0x26>
	
	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
 80005fe:	22ae      	movs	r2, #174	@ 0xae
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	@ 0x78
 8000604:	f000 fa4c 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
 8000608:	22b0      	movs	r2, #176	@ 0xb0
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	@ 0x78
 800060e:	f000 fa47 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
 8000612:	2281      	movs	r2, #129	@ 0x81
 8000614:	2100      	movs	r1, #0
 8000616:	2078      	movs	r0, #120	@ 0x78
 8000618:	f000 fa42 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
 800061c:	22ff      	movs	r2, #255	@ 0xff
 800061e:	2100      	movs	r1, #0
 8000620:	2078      	movs	r0, #120	@ 0x78
 8000622:	f000 fa3d 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000626:	22a1      	movs	r2, #161	@ 0xa1
 8000628:	2100      	movs	r1, #0
 800062a:	2078      	movs	r0, #120	@ 0x78
 800062c:	f000 fa38 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
 8000630:	22a6      	movs	r2, #166	@ 0xa6
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	@ 0x78
 8000636:	f000 fa33 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800063a:	22a8      	movs	r2, #168	@ 0xa8
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	@ 0x78
 8000640:	f000 fa2e 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
 8000644:	223f      	movs	r2, #63	@ 0x3f
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	@ 0x78
 800064a:	f000 fa29 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
 800064e:	22ad      	movs	r2, #173	@ 0xad
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	@ 0x78
 8000654:	f000 fa24 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
 8000658:	228b      	movs	r2, #139	@ 0x8b
 800065a:	2100      	movs	r1, #0
 800065c:	2078      	movs	r0, #120	@ 0x78
 800065e:	f000 fa1f 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
 8000662:	2232      	movs	r2, #50	@ 0x32
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	@ 0x78
 8000668:	f000 fa1a 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800066c:	22c8      	movs	r2, #200	@ 0xc8
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	@ 0x78
 8000672:	f000 fa15 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
 8000676:	22d3      	movs	r2, #211	@ 0xd3
 8000678:	2100      	movs	r1, #0
 800067a:	2078      	movs	r0, #120	@ 0x78
 800067c:	f000 fa10 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2078      	movs	r0, #120	@ 0x78
 8000686:	f000 fa0b 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800068a:	22d5      	movs	r2, #213	@ 0xd5
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	@ 0x78
 8000690:	f000 fa06 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
 8000694:	2280      	movs	r2, #128	@ 0x80
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	@ 0x78
 800069a:	f000 fa01 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
 800069e:	22d9      	movs	r2, #217	@ 0xd9
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	@ 0x78
 80006a4:	f000 f9fc 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
 80006a8:	221f      	movs	r2, #31
 80006aa:	2100      	movs	r1, #0
 80006ac:	2078      	movs	r0, #120	@ 0x78
 80006ae:	f000 f9f7 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006b2:	22da      	movs	r2, #218	@ 0xda
 80006b4:	2100      	movs	r1, #0
 80006b6:	2078      	movs	r0, #120	@ 0x78
 80006b8:	f000 f9f2 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
 80006bc:	2212      	movs	r2, #18
 80006be:	2100      	movs	r1, #0
 80006c0:	2078      	movs	r0, #120	@ 0x78
 80006c2:	f000 f9ed 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
 80006c6:	22db      	movs	r2, #219	@ 0xdb
 80006c8:	2100      	movs	r1, #0
 80006ca:	2078      	movs	r0, #120	@ 0x78
 80006cc:	f000 f9e8 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
 80006d0:	2240      	movs	r2, #64	@ 0x40
 80006d2:	2100      	movs	r1, #0
 80006d4:	2078      	movs	r0, #120	@ 0x78
 80006d6:	f000 f9e3 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
 80006da:	22af      	movs	r2, #175	@ 0xaf
 80006dc:	2100      	movs	r1, #0
 80006de:	2078      	movs	r0, #120	@ 0x78
 80006e0:	f000 f9de 	bl	8000aa0 <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 f843 	bl	8000770 <SH1106_Fill>
	
	/* Update screen */
	SH1106_UpdateScreen();
 80006ea:	f000 f813 	bl	8000714 <SH1106_UpdateScreen>
	
	/* Set default values */
	SH1106.CurrentX = 0;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <SH1106_Init+0x144>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <SH1106_Init+0x144>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SH1106.Initialized = 1;
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <SH1106_Init+0x144>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000700:	2301      	movs	r3, #1
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000074c 	.word	0x2000074c
 8000710:	200004a4 	.word	0x200004a4

08000714 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
 800071e:	e01d      	b.n	800075c <SH1106_UpdateScreen+0x48>
		SH1106_WRITECOMMAND(0xB0 + m);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	3b50      	subs	r3, #80	@ 0x50
 8000724:	b2db      	uxtb	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	2078      	movs	r0, #120	@ 0x78
 800072c:	f000 f9b8 	bl	8000aa0 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2078      	movs	r0, #120	@ 0x78
 8000736:	f000 f9b3 	bl	8000aa0 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 800073a:	2210      	movs	r2, #16
 800073c:	2100      	movs	r1, #0
 800073e:	2078      	movs	r0, #120	@ 0x78
 8000740:	f000 f9ae 	bl	8000aa0 <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	01db      	lsls	r3, r3, #7
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <SH1106_UpdateScreen+0x58>)
 800074a:	441a      	add	r2, r3
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	2140      	movs	r1, #64	@ 0x40
 8000750:	2078      	movs	r0, #120	@ 0x78
 8000752:	f000 f93f 	bl	80009d4 <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	3301      	adds	r3, #1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9de      	bls.n	8000720 <SH1106_UpdateScreen+0xc>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000a4 	.word	0x200000a4

08000770 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <SH1106_Fill+0x14>
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <SH1106_Fill+0x16>
 8000784:	23ff      	movs	r3, #255	@ 0xff
 8000786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800078a:	4619      	mov	r1, r3
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <SH1106_Fill+0x2c>)
 800078e:	f00f fbeb 	bl	800ff68 <memset>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000a4 	.word	0x200000a4

080007a0 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]
 80007aa:	460b      	mov	r3, r1
 80007ac:	80bb      	strh	r3, [r7, #4]
 80007ae:	4613      	mov	r3, r2
 80007b0:	70fb      	strb	r3, [r7, #3]
	if (
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007b6:	d848      	bhi.n	800084a <SH1106_DrawPixel+0xaa>
		x >= SH1106_WIDTH ||
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80007bc:	d845      	bhi.n	800084a <SH1106_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <SH1106_DrawPixel+0xb8>)
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf0c      	ite	eq
 80007cc:	2301      	moveq	r3, #1
 80007ce:	2300      	movne	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d11a      	bne.n	8000810 <SH1106_DrawPixel+0x70>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 80007da:	88fa      	ldrh	r2, [r7, #6]
 80007dc:	88bb      	ldrh	r3, [r7, #4]
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	b298      	uxth	r0, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	01db      	lsls	r3, r3, #7
 80007e6:	4413      	add	r3, r2
 80007e8:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <SH1106_DrawPixel+0xbc>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	f003 0307 	and.w	r3, r3, #7
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b259      	sxtb	r1, r3
 8000800:	88fa      	ldrh	r2, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	01db      	lsls	r3, r3, #7
 8000806:	4413      	add	r3, r2
 8000808:	b2c9      	uxtb	r1, r1
 800080a:	4a14      	ldr	r2, [pc, #80]	@ (800085c <SH1106_DrawPixel+0xbc>)
 800080c:	54d1      	strb	r1, [r2, r3]
 800080e:	e01d      	b.n	800084c <SH1106_DrawPixel+0xac>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 8000810:	88fa      	ldrh	r2, [r7, #6]
 8000812:	88bb      	ldrh	r3, [r7, #4]
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	b298      	uxth	r0, r3
 8000818:	4603      	mov	r3, r0
 800081a:	01db      	lsls	r3, r3, #7
 800081c:	4413      	add	r3, r2
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <SH1106_DrawPixel+0xbc>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	b25a      	sxtb	r2, r3
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	b25b      	sxtb	r3, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4013      	ands	r3, r2
 8000838:	b259      	sxtb	r1, r3
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	4603      	mov	r3, r0
 800083e:	01db      	lsls	r3, r3, #7
 8000840:	4413      	add	r3, r2
 8000842:	b2c9      	uxtb	r1, r1
 8000844:	4a05      	ldr	r2, [pc, #20]	@ (800085c <SH1106_DrawPixel+0xbc>)
 8000846:	54d1      	strb	r1, [r2, r3]
 8000848:	e000      	b.n	800084c <SH1106_DrawPixel+0xac>
		return;
 800084a:	bf00      	nop
	}
}
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	200004a4 	.word	0x200004a4
 800085c:	200000a4 	.word	0x200000a4

08000860 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	80fb      	strh	r3, [r7, #6]
 800086c:	4613      	mov	r3, r2
 800086e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 8000870:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <SH1106_GotoXY+0x28>)
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <SH1106_GotoXY+0x28>)
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	8053      	strh	r3, [r2, #2]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	200004a4 	.word	0x200004a4

0800088c <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 800089c:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <SH1106_Putc+0xf8>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
	if (
 80008a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008aa:	dc07      	bgt.n	80008bc <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 80008ac:	4b35      	ldr	r3, [pc, #212]	@ (8000984 <SH1106_Putc+0xf8>)
 80008ae:	885b      	ldrh	r3, [r3, #2]
 80008b0:	461a      	mov	r2, r3
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 80008b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ba:	dd01      	ble.n	80008c0 <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	e05d      	b.n	800097c <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e04b      	b.n	800095e <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b20      	subs	r3, #32
 80008ce:	6839      	ldr	r1, [r7, #0]
 80008d0:	7849      	ldrb	r1, [r1, #1]
 80008d2:	fb01 f303 	mul.w	r3, r1, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	440b      	add	r3, r1
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	e030      	b.n	800094c <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d010      	beq.n	800091c <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <SH1106_Putc+0xf8>)
 80008fc:	881a      	ldrh	r2, [r3, #0]
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	b29b      	uxth	r3, r3
 8000902:	4413      	add	r3, r2
 8000904:	b298      	uxth	r0, r3
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <SH1106_Putc+0xf8>)
 8000908:	885a      	ldrh	r2, [r3, #2]
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	b29b      	uxth	r3, r3
 800090e:	4413      	add	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	4619      	mov	r1, r3
 8000916:	f7ff ff43 	bl	80007a0 <SH1106_DrawPixel>
 800091a:	e014      	b.n	8000946 <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <SH1106_Putc+0xf8>)
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	b29b      	uxth	r3, r3
 8000924:	4413      	add	r3, r2
 8000926:	b298      	uxth	r0, r3
 8000928:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <SH1106_Putc+0xf8>)
 800092a:	885a      	ldrh	r2, [r3, #2]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	b29b      	uxth	r3, r3
 8000930:	4413      	add	r3, r2
 8000932:	b299      	uxth	r1, r3
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf0c      	ite	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	2300      	movne	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	461a      	mov	r2, r3
 8000942:	f7ff ff2d 	bl	80007a0 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	3301      	adds	r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4293      	cmp	r3, r2
 8000956:	d3c8      	bcc.n	80008ea <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3301      	adds	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	785b      	ldrb	r3, [r3, #1]
 8000962:	461a      	mov	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	4293      	cmp	r3, r2
 8000968:	d3ad      	bcc.n	80008c6 <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <SH1106_Putc+0xf8>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	4413      	add	r3, r2
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <SH1106_Putc+0xf8>)
 8000978:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800097a:	79fb      	ldrb	r3, [r7, #7]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200004a4 	.word	0x200004a4

08000988 <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	4613      	mov	r3, r2
 8000994:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000996:	e012      	b.n	80009be <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	68b9      	ldr	r1, [r7, #8]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff73 	bl	800088c <SH1106_Putc>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d002      	beq.n	80009b8 <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	e008      	b.n	80009ca <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1e8      	bne.n	8000998 <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	781b      	ldrb	r3, [r3, #0]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x8D);
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b0c7      	sub	sp, #284	@ 0x11c
 80009d8:	af02      	add	r7, sp, #8
 80009da:	4604      	mov	r4, r0
 80009dc:	4608      	mov	r0, r1
 80009de:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80009e2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80009e6:	600a      	str	r2, [r1, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009ee:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80009f2:	4622      	mov	r2, r4
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009fa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80009fe:	4602      	mov	r2, r0
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a0a:	460a      	mov	r2, r1
 8000a0c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a16:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a1a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000a1e:	7812      	ldrb	r2, [r2, #0]
 8000a20:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a28:	e015      	b.n	8000a56 <SH1106_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a2a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a2e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a32:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	441a      	add	r2, r3
 8000a3a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a3e:	3301      	adds	r3, #1
 8000a40:	7811      	ldrb	r1, [r2, #0]
 8000a42:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a46:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a4a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a4c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a50:	3301      	adds	r3, #1
 8000a52:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a56:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a60:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a64:	8812      	ldrh	r2, [r2, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d8df      	bhi.n	8000a2a <SH1106_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 8000a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a6e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b299      	uxth	r1, r3
 8000a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	f107 020c 	add.w	r2, r7, #12
 8000a88:	200a      	movs	r0, #10
 8000a8a:	9000      	str	r0, [sp, #0]
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <SH1106_I2C_WriteMulti+0xc8>)
 8000a8e:	f004 fc03 	bl	8005298 <HAL_I2C_Master_Transmit>
}
 8000a92:	bf00      	nop
 8000a94:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	2000074c 	.word	0x2000074c

08000aa0 <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	71bb      	strb	r3, [r7, #6]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ab6:	797b      	ldrb	r3, [r7, #5]
 8000ab8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	b299      	uxth	r1, r3
 8000abe:	f107 020c 	add.w	r2, r7, #12
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <SH1106_I2C_Write+0x38>)
 8000aca:	f004 fbe5 	bl	8005298 <HAL_I2C_Master_Transmit>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000074c 	.word	0x2000074c

08000adc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4a07      	ldr	r2, [pc, #28]	@ (8000b3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000b20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <vApplicationGetIdleTaskMemory+0x30>)
 8000b26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200004ac 	.word	0x200004ac
 8000b40:	20000504 	.word	0x20000504

08000b44 <SetDS1307>:
	uint8_t day;
	uint8_t month;
	uint8_t year;
};

void SetDS1307(struct Time time) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af04      	add	r7, sp, #16
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	e883 0003 	stmia.w	r3, {r0, r1}
	//write time to DS1307
	HAL_I2C_Mem_Write(&hi2c3, 0xD0, 0, 1, (uint8_t*) &time, 7, 1000);
 8000b50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	2307      	movs	r3, #7
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	2200      	movs	r2, #0
 8000b62:	21d0      	movs	r1, #208	@ 0xd0
 8000b64:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <SetDS1307+0x30>)
 8000b66:	f004 fc95 	bl	8005494 <HAL_I2C_Mem_Write>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000074c 	.word	0x2000074c

08000b78 <GetDS1307>:

void GetDS1307(char buff[]) {
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	b08b      	sub	sp, #44	@ 0x2c
 8000b7c:	af06      	add	r7, sp, #24
 8000b7e:	6078      	str	r0, [r7, #4]
	struct Time Get_Time;
	//read time from DS1307
	HAL_I2C_Mem_Read(&hi2c3, 0xD1, 0, 1, (uint8_t*) &Get_Time, 7, 1000);
 8000b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b84:	9302      	str	r3, [sp, #8]
 8000b86:	2307      	movs	r3, #7
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2301      	movs	r3, #1
 8000b92:	2200      	movs	r2, #0
 8000b94:	21d1      	movs	r1, #209	@ 0xd1
 8000b96:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <GetDS1307+0x54>)
 8000b98:	f004 fd76 	bl	8005688 <HAL_I2C_Mem_Read>
	sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d \n", Get_Time.hour,
 8000b9c:	7abb      	ldrb	r3, [r7, #10]
 8000b9e:	461d      	mov	r5, r3
			Get_Time.min, Get_Time.sec, Get_Time.weekday, Get_Time.day,
 8000ba0:	7a7b      	ldrb	r3, [r7, #9]
	sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d \n", Get_Time.hour,
 8000ba2:	461e      	mov	r6, r3
			Get_Time.min, Get_Time.sec, Get_Time.weekday, Get_Time.day,
 8000ba4:	7a3b      	ldrb	r3, [r7, #8]
 8000ba6:	7afa      	ldrb	r2, [r7, #11]
 8000ba8:	7b39      	ldrb	r1, [r7, #12]
			Get_Time.month, Get_Time.year);
 8000baa:	7b78      	ldrb	r0, [r7, #13]
 8000bac:	7bbc      	ldrb	r4, [r7, #14]
	sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d \n", Get_Time.hour,
 8000bae:	9404      	str	r4, [sp, #16]
 8000bb0:	9003      	str	r0, [sp, #12]
 8000bb2:	9102      	str	r1, [sp, #8]
 8000bb4:	9201      	str	r2, [sp, #4]
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	4633      	mov	r3, r6
 8000bba:	462a      	mov	r2, r5
 8000bbc:	4904      	ldr	r1, [pc, #16]	@ (8000bd0 <GetDS1307+0x58>)
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f00f f9b0 	bl	800ff24 <siprintf>
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	2000074c 	.word	0x2000074c
 8000bd0:	08010720 	.word	0x08010720

08000bd4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bd4:	b5b0      	push	{r4, r5, r7, lr}
 8000bd6:	b0ae      	sub	sp, #184	@ 0xb8
 8000bd8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bda:	f001 fbe9 	bl	80023b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bde:	f000 f8bf 	bl	8000d60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000be2:	f000 fb63 	bl	80012ac <MX_GPIO_Init>
	MX_CRC_Init();
 8000be6:	f000 f925 	bl	8000e34 <MX_CRC_Init>
	MX_DMA2D_Init();
 8000bea:	f000 f937 	bl	8000e5c <MX_DMA2D_Init>
	MX_FMC_Init();
 8000bee:	f000 fb0d 	bl	800120c <MX_FMC_Init>
	MX_I2C3_Init();
 8000bf2:	f000 f965 	bl	8000ec0 <MX_I2C3_Init>
	MX_LTDC_Init();
 8000bf6:	f000 f9a3 	bl	8000f40 <MX_LTDC_Init>
	MX_SPI5_Init();
 8000bfa:	f000 fa57 	bl	80010ac <MX_SPI5_Init>
	MX_TIM1_Init();
 8000bfe:	f000 fa8b 	bl	8001118 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8000c02:	f000 fad9 	bl	80011b8 <MX_USART1_UART_Init>
	MX_SPI4_Init();
 8000c06:	f000 fa1b 	bl	8001040 <MX_SPI4_Init>
	/* USER CODE BEGIN 2 */

	char buf[100];
	uint8_t X = 0, Y = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8000c10:	2300      	movs	r3, #0
 8000c12:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
	SH1106_Init();
 8000c16:	f7ff fcd9 	bl	80005cc <SH1106_Init>
	sprintf(buf, "%s", "RC522 RFID");
 8000c1a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c1e:	4a48      	ldr	r2, [pc, #288]	@ (8000d40 <main+0x16c>)
 8000c20:	4948      	ldr	r1, [pc, #288]	@ (8000d44 <main+0x170>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00f f97e 	bl	800ff24 <siprintf>
	SH1106_GotoXY(12, 10); // goto 10, 10
 8000c28:	210a      	movs	r1, #10
 8000c2a:	200c      	movs	r0, #12
 8000c2c:	f7ff fe18 	bl	8000860 <SH1106_GotoXY>
	SH1106_Puts(buf, &Font_11x18, 1);
 8000c30:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c34:	2201      	movs	r2, #1
 8000c36:	4944      	ldr	r1, [pc, #272]	@ (8000d48 <main+0x174>)
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fea5 	bl	8000988 <SH1106_Puts>
	SH1106_UpdateScreen(); // update screen
 8000c3e:	f7ff fd69 	bl	8000714 <SH1106_UpdateScreen>
	HAL_Delay(1000);
 8000c42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c46:	f001 fbf5 	bl	8002434 <HAL_Delay>
	struct Time Set_time;
	Set_time.sec = 10;
 8000c4a:	230a      	movs	r3, #10
 8000c4c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	Set_time.min = 52;
 8000c50:	2334      	movs	r3, #52	@ 0x34
 8000c52:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	Set_time.hour = 15;
 8000c56:	230f      	movs	r3, #15
 8000c58:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	Set_time.day = 19;
 8000c5c:	2313      	movs	r3, #19
 8000c5e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	Set_time.month = 4;
 8000c62:	2304      	movs	r3, #4
 8000c64:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	Set_time.year = 25;
 8000c68:	2319      	movs	r3, #25
 8000c6a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	Set_time.weekday = 6;
 8000c6e:	2306      	movs	r3, #6
 8000c70:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	SetDS1307(Set_time);
 8000c74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c7c:	f7ff ff62 	bl	8000b44 <SetDS1307>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000c80:	4b32      	ldr	r3, [pc, #200]	@ (8000d4c <main+0x178>)
 8000c82:	f107 040c 	add.w	r4, r7, #12
 8000c86:	461d      	mov	r5, r3
 8000c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00c fad5 	bl	800d24a <osThreadCreate>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8000d50 <main+0x17c>)
 8000ca4:	6013      	str	r3, [r2, #0]
	/* add threads, ... */

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000ca6:	f00c fac9 	bl	800d23c <osKernelStart>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		uint8_t CardID[5];
		HAL_Delay(100);
 8000caa:	2064      	movs	r0, #100	@ 0x64
 8000cac:	f001 fbc2 	bl	8002434 <HAL_Delay>
		GetDS1307(buff);
 8000cb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5f 	bl	8000b78 <GetDS1307>
		HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff), 1000);
 8000cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fa96 	bl	80001f0 <strlen>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000ccc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd0:	4820      	ldr	r0, [pc, #128]	@ (8000d54 <main+0x180>)
 8000cd2:	f008 f9bb 	bl	800904c <HAL_UART_Transmit>
		HAL_Delay(500);
 8000cd6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cda:	f001 fbab 	bl	8002434 <HAL_Delay>
		if (TM_MFRC522_Check(CardID) == MI_OK) {
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 f8c5 	bl	8001e70 <TM_MFRC522_Check>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d114      	bne.n	8000d16 <main+0x142>
			sprintf(buf, "%s", "Card found");
 8000cec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000cf0:	4a19      	ldr	r2, [pc, #100]	@ (8000d58 <main+0x184>)
 8000cf2:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <main+0x170>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00f f915 	bl	800ff24 <siprintf>
			SH1106_GotoXY(12, 10); // goto 10, 10
 8000cfa:	210a      	movs	r1, #10
 8000cfc:	200c      	movs	r0, #12
 8000cfe:	f7ff fdaf 	bl	8000860 <SH1106_GotoXY>
			SH1106_Puts(buf, &Font_11x18, 1);
 8000d02:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d06:	2201      	movs	r2, #1
 8000d08:	490f      	ldr	r1, [pc, #60]	@ (8000d48 <main+0x174>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe3c 	bl	8000988 <SH1106_Puts>
			SH1106_UpdateScreen();
 8000d10:	f7ff fd00 	bl	8000714 <SH1106_UpdateScreen>
 8000d14:	e7c9      	b.n	8000caa <main+0xd6>
		} else {
			sprintf(buf, "%s", "----------");
 8000d16:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d1a:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <main+0x188>)
 8000d1c:	4909      	ldr	r1, [pc, #36]	@ (8000d44 <main+0x170>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00f f900 	bl	800ff24 <siprintf>
			SH1106_GotoXY(12, 10); // goto 10, 10
 8000d24:	210a      	movs	r1, #10
 8000d26:	200c      	movs	r0, #12
 8000d28:	f7ff fd9a 	bl	8000860 <SH1106_GotoXY>
			SH1106_Puts(buf, &Font_11x18, 1);
 8000d2c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d30:	2201      	movs	r2, #1
 8000d32:	4905      	ldr	r1, [pc, #20]	@ (8000d48 <main+0x174>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe27 	bl	8000988 <SH1106_Puts>
			SH1106_UpdateScreen();
 8000d3a:	f7ff fceb 	bl	8000714 <SH1106_UpdateScreen>
	while (1) {
 8000d3e:	e7b4      	b.n	8000caa <main+0xd6>
 8000d40:	08010748 	.word	0x08010748
 8000d44:	08010754 	.word	0x08010754
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	0801077c 	.word	0x0801077c
 8000d50:	200009bc 	.word	0x200009bc
 8000d54:	20000940 	.word	0x20000940
 8000d58:	08010758 	.word	0x08010758
 8000d5c:	08010764 	.word	0x08010764

08000d60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	@ 0x50
 8000d64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	@ 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00f f8fa 	bl	800ff68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	@ (8000e2c <SystemClock_Config+0xcc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d94:	4b25      	ldr	r3, [pc, #148]	@ (8000e2c <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b22      	ldr	r3, [pc, #136]	@ (8000e30 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dac:	4a20      	ldr	r2, [pc, #128]	@ (8000e30 <SystemClock_Config+0xd0>)
 8000dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <SystemClock_Config+0xd0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000dd8:	2348      	movs	r3, #72	@ 0x48
 8000dda:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000de0:	2303      	movs	r3, #3
 8000de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 ffc7 	bl	8006d7c <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x98>
		Error_Handler();
 8000df4:	f000 fb9a 	bl	800152c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000df8:	230f      	movs	r3, #15
 8000dfa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e08:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2102      	movs	r1, #2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f006 fa29 	bl	800726c <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xc4>
		Error_Handler();
 8000e20:	f000 fb84 	bl	800152c <Error_Handler>
	}
}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	@ 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_CRC_Init+0x20>)
 8000e3a:	4a07      	ldr	r2, [pc, #28]	@ (8000e58 <MX_CRC_Init+0x24>)
 8000e3c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_CRC_Init+0x20>)
 8000e40:	f001 fbfe 	bl	8002640 <HAL_CRC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_CRC_Init+0x1a>
		Error_Handler();
 8000e4a:	f000 fb6f 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000704 	.word	0x20000704
 8000e58:	40023000 	.word	0x40023000

08000e5c <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_DMA2D_Init+0x5c>)
 8000e62:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <MX_DMA2D_Init+0x60>)
 8000e64:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_DMA2D_Init+0x5c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_DMA2D_Init+0x5c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_DMA2D_Init+0x5c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_DMA2D_Init+0x5c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <MX_DMA2D_Init+0x5c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <MX_DMA2D_Init+0x5c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <MX_DMA2D_Init+0x5c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8000e90:	4809      	ldr	r0, [pc, #36]	@ (8000eb8 <MX_DMA2D_Init+0x5c>)
 8000e92:	f001 fbf1 	bl	8002678 <HAL_DMA2D_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_DMA2D_Init+0x44>
		Error_Handler();
 8000e9c:	f000 fb46 	bl	800152c <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_DMA2D_Init+0x5c>)
 8000ea4:	f001 fd42 	bl	800292c <HAL_DMA2D_ConfigLayer>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_DMA2D_Init+0x56>
		Error_Handler();
 8000eae:	f000 fb3d 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000070c 	.word	0x2000070c
 8000ebc:	4002b000 	.word	0x4002b000

08000ec0 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <MX_I2C3_Init+0x78>)
 8000ec8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 400000;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f3c <MX_I2C3_Init+0x7c>)
 8000ece:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000edc:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ede:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ee2:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000eea:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000efc:	480d      	ldr	r0, [pc, #52]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000efe:	f004 f887 	bl	8005010 <HAL_I2C_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000f08:	f000 fb10 	bl	800152c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000f10:	f005 fb50 	bl	80065b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2C3_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000f1a:	f000 fb07 	bl	800152c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <MX_I2C3_Init+0x74>)
 8000f22:	f005 fb83 	bl	800662c <HAL_I2CEx_ConfigDigitalFilter>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_I2C3_Init+0x70>
		Error_Handler();
 8000f2c:	f000 fafe 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000074c 	.word	0x2000074c
 8000f38:	40005c00 	.word	0x40005c00
 8000f3c:	00061a80 	.word	0x00061a80

08000f40 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	@ 0x38
 8000f44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2234      	movs	r2, #52	@ 0x34
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f00f f80b 	bl	800ff68 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8000f52:	4b39      	ldr	r3, [pc, #228]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f54:	4a39      	ldr	r2, [pc, #228]	@ (800103c <MX_LTDC_Init+0xfc>)
 8000f56:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f58:	4b37      	ldr	r3, [pc, #220]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f5e:	4b36      	ldr	r3, [pc, #216]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f64:	4b34      	ldr	r3, [pc, #208]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f6a:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
 8000f70:	4b31      	ldr	r3, [pc, #196]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f72:	2209      	movs	r2, #9
 8000f74:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 8000f76:	4b30      	ldr	r3, [pc, #192]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 29;
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f7e:	221d      	movs	r2, #29
 8000f80:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 3;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 269;
 8000f88:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f8a:	f240 120d 	movw	r2, #269	@ 0x10d
 8000f8e:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 323;
 8000f90:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f92:	f240 1243 	movw	r2, #323	@ 0x143
 8000f96:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 279;
 8000f98:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000f9a:	f240 1217 	movw	r2, #279	@ 0x117
 8000f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 327;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000fa2:	f240 1247 	movw	r2, #327	@ 0x147
 8000fa6:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8000fc0:	481d      	ldr	r0, [pc, #116]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8000fc2:	f005 fb73 	bl	80066ac <HAL_LTDC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_LTDC_Init+0x90>
		Error_Handler();
 8000fcc:	f000 faae 	bl	800152c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 240;
 8000fd4:	23f0      	movs	r3, #240	@ 0xf0
 8000fd6:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 320;
 8000fdc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000fe0:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8000fe6:	23ff      	movs	r3, #255	@ 0xff
 8000fe8:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ff2:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xD0000000;
 8000ff8:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 240;
 8000ffe:	23f0      	movs	r3, #240	@ 0xf0
 8001000:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 320;
 8001002:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_LTDC_Init+0xf8>)
 8001022:	f005 fcd5 	bl	80069d0 <HAL_LTDC_ConfigLayer>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_LTDC_Init+0xf0>
		Error_Handler();
 800102c:	f000 fa7e 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3738      	adds	r7, #56	@ 0x38
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200007a0 	.word	0x200007a0
 800103c:	40016800 	.word	0x40016800

08001040 <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8001044:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <MX_SPI4_Init+0x64>)
 8001046:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <MX_SPI4_Init+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_SPI4_Init+0x64>)
 800104c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001050:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_SPI4_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <MX_SPI4_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <MX_SPI4_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_SPI4_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <MX_SPI4_Init+0x64>)
 800106c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001070:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_SPI4_Init+0x64>)
 8001074:	2218      	movs	r2, #24
 8001076:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001078:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <MX_SPI4_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_SPI4_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <MX_SPI4_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi4.Init.CRCPolynomial = 10;
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_SPI4_Init+0x64>)
 800108c:	220a      	movs	r2, #10
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8001090:	4804      	ldr	r0, [pc, #16]	@ (80010a4 <MX_SPI4_Init+0x64>)
 8001092:	f006 fd31 	bl	8007af8 <HAL_SPI_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_SPI4_Init+0x60>
		Error_Handler();
 800109c:	f000 fa46 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000848 	.word	0x20000848
 80010a8:	40013400 	.word	0x40013400

080010ac <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010b2:	4a18      	ldr	r2, [pc, #96]	@ (8001114 <MX_SPI5_Init+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80010b6:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010bc:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010dc:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010e0:	2218      	movs	r2, #24
 80010e2:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010f8:	220a      	movs	r2, #10
 80010fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 80010fc:	4804      	ldr	r0, [pc, #16]	@ (8001110 <MX_SPI5_Init+0x64>)
 80010fe:	f006 fcfb 	bl	8007af8 <HAL_SPI_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_SPI5_Init+0x60>
		Error_Handler();
 8001108:	f000 fa10 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200008a0 	.word	0x200008a0
 8001114:	40015000 	.word	0x40015000

08001118 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001134:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <MX_TIM1_Init+0x98>)
 8001136:	4a1f      	ldr	r2, [pc, #124]	@ (80011b4 <MX_TIM1_Init+0x9c>)
 8001138:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800113a:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <MX_TIM1_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <MX_TIM1_Init+0x98>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_TIM1_Init+0x98>)
 8001148:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800114c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <MX_TIM1_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001154:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <MX_TIM1_Init+0x98>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_TIM1_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001160:	4813      	ldr	r0, [pc, #76]	@ (80011b0 <MX_TIM1_Init+0x98>)
 8001162:	f007 faad 	bl	80086c0 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x58>
		Error_Handler();
 800116c:	f000 f9de 	bl	800152c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001174:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4619      	mov	r1, r3
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <MX_TIM1_Init+0x98>)
 800117e:	f007 fc4f 	bl	8008a20 <HAL_TIM_ConfigClockSource>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x74>
		Error_Handler();
 8001188:	f000 f9d0 	bl	800152c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_TIM1_Init+0x98>)
 800119a:	f007 fe77 	bl	8008e8c <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80011a4:	f000 f9c2 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200008f8 	.word	0x200008f8
 80011b4:	40010000 	.word	0x40010000

080011b8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_USART1_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <MX_USART1_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <MX_USART1_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <MX_USART1_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <MX_USART1_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <MX_USART1_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <MX_USART1_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <MX_USART1_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <MX_USART1_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_USART1_UART_Init+0x4c>)
 80011f0:	f007 fedc 	bl	8008fac <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80011fa:	f000 f997 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000940 	.word	0x20000940
 8001208:	40011000 	.word	0x40011000

0800120c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_FMC_Init+0x98>)
 8001226:	4a20      	ldr	r2, [pc, #128]	@ (80012a8 <MX_FMC_Init+0x9c>)
 8001228:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <MX_FMC_Init+0x98>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_FMC_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001236:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <MX_FMC_Init+0x98>)
 8001238:	2204      	movs	r2, #4
 800123a:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <MX_FMC_Init+0x98>)
 800123e:	2210      	movs	r2, #16
 8001240:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001242:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <MX_FMC_Init+0x98>)
 8001244:	2240      	movs	r2, #64	@ 0x40
 8001246:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <MX_FMC_Init+0x98>)
 800124a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800124e:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_FMC_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <MX_FMC_Init+0x98>)
 8001258:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800125c:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_FMC_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001264:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_FMC_Init+0x98>)
 8001266:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800126a:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 800126c:	2302      	movs	r3, #2
 800126e:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8001270:	2307      	movs	r3, #7
 8001272:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8001274:	2304      	movs	r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8001278:	2307      	movs	r3, #7
 800127a:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 800127c:	2303      	movs	r3, #3
 800127e:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MX_FMC_Init+0x98>)
 800128e:	f006 fbff 	bl	8007a90 <HAL_SDRAM_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_FMC_Init+0x90>
		Error_Handler();
 8001298:	f000 f948 	bl	800152c <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000988 	.word	0x20000988
 80012a8:	a0000140 	.word	0xa0000140

080012ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	@ 0x38
 80012b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	4b84      	ldr	r3, [pc, #528]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a83      	ldr	r2, [pc, #524]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b81      	ldr	r3, [pc, #516]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	623b      	str	r3, [r7, #32]
 80012dc:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	4b7d      	ldr	r3, [pc, #500]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a7c      	ldr	r2, [pc, #496]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b7a      	ldr	r3, [pc, #488]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4b76      	ldr	r3, [pc, #472]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a75      	ldr	r2, [pc, #468]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001304:	f043 0320 	orr.w	r3, r3, #32
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b73      	ldr	r3, [pc, #460]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	4b6f      	ldr	r3, [pc, #444]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a6e      	ldr	r2, [pc, #440]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b6c      	ldr	r3, [pc, #432]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b68      	ldr	r3, [pc, #416]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a67      	ldr	r2, [pc, #412]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b65      	ldr	r3, [pc, #404]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b61      	ldr	r3, [pc, #388]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a60      	ldr	r2, [pc, #384]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b5e      	ldr	r3, [pc, #376]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b5a      	ldr	r3, [pc, #360]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a59      	ldr	r2, [pc, #356]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b57      	ldr	r3, [pc, #348]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a52      	ldr	r2, [pc, #328]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <MX_GPIO_Init+0x22c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2110      	movs	r1, #16
 80013a6:	484d      	ldr	r0, [pc, #308]	@ (80014dc <MX_GPIO_Init+0x230>)
 80013a8:	f001 fcfe 	bl	8002da8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 80013ac:	2200      	movs	r2, #0
 80013ae:	2116      	movs	r1, #22
 80013b0:	484b      	ldr	r0, [pc, #300]	@ (80014e0 <MX_GPIO_Init+0x234>)
 80013b2:	f001 fcf9 	bl	8002da8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2180      	movs	r1, #128	@ 0x80
 80013ba:	484a      	ldr	r0, [pc, #296]	@ (80014e4 <MX_GPIO_Init+0x238>)
 80013bc:	f001 fcf4 	bl	8002da8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80013c6:	4848      	ldr	r0, [pc, #288]	@ (80014e8 <MX_GPIO_Init+0x23c>)
 80013c8:	f001 fcee 	bl	8002da8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80013d2:	4846      	ldr	r0, [pc, #280]	@ (80014ec <MX_GPIO_Init+0x240>)
 80013d4:	f001 fce8 	bl	8002da8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d8:	2310      	movs	r3, #16
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	483b      	ldr	r0, [pc, #236]	@ (80014dc <MX_GPIO_Init+0x230>)
 80013f0:	f001 fb2e 	bl	8002a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 80013f4:	2316      	movs	r3, #22
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4835      	ldr	r0, [pc, #212]	@ (80014e0 <MX_GPIO_Init+0x234>)
 800140c:	f001 fb20 	bl	8002a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8001410:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001416:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800141a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	482f      	ldr	r0, [pc, #188]	@ (80014e4 <MX_GPIO_Init+0x238>)
 8001428:	f001 fb12 	bl	8002a50 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	4828      	ldr	r0, [pc, #160]	@ (80014e4 <MX_GPIO_Init+0x238>)
 8001444:	f001 fb04 	bl	8002a50 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001448:	2320      	movs	r3, #32
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800144c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	4820      	ldr	r0, [pc, #128]	@ (80014e0 <MX_GPIO_Init+0x234>)
 800145e:	f001 faf7 	bl	8002a50 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8001462:	2304      	movs	r3, #4
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	481e      	ldr	r0, [pc, #120]	@ (80014f0 <MX_GPIO_Init+0x244>)
 8001476:	f001 faeb 	bl	8002a50 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 800147a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	4816      	ldr	r0, [pc, #88]	@ (80014e8 <MX_GPIO_Init+0x23c>)
 8001490:	f001 fade 	bl	8002a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8001494:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	480e      	ldr	r0, [pc, #56]	@ (80014e8 <MX_GPIO_Init+0x23c>)
 80014ae:	f001 facf 	bl	8002a50 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 80014b2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4808      	ldr	r0, [pc, #32]	@ (80014ec <MX_GPIO_Init+0x240>)
 80014cc:	f001 fac0 	bl	8002a50 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80014d0:	bf00      	nop
 80014d2:	3738      	adds	r7, #56	@ 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021800 	.word	0x40021800
 80014f0:	40020400 	.word	0x40020400

080014f4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	/* init code for USB_HOST */
	MX_USB_HOST_Init();
 80014fc:	f00e f94a 	bl	800f794 <MX_USB_HOST_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f00b feee 	bl	800d2e2 <osDelay>
 8001506:	e7fb      	b.n	8001500 <StartDefaultTask+0xc>

08001508 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800151a:	f000 ff6b 	bl	80023f4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40001000 	.word	0x40001000

0800152c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <Error_Handler+0x8>

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_MspInit+0x54>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a11      	ldr	r2, [pc, #68]	@ (800158c <HAL_MspInit+0x54>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <HAL_MspInit+0x54>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <HAL_MspInit+0x54>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <HAL_MspInit+0x54>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <HAL_MspInit+0x54>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	210f      	movs	r1, #15
 800157a:	f06f 0001 	mvn.w	r0, #1
 800157e:	f001 f835 	bl	80025ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0b      	ldr	r2, [pc, #44]	@ (80015cc <HAL_CRC_MspInit+0x3c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10d      	bne.n	80015be <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <HAL_CRC_MspInit+0x40>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a09      	ldr	r2, [pc, #36]	@ (80015d0 <HAL_CRC_MspInit+0x40>)
 80015ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <HAL_CRC_MspInit+0x40>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023000 	.word	0x40023000
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <HAL_DMA2D_MspInit+0x48>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d115      	bne.n	8001612 <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <HAL_DMA2D_MspInit+0x4c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001620 <HAL_DMA2D_MspInit+0x4c>)
 80015f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_DMA2D_MspInit+0x4c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2105      	movs	r1, #5
 8001606:	205a      	movs	r0, #90	@ 0x5a
 8001608:	f000 fff0 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800160c:	205a      	movs	r0, #90	@ 0x5a
 800160e:	f001 f809 	bl	8002624 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	4002b000 	.word	0x4002b000
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a29      	ldr	r2, [pc, #164]	@ (80016e8 <HAL_I2C_MspInit+0xc4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d14b      	bne.n	80016de <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b28      	ldr	r3, [pc, #160]	@ (80016ec <HAL_I2C_MspInit+0xc8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a27      	ldr	r2, [pc, #156]	@ (80016ec <HAL_I2C_MspInit+0xc8>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b25      	ldr	r3, [pc, #148]	@ (80016ec <HAL_I2C_MspInit+0xc8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <HAL_I2C_MspInit+0xc8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a20      	ldr	r2, [pc, #128]	@ (80016ec <HAL_I2C_MspInit+0xc8>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <HAL_I2C_MspInit+0xc8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800167e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001684:	2312      	movs	r3, #18
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001688:	2301      	movs	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001690:	2304      	movs	r3, #4
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4815      	ldr	r0, [pc, #84]	@ (80016f0 <HAL_I2C_MspInit+0xcc>)
 800169c:	f001 f9d8 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80016a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a6:	2312      	movs	r3, #18
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016b2:	2304      	movs	r3, #4
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <HAL_I2C_MspInit+0xd0>)
 80016be:	f001 f9c7 	bl	8002a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <HAL_I2C_MspInit+0xc8>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <HAL_I2C_MspInit+0xc8>)
 80016cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_I2C_MspInit+0xc8>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	@ 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40005c00 	.word	0x40005c00
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b09a      	sub	sp, #104	@ 0x68
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001714:	2230      	movs	r2, #48	@ 0x30
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f00e fc25 	bl	800ff68 <memset>
  if(hltdc->Instance==LTDC)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a85      	ldr	r2, [pc, #532]	@ (8001938 <HAL_LTDC_MspInit+0x240>)
 8001724:	4293      	cmp	r3, r2
 8001726:	f040 8102 	bne.w	800192e <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800172a:	2308      	movs	r3, #8
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800172e:	2332      	movs	r3, #50	@ 0x32
 8001730:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001732:	2302      	movs	r3, #2
 8001734:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001736:	2300      	movs	r3, #0
 8001738:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173e:	4618      	mov	r0, r3
 8001740:	f005 ffe6 	bl	8007710 <HAL_RCCEx_PeriphCLKConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800174a:	f7ff feef 	bl	800152c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
 8001752:	4b7a      	ldr	r3, [pc, #488]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	4a79      	ldr	r2, [pc, #484]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 8001758:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800175c:	6453      	str	r3, [r2, #68]	@ 0x44
 800175e:	4b77      	ldr	r3, [pc, #476]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	4b73      	ldr	r3, [pc, #460]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a72      	ldr	r2, [pc, #456]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b70      	ldr	r3, [pc, #448]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	4b6c      	ldr	r3, [pc, #432]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a6b      	ldr	r2, [pc, #428]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b69      	ldr	r3, [pc, #420]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	4b65      	ldr	r3, [pc, #404]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a64      	ldr	r2, [pc, #400]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b62      	ldr	r3, [pc, #392]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b5e      	ldr	r3, [pc, #376]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a5d      	ldr	r2, [pc, #372]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 80017c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b5b      	ldr	r3, [pc, #364]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b57      	ldr	r3, [pc, #348]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a56      	ldr	r2, [pc, #344]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b54      	ldr	r3, [pc, #336]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b50      	ldr	r3, [pc, #320]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a4f      	ldr	r2, [pc, #316]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b4d      	ldr	r3, [pc, #308]	@ (800193c <HAL_LTDC_MspInit+0x244>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001816:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001824:	230e      	movs	r3, #14
 8001826:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800182c:	4619      	mov	r1, r3
 800182e:	4844      	ldr	r0, [pc, #272]	@ (8001940 <HAL_LTDC_MspInit+0x248>)
 8001830:	f001 f90e 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001834:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001838:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001846:	230e      	movs	r3, #14
 8001848:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800184e:	4619      	mov	r1, r3
 8001850:	483c      	ldr	r0, [pc, #240]	@ (8001944 <HAL_LTDC_MspInit+0x24c>)
 8001852:	f001 f8fd 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001856:	2303      	movs	r3, #3
 8001858:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001866:	2309      	movs	r3, #9
 8001868:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800186e:	4619      	mov	r1, r3
 8001870:	4835      	ldr	r0, [pc, #212]	@ (8001948 <HAL_LTDC_MspInit+0x250>)
 8001872:	f001 f8ed 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001876:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800187a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001888:	230e      	movs	r3, #14
 800188a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001890:	4619      	mov	r1, r3
 8001892:	482d      	ldr	r0, [pc, #180]	@ (8001948 <HAL_LTDC_MspInit+0x250>)
 8001894:	f001 f8dc 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001898:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800189c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018aa:	230e      	movs	r3, #14
 80018ac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018b2:	4619      	mov	r1, r3
 80018b4:	4825      	ldr	r0, [pc, #148]	@ (800194c <HAL_LTDC_MspInit+0x254>)
 80018b6:	f001 f8cb 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80018ba:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80018be:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018cc:	230e      	movs	r3, #14
 80018ce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018d4:	4619      	mov	r1, r3
 80018d6:	481e      	ldr	r0, [pc, #120]	@ (8001950 <HAL_LTDC_MspInit+0x258>)
 80018d8:	f001 f8ba 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80018dc:	2348      	movs	r3, #72	@ 0x48
 80018de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018ec:	230e      	movs	r3, #14
 80018ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018f4:	4619      	mov	r1, r3
 80018f6:	4817      	ldr	r0, [pc, #92]	@ (8001954 <HAL_LTDC_MspInit+0x25c>)
 80018f8:	f001 f8aa 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80018fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001900:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800190e:	2309      	movs	r3, #9
 8001910:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001912:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001916:	4619      	mov	r1, r3
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <HAL_LTDC_MspInit+0x254>)
 800191a:	f001 f899 	bl	8002a50 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2105      	movs	r1, #5
 8001922:	2058      	movs	r0, #88	@ 0x58
 8001924:	f000 fe62 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001928:	2058      	movs	r0, #88	@ 0x58
 800192a:	f000 fe7b 	bl	8002624 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800192e:	bf00      	nop
 8001930:	3768      	adds	r7, #104	@ 0x68
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40016800 	.word	0x40016800
 800193c:	40023800 	.word	0x40023800
 8001940:	40021400 	.word	0x40021400
 8001944:	40020000 	.word	0x40020000
 8001948:	40020400 	.word	0x40020400
 800194c:	40021800 	.word	0x40021800
 8001950:	40020800 	.word	0x40020800
 8001954:	40020c00 	.word	0x40020c00

08001958 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	@ 0x30
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a32      	ldr	r2, [pc, #200]	@ (8001a40 <HAL_SPI_MspInit+0xe8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d12c      	bne.n	80019d4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	4a30      	ldr	r2, [pc, #192]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 8001984:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001988:	6453      	str	r3, [r2, #68]	@ 0x44
 800198a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a29      	ldr	r2, [pc, #164]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b27      	ldr	r3, [pc, #156]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80019b2:	2364      	movs	r3, #100	@ 0x64
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80019c2:	2305      	movs	r3, #5
 80019c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	481e      	ldr	r0, [pc, #120]	@ (8001a48 <HAL_SPI_MspInit+0xf0>)
 80019ce:	f001 f83f 	bl	8002a50 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 80019d2:	e031      	b.n	8001a38 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI5)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <HAL_SPI_MspInit+0xf4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d12c      	bne.n	8001a38 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	4a17      	ldr	r2, [pc, #92]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 80019e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a10      	ldr	r2, [pc, #64]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 8001a04:	f043 0320 	orr.w	r3, r3, #32
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <HAL_SPI_MspInit+0xec>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001a16:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a28:	2305      	movs	r3, #5
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4807      	ldr	r0, [pc, #28]	@ (8001a50 <HAL_SPI_MspInit+0xf8>)
 8001a34:	f001 f80c 	bl	8002a50 <HAL_GPIO_Init>
}
 8001a38:	bf00      	nop
 8001a3a:	3730      	adds	r7, #48	@ 0x30
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40013400 	.word	0x40013400
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40015000 	.word	0x40015000
 8001a50:	40021400 	.word	0x40021400

08001a54 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <HAL_TIM_Base_MspInit+0x3c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10d      	bne.n	8001a82 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_TIM_Base_MspInit+0x40>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	4a09      	ldr	r2, [pc, #36]	@ (8001a94 <HAL_TIM_Base_MspInit+0x40>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a76:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <HAL_TIM_Base_MspInit+0x40>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a19      	ldr	r2, [pc, #100]	@ (8001b1c <HAL_UART_MspInit+0x84>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d12c      	bne.n	8001b14 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	4a17      	ldr	r2, [pc, #92]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001ac4:	f043 0310 	orr.w	r3, r3, #16
 8001ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a10      	ldr	r2, [pc, #64]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_UART_MspInit+0x88>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001af2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b04:	2307      	movs	r3, #7
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <HAL_UART_MspInit+0x8c>)
 8001b10:	f000 ff9e 	bl	8002a50 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	@ 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000

08001b28 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c2c <HAL_FMC_MspInit+0x104>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d16f      	bne.n	8001c24 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001b44:	4b39      	ldr	r3, [pc, #228]	@ (8001c2c <HAL_FMC_MspInit+0x104>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	4b38      	ldr	r3, [pc, #224]	@ (8001c30 <HAL_FMC_MspInit+0x108>)
 8001b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b52:	4a37      	ldr	r2, [pc, #220]	@ (8001c30 <HAL_FMC_MspInit+0x108>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b5a:	4b35      	ldr	r3, [pc, #212]	@ (8001c30 <HAL_FMC_MspInit+0x108>)
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001b66:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001b6a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b78:	230c      	movs	r3, #12
 8001b7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	482c      	ldr	r0, [pc, #176]	@ (8001c34 <HAL_FMC_MspInit+0x10c>)
 8001b82:	f000 ff65 	bl	8002a50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001b86:	2301      	movs	r3, #1
 8001b88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b96:	230c      	movs	r3, #12
 8001b98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4826      	ldr	r0, [pc, #152]	@ (8001c38 <HAL_FMC_MspInit+0x110>)
 8001ba0:	f000 ff56 	bl	8002a50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001ba4:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001ba8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	481f      	ldr	r0, [pc, #124]	@ (8001c3c <HAL_FMC_MspInit+0x114>)
 8001bc0:	f000 ff46 	bl	8002a50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001bc4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001bc8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4818      	ldr	r0, [pc, #96]	@ (8001c40 <HAL_FMC_MspInit+0x118>)
 8001be0:	f000 ff36 	bl	8002a50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001be4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001be8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bf6:	230c      	movs	r3, #12
 8001bf8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4811      	ldr	r0, [pc, #68]	@ (8001c44 <HAL_FMC_MspInit+0x11c>)
 8001c00:	f000 ff26 	bl	8002a50 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001c04:	2360      	movs	r3, #96	@ 0x60
 8001c06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c14:	230c      	movs	r3, #12
 8001c16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480a      	ldr	r0, [pc, #40]	@ (8001c48 <HAL_FMC_MspInit+0x120>)
 8001c1e:	f000 ff17 	bl	8002a50 <HAL_GPIO_Init>
 8001c22:	e000      	b.n	8001c26 <HAL_FMC_MspInit+0xfe>
    return;
 8001c24:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200009c0 	.word	0x200009c0
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40021400 	.word	0x40021400
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40020c00 	.word	0x40020c00
 8001c48:	40020400 	.word	0x40020400

08001c4c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c54:	f7ff ff68 	bl	8001b28 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08e      	sub	sp, #56	@ 0x38
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <HAL_InitTick+0xe4>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	4a32      	ldr	r2, [pc, #200]	@ (8001d44 <HAL_InitTick+0xe4>)
 8001c7a:	f043 0310 	orr.w	r3, r3, #16
 8001c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c80:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <HAL_InitTick+0xe4>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c8c:	f107 0210 	add.w	r2, r7, #16
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f005 fd08 	bl	80076ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ca6:	f005 fcd9 	bl	800765c <HAL_RCC_GetPCLK1Freq>
 8001caa:	6378      	str	r0, [r7, #52]	@ 0x34
 8001cac:	e004      	b.n	8001cb8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cae:	f005 fcd5 	bl	800765c <HAL_RCC_GetPCLK1Freq>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cba:	4a23      	ldr	r2, [pc, #140]	@ (8001d48 <HAL_InitTick+0xe8>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	0c9b      	lsrs	r3, r3, #18
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cc6:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <HAL_InitTick+0xec>)
 8001cc8:	4a21      	ldr	r2, [pc, #132]	@ (8001d50 <HAL_InitTick+0xf0>)
 8001cca:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d4c <HAL_InitTick+0xec>)
 8001cce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d4c <HAL_InitTick+0xec>)
 8001cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <HAL_InitTick+0xec>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_InitTick+0xec>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_InitTick+0xec>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001cec:	4817      	ldr	r0, [pc, #92]	@ (8001d4c <HAL_InitTick+0xec>)
 8001cee:	f006 fce7 	bl	80086c0 <HAL_TIM_Base_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11b      	bne.n	8001d38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d00:	4812      	ldr	r0, [pc, #72]	@ (8001d4c <HAL_InitTick+0xec>)
 8001d02:	f006 fd2d 	bl	8008760 <HAL_TIM_Base_Start_IT>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d111      	bne.n	8001d38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d14:	2036      	movs	r0, #54	@ 0x36
 8001d16:	f000 fc85 	bl	8002624 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d808      	bhi.n	8001d32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	2036      	movs	r0, #54	@ 0x36
 8001d26:	f000 fc61 	bl	80025ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <HAL_InitTick+0xf4>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	e002      	b.n	8001d38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3738      	adds	r7, #56	@ 0x38
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	431bde83 	.word	0x431bde83
 8001d4c:	200009c4 	.word	0x200009c4
 8001d50:	40001000 	.word	0x40001000
 8001d54:	2000000c 	.word	0x2000000c

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <NMI_Handler+0x4>

08001d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <MemManage_Handler+0x4>

08001d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <BusFault_Handler+0x4>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <UsageFault_Handler+0x4>

08001d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d94:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <TIM6_DAC_IRQHandler+0x10>)
 8001d96:	f006 fd53 	bl	8008840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200009c4 	.word	0x200009c4

08001da4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <OTG_HS_IRQHandler+0x10>)
 8001daa:	f001 faf7 	bl	800339c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20008f50 	.word	0x20008f50

08001db8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <LTDC_IRQHandler+0x10>)
 8001dbe:	f004 fd45 	bl	800684c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200007a0 	.word	0x200007a0

08001dcc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <DMA2D_IRQHandler+0x10>)
 8001dd2:	f000 fc9a 	bl	800270a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000070c 	.word	0x2000070c

08001de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de8:	4a14      	ldr	r2, [pc, #80]	@ (8001e3c <_sbrk+0x5c>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <_sbrk+0x60>)
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df4:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <_sbrk+0x64>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <_sbrk+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d207      	bcs.n	8001e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e10:	f00e f8c2 	bl	800ff98 <__errno>
 8001e14:	4603      	mov	r3, r0
 8001e16:	220c      	movs	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	e009      	b.n	8001e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	@ (8001e44 <_sbrk+0x64>)
 8001e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20030000 	.word	0x20030000
 8001e40:	00000400 	.word	0x00000400
 8001e44:	20000a0c 	.word	0x20000a0c
 8001e48:	20009478 	.word	0x20009478

08001e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <SystemInit+0x20>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e56:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <SystemInit+0x20>)
 8001e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <TM_MFRC522_Check>:
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);

	TM_MFRC522_AntennaOn();		//Open the antenna
}

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	2026      	movs	r0, #38	@ 0x26
 8001e7c:	f000 f8d8 	bl	8002030 <TM_MFRC522_Request>
 8001e80:	4603      	mov	r3, r0
 8001e82:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d104      	bne.n	8001e94 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f9c4 	bl	8002218 <TM_MFRC522_Anticoll>
 8001e90:	4603      	mov	r3, r0
 8001e92:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8001e94:	f000 fa46 	bl	8002324 <TM_MFRC522_Halt>

	return status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <TM_MFRC522_WriteRegister>:
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
}

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460a      	mov	r2, r1
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2110      	movs	r1, #16
 8001eb8:	481a      	ldr	r0, [pc, #104]	@ (8001f24 <TM_MFRC522_WriteRegister+0x80>)
 8001eba:	f000 ff75 	bl	8002da8 <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8001ed0:	f107 010e 	add.w	r1, r7, #14
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4813      	ldr	r0, [pc, #76]	@ (8001f28 <TM_MFRC522_WriteRegister+0x84>)
 8001eda:	f005 fe96 	bl	8007c0a <HAL_SPI_Transmit>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001ee2:	bf00      	nop
 8001ee4:	4810      	ldr	r0, [pc, #64]	@ (8001f28 <TM_MFRC522_WriteRegister+0x84>)
 8001ee6:	f006 fa9b 	bl	8008420 <HAL_SPI_GetState>
 8001eea:	4603      	mov	r3, r0
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d0f7      	beq.n	8001ee4 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 8001ef4:	1db9      	adds	r1, r7, #6
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	2201      	movs	r2, #1
 8001efa:	480b      	ldr	r0, [pc, #44]	@ (8001f28 <TM_MFRC522_WriteRegister+0x84>)
 8001efc:	f005 fe85 	bl	8007c0a <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001f00:	bf00      	nop
 8001f02:	4809      	ldr	r0, [pc, #36]	@ (8001f28 <TM_MFRC522_WriteRegister+0x84>)
 8001f04:	f006 fa8c 	bl	8008420 <HAL_SPI_GetState>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d0f7      	beq.n	8001f02 <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 8001f12:	2201      	movs	r2, #1
 8001f14:	2110      	movs	r1, #16
 8001f16:	4803      	ldr	r0, [pc, #12]	@ (8001f24 <TM_MFRC522_WriteRegister+0x80>)
 8001f18:	f000 ff46 	bl	8002da8 <HAL_GPIO_WritePin>
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40021000 	.word	0x40021000
 8001f28:	20000848 	.word	0x20000848

08001f2c <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8001f36:	2200      	movs	r2, #0
 8001f38:	2110      	movs	r1, #16
 8001f3a:	481f      	ldr	r0, [pc, #124]	@ (8001fb8 <TM_MFRC522_ReadRegister+0x8c>)
 8001f3c:	f000 ff34 	bl	8002da8 <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f52:	b25b      	sxtb	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8001f5c:	f107 010d 	add.w	r1, r7, #13
 8001f60:	230a      	movs	r3, #10
 8001f62:	2201      	movs	r2, #1
 8001f64:	4815      	ldr	r0, [pc, #84]	@ (8001fbc <TM_MFRC522_ReadRegister+0x90>)
 8001f66:	f005 fe50 	bl	8007c0a <HAL_SPI_Transmit>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001f6e:	bf00      	nop
 8001f70:	4812      	ldr	r0, [pc, #72]	@ (8001fbc <TM_MFRC522_ReadRegister+0x90>)
 8001f72:	f006 fa55 	bl	8008420 <HAL_SPI_GetState>
 8001f76:	4603      	mov	r3, r0
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d0f7      	beq.n	8001f70 <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 8001f80:	f107 010e 	add.w	r1, r7, #14
 8001f84:	230a      	movs	r3, #10
 8001f86:	2201      	movs	r2, #1
 8001f88:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <TM_MFRC522_ReadRegister+0x90>)
 8001f8a:	f005 ff81 	bl	8007e90 <HAL_SPI_Receive>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001f92:	bf00      	nop
 8001f94:	4809      	ldr	r0, [pc, #36]	@ (8001fbc <TM_MFRC522_ReadRegister+0x90>)
 8001f96:	f006 fa43 	bl	8008420 <HAL_SPI_GetState>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d0f7      	beq.n	8001f94 <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	4803      	ldr	r0, [pc, #12]	@ (8001fb8 <TM_MFRC522_ReadRegister+0x8c>)
 8001faa:	f000 fefd 	bl	8002da8 <HAL_GPIO_WritePin>

	return val;	
 8001fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	20000848 	.word	0x20000848

08001fc0 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460a      	mov	r2, r1
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ffaa 	bl	8001f2c <TM_MFRC522_ReadRegister>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff5c 	bl	8001ea4 <TM_MFRC522_WriteRegister>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	4613      	mov	r3, r2
 8002002:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff90 	bl	8001f2c <TM_MFRC522_ReadRegister>
 800200c:	4603      	mov	r3, r0
 800200e:	b25a      	sxtb	r2, r3
 8002010:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002014:	43db      	mvns	r3, r3
 8002016:	b25b      	sxtb	r3, r3
 8002018:	4013      	ands	r3, r2
 800201a:	b25b      	sxtb	r3, r3
 800201c:	b2da      	uxtb	r2, r3
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff3e 	bl	8001ea4 <TM_MFRC522_WriteRegister>
} 
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <TM_MFRC522_Request>:

void TM_MFRC522_Reset(void) {
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
}

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af02      	add	r7, sp, #8
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 800203c:	2107      	movs	r1, #7
 800203e:	200d      	movs	r0, #13
 8002040:	f7ff ff30 	bl	8001ea4 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	79fa      	ldrb	r2, [r7, #7]
 8002048:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2201      	movs	r2, #1
 8002054:	6839      	ldr	r1, [r7, #0]
 8002056:	200c      	movs	r0, #12
 8002058:	f000 f80f 	bl	800207a <TM_MFRC522_ToCard>
 800205c:	4603      	mov	r3, r0
 800205e:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <TM_MFRC522_Request+0x3c>
 8002066:	89bb      	ldrh	r3, [r7, #12]
 8002068:	2b10      	cmp	r3, #16
 800206a:	d001      	beq.n	8002070 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 800206c:	2302      	movs	r3, #2
 800206e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800207a:	b590      	push	{r4, r7, lr}
 800207c:	b087      	sub	sp, #28
 800207e:	af00      	add	r7, sp, #0
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	4613      	mov	r3, r2
 800208a:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 800208c:	2302      	movs	r3, #2
 800208e:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8002090:	2300      	movs	r3, #0
 8002092:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8002094:	2300      	movs	r3, #0
 8002096:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d006      	beq.n	80020ac <TM_MFRC522_ToCard+0x32>
 800209e:	2b0e      	cmp	r3, #14
 80020a0:	d109      	bne.n	80020b6 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80020a2:	2312      	movs	r3, #18
 80020a4:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80020a6:	2310      	movs	r3, #16
 80020a8:	757b      	strb	r3, [r7, #21]
			break;
 80020aa:	e005      	b.n	80020b8 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80020ac:	2377      	movs	r3, #119	@ 0x77
 80020ae:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80020b0:	2330      	movs	r3, #48	@ 0x30
 80020b2:	757b      	strb	r3, [r7, #21]
			break;
 80020b4:	e000      	b.n	80020b8 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80020b6:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80020b8:	7dbb      	ldrb	r3, [r7, #22]
 80020ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	4619      	mov	r1, r3
 80020c2:	2002      	movs	r0, #2
 80020c4:	f7ff feee 	bl	8001ea4 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	2004      	movs	r0, #4
 80020cc:	f7ff ff92 	bl	8001ff4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80020d0:	2180      	movs	r1, #128	@ 0x80
 80020d2:	200a      	movs	r0, #10
 80020d4:	f7ff ff74 	bl	8001fc0 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80020d8:	2100      	movs	r1, #0
 80020da:	2001      	movs	r0, #1
 80020dc:	f7ff fee2 	bl	8001ea4 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 80020e0:	2300      	movs	r3, #0
 80020e2:	827b      	strh	r3, [r7, #18]
 80020e4:	e00a      	b.n	80020fc <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 80020e6:	8a7b      	ldrh	r3, [r7, #18]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	2009      	movs	r0, #9
 80020f2:	f7ff fed7 	bl	8001ea4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 80020f6:	8a7b      	ldrh	r3, [r7, #18]
 80020f8:	3301      	adds	r3, #1
 80020fa:	827b      	strh	r3, [r7, #18]
 80020fc:	7bbb      	ldrb	r3, [r7, #14]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	8a7a      	ldrh	r2, [r7, #18]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3ef      	bcc.n	80020e6 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	4619      	mov	r1, r3
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff feca 	bl	8001ea4 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d103      	bne.n	800211e <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	200d      	movs	r0, #13
 800211a:	f7ff ff51 	bl	8001fc0 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 800211e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002122:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8002124:	2004      	movs	r0, #4
 8002126:	f7ff ff01 	bl	8001f2c <TM_MFRC522_ReadRegister>
 800212a:	4603      	mov	r3, r0
 800212c:	753b      	strb	r3, [r7, #20]
		i--;
 800212e:	8a7b      	ldrh	r3, [r7, #18]
 8002130:	3b01      	subs	r3, #1
 8002132:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002134:	8a7b      	ldrh	r3, [r7, #18]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <TM_MFRC522_ToCard+0xd6>
 800213a:	7d3b      	ldrb	r3, [r7, #20]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <TM_MFRC522_ToCard+0xd6>
 8002144:	7d3a      	ldrb	r2, [r7, #20]
 8002146:	7d7b      	ldrb	r3, [r7, #21]
 8002148:	4013      	ands	r3, r2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0e9      	beq.n	8002124 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8002150:	2180      	movs	r1, #128	@ 0x80
 8002152:	200d      	movs	r0, #13
 8002154:	f7ff ff4e 	bl	8001ff4 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8002158:	8a7b      	ldrh	r3, [r7, #18]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d057      	beq.n	800220e <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800215e:	2006      	movs	r0, #6
 8002160:	f7ff fee4 	bl	8001f2c <TM_MFRC522_ReadRegister>
 8002164:	4603      	mov	r3, r0
 8002166:	f003 031b 	and.w	r3, r3, #27
 800216a:	2b00      	cmp	r3, #0
 800216c:	d14d      	bne.n	800220a <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8002172:	7d3a      	ldrb	r2, [r7, #20]
 8002174:	7dbb      	ldrb	r3, [r7, #22]
 8002176:	4013      	ands	r3, r2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d140      	bne.n	800220e <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800218c:	200a      	movs	r0, #10
 800218e:	f7ff fecd 	bl	8001f2c <TM_MFRC522_ReadRegister>
 8002192:	4603      	mov	r3, r0
 8002194:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8002196:	200c      	movs	r0, #12
 8002198:	f7ff fec8 	bl	8001f2c <TM_MFRC522_ReadRegister>
 800219c:	4603      	mov	r3, r0
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 80021a4:	7c7b      	ldrb	r3, [r7, #17]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 80021aa:	7d3b      	ldrb	r3, [r7, #20]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	7c7b      	ldrb	r3, [r7, #17]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021be:	801a      	strh	r2, [r3, #0]
 80021c0:	e005      	b.n	80021ce <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 80021c2:	7d3b      	ldrb	r3, [r7, #20]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021cc:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 80021ce:	7d3b      	ldrb	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 80021d4:	2301      	movs	r3, #1
 80021d6:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 80021d8:	7d3b      	ldrb	r3, [r7, #20]
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d901      	bls.n	80021e2 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 80021de:	2310      	movs	r3, #16
 80021e0:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 80021e2:	2300      	movs	r3, #0
 80021e4:	827b      	strh	r3, [r7, #18]
 80021e6:	e00a      	b.n	80021fe <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 80021e8:	8a7b      	ldrh	r3, [r7, #18]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	18d4      	adds	r4, r2, r3
 80021ee:	2009      	movs	r0, #9
 80021f0:	f7ff fe9c 	bl	8001f2c <TM_MFRC522_ReadRegister>
 80021f4:	4603      	mov	r3, r0
 80021f6:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 80021f8:	8a7b      	ldrh	r3, [r7, #18]
 80021fa:	3301      	adds	r3, #1
 80021fc:	827b      	strh	r3, [r7, #18]
 80021fe:	7d3b      	ldrb	r3, [r7, #20]
 8002200:	b29b      	uxth	r3, r3
 8002202:	8a7a      	ldrh	r2, [r7, #18]
 8002204:	429a      	cmp	r2, r3
 8002206:	d3ef      	bcc.n	80021e8 <TM_MFRC522_ToCard+0x16e>
 8002208:	e001      	b.n	800220e <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 800220a:	2302      	movs	r3, #2
 800220c:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 800220e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002210:	4618      	mov	r0, r3
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}

08002218 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af02      	add	r7, sp, #8
 800221e:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002224:	2100      	movs	r1, #0
 8002226:	200d      	movs	r0, #13
 8002228:	f7ff fe3c 	bl	8001ea4 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2293      	movs	r2, #147	@ 0x93
 8002230:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3301      	adds	r3, #1
 8002236:	2220      	movs	r2, #32
 8002238:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800223a:	f107 030a 	add.w	r3, r7, #10
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	200c      	movs	r0, #12
 8002248:	f7ff ff17 	bl	800207a <TM_MFRC522_ToCard>
 800224c:	4603      	mov	r3, r0
 800224e:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8002256:	2300      	movs	r3, #0
 8002258:	73bb      	strb	r3, [r7, #14]
 800225a:	e009      	b.n	8002270 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800225c:	7bbb      	ldrb	r3, [r7, #14]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	7b7b      	ldrb	r3, [r7, #13]
 8002266:	4053      	eors	r3, r2
 8002268:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 800226a:	7bbb      	ldrb	r3, [r7, #14]
 800226c:	3301      	adds	r3, #1
 800226e:	73bb      	strb	r3, [r7, #14]
 8002270:	7bbb      	ldrb	r3, [r7, #14]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d9f2      	bls.n	800225c <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8002276:	7bbb      	ldrb	r3, [r7, #14]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	7b7a      	ldrb	r2, [r7, #13]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8002284:	2302      	movs	r3, #2
 8002286:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
} 
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8002292:	b590      	push	{r4, r7, lr}
 8002294:	b087      	sub	sp, #28
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	460b      	mov	r3, r1
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 80022a0:	2104      	movs	r1, #4
 80022a2:	2005      	movs	r0, #5
 80022a4:	f7ff fea6 	bl	8001ff4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80022a8:	2180      	movs	r1, #128	@ 0x80
 80022aa:	200a      	movs	r0, #10
 80022ac:	f7ff fe88 	bl	8001fc0 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 80022b0:	2300      	movs	r3, #0
 80022b2:	75fb      	strb	r3, [r7, #23]
 80022b4:	e00a      	b.n	80022cc <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	4619      	mov	r1, r3
 80022c0:	2009      	movs	r0, #9
 80022c2:	f7ff fdef 	bl	8001ea4 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
 80022c8:	3301      	adds	r3, #1
 80022ca:	75fb      	strb	r3, [r7, #23]
 80022cc:	7dfa      	ldrb	r2, [r7, #23]
 80022ce:	7afb      	ldrb	r3, [r7, #11]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d3f0      	bcc.n	80022b6 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80022d4:	2103      	movs	r1, #3
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7ff fde4 	bl	8001ea4 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80022dc:	23ff      	movs	r3, #255	@ 0xff
 80022de:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80022e0:	2005      	movs	r0, #5
 80022e2:	f7ff fe23 	bl	8001f2c <TM_MFRC522_ReadRegister>
 80022e6:	4603      	mov	r3, r0
 80022e8:	75bb      	strb	r3, [r7, #22]
		i--;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <TM_MFRC522_CalculateCRC+0x6e>
 80022f6:	7dbb      	ldrb	r3, [r7, #22]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ef      	beq.n	80022e0 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8002300:	2022      	movs	r0, #34	@ 0x22
 8002302:	f7ff fe13 	bl	8001f2c <TM_MFRC522_ReadRegister>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	1c5c      	adds	r4, r3, #1
 8002312:	2021      	movs	r0, #33	@ 0x21
 8002314:	f7ff fe0a 	bl	8001f2c <TM_MFRC522_ReadRegister>
 8002318:	4603      	mov	r3, r0
 800231a:	7023      	strb	r3, [r4, #0]
}
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}

08002324 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 800232a:	2350      	movs	r3, #80	@ 0x50
 800232c:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8002332:	463b      	mov	r3, r7
 8002334:	1c9a      	adds	r2, r3, #2
 8002336:	463b      	mov	r3, r7
 8002338:	2102      	movs	r1, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ffa9 	bl	8002292 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8002340:	463a      	mov	r2, r7
 8002342:	4639      	mov	r1, r7
 8002344:	1dbb      	adds	r3, r7, #6
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	2204      	movs	r2, #4
 800234c:	200c      	movs	r0, #12
 800234e:	f7ff fe94 	bl	800207a <TM_MFRC522_ToCard>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800235c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002394 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002360:	f7ff fd74 	bl	8001e4c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002364:	480c      	ldr	r0, [pc, #48]	@ (8002398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002366:	490d      	ldr	r1, [pc, #52]	@ (800239c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002368:	4a0d      	ldr	r2, [pc, #52]	@ (80023a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800236c:	e002      	b.n	8002374 <LoopCopyDataInit>

0800236e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002372:	3304      	adds	r3, #4

08002374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002378:	d3f9      	bcc.n	800236e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800237a:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800237c:	4c0a      	ldr	r4, [pc, #40]	@ (80023a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002380:	e001      	b.n	8002386 <LoopFillZerobss>

08002382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002384:	3204      	adds	r2, #4

08002386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002388:	d3fb      	bcc.n	8002382 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800238a:	f00d fe0b 	bl	800ffa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800238e:	f7fe fc21 	bl	8000bd4 <main>
  bx  lr    
 8002392:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002394:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800239c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80023a0:	08011594 	.word	0x08011594
  ldr r2, =_sbss
 80023a4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80023a8:	20009478 	.word	0x20009478

080023ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023ac:	e7fe      	b.n	80023ac <ADC_IRQHandler>
	...

080023b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b4:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <HAL_Init+0x40>)
 80023ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023c0:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <HAL_Init+0x40>)
 80023c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <HAL_Init+0x40>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d8:	2003      	movs	r0, #3
 80023da:	f000 f8fc 	bl	80025d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff fc3e 	bl	8001c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e4:	f7ff f8a8 	bl	8001538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023c00 	.word	0x40023c00

080023f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_IncTick+0x20>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_IncTick+0x24>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <HAL_IncTick+0x24>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000010 	.word	0x20000010
 8002418:	20000a10 	.word	0x20000a10

0800241c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return uwTick;
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <HAL_GetTick+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000a10 	.word	0x20000a10

08002434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff ffee 	bl	800241c <HAL_GetTick>
 8002440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d005      	beq.n	800245a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244e:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <HAL_Delay+0x44>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800245a:	bf00      	nop
 800245c:	f7ff ffde 	bl	800241c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	429a      	cmp	r2, r3
 800246a:	d8f7      	bhi.n	800245c <HAL_Delay+0x28>
  {
  }
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000010 	.word	0x20000010

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db0b      	blt.n	800250a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4907      	ldr	r1, [pc, #28]	@ (8002518 <__NVIC_EnableIRQ+0x38>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	2001      	movs	r0, #1
 8002502:	fa00 f202 	lsl.w	r2, r0, r2
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000e100 	.word	0xe000e100

0800251c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db0a      	blt.n	8002546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	490c      	ldr	r1, [pc, #48]	@ (8002568 <__NVIC_SetPriority+0x4c>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	440b      	add	r3, r1
 8002540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002544:	e00a      	b.n	800255c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4908      	ldr	r1, [pc, #32]	@ (800256c <__NVIC_SetPriority+0x50>)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3b04      	subs	r3, #4
 8002554:	0112      	lsls	r2, r2, #4
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	440b      	add	r3, r1
 800255a:	761a      	strb	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000e100 	.word	0xe000e100
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	@ 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f1c3 0307 	rsb	r3, r3, #7
 800258a:	2b04      	cmp	r3, #4
 800258c:	bf28      	it	cs
 800258e:	2304      	movcs	r3, #4
 8002590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3304      	adds	r3, #4
 8002596:	2b06      	cmp	r3, #6
 8002598:	d902      	bls.n	80025a0 <NVIC_EncodePriority+0x30>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3b03      	subs	r3, #3
 800259e:	e000      	b.n	80025a2 <NVIC_EncodePriority+0x32>
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	4313      	orrs	r3, r2
         );
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3724      	adds	r7, #36	@ 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ff4c 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025fe:	f7ff ff61 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 8002602:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	6978      	ldr	r0, [r7, #20]
 800260a:	f7ff ffb1 	bl	8002570 <NVIC_EncodePriority>
 800260e:	4602      	mov	r2, r0
 8002610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff80 	bl	800251c <__NVIC_SetPriority>
}
 800261c:	bf00      	nop
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff54 	bl	80024e0 <__NVIC_EnableIRQ>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00e      	b.n	8002670 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	795b      	ldrb	r3, [r3, #5]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe ff94 	bl	8001590 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e03b      	b.n	8002702 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe ff98 	bl	80015d4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c8:	f023 0107 	bic.w	r1, r3, #7
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80026e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68d1      	ldr	r1, [r2, #12]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	430b      	orrs	r3, r1
 80026f0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d026      	beq.n	800277a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d021      	beq.n	800277a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002744:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2201      	movs	r2, #1
 8002758:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2204      	movs	r2, #4
 800275e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d026      	beq.n	80027d2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d021      	beq.n	80027d2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800279c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2220      	movs	r2, #32
 80027a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027aa:	f043 0202 	orr.w	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2204      	movs	r2, #4
 80027b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d026      	beq.n	800282a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d021      	beq.n	800282a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2208      	movs	r2, #8
 80027fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002802:	f043 0204 	orr.w	r2, r3, #4
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2204      	movs	r2, #4
 800280e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d013      	beq.n	800285c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00e      	beq.n	800285c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800284c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2204      	movs	r2, #4
 8002854:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f853 	bl	8002902 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d024      	beq.n	80028b0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01f      	beq.n	80028b0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800287e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2202      	movs	r2, #2
 8002886:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d01f      	beq.n	80028fa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01a      	beq.n	80028fa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028d2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2210      	movs	r2, #16
 80028da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f80e 	bl	8002916 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_DMA2D_ConfigLayer+0x20>
 8002948:	2302      	movs	r3, #2
 800294a:	e079      	b.n	8002a40 <HAL_DMA2D_ConfigLayer+0x114>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	3318      	adds	r3, #24
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002976:	4b35      	ldr	r3, [pc, #212]	@ (8002a4c <HAL_DMA2D_ConfigLayer+0x120>)
 8002978:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b0a      	cmp	r3, #10
 8002980:	d003      	beq.n	800298a <HAL_DMA2D_ConfigLayer+0x5e>
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b09      	cmp	r3, #9
 8002988:	d107      	bne.n	800299a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e005      	b.n	80029a6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	061b      	lsls	r3, r3, #24
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d120      	bne.n	80029ee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	ea02 0103 	and.w	r1, r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b0a      	cmp	r3, #10
 80029d4:	d003      	beq.n	80029de <HAL_DMA2D_ConfigLayer+0xb2>
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b09      	cmp	r3, #9
 80029dc:	d127      	bne.n	8002a2e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80029ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80029ec:	e01f      	b.n	8002a2e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	ea02 0103 	and.w	r1, r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b0a      	cmp	r3, #10
 8002a16:	d003      	beq.n	8002a20 <HAL_DMA2D_ConfigLayer+0xf4>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b09      	cmp	r3, #9
 8002a1e:	d106      	bne.n	8002a2e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002a2c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	ff03000f 	.word	0xff03000f

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	@ 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e177      	b.n	8002d5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f040 8166 	bne.w	8002d56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d005      	beq.n	8002aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d130      	bne.n	8002b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 0201 	and.w	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d017      	beq.n	8002b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d123      	bne.n	8002b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80c0 	beq.w	8002d56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b66      	ldr	r3, [pc, #408]	@ (8002d74 <HAL_GPIO_Init+0x324>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	4a65      	ldr	r2, [pc, #404]	@ (8002d74 <HAL_GPIO_Init+0x324>)
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002be6:	4b63      	ldr	r3, [pc, #396]	@ (8002d74 <HAL_GPIO_Init+0x324>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf2:	4a61      	ldr	r2, [pc, #388]	@ (8002d78 <HAL_GPIO_Init+0x328>)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a58      	ldr	r2, [pc, #352]	@ (8002d7c <HAL_GPIO_Init+0x32c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d037      	beq.n	8002c8e <HAL_GPIO_Init+0x23e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a57      	ldr	r2, [pc, #348]	@ (8002d80 <HAL_GPIO_Init+0x330>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d031      	beq.n	8002c8a <HAL_GPIO_Init+0x23a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a56      	ldr	r2, [pc, #344]	@ (8002d84 <HAL_GPIO_Init+0x334>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02b      	beq.n	8002c86 <HAL_GPIO_Init+0x236>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a55      	ldr	r2, [pc, #340]	@ (8002d88 <HAL_GPIO_Init+0x338>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d025      	beq.n	8002c82 <HAL_GPIO_Init+0x232>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a54      	ldr	r2, [pc, #336]	@ (8002d8c <HAL_GPIO_Init+0x33c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01f      	beq.n	8002c7e <HAL_GPIO_Init+0x22e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a53      	ldr	r2, [pc, #332]	@ (8002d90 <HAL_GPIO_Init+0x340>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d019      	beq.n	8002c7a <HAL_GPIO_Init+0x22a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a52      	ldr	r2, [pc, #328]	@ (8002d94 <HAL_GPIO_Init+0x344>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0x226>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a51      	ldr	r2, [pc, #324]	@ (8002d98 <HAL_GPIO_Init+0x348>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00d      	beq.n	8002c72 <HAL_GPIO_Init+0x222>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a50      	ldr	r2, [pc, #320]	@ (8002d9c <HAL_GPIO_Init+0x34c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <HAL_GPIO_Init+0x21e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4f      	ldr	r2, [pc, #316]	@ (8002da0 <HAL_GPIO_Init+0x350>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_GPIO_Init+0x21a>
 8002c66:	2309      	movs	r3, #9
 8002c68:	e012      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c6a:	230a      	movs	r3, #10
 8002c6c:	e010      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	e00e      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c72:	2307      	movs	r3, #7
 8002c74:	e00c      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c76:	2306      	movs	r3, #6
 8002c78:	e00a      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	e008      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c82:	2303      	movs	r3, #3
 8002c84:	e004      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e002      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_GPIO_Init+0x240>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f002 0203 	and.w	r2, r2, #3
 8002c96:	0092      	lsls	r2, r2, #2
 8002c98:	4093      	lsls	r3, r2
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca0:	4935      	ldr	r1, [pc, #212]	@ (8002d78 <HAL_GPIO_Init+0x328>)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cae:	4b3d      	ldr	r3, [pc, #244]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd2:	4a34      	ldr	r2, [pc, #208]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd8:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cfc:	4a29      	ldr	r2, [pc, #164]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d02:	4b28      	ldr	r3, [pc, #160]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d26:	4a1f      	ldr	r2, [pc, #124]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d50:	4a14      	ldr	r2, [pc, #80]	@ (8002da4 <HAL_GPIO_Init+0x354>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b0f      	cmp	r3, #15
 8002d60:	f67f ae84 	bls.w	8002a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3724      	adds	r7, #36	@ 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	40020000 	.word	0x40020000
 8002d80:	40020400 	.word	0x40020400
 8002d84:	40020800 	.word	0x40020800
 8002d88:	40020c00 	.word	0x40020c00
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40021400 	.word	0x40021400
 8002d94:	40021800 	.word	0x40021800
 8002d98:	40021c00 	.word	0x40021c00
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40022400 	.word	0x40022400
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af02      	add	r7, sp, #8
 8002de0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e059      	b.n	8002ea0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f00c fd18 	bl	800f83c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2203      	movs	r2, #3
 8002e10:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e1a:	d102      	bne.n	8002e22 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f006 fe07 	bl	8009a3a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7c1a      	ldrb	r2, [r3, #16]
 8002e34:	f88d 2000 	strb.w	r2, [sp]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3c:	f006 fd88 	bl	8009950 <USB_CoreInit>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e026      	b.n	8002ea0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2101      	movs	r1, #1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f006 fdff 	bl	8009a5c <USB_SetCurrentMode>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e017      	b.n	8002ea0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7c1a      	ldrb	r2, [r3, #16]
 8002e78:	f88d 2000 	strb.w	r2, [sp]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e80:	f006 ffa2 	bl	8009dc8 <USB_HostInit>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e004      	b.n	8002ea0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b08b      	sub	sp, #44	@ 0x2c
 8002eac:	af04      	add	r7, sp, #16
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	70fb      	strb	r3, [r7, #3]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	70bb      	strb	r3, [r7, #2]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002ec2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002ec4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_HCD_HC_Init+0x2c>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e09d      	b.n	8003010 <HAL_HCD_HC_Init+0x168>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	3319      	adds	r3, #25
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	3314      	adds	r3, #20
 8002f00:	787a      	ldrb	r2, [r7, #1]
 8002f02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3315      	adds	r3, #21
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3326      	adds	r3, #38	@ 0x26
 8002f28:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002f2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	78bb      	ldrb	r3, [r7, #2]
 8002f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f36:	b2d8      	uxtb	r0, r3
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	3316      	adds	r3, #22
 8002f46:	4602      	mov	r2, r0
 8002f48:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fbc8 	bl	80036e4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002f54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da0a      	bge.n	8002f72 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3317      	adds	r3, #23
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e009      	b.n	8002f86 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3317      	adds	r3, #23
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f007 f880 	bl	800a090 <USB_GetHostSpeed>
 8002f90:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002f92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10b      	bne.n	8002fb2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002f9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_HCD_HC_Init+0x10a>
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d104      	bne.n	8002fb2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2bbc      	cmp	r3, #188	@ 0xbc
 8002fac:	d901      	bls.n	8002fb2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002fae:	23bc      	movs	r3, #188	@ 0xbc
 8002fb0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3318      	adds	r3, #24
 8002fc2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002fc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	b298      	uxth	r0, r3
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	3328      	adds	r3, #40	@ 0x28
 8002fdc:	4602      	mov	r2, r0
 8002fde:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	787c      	ldrb	r4, [r7, #1]
 8002fea:	78ba      	ldrb	r2, [r7, #2]
 8002fec:	78f9      	ldrb	r1, [r7, #3]
 8002fee:	9302      	str	r3, [sp, #8]
 8002ff0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	4623      	mov	r3, r4
 8002ffe:	f007 f86f 	bl	800a0e0 <USB_HC_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}

08003018 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_HCD_HC_Halt+0x1e>
 8003032:	2302      	movs	r3, #2
 8003034:	e00f      	b.n	8003056 <HAL_HCD_HC_Halt+0x3e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	4611      	mov	r1, r2
 8003046:	4618      	mov	r0, r3
 8003048:	f007 fc01 	bl	800a84e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4603      	mov	r3, r0
 8003070:	70fb      	strb	r3, [r7, #3]
 8003072:	460b      	mov	r3, r1
 8003074:	70bb      	strb	r3, [r7, #2]
 8003076:	4613      	mov	r3, r2
 8003078:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3317      	adds	r3, #23
 800308a:	78ba      	ldrb	r2, [r7, #2]
 800308c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3326      	adds	r3, #38	@ 0x26
 800309e:	787a      	ldrb	r2, [r7, #1]
 80030a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80030a2:	7c3b      	ldrb	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d114      	bne.n	80030d2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	332a      	adds	r3, #42	@ 0x2a
 80030b8:	2203      	movs	r2, #3
 80030ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3319      	adds	r3, #25
 80030cc:	7f3a      	ldrb	r2, [r7, #28]
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e009      	b.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	332a      	adds	r3, #42	@ 0x2a
 80030e2:	2202      	movs	r2, #2
 80030e4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80030e6:	787b      	ldrb	r3, [r7, #1]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	f200 8102 	bhi.w	80032f2 <HAL_HCD_HC_SubmitRequest+0x292>
 80030ee:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003105 	.word	0x08003105
 80030f8:	080032dd 	.word	0x080032dd
 80030fc:	080031c9 	.word	0x080031c9
 8003100:	08003253 	.word	0x08003253
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003104:	7c3b      	ldrb	r3, [r7, #16]
 8003106:	2b01      	cmp	r3, #1
 8003108:	f040 80f5 	bne.w	80032f6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800310c:	78bb      	ldrb	r3, [r7, #2]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d12d      	bne.n	800316e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003112:	8b3b      	ldrh	r3, [r7, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	333d      	adds	r3, #61	@ 0x3d
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	333d      	adds	r3, #61	@ 0x3d
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	332a      	adds	r3, #42	@ 0x2a
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003156:	e0ce      	b.n	80032f6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	332a      	adds	r3, #42	@ 0x2a
 8003168:	2202      	movs	r2, #2
 800316a:	701a      	strb	r2, [r3, #0]
      break;
 800316c:	e0c3      	b.n	80032f6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	331a      	adds	r3, #26
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b01      	cmp	r3, #1
 8003182:	f040 80b8 	bne.w	80032f6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	333c      	adds	r3, #60	@ 0x3c
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	332a      	adds	r3, #42	@ 0x2a
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
      break;
 80031b0:	e0a1      	b.n	80032f6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	332a      	adds	r3, #42	@ 0x2a
 80031c2:	2202      	movs	r2, #2
 80031c4:	701a      	strb	r2, [r3, #0]
      break;
 80031c6:	e096      	b.n	80032f6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80031c8:	78bb      	ldrb	r3, [r7, #2]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d120      	bne.n	8003210 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	333d      	adds	r3, #61	@ 0x3d
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	332a      	adds	r3, #42	@ 0x2a
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80031f8:	e07e      	b.n	80032f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	332a      	adds	r3, #42	@ 0x2a
 800320a:	2202      	movs	r2, #2
 800320c:	701a      	strb	r2, [r3, #0]
      break;
 800320e:	e073      	b.n	80032f8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	333c      	adds	r3, #60	@ 0x3c
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	332a      	adds	r3, #42	@ 0x2a
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
      break;
 800323a:	e05d      	b.n	80032f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	332a      	adds	r3, #42	@ 0x2a
 800324c:	2202      	movs	r2, #2
 800324e:	701a      	strb	r2, [r3, #0]
      break;
 8003250:	e052      	b.n	80032f8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003252:	78bb      	ldrb	r3, [r7, #2]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d120      	bne.n	800329a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	333d      	adds	r3, #61	@ 0x3d
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	332a      	adds	r3, #42	@ 0x2a
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003282:	e039      	b.n	80032f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	332a      	adds	r3, #42	@ 0x2a
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]
      break;
 8003298:	e02e      	b.n	80032f8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	333c      	adds	r3, #60	@ 0x3c
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	332a      	adds	r3, #42	@ 0x2a
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
      break;
 80032c4:	e018      	b.n	80032f8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	332a      	adds	r3, #42	@ 0x2a
 80032d6:	2202      	movs	r2, #2
 80032d8:	701a      	strb	r2, [r3, #0]
      break;
 80032da:	e00d      	b.n	80032f8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	332a      	adds	r3, #42	@ 0x2a
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
      break;
 80032f0:	e002      	b.n	80032f8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80032f6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	332c      	adds	r3, #44	@ 0x2c
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	8b39      	ldrh	r1, [r7, #24]
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4403      	add	r3, r0
 800331c:	3334      	adds	r3, #52	@ 0x34
 800331e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	334c      	adds	r3, #76	@ 0x4c
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3338      	adds	r3, #56	@ 0x38
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3315      	adds	r3, #21
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	334d      	adds	r3, #77	@ 0x4d
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	3310      	adds	r3, #16
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	1d19      	adds	r1, r3, #4
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	799b      	ldrb	r3, [r3, #6]
 800338a:	461a      	mov	r2, r3
 800338c:	f006 ffd4 	bl	800a338 <USB_HC_StartXfer>
 8003390:	4603      	mov	r3, r0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop

0800339c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f006 fcc8 	bl	8009d48 <USB_GetMode>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	f040 80fb 	bne.w	80035b6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f006 fc8b 	bl	8009ce0 <USB_ReadInterrupts>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80f1 	beq.w	80035b4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f006 fc82 	bl	8009ce0 <USB_ReadInterrupts>
 80033dc:	4603      	mov	r3, r0
 80033de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033e6:	d104      	bne.n	80033f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80033f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f006 fc72 	bl	8009ce0 <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003406:	d104      	bne.n	8003412 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003410:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f006 fc62 	bl	8009ce0 <USB_ReadInterrupts>
 800341c:	4603      	mov	r3, r0
 800341e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003422:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003426:	d104      	bne.n	8003432 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003430:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f006 fc52 	bl	8009ce0 <USB_ReadInterrupts>
 800343c:	4603      	mov	r3, r0
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d103      	bne.n	800344e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2202      	movs	r2, #2
 800344c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f006 fc44 	bl	8009ce0 <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800345e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003462:	d120      	bne.n	80034a6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800346c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d113      	bne.n	80034a6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800347e:	2110      	movs	r1, #16
 8003480:	6938      	ldr	r0, [r7, #16]
 8003482:	f006 fb37 	bl	8009af4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003486:	6938      	ldr	r0, [r7, #16]
 8003488:	f006 fb66 	bl	8009b58 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7a5b      	ldrb	r3, [r3, #9]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d105      	bne.n	80034a0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f006 fd58 	bl	8009f50 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f00c fa45 	bl	800f930 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f006 fc18 	bl	8009ce0 <USB_ReadInterrupts>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ba:	d102      	bne.n	80034c2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f001 fd33 	bl	8004f28 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f006 fc0a 	bl	8009ce0 <USB_ReadInterrupts>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d106      	bne.n	80034e4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f00c fa0e 	bl	800f8f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2208      	movs	r2, #8
 80034e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f006 fbf9 	bl	8009ce0 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034f8:	d139      	bne.n	800356e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f007 f994 	bl	800a82c <USB_HC_ReadInterrupt>
 8003504:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	e025      	b.n	8003558 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d018      	beq.n	8003552 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003536:	d106      	bne.n	8003546 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f905 	bl	800374e <HCD_HC_IN_IRQHandler>
 8003544:	e005      	b.n	8003552 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 ff67 	bl	8004420 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	3301      	adds	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	795b      	ldrb	r3, [r3, #5]
 800355c:	461a      	mov	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	4293      	cmp	r3, r2
 8003562:	d3d3      	bcc.n	800350c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800356c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f006 fbb4 	bl	8009ce0 <USB_ReadInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b10      	cmp	r3, #16
 8003580:	d101      	bne.n	8003586 <HAL_HCD_IRQHandler+0x1ea>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_HCD_IRQHandler+0x1ec>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d014      	beq.n	80035b6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0210 	bic.w	r2, r2, #16
 800359a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f001 fbe4 	bl	8004d6a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0210 	orr.w	r2, r2, #16
 80035b0:	619a      	str	r2, [r3, #24]
 80035b2:	e000      	b.n	80035b6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80035b4:	bf00      	nop
    }
  }
}
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_HCD_Start+0x16>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e013      	b.n	80035fa <HAL_HCD_Start+0x3e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2101      	movs	r1, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f006 fd1c 	bl	800a01e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f006 fa14 	bl	8009a18 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_HCD_Stop+0x16>
 8003614:	2302      	movs	r3, #2
 8003616:	e00d      	b.n	8003634 <HAL_HCD_Stop+0x32>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f007 fa6f 	bl	800ab08 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f006 fcbe 	bl	8009fca <USB_ResetPort>
 800364e:	4603      	mov	r3, r0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	334c      	adds	r3, #76	@ 0x4c
 8003674:	781b      	ldrb	r3, [r3, #0]
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	3338      	adds	r3, #56	@ 0x38
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f006 fd00 	bl	800a0be <USB_GetCurrentFrame>
 80036be:	4603      	mov	r3, r0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f006 fcdb 	bl	800a090 <USB_GetHostSpeed>
 80036da:	4603      	mov	r3, r0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	331a      	adds	r3, #26
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	331b      	adds	r3, #27
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3325      	adds	r3, #37	@ 0x25
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3324      	adds	r3, #36	@ 0x24
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	460b      	mov	r3, r1
 8003758:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f006 faca 	bl	8009d06 <USB_ReadChInterrupts>
 8003772:	4603      	mov	r3, r0
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d11a      	bne.n	80037b2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003788:	461a      	mov	r2, r3
 800378a:	2304      	movs	r3, #4
 800378c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	334d      	adds	r3, #77	@ 0x4d
 800379e:	2207      	movs	r2, #7
 80037a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	4611      	mov	r1, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f007 f84f 	bl	800a84e <USB_HC_Halt>
 80037b0:	e09e      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f006 faa3 	bl	8009d06 <USB_ReadChInterrupts>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ca:	d11b      	bne.n	8003804 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d8:	461a      	mov	r2, r3
 80037da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	334d      	adds	r3, #77	@ 0x4d
 80037f0:	2208      	movs	r2, #8
 80037f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f007 f826 	bl	800a84e <USB_HC_Halt>
 8003802:	e075      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f006 fa7a 	bl	8009d06 <USB_ReadChInterrupts>
 8003812:	4603      	mov	r3, r0
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b08      	cmp	r3, #8
 800381a:	d11a      	bne.n	8003852 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2308      	movs	r3, #8
 800382c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	334d      	adds	r3, #77	@ 0x4d
 800383e:	2206      	movs	r2, #6
 8003840:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f006 ffff 	bl	800a84e <USB_HC_Halt>
 8003850:	e04e      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f006 fa53 	bl	8009d06 <USB_ReadChInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386a:	d11b      	bne.n	80038a4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003878:	461a      	mov	r2, r3
 800387a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800387e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	334d      	adds	r3, #77	@ 0x4d
 8003890:	2209      	movs	r2, #9
 8003892:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f006 ffd6 	bl	800a84e <USB_HC_Halt>
 80038a2:	e025      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f006 fa2a 	bl	8009d06 <USB_ReadChInterrupts>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b8:	2b80      	cmp	r3, #128	@ 0x80
 80038ba:	d119      	bne.n	80038f0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c8:	461a      	mov	r2, r3
 80038ca:	2380      	movs	r3, #128	@ 0x80
 80038cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	334d      	adds	r3, #77	@ 0x4d
 80038de:	2207      	movs	r2, #7
 80038e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f006 ffaf 	bl	800a84e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f006 fa04 	bl	8009d06 <USB_ReadChInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003908:	d112      	bne.n	8003930 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f006 ff9b 	bl	800a84e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003924:	461a      	mov	r2, r3
 8003926:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800392a:	6093      	str	r3, [r2, #8]
 800392c:	f000 bd75 	b.w	800441a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f006 f9e4 	bl	8009d06 <USB_ReadChInterrupts>
 800393e:	4603      	mov	r3, r0
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	f040 8128 	bne.w	8003b9a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003956:	461a      	mov	r2, r3
 8003958:	2320      	movs	r3, #32
 800395a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	331b      	adds	r3, #27
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d119      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	331b      	adds	r3, #27
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4413      	add	r3, r2
 800398e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	0151      	lsls	r1, r2, #5
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	440a      	add	r2, r1
 800399c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	799b      	ldrb	r3, [r3, #6]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01b      	beq.n	80039e6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	3330      	adds	r3, #48	@ 0x30
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	1ac9      	subs	r1, r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4403      	add	r3, r0
 80039e2:	3338      	adds	r3, #56	@ 0x38
 80039e4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	334d      	adds	r3, #77	@ 0x4d
 80039f6:	2201      	movs	r2, #1
 80039f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3344      	adds	r3, #68	@ 0x44
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3326      	adds	r3, #38	@ 0x26
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	3326      	adds	r3, #38	@ 0x26
 8003a46:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d110      	bne.n	8003a6e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f006 fefa 	bl	800a84e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a66:	461a      	mov	r2, r3
 8003a68:	2310      	movs	r3, #16
 8003a6a:	6093      	str	r3, [r2, #8]
 8003a6c:	e03d      	b.n	8003aea <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3326      	adds	r3, #38	@ 0x26
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d00a      	beq.n	8003a9a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3326      	adds	r3, #38	@ 0x26
 8003a94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d127      	bne.n	8003aea <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	0151      	lsls	r1, r2, #5
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	440a      	add	r2, r1
 8003ab0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ab4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ab8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	334c      	adds	r3, #76	@ 0x4c
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	334c      	adds	r3, #76	@ 0x4c
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f00b ff31 	bl	800f94c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	799b      	ldrb	r3, [r3, #6]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d13b      	bne.n	8003b6a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	3338      	adds	r3, #56	@ 0x38
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4403      	add	r3, r0
 8003b12:	3328      	adds	r3, #40	@ 0x28
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	440b      	add	r3, r1
 8003b18:	1e59      	subs	r1, r3, #1
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4403      	add	r3, r0
 8003b28:	3328      	adds	r3, #40	@ 0x28
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8470 	beq.w	800441a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	333c      	adds	r3, #60	@ 0x3c
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	f083 0301 	eor.w	r3, r3, #1
 8003b52:	b2d8      	uxtb	r0, r3
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	333c      	adds	r3, #60	@ 0x3c
 8003b62:	4602      	mov	r2, r0
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	f000 bc58 	b.w	800441a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	333c      	adds	r3, #60	@ 0x3c
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	f083 0301 	eor.w	r3, r3, #1
 8003b82:	b2d8      	uxtb	r0, r3
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	333c      	adds	r3, #60	@ 0x3c
 8003b92:	4602      	mov	r2, r0
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	f000 bc40 	b.w	800441a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f006 f8af 	bl	8009d06 <USB_ReadChInterrupts>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d131      	bne.n	8003c16 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	331a      	adds	r3, #26
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	f040 841f 	bne.w	800441a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	331b      	adds	r3, #27
 8003bec:	2201      	movs	r2, #1
 8003bee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334d      	adds	r3, #77	@ 0x4d
 8003c00:	2203      	movs	r2, #3
 8003c02:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f006 fe1e 	bl	800a84e <USB_HC_Halt>
 8003c12:	f000 bc02 	b.w	800441a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f006 f871 	bl	8009d06 <USB_ReadChInterrupts>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	f040 8305 	bne.w	800423a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2302      	movs	r3, #2
 8003c40:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	334d      	adds	r3, #77	@ 0x4d
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d114      	bne.n	8003c82 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	334d      	adds	r3, #77	@ 0x4d
 8003c68:	2202      	movs	r2, #2
 8003c6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	334c      	adds	r3, #76	@ 0x4c
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e2cc      	b.n	800421c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	334d      	adds	r3, #77	@ 0x4d
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b06      	cmp	r3, #6
 8003c96:	d114      	bne.n	8003cc2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	334d      	adds	r3, #77	@ 0x4d
 8003ca8:	2202      	movs	r2, #2
 8003caa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	334c      	adds	r3, #76	@ 0x4c
 8003cbc:	2205      	movs	r2, #5
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e2ac      	b.n	800421c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	334d      	adds	r3, #77	@ 0x4d
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b07      	cmp	r3, #7
 8003cd6:	d00b      	beq.n	8003cf0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	334d      	adds	r3, #77	@ 0x4d
 8003ce8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003cea:	2b09      	cmp	r3, #9
 8003cec:	f040 80a6 	bne.w	8003e3c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	334d      	adds	r3, #77	@ 0x4d
 8003d00:	2202      	movs	r2, #2
 8003d02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3344      	adds	r3, #68	@ 0x44
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4403      	add	r3, r0
 8003d24:	3344      	adds	r3, #68	@ 0x44
 8003d26:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	3344      	adds	r3, #68	@ 0x44
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d943      	bls.n	8003dc6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3344      	adds	r3, #68	@ 0x44
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	331a      	adds	r3, #26
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d123      	bne.n	8003db0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	331b      	adds	r3, #27
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	331c      	adds	r3, #28
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	0151      	lsls	r1, r2, #5
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	440a      	add	r2, r1
 8003da6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dae:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	334c      	adds	r3, #76	@ 0x4c
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003dc4:	e229      	b.n	800421a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	334c      	adds	r3, #76	@ 0x4c
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	3326      	adds	r3, #38	@ 0x26
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00b      	beq.n	8003e08 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	3326      	adds	r3, #38	@ 0x26
 8003e00:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	f040 8209 	bne.w	800421a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e1e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e26:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e34:	461a      	mov	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e3a:	e1ee      	b.n	800421a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	334d      	adds	r3, #77	@ 0x4d
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	f040 80c8 	bne.w	8003fe4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	334d      	adds	r3, #77	@ 0x4d
 8003e64:	2202      	movs	r2, #2
 8003e66:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	331b      	adds	r3, #27
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 81ce 	bne.w	800421c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3326      	adds	r3, #38	@ 0x26
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d16b      	bne.n	8003f6e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3348      	adds	r3, #72	@ 0x48
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	1c59      	adds	r1, r3, #1
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4403      	add	r3, r0
 8003eb6:	3348      	adds	r3, #72	@ 0x48
 8003eb8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3348      	adds	r3, #72	@ 0x48
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d943      	bls.n	8003f58 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	3348      	adds	r3, #72	@ 0x48
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	331b      	adds	r3, #27
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3344      	adds	r3, #68	@ 0x44
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d809      	bhi.n	8003f22 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	331c      	adds	r3, #28
 8003f1e:	2201      	movs	r2, #1
 8003f20:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f40:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	334c      	adds	r3, #76	@ 0x4c
 8003f52:	2204      	movs	r2, #4
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e014      	b.n	8003f82 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334c      	adds	r3, #76	@ 0x4c
 8003f68:	2202      	movs	r2, #2
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e009      	b.n	8003f82 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334c      	adds	r3, #76	@ 0x4c
 8003f7e:	2202      	movs	r2, #2
 8003f80:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	3326      	adds	r3, #38	@ 0x26
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	3326      	adds	r3, #38	@ 0x26
 8003fa8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	f040 8136 	bne.w	800421c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fc6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e11b      	b.n	800421c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	334d      	adds	r3, #77	@ 0x4d
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	f040 8081 	bne.w	80040fe <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	334d      	adds	r3, #77	@ 0x4d
 800400c:	2202      	movs	r2, #2
 800400e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	331b      	adds	r3, #27
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	f040 80fa 	bne.w	800421c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	334c      	adds	r3, #76	@ 0x4c
 8004038:	2202      	movs	r2, #2
 800403a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	0151      	lsls	r1, r2, #5
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	440a      	add	r2, r1
 8004052:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	440a      	add	r2, r1
 8004072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800407a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4413      	add	r3, r2
 8004084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	440a      	add	r2, r1
 8004092:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004096:	f023 0320 	bic.w	r3, r3, #32
 800409a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3326      	adds	r3, #38	@ 0x26
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	3326      	adds	r3, #38	@ 0x26
 80040c2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	f040 80a9 	bne.w	800421c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040e0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040e8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f6:	461a      	mov	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	e08e      	b.n	800421c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	334d      	adds	r3, #77	@ 0x4d
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b04      	cmp	r3, #4
 8004112:	d143      	bne.n	800419c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	334d      	adds	r3, #77	@ 0x4d
 8004124:	2202      	movs	r2, #2
 8004126:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	334c      	adds	r3, #76	@ 0x4c
 8004138:	2202      	movs	r2, #2
 800413a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800413c:	78fa      	ldrb	r2, [r7, #3]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	3326      	adds	r3, #38	@ 0x26
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	3326      	adds	r3, #38	@ 0x26
 8004162:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004164:	2b02      	cmp	r3, #2
 8004166:	d159      	bne.n	800421c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4413      	add	r3, r2
 8004170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800417e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004186:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4413      	add	r3, r2
 8004190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004194:	461a      	mov	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e03f      	b.n	800421c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	334d      	adds	r3, #77	@ 0x4d
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d126      	bne.n	8004200 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	334d      	adds	r3, #77	@ 0x4d
 80041c2:	2202      	movs	r2, #2
 80041c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	3344      	adds	r3, #68	@ 0x44
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	1c59      	adds	r1, r3, #1
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4403      	add	r3, r0
 80041e6:	3344      	adds	r3, #68	@ 0x44
 80041e8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	334c      	adds	r3, #76	@ 0x4c
 80041fa:	2204      	movs	r2, #4
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e00d      	b.n	800421c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	334d      	adds	r3, #77	@ 0x4d
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b02      	cmp	r3, #2
 8004214:	f000 8100 	beq.w	8004418 <HCD_HC_IN_IRQHandler+0xcca>
 8004218:	e000      	b.n	800421c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800421a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334c      	adds	r3, #76	@ 0x4c
 800422c:	781a      	ldrb	r2, [r3, #0]
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f00b fb8a 	bl	800f94c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004238:	e0ef      	b.n	800441a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	78fa      	ldrb	r2, [r7, #3]
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f005 fd5f 	bl	8009d06 <USB_ReadChInterrupts>
 8004248:	4603      	mov	r3, r0
 800424a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424e:	2b40      	cmp	r3, #64	@ 0x40
 8004250:	d12f      	bne.n	80042b2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425e:	461a      	mov	r2, r3
 8004260:	2340      	movs	r3, #64	@ 0x40
 8004262:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	334d      	adds	r3, #77	@ 0x4d
 8004274:	2205      	movs	r2, #5
 8004276:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	331a      	adds	r3, #26
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	3344      	adds	r3, #68	@ 0x44
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	4611      	mov	r1, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f006 facf 	bl	800a84e <USB_HC_Halt>
 80042b0:	e0b3      	b.n	800441a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	4611      	mov	r1, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f005 fd23 	bl	8009d06 <USB_ReadChInterrupts>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	f040 80a7 	bne.w	800441a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	3326      	adds	r3, #38	@ 0x26
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d11b      	bne.n	800431a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3344      	adds	r3, #68	@ 0x44
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	334d      	adds	r3, #77	@ 0x4d
 8004306:	2204      	movs	r2, #4
 8004308:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f006 fa9b 	bl	800a84e <USB_HC_Halt>
 8004318:	e03f      	b.n	800439a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	3326      	adds	r3, #38	@ 0x26
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	3326      	adds	r3, #38	@ 0x26
 8004340:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004342:	2b02      	cmp	r3, #2
 8004344:	d129      	bne.n	800439a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	3344      	adds	r3, #68	@ 0x44
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	799b      	ldrb	r3, [r3, #6]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HCD_HC_IN_IRQHandler+0xc2a>
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	331b      	adds	r3, #27
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d110      	bne.n	800439a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	334d      	adds	r3, #77	@ 0x4d
 8004388:	2204      	movs	r2, #4
 800438a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f006 fa5a 	bl	800a84e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	331b      	adds	r3, #27
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d129      	bne.n	8004404 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	331b      	adds	r3, #27
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	0151      	lsls	r1, r2, #5
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	440a      	add	r2, r1
 80043fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043fe:	f043 0320 	orr.w	r3, r3, #32
 8004402:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004410:	461a      	mov	r2, r3
 8004412:	2310      	movs	r3, #16
 8004414:	6093      	str	r3, [r2, #8]
 8004416:	e000      	b.n	800441a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004418:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	4611      	mov	r1, r2
 800443e:	4618      	mov	r0, r3
 8004440:	f005 fc61 	bl	8009d06 <USB_ReadChInterrupts>
 8004444:	4603      	mov	r3, r0
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d11b      	bne.n	8004486 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4413      	add	r3, r2
 8004456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445a:	461a      	mov	r2, r3
 800445c:	2304      	movs	r3, #4
 800445e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	334d      	adds	r3, #77	@ 0x4d
 8004470:	2207      	movs	r2, #7
 8004472:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f006 f9e6 	bl	800a84e <USB_HC_Halt>
 8004482:	f000 bc6f 	b.w	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f005 fc39 	bl	8009d06 <USB_ReadChInterrupts>
 8004494:	4603      	mov	r3, r0
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b20      	cmp	r3, #32
 800449c:	f040 8082 	bne.w	80045a4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ac:	461a      	mov	r2, r3
 80044ae:	2320      	movs	r3, #32
 80044b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3319      	adds	r3, #25
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d124      	bne.n	8004512 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	3319      	adds	r3, #25
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	334c      	adds	r3, #76	@ 0x4c
 80044ec:	2202      	movs	r2, #2
 80044ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	334d      	adds	r3, #77	@ 0x4d
 8004500:	2203      	movs	r2, #3
 8004502:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f006 f99e 	bl	800a84e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	331a      	adds	r3, #26
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	f040 841d 	bne.w	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	331b      	adds	r3, #27
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 8411 	bne.w	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004542:	78fa      	ldrb	r2, [r7, #3]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	3326      	adds	r3, #38	@ 0x26
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d009      	beq.n	800456c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	331b      	adds	r3, #27
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	334d      	adds	r3, #77	@ 0x4d
 800457c:	2203      	movs	r2, #3
 800457e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f006 f960 	bl	800a84e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	3344      	adds	r3, #68	@ 0x44
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	e3df      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f005 fbaa 	bl	8009d06 <USB_ReadChInterrupts>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045bc:	d111      	bne.n	80045e2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045ca:	461a      	mov	r2, r3
 80045cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045d0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f006 f937 	bl	800a84e <USB_HC_Halt>
 80045e0:	e3c0      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f005 fb8b 	bl	8009d06 <USB_ReadChInterrupts>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d168      	bne.n	80046cc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	3344      	adds	r3, #68	@ 0x44
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	4611      	mov	r1, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f005 fb75 	bl	8009d06 <USB_ReadChInterrupts>
 800461c:	4603      	mov	r3, r0
 800461e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004622:	2b40      	cmp	r3, #64	@ 0x40
 8004624:	d112      	bne.n	800464c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	3319      	adds	r3, #25
 8004636:	2201      	movs	r2, #1
 8004638:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004646:	461a      	mov	r2, r3
 8004648:	2340      	movs	r3, #64	@ 0x40
 800464a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	331b      	adds	r3, #27
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d019      	beq.n	8004696 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	331b      	adds	r3, #27
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4413      	add	r3, r2
 800467e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	0151      	lsls	r1, r2, #5
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	440a      	add	r2, r1
 800468c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004694:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a2:	461a      	mov	r2, r3
 80046a4:	2301      	movs	r3, #1
 80046a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80046a8:	78fa      	ldrb	r2, [r7, #3]
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	334d      	adds	r3, #77	@ 0x4d
 80046b8:	2201      	movs	r2, #1
 80046ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	4611      	mov	r1, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f006 f8c2 	bl	800a84e <USB_HC_Halt>
 80046ca:	e34b      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f005 fb16 	bl	8009d06 <USB_ReadChInterrupts>
 80046da:	4603      	mov	r3, r0
 80046dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e0:	2b40      	cmp	r3, #64	@ 0x40
 80046e2:	d139      	bne.n	8004758 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80046e4:	78fa      	ldrb	r2, [r7, #3]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	334d      	adds	r3, #77	@ 0x4d
 80046f4:	2205      	movs	r2, #5
 80046f6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	331a      	adds	r3, #26
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	3319      	adds	r3, #25
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	3344      	adds	r3, #68	@ 0x44
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f006 f885 	bl	800a84e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004750:	461a      	mov	r2, r3
 8004752:	2340      	movs	r3, #64	@ 0x40
 8004754:	6093      	str	r3, [r2, #8]
 8004756:	e305      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f005 fad0 	bl	8009d06 <USB_ReadChInterrupts>
 8004766:	4603      	mov	r3, r0
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d11a      	bne.n	80047a6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800477c:	461a      	mov	r2, r3
 800477e:	2308      	movs	r3, #8
 8004780:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	334d      	adds	r3, #77	@ 0x4d
 8004792:	2206      	movs	r2, #6
 8004794:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	4611      	mov	r1, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	f006 f855 	bl	800a84e <USB_HC_Halt>
 80047a4:	e2de      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f005 faa9 	bl	8009d06 <USB_ReadChInterrupts>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d144      	bne.n	8004848 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3344      	adds	r3, #68	@ 0x44
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	334d      	adds	r3, #77	@ 0x4d
 80047e2:	2204      	movs	r2, #4
 80047e4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	3319      	adds	r3, #25
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d114      	bne.n	8004826 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80047fc:	78fa      	ldrb	r2, [r7, #3]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	3318      	adds	r3, #24
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	3319      	adds	r3, #25
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	78fa      	ldrb	r2, [r7, #3]
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f006 f80d 	bl	800a84e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004840:	461a      	mov	r2, r3
 8004842:	2310      	movs	r3, #16
 8004844:	6093      	str	r3, [r2, #8]
 8004846:	e28d      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f005 fa58 	bl	8009d06 <USB_ReadChInterrupts>
 8004856:	4603      	mov	r3, r0
 8004858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485c:	2b80      	cmp	r3, #128	@ 0x80
 800485e:	d169      	bne.n	8004934 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	799b      	ldrb	r3, [r3, #6]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d111      	bne.n	800488c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004868:	78fa      	ldrb	r2, [r7, #3]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	334d      	adds	r3, #77	@ 0x4d
 8004878:	2207      	movs	r2, #7
 800487a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	4611      	mov	r1, r2
 8004884:	4618      	mov	r0, r3
 8004886:	f005 ffe2 	bl	800a84e <USB_HC_Halt>
 800488a:	e049      	b.n	8004920 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800488c:	78fa      	ldrb	r2, [r7, #3]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	3344      	adds	r3, #68	@ 0x44
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4403      	add	r3, r0
 80048ac:	3344      	adds	r3, #68	@ 0x44
 80048ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	3344      	adds	r3, #68	@ 0x44
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d922      	bls.n	800490c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	3344      	adds	r3, #68	@ 0x44
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	334c      	adds	r3, #76	@ 0x4c
 80048ea:	2204      	movs	r2, #4
 80048ec:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	334c      	adds	r3, #76	@ 0x4c
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f00b f821 	bl	800f94c <HAL_HCD_HC_NotifyURBChange_Callback>
 800490a:	e009      	b.n	8004920 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	334c      	adds	r3, #76	@ 0x4c
 800491c:	2202      	movs	r2, #2
 800491e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800492c:	461a      	mov	r2, r3
 800492e:	2380      	movs	r3, #128	@ 0x80
 8004930:	6093      	str	r3, [r2, #8]
 8004932:	e217      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	4611      	mov	r1, r2
 800493c:	4618      	mov	r0, r3
 800493e:	f005 f9e2 	bl	8009d06 <USB_ReadChInterrupts>
 8004942:	4603      	mov	r3, r0
 8004944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494c:	d11b      	bne.n	8004986 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	334d      	adds	r3, #77	@ 0x4d
 800495e:	2209      	movs	r2, #9
 8004960:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f005 ff6f 	bl	800a84e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4413      	add	r3, r2
 8004978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800497c:	461a      	mov	r2, r3
 800497e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004982:	6093      	str	r3, [r2, #8]
 8004984:	e1ee      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	78fa      	ldrb	r2, [r7, #3]
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f005 f9b9 	bl	8009d06 <USB_ReadChInterrupts>
 8004994:	4603      	mov	r3, r0
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b02      	cmp	r3, #2
 800499c:	f040 81df 	bne.w	8004d5e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ac:	461a      	mov	r2, r3
 80049ae:	2302      	movs	r3, #2
 80049b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80049b2:	78fa      	ldrb	r2, [r7, #3]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	334d      	adds	r3, #77	@ 0x4d
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	f040 8093 	bne.w	8004af0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	334d      	adds	r3, #77	@ 0x4d
 80049da:	2202      	movs	r2, #2
 80049dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	334c      	adds	r3, #76	@ 0x4c
 80049ee:	2201      	movs	r2, #1
 80049f0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	3326      	adds	r3, #38	@ 0x26
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d00b      	beq.n	8004a20 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004a08:	78fa      	ldrb	r2, [r7, #3]
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	3326      	adds	r3, #38	@ 0x26
 8004a18:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	f040 8190 	bne.w	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	799b      	ldrb	r3, [r3, #6]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d115      	bne.n	8004a54 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	333d      	adds	r3, #61	@ 0x3d
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	f083 0301 	eor.w	r3, r3, #1
 8004a40:	b2d8      	uxtb	r0, r3
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	333d      	adds	r3, #61	@ 0x3d
 8004a50:	4602      	mov	r2, r0
 8004a52:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	799b      	ldrb	r3, [r3, #6]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f040 8171 	bne.w	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
 8004a5e:	78fa      	ldrb	r2, [r7, #3]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3334      	adds	r3, #52	@ 0x34
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8165 	beq.w	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	3334      	adds	r3, #52	@ 0x34
 8004a86:	6819      	ldr	r1, [r3, #0]
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4403      	add	r3, r0
 8004a96:	3328      	adds	r3, #40	@ 0x28
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	440b      	add	r3, r1
 8004a9c:	1e59      	subs	r1, r3, #1
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4403      	add	r3, r0
 8004aac:	3328      	adds	r3, #40	@ 0x28
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ab4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 813f 	beq.w	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004ac2:	78fa      	ldrb	r2, [r7, #3]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	333d      	adds	r3, #61	@ 0x3d
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	f083 0301 	eor.w	r3, r3, #1
 8004ada:	b2d8      	uxtb	r0, r3
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	333d      	adds	r3, #61	@ 0x3d
 8004aea:	4602      	mov	r2, r0
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e127      	b.n	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	334d      	adds	r3, #77	@ 0x4d
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d120      	bne.n	8004b48 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	334d      	adds	r3, #77	@ 0x4d
 8004b16:	2202      	movs	r2, #2
 8004b18:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	331b      	adds	r3, #27
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	f040 8107 	bne.w	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	334c      	adds	r3, #76	@ 0x4c
 8004b42:	2202      	movs	r2, #2
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e0fb      	b.n	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	334d      	adds	r3, #77	@ 0x4d
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d13a      	bne.n	8004bd4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	334d      	adds	r3, #77	@ 0x4d
 8004b6e:	2202      	movs	r2, #2
 8004b70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	334c      	adds	r3, #76	@ 0x4c
 8004b82:	2202      	movs	r2, #2
 8004b84:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	331b      	adds	r3, #27
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f040 80d1 	bne.w	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	331b      	adds	r3, #27
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bd0:	6053      	str	r3, [r2, #4]
 8004bd2:	e0b5      	b.n	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	334d      	adds	r3, #77	@ 0x4d
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b05      	cmp	r3, #5
 8004be8:	d114      	bne.n	8004c14 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	334d      	adds	r3, #77	@ 0x4d
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004bfe:	78fa      	ldrb	r2, [r7, #3]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	1a9b      	subs	r3, r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	334c      	adds	r3, #76	@ 0x4c
 8004c0e:	2202      	movs	r2, #2
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	e095      	b.n	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	334d      	adds	r3, #77	@ 0x4d
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b06      	cmp	r3, #6
 8004c28:	d114      	bne.n	8004c54 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	334d      	adds	r3, #77	@ 0x4d
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	334c      	adds	r3, #76	@ 0x4c
 8004c4e:	2205      	movs	r2, #5
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	e075      	b.n	8004d40 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	334d      	adds	r3, #77	@ 0x4d
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b07      	cmp	r3, #7
 8004c68:	d00a      	beq.n	8004c80 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	334d      	adds	r3, #77	@ 0x4d
 8004c7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004c7c:	2b09      	cmp	r3, #9
 8004c7e:	d170      	bne.n	8004d62 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	334d      	adds	r3, #77	@ 0x4d
 8004c90:	2202      	movs	r2, #2
 8004c92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c94:	78fa      	ldrb	r2, [r7, #3]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3344      	adds	r3, #68	@ 0x44
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4403      	add	r3, r0
 8004cb4:	3344      	adds	r3, #68	@ 0x44
 8004cb6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	3344      	adds	r3, #68	@ 0x44
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d914      	bls.n	8004cf8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	3344      	adds	r3, #68	@ 0x44
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	334c      	adds	r3, #76	@ 0x4c
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cf6:	e022      	b.n	8004d3e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	334c      	adds	r3, #76	@ 0x4c
 8004d08:	2202      	movs	r2, #2
 8004d0a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d22:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d2a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d38:	461a      	mov	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d3e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	334c      	adds	r3, #76	@ 0x4c
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f00a fdf8 	bl	800f94c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d5c:	e002      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004d62:	bf00      	nop
  }
}
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b08a      	sub	sp, #40	@ 0x28
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	0c5b      	lsrs	r3, r3, #17
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d9e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d004      	beq.n	8004db0 <HCD_RXQLVL_IRQHandler+0x46>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	f000 80b6 	beq.w	8004f1a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004dae:	e0b7      	b.n	8004f20 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80b3 	beq.w	8004f1e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	332c      	adds	r3, #44	@ 0x2c
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 80a7 	beq.w	8004f1e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3338      	adds	r3, #56	@ 0x38
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	18d1      	adds	r1, r2, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4613      	mov	r3, r2
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4403      	add	r3, r0
 8004df4:	3334      	adds	r3, #52	@ 0x34
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4299      	cmp	r1, r3
 8004dfa:	f200 8083 	bhi.w	8004f04 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	332c      	adds	r3, #44	@ 0x2c
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	b292      	uxth	r2, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f004 ff09 	bl	8009c30 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	332c      	adds	r3, #44	@ 0x2c
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	18d1      	adds	r1, r2, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	1a9b      	subs	r3, r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4403      	add	r3, r0
 8004e42:	332c      	adds	r3, #44	@ 0x2c
 8004e44:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	3338      	adds	r3, #56	@ 0x38
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	18d1      	adds	r1, r2, r3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4613      	mov	r3, r2
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4403      	add	r3, r0
 8004e6a:	3338      	adds	r3, #56	@ 0x38
 8004e6c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	0cdb      	lsrs	r3, r3, #19
 8004e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e82:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3328      	adds	r3, #40	@ 0x28
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d13f      	bne.n	8004f1e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d03c      	beq.n	8004f1e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004eba:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ec2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	333c      	adds	r3, #60	@ 0x3c
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	f083 0301 	eor.w	r3, r3, #1
 8004eec:	b2d8      	uxtb	r0, r3
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	333c      	adds	r3, #60	@ 0x3c
 8004efe:	4602      	mov	r2, r0
 8004f00:	701a      	strb	r2, [r3, #0]
      break;
 8004f02:	e00c      	b.n	8004f1e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	1a9b      	subs	r3, r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	334c      	adds	r3, #76	@ 0x4c
 8004f14:	2204      	movs	r2, #4
 8004f16:	701a      	strb	r2, [r3, #0]
      break;
 8004f18:	e001      	b.n	8004f1e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e000      	b.n	8004f20 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004f1e:	bf00      	nop
  }
}
 8004f20:	bf00      	nop
 8004f22:	3728      	adds	r7, #40	@ 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004f54:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d10b      	bne.n	8004f78 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d102      	bne.n	8004f70 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f00a fcd2 	bl	800f914 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f043 0302 	orr.w	r3, r3, #2
 8004f76:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d132      	bne.n	8004fe8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f043 0308 	orr.w	r3, r3, #8
 8004f88:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d126      	bne.n	8004fe2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	7a5b      	ldrb	r3, [r3, #9]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d113      	bne.n	8004fc4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004fa2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fa6:	d106      	bne.n	8004fb6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2102      	movs	r1, #2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f004 ffce 	bl	8009f50 <USB_InitFSLSPClkSel>
 8004fb4:	e011      	b.n	8004fda <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2101      	movs	r1, #1
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f004 ffc7 	bl	8009f50 <USB_InitFSLSPClkSel>
 8004fc2:	e00a      	b.n	8004fda <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	79db      	ldrb	r3, [r3, #7]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d106      	bne.n	8004fda <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004fd8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f00a fcc8 	bl	800f970 <HAL_HCD_PortEnabled_Callback>
 8004fe0:	e002      	b.n	8004fe8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f00a fcd2 	bl	800f98c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d103      	bne.n	8004ffa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f043 0320 	orr.w	r3, r3, #32
 8004ff8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005000:	461a      	mov	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6013      	str	r3, [r2, #0]
}
 8005006:	bf00      	nop
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e12b      	b.n	800527a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc faf4 	bl	8001624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	@ 0x24
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0201 	bic.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005062:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005072:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005074:	f002 faf2 	bl	800765c <HAL_RCC_GetPCLK1Freq>
 8005078:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4a81      	ldr	r2, [pc, #516]	@ (8005284 <HAL_I2C_Init+0x274>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d807      	bhi.n	8005094 <HAL_I2C_Init+0x84>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a80      	ldr	r2, [pc, #512]	@ (8005288 <HAL_I2C_Init+0x278>)
 8005088:	4293      	cmp	r3, r2
 800508a:	bf94      	ite	ls
 800508c:	2301      	movls	r3, #1
 800508e:	2300      	movhi	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e006      	b.n	80050a2 <HAL_I2C_Init+0x92>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a7d      	ldr	r2, [pc, #500]	@ (800528c <HAL_I2C_Init+0x27c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	bf94      	ite	ls
 800509c:	2301      	movls	r3, #1
 800509e:	2300      	movhi	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0e7      	b.n	800527a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a78      	ldr	r2, [pc, #480]	@ (8005290 <HAL_I2C_Init+0x280>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	0c9b      	lsrs	r3, r3, #18
 80050b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a6a      	ldr	r2, [pc, #424]	@ (8005284 <HAL_I2C_Init+0x274>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d802      	bhi.n	80050e4 <HAL_I2C_Init+0xd4>
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3301      	adds	r3, #1
 80050e2:	e009      	b.n	80050f8 <HAL_I2C_Init+0xe8>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	4a69      	ldr	r2, [pc, #420]	@ (8005294 <HAL_I2C_Init+0x284>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	099b      	lsrs	r3, r3, #6
 80050f6:	3301      	adds	r3, #1
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	430b      	orrs	r3, r1
 80050fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800510a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	495c      	ldr	r1, [pc, #368]	@ (8005284 <HAL_I2C_Init+0x274>)
 8005114:	428b      	cmp	r3, r1
 8005116:	d819      	bhi.n	800514c <HAL_I2C_Init+0x13c>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	1e59      	subs	r1, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	fbb1 f3f3 	udiv	r3, r1, r3
 8005126:	1c59      	adds	r1, r3, #1
 8005128:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800512c:	400b      	ands	r3, r1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_I2C_Init+0x138>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1e59      	subs	r1, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005140:	3301      	adds	r3, #1
 8005142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005146:	e051      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 8005148:	2304      	movs	r3, #4
 800514a:	e04f      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d111      	bne.n	8005178 <HAL_I2C_Init+0x168>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	1e58      	subs	r0, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	440b      	add	r3, r1
 8005162:	fbb0 f3f3 	udiv	r3, r0, r3
 8005166:	3301      	adds	r3, #1
 8005168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e012      	b.n	800519e <HAL_I2C_Init+0x18e>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1e58      	subs	r0, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6859      	ldr	r1, [r3, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	0099      	lsls	r1, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	fbb0 f3f3 	udiv	r3, r0, r3
 800518e:	3301      	adds	r3, #1
 8005190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf0c      	ite	eq
 8005198:	2301      	moveq	r3, #1
 800519a:	2300      	movne	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Init+0x196>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e022      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10e      	bne.n	80051cc <HAL_I2C_Init+0x1bc>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	1e58      	subs	r0, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6859      	ldr	r1, [r3, #4]
 80051b6:	460b      	mov	r3, r1
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	440b      	add	r3, r1
 80051bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c0:	3301      	adds	r3, #1
 80051c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ca:	e00f      	b.n	80051ec <HAL_I2C_Init+0x1dc>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1e58      	subs	r0, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	0099      	lsls	r1, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e2:	3301      	adds	r3, #1
 80051e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	6809      	ldr	r1, [r1, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800521a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6911      	ldr	r1, [r2, #16]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	4311      	orrs	r1, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	430b      	orrs	r3, r1
 800522e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	000186a0 	.word	0x000186a0
 8005288:	001e847f 	.word	0x001e847f
 800528c:	003d08ff 	.word	0x003d08ff
 8005290:	431bde83 	.word	0x431bde83
 8005294:	10624dd3 	.word	0x10624dd3

08005298 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	607a      	str	r2, [r7, #4]
 80052a2:	461a      	mov	r2, r3
 80052a4:	460b      	mov	r3, r1
 80052a6:	817b      	strh	r3, [r7, #10]
 80052a8:	4613      	mov	r3, r2
 80052aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052ac:	f7fd f8b6 	bl	800241c <HAL_GetTick>
 80052b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	f040 80e0 	bne.w	8005480 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	2319      	movs	r3, #25
 80052c6:	2201      	movs	r2, #1
 80052c8:	4970      	ldr	r1, [pc, #448]	@ (800548c <HAL_I2C_Master_Transmit+0x1f4>)
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 ff3c 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052d6:	2302      	movs	r3, #2
 80052d8:	e0d3      	b.n	8005482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_I2C_Master_Transmit+0x50>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e0cc      	b.n	8005482 <HAL_I2C_Master_Transmit+0x1ea>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d007      	beq.n	800530e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0201 	orr.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800531c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2221      	movs	r2, #33	@ 0x21
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2210      	movs	r2, #16
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	893a      	ldrh	r2, [r7, #8]
 800533e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4a50      	ldr	r2, [pc, #320]	@ (8005490 <HAL_I2C_Master_Transmit+0x1f8>)
 800534e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005350:	8979      	ldrh	r1, [r7, #10]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	6a3a      	ldr	r2, [r7, #32]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fcf6 	bl	8005d48 <I2C_MasterRequestWrite>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e08d      	b.n	8005482 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800537c:	e066      	b.n	800544c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	6a39      	ldr	r1, [r7, #32]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fffa 	bl	800637c <I2C_WaitOnTXEFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00d      	beq.n	80053aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	2b04      	cmp	r3, #4
 8005394:	d107      	bne.n	80053a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e06b      	b.n	8005482 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	781a      	ldrb	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d11b      	bne.n	8005420 <HAL_I2C_Master_Transmit+0x188>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d017      	beq.n	8005420 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	781a      	ldrb	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	6a39      	ldr	r1, [r7, #32]
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fff1 	bl	800640c <I2C_WaitOnBTFFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00d      	beq.n	800544c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	2b04      	cmp	r3, #4
 8005436:	d107      	bne.n	8005448 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005446:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e01a      	b.n	8005482 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	d194      	bne.n	800537e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e000      	b.n	8005482 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005480:	2302      	movs	r3, #2
  }
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	00100002 	.word	0x00100002
 8005490:	ffff0000 	.word	0xffff0000

08005494 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	4608      	mov	r0, r1
 800549e:	4611      	mov	r1, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	817b      	strh	r3, [r7, #10]
 80054a6:	460b      	mov	r3, r1
 80054a8:	813b      	strh	r3, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054ae:	f7fc ffb5 	bl	800241c <HAL_GetTick>
 80054b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b20      	cmp	r3, #32
 80054be:	f040 80d9 	bne.w	8005674 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	2319      	movs	r3, #25
 80054c8:	2201      	movs	r2, #1
 80054ca:	496d      	ldr	r1, [pc, #436]	@ (8005680 <HAL_I2C_Mem_Write+0x1ec>)
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 fe3b 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80054d8:	2302      	movs	r3, #2
 80054da:	e0cc      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_I2C_Mem_Write+0x56>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e0c5      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d007      	beq.n	8005510 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800551e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2221      	movs	r2, #33	@ 0x21
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2240      	movs	r2, #64	@ 0x40
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005540:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a4d      	ldr	r2, [pc, #308]	@ (8005684 <HAL_I2C_Mem_Write+0x1f0>)
 8005550:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005552:	88f8      	ldrh	r0, [r7, #6]
 8005554:	893a      	ldrh	r2, [r7, #8]
 8005556:	8979      	ldrh	r1, [r7, #10]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	4603      	mov	r3, r0
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fc72 	bl	8005e4c <I2C_RequestMemoryWrite>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d052      	beq.n	8005614 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e081      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 ff00 	bl	800637c <I2C_WaitOnTXEFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005586:	2b04      	cmp	r3, #4
 8005588:	d107      	bne.n	800559a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e06b      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d11b      	bne.n	8005614 <HAL_I2C_Mem_Write+0x180>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d017      	beq.n	8005614 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	781a      	ldrb	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1aa      	bne.n	8005572 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fef3 	bl	800640c <I2C_WaitOnBTFFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00d      	beq.n	8005648 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005630:	2b04      	cmp	r3, #4
 8005632:	d107      	bne.n	8005644 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005642:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e016      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	e000      	b.n	8005676 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005674:	2302      	movs	r3, #2
  }
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	00100002 	.word	0x00100002
 8005684:	ffff0000 	.word	0xffff0000

08005688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	@ 0x30
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	4608      	mov	r0, r1
 8005692:	4611      	mov	r1, r2
 8005694:	461a      	mov	r2, r3
 8005696:	4603      	mov	r3, r0
 8005698:	817b      	strh	r3, [r7, #10]
 800569a:	460b      	mov	r3, r1
 800569c:	813b      	strh	r3, [r7, #8]
 800569e:	4613      	mov	r3, r2
 80056a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056a2:	f7fc febb 	bl	800241c <HAL_GetTick>
 80056a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	f040 8214 	bne.w	8005ade <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	2319      	movs	r3, #25
 80056bc:	2201      	movs	r2, #1
 80056be:	497b      	ldr	r1, [pc, #492]	@ (80058ac <HAL_I2C_Mem_Read+0x224>)
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fd41 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
 80056ce:	e207      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_I2C_Mem_Read+0x56>
 80056da:	2302      	movs	r3, #2
 80056dc:	e200      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x458>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d007      	beq.n	8005704 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2222      	movs	r2, #34	@ 0x22
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2240      	movs	r2, #64	@ 0x40
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800572e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005734:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a5b      	ldr	r2, [pc, #364]	@ (80058b0 <HAL_I2C_Mem_Read+0x228>)
 8005744:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005746:	88f8      	ldrh	r0, [r7, #6]
 8005748:	893a      	ldrh	r2, [r7, #8]
 800574a:	8979      	ldrh	r1, [r7, #10]
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	4603      	mov	r3, r0
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fc0e 	bl	8005f78 <I2C_RequestMemoryRead>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e1bc      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	d113      	bne.n	8005796 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576e:	2300      	movs	r3, #0
 8005770:	623b      	str	r3, [r7, #32]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	623b      	str	r3, [r7, #32]
 8005782:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e190      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579a:	2b01      	cmp	r3, #1
 800579c:	d11b      	bne.n	80057d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e170      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d11b      	bne.n	8005816 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057fe:	2300      	movs	r3, #0
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	e150      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800582c:	e144      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005832:	2b03      	cmp	r3, #3
 8005834:	f200 80f1 	bhi.w	8005a1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583c:	2b01      	cmp	r3, #1
 800583e:	d123      	bne.n	8005888 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005842:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fe29 	bl	800649c <I2C_WaitOnRXNEFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e145      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005886:	e117      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800588c:	2b02      	cmp	r3, #2
 800588e:	d14e      	bne.n	800592e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005896:	2200      	movs	r2, #0
 8005898:	4906      	ldr	r1, [pc, #24]	@ (80058b4 <HAL_I2C_Mem_Read+0x22c>)
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fc54 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e11a      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x458>
 80058aa:	bf00      	nop
 80058ac:	00100002 	.word	0x00100002
 80058b0:	ffff0000 	.word	0xffff0000
 80058b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800592c:	e0c4      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005934:	2200      	movs	r2, #0
 8005936:	496c      	ldr	r1, [pc, #432]	@ (8005ae8 <HAL_I2C_Mem_Read+0x460>)
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fc05 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0cb      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800598a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	2200      	movs	r2, #0
 8005992:	4955      	ldr	r1, [pc, #340]	@ (8005ae8 <HAL_I2C_Mem_Read+0x460>)
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 fbd7 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e09d      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a18:	e04e      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fd3c 	bl	800649c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e058      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d124      	bne.n	8005ab8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d107      	bne.n	8005a86 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a84:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f47f aeb6 	bne.w	800582e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e000      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3728      	adds	r7, #40	@ 0x28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	00010004 	.word	0x00010004

08005aec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	@ 0x28
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	607a      	str	r2, [r7, #4]
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	460b      	mov	r3, r1
 8005afa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005afc:	f7fc fc8e 	bl	800241c <HAL_GetTick>
 8005b00:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	f040 8111 	bne.w	8005d36 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	2319      	movs	r3, #25
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4988      	ldr	r1, [pc, #544]	@ (8005d40 <HAL_I2C_IsDeviceReady+0x254>)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fb12 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e104      	b.n	8005d38 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_I2C_IsDeviceReady+0x50>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e0fd      	b.n	8005d38 <HAL_I2C_IsDeviceReady+0x24c>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d007      	beq.n	8005b62 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2224      	movs	r2, #36	@ 0x24
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a70      	ldr	r2, [pc, #448]	@ (8005d44 <HAL_I2C_IsDeviceReady+0x258>)
 8005b84:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b94:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fad0 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00d      	beq.n	8005bca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bbc:	d103      	bne.n	8005bc6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bc4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e0b6      	b.n	8005d38 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bca:	897b      	ldrh	r3, [r7, #10]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bd8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005bda:	f7fc fc1f 	bl	800241c <HAL_GetTick>
 8005bde:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	bf0c      	ite	eq
 8005bee:	2301      	moveq	r3, #1
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c04:	bf0c      	ite	eq
 8005c06:	2301      	moveq	r3, #1
 8005c08:	2300      	movne	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005c0e:	e025      	b.n	8005c5c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c10:	f7fc fc04 	bl	800241c <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d302      	bcc.n	8005c26 <HAL_I2C_IsDeviceReady+0x13a>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	22a0      	movs	r2, #160	@ 0xa0
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	bf0c      	ite	eq
 8005c3c:	2301      	moveq	r3, #1
 8005c3e:	2300      	movne	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c52:	bf0c      	ite	eq
 8005c54:	2301      	moveq	r3, #1
 8005c56:	2300      	movne	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c66:	d005      	beq.n	8005c74 <HAL_I2C_IsDeviceReady+0x188>
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <HAL_I2C_IsDeviceReady+0x188>
 8005c6e:	7dbb      	ldrb	r3, [r7, #22]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0cd      	beq.n	8005c10 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d129      	bne.n	8005cde <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c98:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	2319      	movs	r3, #25
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4921      	ldr	r1, [pc, #132]	@ (8005d40 <HAL_I2C_IsDeviceReady+0x254>)
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fa44 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e036      	b.n	8005d38 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e02c      	b.n	8005d38 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005cf6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	2319      	movs	r3, #25
 8005cfe:	2201      	movs	r2, #1
 8005d00:	490f      	ldr	r1, [pc, #60]	@ (8005d40 <HAL_I2C_IsDeviceReady+0x254>)
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fa20 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e012      	b.n	8005d38 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	3301      	adds	r3, #1
 8005d16:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	f4ff af32 	bcc.w	8005b86 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3720      	adds	r7, #32
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	00100002 	.word	0x00100002
 8005d44:	ffff0000 	.word	0xffff0000

08005d48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	460b      	mov	r3, r1
 8005d56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d006      	beq.n	8005d72 <I2C_MasterRequestWrite+0x2a>
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d003      	beq.n	8005d72 <I2C_MasterRequestWrite+0x2a>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d70:	d108      	bne.n	8005d84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e00b      	b.n	8005d9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d88:	2b12      	cmp	r3, #18
 8005d8a:	d107      	bne.n	8005d9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f9cd 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00d      	beq.n	8005dd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc2:	d103      	bne.n	8005dcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e035      	b.n	8005e3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dd8:	d108      	bne.n	8005dec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dda:	897b      	ldrh	r3, [r7, #10]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005de8:	611a      	str	r2, [r3, #16]
 8005dea:	e01b      	b.n	8005e24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dec:	897b      	ldrh	r3, [r7, #10]
 8005dee:	11db      	asrs	r3, r3, #7
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f003 0306 	and.w	r3, r3, #6
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f063 030f 	orn	r3, r3, #15
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	490e      	ldr	r1, [pc, #56]	@ (8005e44 <I2C_MasterRequestWrite+0xfc>)
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 fa16 	bl	800623c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e010      	b.n	8005e3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e1a:	897b      	ldrh	r3, [r7, #10]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4907      	ldr	r1, [pc, #28]	@ (8005e48 <I2C_MasterRequestWrite+0x100>)
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fa06 	bl	800623c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	00010008 	.word	0x00010008
 8005e48:	00010002 	.word	0x00010002

08005e4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	4608      	mov	r0, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	817b      	strh	r3, [r7, #10]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	813b      	strh	r3, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f960 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e9c:	d103      	bne.n	8005ea6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ea4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e05f      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005eb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	6a3a      	ldr	r2, [r7, #32]
 8005ebe:	492d      	ldr	r1, [pc, #180]	@ (8005f74 <I2C_RequestMemoryWrite+0x128>)
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f9bb 	bl	800623c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e04c      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee8:	6a39      	ldr	r1, [r7, #32]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fa46 	bl	800637c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00d      	beq.n	8005f12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d107      	bne.n	8005f0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e02b      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d105      	bne.n	8005f24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	611a      	str	r2, [r3, #16]
 8005f22:	e021      	b.n	8005f68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f24:	893b      	ldrh	r3, [r7, #8]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f34:	6a39      	ldr	r1, [r7, #32]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fa20 	bl	800637c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d107      	bne.n	8005f5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e005      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f5e:	893b      	ldrh	r3, [r7, #8]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	00010002 	.word	0x00010002

08005f78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	817b      	strh	r3, [r7, #10]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	813b      	strh	r3, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f8c2 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00d      	beq.n	8005fe6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd8:	d103      	bne.n	8005fe2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e0aa      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fe6:	897b      	ldrh	r3, [r7, #10]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ff4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	6a3a      	ldr	r2, [r7, #32]
 8005ffa:	4952      	ldr	r1, [pc, #328]	@ (8006144 <I2C_RequestMemoryRead+0x1cc>)
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f91d 	bl	800623c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e097      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006024:	6a39      	ldr	r1, [r7, #32]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f9a8 	bl	800637c <I2C_WaitOnTXEFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00d      	beq.n	800604e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006036:	2b04      	cmp	r3, #4
 8006038:	d107      	bne.n	800604a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006048:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e076      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d105      	bne.n	8006060 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006054:	893b      	ldrh	r3, [r7, #8]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	611a      	str	r2, [r3, #16]
 800605e:	e021      	b.n	80060a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006060:	893b      	ldrh	r3, [r7, #8]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	b29b      	uxth	r3, r3
 8006066:	b2da      	uxtb	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800606e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006070:	6a39      	ldr	r1, [r7, #32]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f982 	bl	800637c <I2C_WaitOnTXEFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	2b04      	cmp	r3, #4
 8006084:	d107      	bne.n	8006096 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006094:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e050      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800609a:	893b      	ldrh	r3, [r7, #8]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a6:	6a39      	ldr	r1, [r7, #32]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f967 	bl	800637c <I2C_WaitOnTXEFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00d      	beq.n	80060d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d107      	bne.n	80060cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e035      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f82b 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00d      	beq.n	8006114 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006106:	d103      	bne.n	8006110 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800610e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e013      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006114:	897b      	ldrh	r3, [r7, #10]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	6a3a      	ldr	r2, [r7, #32]
 8006128:	4906      	ldr	r1, [pc, #24]	@ (8006144 <I2C_RequestMemoryRead+0x1cc>)
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f886 	bl	800623c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	00010002 	.word	0x00010002

08006148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006158:	e048      	b.n	80061ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d044      	beq.n	80061ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006162:	f7fc f95b 	bl	800241c <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d302      	bcc.n	8006178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d139      	bne.n	80061ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	0c1b      	lsrs	r3, r3, #16
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b01      	cmp	r3, #1
 8006180:	d10d      	bne.n	800619e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	43da      	mvns	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	4013      	ands	r3, r2
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	bf0c      	ite	eq
 8006194:	2301      	moveq	r3, #1
 8006196:	2300      	movne	r3, #0
 8006198:	b2db      	uxtb	r3, r3
 800619a:	461a      	mov	r2, r3
 800619c:	e00c      	b.n	80061b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	43da      	mvns	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4013      	ands	r3, r2
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bf0c      	ite	eq
 80061b0:	2301      	moveq	r3, #1
 80061b2:	2300      	movne	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d116      	bne.n	80061ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e023      	b.n	8006234 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	0c1b      	lsrs	r3, r3, #16
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d10d      	bne.n	8006212 <I2C_WaitOnFlagUntilTimeout+0xca>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	43da      	mvns	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4013      	ands	r3, r2
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	bf0c      	ite	eq
 8006208:	2301      	moveq	r3, #1
 800620a:	2300      	movne	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	e00c      	b.n	800622c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	43da      	mvns	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4013      	ands	r3, r2
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	429a      	cmp	r2, r3
 8006230:	d093      	beq.n	800615a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800624a:	e071      	b.n	8006330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800625a:	d123      	bne.n	80062a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800626a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006274:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006290:	f043 0204 	orr.w	r2, r3, #4
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e067      	b.n	8006374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062aa:	d041      	beq.n	8006330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ac:	f7fc f8b6 	bl	800241c <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d302      	bcc.n	80062c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d136      	bne.n	8006330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	0c1b      	lsrs	r3, r3, #16
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d10c      	bne.n	80062e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	43da      	mvns	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4013      	ands	r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bf14      	ite	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	2300      	moveq	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	e00b      	b.n	80062fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	43da      	mvns	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4013      	ands	r3, r2
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bf14      	ite	ne
 80062f8:	2301      	movne	r3, #1
 80062fa:	2300      	moveq	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631c:	f043 0220 	orr.w	r2, r3, #32
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e021      	b.n	8006374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	0c1b      	lsrs	r3, r3, #16
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	d10c      	bne.n	8006354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	43da      	mvns	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4013      	ands	r3, r2
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	bf14      	ite	ne
 800634c:	2301      	movne	r3, #1
 800634e:	2300      	moveq	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	e00b      	b.n	800636c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	43da      	mvns	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4013      	ands	r3, r2
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	bf14      	ite	ne
 8006366:	2301      	movne	r3, #1
 8006368:	2300      	moveq	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	f47f af6d 	bne.w	800624c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006388:	e034      	b.n	80063f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f8e3 	bl	8006556 <I2C_IsAcknowledgeFailed>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e034      	b.n	8006404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d028      	beq.n	80063f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a2:	f7fc f83b 	bl	800241c <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d302      	bcc.n	80063b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11d      	bne.n	80063f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c2:	2b80      	cmp	r3, #128	@ 0x80
 80063c4:	d016      	beq.n	80063f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e007      	b.n	8006404 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fe:	2b80      	cmp	r3, #128	@ 0x80
 8006400:	d1c3      	bne.n	800638a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006418:	e034      	b.n	8006484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f89b 	bl	8006556 <I2C_IsAcknowledgeFailed>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e034      	b.n	8006494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d028      	beq.n	8006484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006432:	f7fb fff3 	bl	800241c <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	429a      	cmp	r2, r3
 8006440:	d302      	bcc.n	8006448 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11d      	bne.n	8006484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b04      	cmp	r3, #4
 8006454:	d016      	beq.n	8006484 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006470:	f043 0220 	orr.w	r2, r3, #32
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e007      	b.n	8006494 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0304 	and.w	r3, r3, #4
 800648e:	2b04      	cmp	r3, #4
 8006490:	d1c3      	bne.n	800641a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064a8:	e049      	b.n	800653e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d119      	bne.n	80064ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0210 	mvn.w	r2, #16
 80064c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e030      	b.n	800654e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ec:	f7fb ff96 	bl	800241c <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d302      	bcc.n	8006502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d11d      	bne.n	800653e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650c:	2b40      	cmp	r3, #64	@ 0x40
 800650e:	d016      	beq.n	800653e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	f043 0220 	orr.w	r2, r3, #32
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e007      	b.n	800654e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006548:	2b40      	cmp	r3, #64	@ 0x40
 800654a:	d1ae      	bne.n	80064aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800656c:	d11b      	bne.n	80065a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006576:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006592:	f043 0204 	orr.w	r2, r3, #4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d129      	bne.n	800661e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2224      	movs	r2, #36	@ 0x24
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0210 	bic.w	r2, r2, #16
 80065f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b20      	cmp	r3, #32
 8006644:	d12a      	bne.n	800669c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2224      	movs	r2, #36	@ 0x24
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0201 	bic.w	r2, r2, #1
 800665c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006666:	89fb      	ldrh	r3, [r7, #14]
 8006668:	f023 030f 	bic.w	r3, r3, #15
 800666c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	b29a      	uxth	r2, r3
 8006672:	89fb      	ldrh	r3, [r7, #14]
 8006674:	4313      	orrs	r3, r2
 8006676:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	89fa      	ldrh	r2, [r7, #14]
 800667e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	e000      	b.n	800669e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800669c:	2302      	movs	r3, #2
  }
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
	...

080066ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e0bf      	b.n	800683e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fb f810 	bl	80016f8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80066ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6999      	ldr	r1, [r3, #24]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006704:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6899      	ldr	r1, [r3, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4b4a      	ldr	r3, [pc, #296]	@ (8006848 <HAL_LTDC_Init+0x19c>)
 8006720:	400b      	ands	r3, r1
 8006722:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6899      	ldr	r1, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68d9      	ldr	r1, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4b3e      	ldr	r3, [pc, #248]	@ (8006848 <HAL_LTDC_Init+0x19c>)
 800674e:	400b      	ands	r3, r1
 8006750:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68d9      	ldr	r1, [r3, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6919      	ldr	r1, [r3, #16]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4b33      	ldr	r3, [pc, #204]	@ (8006848 <HAL_LTDC_Init+0x19c>)
 800677c:	400b      	ands	r3, r1
 800677e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	041b      	lsls	r3, r3, #16
 8006786:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6919      	ldr	r1, [r3, #16]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6959      	ldr	r1, [r3, #20]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4b27      	ldr	r3, [pc, #156]	@ (8006848 <HAL_LTDC_Init+0x19c>)
 80067aa:	400b      	ands	r3, r1
 80067ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6959      	ldr	r1, [r3, #20]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80067dc:	041b      	lsls	r3, r3, #16
 80067de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80067ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0206 	orr.w	r2, r2, #6
 800681a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	f000f800 	.word	0xf000f800

0800684c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006862:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d023      	beq.n	80068b6 <HAL_LTDC_IRQHandler+0x6a>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01e      	beq.n	80068b6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0204 	bic.w	r2, r2, #4
 8006886:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2204      	movs	r2, #4
 800688e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006896:	f043 0201 	orr.w	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2204      	movs	r2, #4
 80068a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f86f 	bl	8006994 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d023      	beq.n	8006908 <HAL_LTDC_IRQHandler+0xbc>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01e      	beq.n	8006908 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0202 	bic.w	r2, r2, #2
 80068d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2202      	movs	r2, #2
 80068e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068e8:	f043 0202 	orr.w	r2, r3, #2
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2204      	movs	r2, #4
 80068f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f846 	bl	8006994 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01b      	beq.n	800694a <HAL_LTDC_IRQHandler+0xfe>
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	d016      	beq.n	800694a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0201 	bic.w	r2, r2, #1
 800692a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2201      	movs	r2, #1
 8006932:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f82f 	bl	80069a8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01b      	beq.n	800698c <HAL_LTDC_IRQHandler+0x140>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d016      	beq.n	800698c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0208 	bic.w	r2, r2, #8
 800696c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2208      	movs	r2, #8
 8006974:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f818 	bl	80069bc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069d0:	b5b0      	push	{r4, r5, r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_LTDC_ConfigLayer+0x1a>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e02c      	b.n	8006a44 <HAL_LTDC_ConfigLayer+0x74>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2202      	movs	r2, #2
 80069f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2134      	movs	r1, #52	@ 0x34
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4614      	mov	r4, r2
 8006a0e:	461d      	mov	r5, r3
 8006a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f811 	bl	8006a4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bdb0      	pop	{r4, r5, r7, pc}

08006a4c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b089      	sub	sp, #36	@ 0x24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	0c1b      	lsrs	r3, r3, #16
 8006a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a68:	4413      	add	r3, r2
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	01db      	lsls	r3, r3, #7
 8006a78:	4413      	add	r3, r2
 8006a7a:	3384      	adds	r3, #132	@ 0x84
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	4611      	mov	r1, r2
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	01d2      	lsls	r2, r2, #7
 8006a88:	440a      	add	r2, r1
 8006a8a:	3284      	adds	r2, #132	@ 0x84
 8006a8c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006a90:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	0c1b      	lsrs	r3, r3, #16
 8006a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006aa2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006aa4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	01db      	lsls	r3, r3, #7
 8006ab0:	440b      	add	r3, r1
 8006ab2:	3384      	adds	r3, #132	@ 0x84
 8006ab4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006aba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aca:	4413      	add	r3, r2
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	01db      	lsls	r3, r3, #7
 8006ada:	4413      	add	r3, r2
 8006adc:	3384      	adds	r3, #132	@ 0x84
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	01d2      	lsls	r2, r2, #7
 8006aea:	440a      	add	r2, r1
 8006aec:	3284      	adds	r2, #132	@ 0x84
 8006aee:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006af2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b02:	4413      	add	r3, r2
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	01db      	lsls	r3, r3, #7
 8006b10:	440b      	add	r3, r1
 8006b12:	3384      	adds	r3, #132	@ 0x84
 8006b14:	4619      	mov	r1, r3
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	01db      	lsls	r3, r3, #7
 8006b26:	4413      	add	r3, r2
 8006b28:	3384      	adds	r3, #132	@ 0x84
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	4611      	mov	r1, r2
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	01d2      	lsls	r2, r2, #7
 8006b36:	440a      	add	r2, r1
 8006b38:	3284      	adds	r2, #132	@ 0x84
 8006b3a:	f023 0307 	bic.w	r3, r3, #7
 8006b3e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	01db      	lsls	r3, r3, #7
 8006b4a:	4413      	add	r3, r2
 8006b4c:	3384      	adds	r3, #132	@ 0x84
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006b66:	041b      	lsls	r3, r3, #16
 8006b68:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	061b      	lsls	r3, r3, #24
 8006b70:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	01db      	lsls	r3, r3, #7
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3384      	adds	r3, #132	@ 0x84
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	01db      	lsls	r3, r3, #7
 8006b8c:	4413      	add	r3, r2
 8006b8e:	3384      	adds	r3, #132	@ 0x84
 8006b90:	461a      	mov	r2, r3
 8006b92:	2300      	movs	r3, #0
 8006b94:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4619      	mov	r1, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	01db      	lsls	r3, r3, #7
 8006bb0:	440b      	add	r3, r1
 8006bb2:	3384      	adds	r3, #132	@ 0x84
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	01db      	lsls	r3, r3, #7
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3384      	adds	r3, #132	@ 0x84
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	01d2      	lsls	r2, r2, #7
 8006bd6:	440a      	add	r2, r1
 8006bd8:	3284      	adds	r2, #132	@ 0x84
 8006bda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006bde:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	461a      	mov	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	01db      	lsls	r3, r3, #7
 8006bea:	4413      	add	r3, r2
 8006bec:	3384      	adds	r3, #132	@ 0x84
 8006bee:	461a      	mov	r2, r3
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	01db      	lsls	r3, r3, #7
 8006c00:	4413      	add	r3, r2
 8006c02:	3384      	adds	r3, #132	@ 0x84
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	6812      	ldr	r2, [r2, #0]
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	01d2      	lsls	r2, r2, #7
 8006c10:	440a      	add	r2, r1
 8006c12:	3284      	adds	r2, #132	@ 0x84
 8006c14:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006c18:	f023 0307 	bic.w	r3, r3, #7
 8006c1c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	69da      	ldr	r2, [r3, #28]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	68f9      	ldr	r1, [r7, #12]
 8006c28:	6809      	ldr	r1, [r1, #0]
 8006c2a:	4608      	mov	r0, r1
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	01c9      	lsls	r1, r1, #7
 8006c30:	4401      	add	r1, r0
 8006c32:	3184      	adds	r1, #132	@ 0x84
 8006c34:	4313      	orrs	r3, r2
 8006c36:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	01db      	lsls	r3, r3, #7
 8006c42:	4413      	add	r3, r2
 8006c44:	3384      	adds	r3, #132	@ 0x84
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	01db      	lsls	r3, r3, #7
 8006c52:	4413      	add	r3, r2
 8006c54:	3384      	adds	r3, #132	@ 0x84
 8006c56:	461a      	mov	r2, r3
 8006c58:	2300      	movs	r3, #0
 8006c5a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	01db      	lsls	r3, r3, #7
 8006c66:	4413      	add	r3, r2
 8006c68:	3384      	adds	r3, #132	@ 0x84
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c70:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006c7a:	2304      	movs	r3, #4
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	e01b      	b.n	8006cb8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d102      	bne.n	8006c8e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	e014      	b.n	8006cb8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d00b      	beq.n	8006cae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d007      	beq.n	8006cae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d003      	beq.n	8006cae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006caa:	2b07      	cmp	r3, #7
 8006cac:	d102      	bne.n	8006cb4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	e001      	b.n	8006cb8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	01db      	lsls	r3, r3, #7
 8006cc2:	4413      	add	r3, r2
 8006cc4:	3384      	adds	r3, #132	@ 0x84
 8006cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	6812      	ldr	r2, [r2, #0]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	01d2      	lsls	r2, r2, #7
 8006cd2:	440a      	add	r2, r1
 8006cd4:	3284      	adds	r2, #132	@ 0x84
 8006cd6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006cda:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
 8006ce6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	6859      	ldr	r1, [r3, #4]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	1acb      	subs	r3, r1, r3
 8006cf2:	69f9      	ldr	r1, [r7, #28]
 8006cf4:	fb01 f303 	mul.w	r3, r1, r3
 8006cf8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	6809      	ldr	r1, [r1, #0]
 8006cfe:	4608      	mov	r0, r1
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	01c9      	lsls	r1, r1, #7
 8006d04:	4401      	add	r1, r0
 8006d06:	3184      	adds	r1, #132	@ 0x84
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	01db      	lsls	r3, r3, #7
 8006d16:	4413      	add	r3, r2
 8006d18:	3384      	adds	r3, #132	@ 0x84
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	4611      	mov	r1, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	01d2      	lsls	r2, r2, #7
 8006d26:	440a      	add	r2, r1
 8006d28:	3284      	adds	r2, #132	@ 0x84
 8006d2a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d2e:	f023 0307 	bic.w	r3, r3, #7
 8006d32:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	01db      	lsls	r3, r3, #7
 8006d3e:	4413      	add	r3, r2
 8006d40:	3384      	adds	r3, #132	@ 0x84
 8006d42:	461a      	mov	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	01db      	lsls	r3, r3, #7
 8006d54:	4413      	add	r3, r2
 8006d56:	3384      	adds	r3, #132	@ 0x84
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	01d2      	lsls	r2, r2, #7
 8006d64:	440a      	add	r2, r1
 8006d66:	3284      	adds	r2, #132	@ 0x84
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	6013      	str	r3, [r2, #0]
}
 8006d6e:	bf00      	nop
 8006d70:	3724      	adds	r7, #36	@ 0x24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e267      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d075      	beq.n	8006e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d9a:	4b88      	ldr	r3, [pc, #544]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 030c 	and.w	r3, r3, #12
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d00c      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006da6:	4b85      	ldr	r3, [pc, #532]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dae:	2b08      	cmp	r3, #8
 8006db0:	d112      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006db2:	4b82      	ldr	r3, [pc, #520]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dbe:	d10b      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d05b      	beq.n	8006e84 <HAL_RCC_OscConfig+0x108>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d157      	bne.n	8006e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e242      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de0:	d106      	bne.n	8006df0 <HAL_RCC_OscConfig+0x74>
 8006de2:	4b76      	ldr	r3, [pc, #472]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a75      	ldr	r2, [pc, #468]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	e01d      	b.n	8006e2c <HAL_RCC_OscConfig+0xb0>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006df8:	d10c      	bne.n	8006e14 <HAL_RCC_OscConfig+0x98>
 8006dfa:	4b70      	ldr	r3, [pc, #448]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a6f      	ldr	r2, [pc, #444]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	4b6d      	ldr	r3, [pc, #436]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a6c      	ldr	r2, [pc, #432]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	e00b      	b.n	8006e2c <HAL_RCC_OscConfig+0xb0>
 8006e14:	4b69      	ldr	r3, [pc, #420]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a68      	ldr	r2, [pc, #416]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	4b66      	ldr	r3, [pc, #408]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a65      	ldr	r2, [pc, #404]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d013      	beq.n	8006e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e34:	f7fb faf2 	bl	800241c <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3a:	e008      	b.n	8006e4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e3c:	f7fb faee 	bl	800241c <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b64      	cmp	r3, #100	@ 0x64
 8006e48:	d901      	bls.n	8006e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e207      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f0      	beq.n	8006e3c <HAL_RCC_OscConfig+0xc0>
 8006e5a:	e014      	b.n	8006e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e5c:	f7fb fade 	bl	800241c <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e64:	f7fb fada 	bl	800241c <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b64      	cmp	r3, #100	@ 0x64
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e1f3      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e76:	4b51      	ldr	r3, [pc, #324]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1f0      	bne.n	8006e64 <HAL_RCC_OscConfig+0xe8>
 8006e82:	e000      	b.n	8006e86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d063      	beq.n	8006f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e92:	4b4a      	ldr	r3, [pc, #296]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00b      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e9e:	4b47      	ldr	r3, [pc, #284]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d11c      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eaa:	4b44      	ldr	r3, [pc, #272]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d116      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eb6:	4b41      	ldr	r3, [pc, #260]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <HAL_RCC_OscConfig+0x152>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d001      	beq.n	8006ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e1c7      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ece:	4b3b      	ldr	r3, [pc, #236]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4937      	ldr	r1, [pc, #220]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ee2:	e03a      	b.n	8006f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d020      	beq.n	8006f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006eec:	4b34      	ldr	r3, [pc, #208]	@ (8006fc0 <HAL_RCC_OscConfig+0x244>)
 8006eee:	2201      	movs	r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef2:	f7fb fa93 	bl	800241c <HAL_GetTick>
 8006ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef8:	e008      	b.n	8006f0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006efa:	f7fb fa8f 	bl	800241c <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e1a8      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0f0      	beq.n	8006efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f18:	4b28      	ldr	r3, [pc, #160]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	4925      	ldr	r1, [pc, #148]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	600b      	str	r3, [r1, #0]
 8006f2c:	e015      	b.n	8006f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f2e:	4b24      	ldr	r3, [pc, #144]	@ (8006fc0 <HAL_RCC_OscConfig+0x244>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f34:	f7fb fa72 	bl	800241c <HAL_GetTick>
 8006f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f3c:	f7fb fa6e 	bl	800241c <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e187      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f0      	bne.n	8006f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0308 	and.w	r3, r3, #8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d036      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d016      	beq.n	8006f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f6e:	4b15      	ldr	r3, [pc, #84]	@ (8006fc4 <HAL_RCC_OscConfig+0x248>)
 8006f70:	2201      	movs	r2, #1
 8006f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f74:	f7fb fa52 	bl	800241c <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f7c:	f7fb fa4e 	bl	800241c <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e167      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006fbc <HAL_RCC_OscConfig+0x240>)
 8006f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0f0      	beq.n	8006f7c <HAL_RCC_OscConfig+0x200>
 8006f9a:	e01b      	b.n	8006fd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f9c:	4b09      	ldr	r3, [pc, #36]	@ (8006fc4 <HAL_RCC_OscConfig+0x248>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fa2:	f7fb fa3b 	bl	800241c <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fa8:	e00e      	b.n	8006fc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006faa:	f7fb fa37 	bl	800241c <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d907      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e150      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	42470000 	.word	0x42470000
 8006fc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fc8:	4b88      	ldr	r3, [pc, #544]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8006fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1ea      	bne.n	8006faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 8097 	beq.w	8007110 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fe6:	4b81      	ldr	r3, [pc, #516]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10f      	bne.n	8007012 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60bb      	str	r3, [r7, #8]
 8006ff6:	4b7d      	ldr	r3, [pc, #500]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffa:	4a7c      	ldr	r2, [pc, #496]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8006ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007000:	6413      	str	r3, [r2, #64]	@ 0x40
 8007002:	4b7a      	ldr	r3, [pc, #488]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8007004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800700a:	60bb      	str	r3, [r7, #8]
 800700c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800700e:	2301      	movs	r3, #1
 8007010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007012:	4b77      	ldr	r3, [pc, #476]	@ (80071f0 <HAL_RCC_OscConfig+0x474>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800701a:	2b00      	cmp	r3, #0
 800701c:	d118      	bne.n	8007050 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800701e:	4b74      	ldr	r3, [pc, #464]	@ (80071f0 <HAL_RCC_OscConfig+0x474>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a73      	ldr	r2, [pc, #460]	@ (80071f0 <HAL_RCC_OscConfig+0x474>)
 8007024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800702a:	f7fb f9f7 	bl	800241c <HAL_GetTick>
 800702e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007030:	e008      	b.n	8007044 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007032:	f7fb f9f3 	bl	800241c <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d901      	bls.n	8007044 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e10c      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007044:	4b6a      	ldr	r3, [pc, #424]	@ (80071f0 <HAL_RCC_OscConfig+0x474>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0f0      	beq.n	8007032 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d106      	bne.n	8007066 <HAL_RCC_OscConfig+0x2ea>
 8007058:	4b64      	ldr	r3, [pc, #400]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705c:	4a63      	ldr	r2, [pc, #396]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	6713      	str	r3, [r2, #112]	@ 0x70
 8007064:	e01c      	b.n	80070a0 <HAL_RCC_OscConfig+0x324>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	2b05      	cmp	r3, #5
 800706c:	d10c      	bne.n	8007088 <HAL_RCC_OscConfig+0x30c>
 800706e:	4b5f      	ldr	r3, [pc, #380]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8007070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007072:	4a5e      	ldr	r2, [pc, #376]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8007074:	f043 0304 	orr.w	r3, r3, #4
 8007078:	6713      	str	r3, [r2, #112]	@ 0x70
 800707a:	4b5c      	ldr	r3, [pc, #368]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707e:	4a5b      	ldr	r2, [pc, #364]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	6713      	str	r3, [r2, #112]	@ 0x70
 8007086:	e00b      	b.n	80070a0 <HAL_RCC_OscConfig+0x324>
 8007088:	4b58      	ldr	r3, [pc, #352]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 800708a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708c:	4a57      	ldr	r2, [pc, #348]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 800708e:	f023 0301 	bic.w	r3, r3, #1
 8007092:	6713      	str	r3, [r2, #112]	@ 0x70
 8007094:	4b55      	ldr	r3, [pc, #340]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8007096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007098:	4a54      	ldr	r2, [pc, #336]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 800709a:	f023 0304 	bic.w	r3, r3, #4
 800709e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d015      	beq.n	80070d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a8:	f7fb f9b8 	bl	800241c <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ae:	e00a      	b.n	80070c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070b0:	f7fb f9b4 	bl	800241c <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070be:	4293      	cmp	r3, r2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e0cb      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c6:	4b49      	ldr	r3, [pc, #292]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 80070c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0ee      	beq.n	80070b0 <HAL_RCC_OscConfig+0x334>
 80070d2:	e014      	b.n	80070fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070d4:	f7fb f9a2 	bl	800241c <HAL_GetTick>
 80070d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070da:	e00a      	b.n	80070f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070dc:	f7fb f99e 	bl	800241c <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d901      	bls.n	80070f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e0b5      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070f2:	4b3e      	ldr	r3, [pc, #248]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 80070f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1ee      	bne.n	80070dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d105      	bne.n	8007110 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007104:	4b39      	ldr	r3, [pc, #228]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8007106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007108:	4a38      	ldr	r2, [pc, #224]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 800710a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800710e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 80a1 	beq.w	800725c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800711a:	4b34      	ldr	r3, [pc, #208]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
 8007122:	2b08      	cmp	r3, #8
 8007124:	d05c      	beq.n	80071e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	2b02      	cmp	r3, #2
 800712c:	d141      	bne.n	80071b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800712e:	4b31      	ldr	r3, [pc, #196]	@ (80071f4 <HAL_RCC_OscConfig+0x478>)
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007134:	f7fb f972 	bl	800241c <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800713c:	f7fb f96e 	bl	800241c <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e087      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714e:	4b27      	ldr	r3, [pc, #156]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f0      	bne.n	800713c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69da      	ldr	r2, [r3, #28]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007168:	019b      	lsls	r3, r3, #6
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	3b01      	subs	r3, #1
 8007174:	041b      	lsls	r3, r3, #16
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	061b      	lsls	r3, r3, #24
 800717e:	491b      	ldr	r1, [pc, #108]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 8007180:	4313      	orrs	r3, r2
 8007182:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007184:	4b1b      	ldr	r3, [pc, #108]	@ (80071f4 <HAL_RCC_OscConfig+0x478>)
 8007186:	2201      	movs	r2, #1
 8007188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718a:	f7fb f947 	bl	800241c <HAL_GetTick>
 800718e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007192:	f7fb f943 	bl	800241c <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e05c      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a4:	4b11      	ldr	r3, [pc, #68]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0f0      	beq.n	8007192 <HAL_RCC_OscConfig+0x416>
 80071b0:	e054      	b.n	800725c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071b2:	4b10      	ldr	r3, [pc, #64]	@ (80071f4 <HAL_RCC_OscConfig+0x478>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b8:	f7fb f930 	bl	800241c <HAL_GetTick>
 80071bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071c0:	f7fb f92c 	bl	800241c <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e045      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071d2:	4b06      	ldr	r3, [pc, #24]	@ (80071ec <HAL_RCC_OscConfig+0x470>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1f0      	bne.n	80071c0 <HAL_RCC_OscConfig+0x444>
 80071de:	e03d      	b.n	800725c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d107      	bne.n	80071f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e038      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
 80071ec:	40023800 	.word	0x40023800
 80071f0:	40007000 	.word	0x40007000
 80071f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007268 <HAL_RCC_OscConfig+0x4ec>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d028      	beq.n	8007258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007210:	429a      	cmp	r2, r3
 8007212:	d121      	bne.n	8007258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800721e:	429a      	cmp	r2, r3
 8007220:	d11a      	bne.n	8007258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007228:	4013      	ands	r3, r2
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800722e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007230:	4293      	cmp	r3, r2
 8007232:	d111      	bne.n	8007258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723e:	085b      	lsrs	r3, r3, #1
 8007240:	3b01      	subs	r3, #1
 8007242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007244:	429a      	cmp	r2, r3
 8007246:	d107      	bne.n	8007258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007254:	429a      	cmp	r2, r3
 8007256:	d001      	beq.n	800725c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	40023800 	.word	0x40023800

0800726c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0cc      	b.n	800741a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007280:	4b68      	ldr	r3, [pc, #416]	@ (8007424 <HAL_RCC_ClockConfig+0x1b8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 030f 	and.w	r3, r3, #15
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	429a      	cmp	r2, r3
 800728c:	d90c      	bls.n	80072a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800728e:	4b65      	ldr	r3, [pc, #404]	@ (8007424 <HAL_RCC_ClockConfig+0x1b8>)
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007296:	4b63      	ldr	r3, [pc, #396]	@ (8007424 <HAL_RCC_ClockConfig+0x1b8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d001      	beq.n	80072a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e0b8      	b.n	800741a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d020      	beq.n	80072f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072c0:	4b59      	ldr	r3, [pc, #356]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	4a58      	ldr	r2, [pc, #352]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80072c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80072ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0308 	and.w	r3, r3, #8
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072d8:	4b53      	ldr	r3, [pc, #332]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	4a52      	ldr	r2, [pc, #328]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80072de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80072e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072e4:	4b50      	ldr	r3, [pc, #320]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	494d      	ldr	r1, [pc, #308]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d044      	beq.n	800738c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d107      	bne.n	800731a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800730a:	4b47      	ldr	r3, [pc, #284]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d119      	bne.n	800734a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e07f      	b.n	800741a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2b02      	cmp	r3, #2
 8007320:	d003      	beq.n	800732a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007326:	2b03      	cmp	r3, #3
 8007328:	d107      	bne.n	800733a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800732a:	4b3f      	ldr	r3, [pc, #252]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e06f      	b.n	800741a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800733a:	4b3b      	ldr	r3, [pc, #236]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e067      	b.n	800741a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800734a:	4b37      	ldr	r3, [pc, #220]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f023 0203 	bic.w	r2, r3, #3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	4934      	ldr	r1, [pc, #208]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 8007358:	4313      	orrs	r3, r2
 800735a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800735c:	f7fb f85e 	bl	800241c <HAL_GetTick>
 8007360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007362:	e00a      	b.n	800737a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007364:	f7fb f85a 	bl	800241c <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007372:	4293      	cmp	r3, r2
 8007374:	d901      	bls.n	800737a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e04f      	b.n	800741a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800737a:	4b2b      	ldr	r3, [pc, #172]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f003 020c 	and.w	r2, r3, #12
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	429a      	cmp	r2, r3
 800738a:	d1eb      	bne.n	8007364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800738c:	4b25      	ldr	r3, [pc, #148]	@ (8007424 <HAL_RCC_ClockConfig+0x1b8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d20c      	bcs.n	80073b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800739a:	4b22      	ldr	r3, [pc, #136]	@ (8007424 <HAL_RCC_ClockConfig+0x1b8>)
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073a2:	4b20      	ldr	r3, [pc, #128]	@ (8007424 <HAL_RCC_ClockConfig+0x1b8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d001      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e032      	b.n	800741a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073c0:	4b19      	ldr	r3, [pc, #100]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	4916      	ldr	r1, [pc, #88]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d009      	beq.n	80073f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073de:	4b12      	ldr	r3, [pc, #72]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	490e      	ldr	r1, [pc, #56]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073f2:	f000 f821 	bl	8007438 <HAL_RCC_GetSysClockFreq>
 80073f6:	4602      	mov	r2, r0
 80073f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007428 <HAL_RCC_ClockConfig+0x1bc>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	091b      	lsrs	r3, r3, #4
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	490a      	ldr	r1, [pc, #40]	@ (800742c <HAL_RCC_ClockConfig+0x1c0>)
 8007404:	5ccb      	ldrb	r3, [r1, r3]
 8007406:	fa22 f303 	lsr.w	r3, r2, r3
 800740a:	4a09      	ldr	r2, [pc, #36]	@ (8007430 <HAL_RCC_ClockConfig+0x1c4>)
 800740c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800740e:	4b09      	ldr	r3, [pc, #36]	@ (8007434 <HAL_RCC_ClockConfig+0x1c8>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f7fa fc24 	bl	8001c60 <HAL_InitTick>

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	40023c00 	.word	0x40023c00
 8007428:	40023800 	.word	0x40023800
 800742c:	08011538 	.word	0x08011538
 8007430:	20000008 	.word	0x20000008
 8007434:	2000000c 	.word	0x2000000c

08007438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800743c:	b094      	sub	sp, #80	@ 0x50
 800743e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	647b      	str	r3, [r7, #68]	@ 0x44
 8007444:	2300      	movs	r3, #0
 8007446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007448:	2300      	movs	r3, #0
 800744a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007450:	4b79      	ldr	r3, [pc, #484]	@ (8007638 <HAL_RCC_GetSysClockFreq+0x200>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 030c 	and.w	r3, r3, #12
 8007458:	2b08      	cmp	r3, #8
 800745a:	d00d      	beq.n	8007478 <HAL_RCC_GetSysClockFreq+0x40>
 800745c:	2b08      	cmp	r3, #8
 800745e:	f200 80e1 	bhi.w	8007624 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_RCC_GetSysClockFreq+0x34>
 8007466:	2b04      	cmp	r3, #4
 8007468:	d003      	beq.n	8007472 <HAL_RCC_GetSysClockFreq+0x3a>
 800746a:	e0db      	b.n	8007624 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800746c:	4b73      	ldr	r3, [pc, #460]	@ (800763c <HAL_RCC_GetSysClockFreq+0x204>)
 800746e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007470:	e0db      	b.n	800762a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007472:	4b73      	ldr	r3, [pc, #460]	@ (8007640 <HAL_RCC_GetSysClockFreq+0x208>)
 8007474:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007476:	e0d8      	b.n	800762a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007478:	4b6f      	ldr	r3, [pc, #444]	@ (8007638 <HAL_RCC_GetSysClockFreq+0x200>)
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007480:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007482:	4b6d      	ldr	r3, [pc, #436]	@ (8007638 <HAL_RCC_GetSysClockFreq+0x200>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d063      	beq.n	8007556 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800748e:	4b6a      	ldr	r3, [pc, #424]	@ (8007638 <HAL_RCC_GetSysClockFreq+0x200>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	099b      	lsrs	r3, r3, #6
 8007494:	2200      	movs	r2, #0
 8007496:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007498:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800749a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074a2:	2300      	movs	r3, #0
 80074a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80074aa:	4622      	mov	r2, r4
 80074ac:	462b      	mov	r3, r5
 80074ae:	f04f 0000 	mov.w	r0, #0
 80074b2:	f04f 0100 	mov.w	r1, #0
 80074b6:	0159      	lsls	r1, r3, #5
 80074b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074bc:	0150      	lsls	r0, r2, #5
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4621      	mov	r1, r4
 80074c4:	1a51      	subs	r1, r2, r1
 80074c6:	6139      	str	r1, [r7, #16]
 80074c8:	4629      	mov	r1, r5
 80074ca:	eb63 0301 	sbc.w	r3, r3, r1
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074dc:	4659      	mov	r1, fp
 80074de:	018b      	lsls	r3, r1, #6
 80074e0:	4651      	mov	r1, sl
 80074e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074e6:	4651      	mov	r1, sl
 80074e8:	018a      	lsls	r2, r1, #6
 80074ea:	4651      	mov	r1, sl
 80074ec:	ebb2 0801 	subs.w	r8, r2, r1
 80074f0:	4659      	mov	r1, fp
 80074f2:	eb63 0901 	sbc.w	r9, r3, r1
 80074f6:	f04f 0200 	mov.w	r2, #0
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800750a:	4690      	mov	r8, r2
 800750c:	4699      	mov	r9, r3
 800750e:	4623      	mov	r3, r4
 8007510:	eb18 0303 	adds.w	r3, r8, r3
 8007514:	60bb      	str	r3, [r7, #8]
 8007516:	462b      	mov	r3, r5
 8007518:	eb49 0303 	adc.w	r3, r9, r3
 800751c:	60fb      	str	r3, [r7, #12]
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800752a:	4629      	mov	r1, r5
 800752c:	024b      	lsls	r3, r1, #9
 800752e:	4621      	mov	r1, r4
 8007530:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007534:	4621      	mov	r1, r4
 8007536:	024a      	lsls	r2, r1, #9
 8007538:	4610      	mov	r0, r2
 800753a:	4619      	mov	r1, r3
 800753c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800753e:	2200      	movs	r2, #0
 8007540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007544:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007548:	f7f8 feaa 	bl	80002a0 <__aeabi_uldivmod>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4613      	mov	r3, r2
 8007552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007554:	e058      	b.n	8007608 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007556:	4b38      	ldr	r3, [pc, #224]	@ (8007638 <HAL_RCC_GetSysClockFreq+0x200>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	099b      	lsrs	r3, r3, #6
 800755c:	2200      	movs	r2, #0
 800755e:	4618      	mov	r0, r3
 8007560:	4611      	mov	r1, r2
 8007562:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007566:	623b      	str	r3, [r7, #32]
 8007568:	2300      	movs	r3, #0
 800756a:	627b      	str	r3, [r7, #36]	@ 0x24
 800756c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007570:	4642      	mov	r2, r8
 8007572:	464b      	mov	r3, r9
 8007574:	f04f 0000 	mov.w	r0, #0
 8007578:	f04f 0100 	mov.w	r1, #0
 800757c:	0159      	lsls	r1, r3, #5
 800757e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007582:	0150      	lsls	r0, r2, #5
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4641      	mov	r1, r8
 800758a:	ebb2 0a01 	subs.w	sl, r2, r1
 800758e:	4649      	mov	r1, r9
 8007590:	eb63 0b01 	sbc.w	fp, r3, r1
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075a8:	ebb2 040a 	subs.w	r4, r2, sl
 80075ac:	eb63 050b 	sbc.w	r5, r3, fp
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	00eb      	lsls	r3, r5, #3
 80075ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075be:	00e2      	lsls	r2, r4, #3
 80075c0:	4614      	mov	r4, r2
 80075c2:	461d      	mov	r5, r3
 80075c4:	4643      	mov	r3, r8
 80075c6:	18e3      	adds	r3, r4, r3
 80075c8:	603b      	str	r3, [r7, #0]
 80075ca:	464b      	mov	r3, r9
 80075cc:	eb45 0303 	adc.w	r3, r5, r3
 80075d0:	607b      	str	r3, [r7, #4]
 80075d2:	f04f 0200 	mov.w	r2, #0
 80075d6:	f04f 0300 	mov.w	r3, #0
 80075da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075de:	4629      	mov	r1, r5
 80075e0:	028b      	lsls	r3, r1, #10
 80075e2:	4621      	mov	r1, r4
 80075e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075e8:	4621      	mov	r1, r4
 80075ea:	028a      	lsls	r2, r1, #10
 80075ec:	4610      	mov	r0, r2
 80075ee:	4619      	mov	r1, r3
 80075f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075f2:	2200      	movs	r2, #0
 80075f4:	61bb      	str	r3, [r7, #24]
 80075f6:	61fa      	str	r2, [r7, #28]
 80075f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075fc:	f7f8 fe50 	bl	80002a0 <__aeabi_uldivmod>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4613      	mov	r3, r2
 8007606:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007608:	4b0b      	ldr	r3, [pc, #44]	@ (8007638 <HAL_RCC_GetSysClockFreq+0x200>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	0c1b      	lsrs	r3, r3, #16
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	3301      	adds	r3, #1
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007618:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800761a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800761c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007620:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007622:	e002      	b.n	800762a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007624:	4b05      	ldr	r3, [pc, #20]	@ (800763c <HAL_RCC_GetSysClockFreq+0x204>)
 8007626:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800762a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800762c:	4618      	mov	r0, r3
 800762e:	3750      	adds	r7, #80	@ 0x50
 8007630:	46bd      	mov	sp, r7
 8007632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007636:	bf00      	nop
 8007638:	40023800 	.word	0x40023800
 800763c:	00f42400 	.word	0x00f42400
 8007640:	007a1200 	.word	0x007a1200

08007644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007644:	b480      	push	{r7}
 8007646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007648:	4b03      	ldr	r3, [pc, #12]	@ (8007658 <HAL_RCC_GetHCLKFreq+0x14>)
 800764a:	681b      	ldr	r3, [r3, #0]
}
 800764c:	4618      	mov	r0, r3
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	20000008 	.word	0x20000008

0800765c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007660:	f7ff fff0 	bl	8007644 <HAL_RCC_GetHCLKFreq>
 8007664:	4602      	mov	r2, r0
 8007666:	4b05      	ldr	r3, [pc, #20]	@ (800767c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	0a9b      	lsrs	r3, r3, #10
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	4903      	ldr	r1, [pc, #12]	@ (8007680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007672:	5ccb      	ldrb	r3, [r1, r3]
 8007674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007678:	4618      	mov	r0, r3
 800767a:	bd80      	pop	{r7, pc}
 800767c:	40023800 	.word	0x40023800
 8007680:	08011548 	.word	0x08011548

08007684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007688:	f7ff ffdc 	bl	8007644 <HAL_RCC_GetHCLKFreq>
 800768c:	4602      	mov	r2, r0
 800768e:	4b05      	ldr	r3, [pc, #20]	@ (80076a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	0b5b      	lsrs	r3, r3, #13
 8007694:	f003 0307 	and.w	r3, r3, #7
 8007698:	4903      	ldr	r1, [pc, #12]	@ (80076a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800769a:	5ccb      	ldrb	r3, [r1, r3]
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	40023800 	.word	0x40023800
 80076a8:	08011548 	.word	0x08011548

080076ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	220f      	movs	r2, #15
 80076ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076bc:	4b12      	ldr	r3, [pc, #72]	@ (8007708 <HAL_RCC_GetClockConfig+0x5c>)
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 0203 	and.w	r2, r3, #3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80076c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007708 <HAL_RCC_GetClockConfig+0x5c>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80076d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007708 <HAL_RCC_GetClockConfig+0x5c>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80076e0:	4b09      	ldr	r3, [pc, #36]	@ (8007708 <HAL_RCC_GetClockConfig+0x5c>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	08db      	lsrs	r3, r3, #3
 80076e6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076ee:	4b07      	ldr	r3, [pc, #28]	@ (800770c <HAL_RCC_GetClockConfig+0x60>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 020f 	and.w	r2, r3, #15
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	601a      	str	r2, [r3, #0]
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40023800 	.word	0x40023800
 800770c:	40023c00 	.word	0x40023c00

08007710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10b      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007734:	2b00      	cmp	r3, #0
 8007736:	d105      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007740:	2b00      	cmp	r3, #0
 8007742:	d075      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007744:	4b91      	ldr	r3, [pc, #580]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800774a:	f7fa fe67 	bl	800241c <HAL_GetTick>
 800774e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007750:	e008      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007752:	f7fa fe63 	bl	800241c <HAL_GetTick>
 8007756:	4602      	mov	r2, r0
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	2b02      	cmp	r3, #2
 800775e:	d901      	bls.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e189      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007764:	4b8a      	ldr	r3, [pc, #552]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1f0      	bne.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d009      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	019a      	lsls	r2, r3, #6
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	071b      	lsls	r3, r3, #28
 8007788:	4981      	ldr	r1, [pc, #516]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01f      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800779c:	4b7c      	ldr	r3, [pc, #496]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800779e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077a2:	0f1b      	lsrs	r3, r3, #28
 80077a4:	f003 0307 	and.w	r3, r3, #7
 80077a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	019a      	lsls	r2, r3, #6
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	061b      	lsls	r3, r3, #24
 80077b6:	431a      	orrs	r2, r3
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	071b      	lsls	r3, r3, #28
 80077bc:	4974      	ldr	r1, [pc, #464]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80077c4:	4b72      	ldr	r3, [pc, #456]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077ca:	f023 021f 	bic.w	r2, r3, #31
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	496e      	ldr	r1, [pc, #440]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00d      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	019a      	lsls	r2, r3, #6
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	061b      	lsls	r3, r3, #24
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	071b      	lsls	r3, r3, #28
 80077fc:	4964      	ldr	r1, [pc, #400]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007804:	4b61      	ldr	r3, [pc, #388]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007806:	2201      	movs	r2, #1
 8007808:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800780a:	f7fa fe07 	bl	800241c <HAL_GetTick>
 800780e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007810:	e008      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007812:	f7fa fe03 	bl	800241c <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d901      	bls.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e129      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007824:	4b5a      	ldr	r3, [pc, #360]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0f0      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d105      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007844:	2b00      	cmp	r3, #0
 8007846:	d079      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007848:	4b52      	ldr	r3, [pc, #328]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800784e:	f7fa fde5 	bl	800241c <HAL_GetTick>
 8007852:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007854:	e008      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007856:	f7fa fde1 	bl	800241c <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d901      	bls.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e107      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007868:	4b49      	ldr	r3, [pc, #292]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007874:	d0ef      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	d020      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007882:	4b43      	ldr	r3, [pc, #268]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007888:	0f1b      	lsrs	r3, r3, #28
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	019a      	lsls	r2, r3, #6
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	061b      	lsls	r3, r3, #24
 800789c:	431a      	orrs	r2, r3
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	071b      	lsls	r3, r3, #28
 80078a2:	493b      	ldr	r1, [pc, #236]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80078aa:	4b39      	ldr	r3, [pc, #228]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	4934      	ldr	r1, [pc, #208]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01e      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078d0:	4b2f      	ldr	r3, [pc, #188]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d6:	0e1b      	lsrs	r3, r3, #24
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	019a      	lsls	r2, r3, #6
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	061b      	lsls	r3, r3, #24
 80078e8:	431a      	orrs	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	071b      	lsls	r3, r3, #28
 80078f0:	4927      	ldr	r1, [pc, #156]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80078f8:	4b25      	ldr	r3, [pc, #148]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007906:	4922      	ldr	r1, [pc, #136]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007908:	4313      	orrs	r3, r2
 800790a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800790e:	4b21      	ldr	r3, [pc, #132]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007910:	2201      	movs	r2, #1
 8007912:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007914:	f7fa fd82 	bl	800241c <HAL_GetTick>
 8007918:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800791a:	e008      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800791c:	f7fa fd7e 	bl	800241c <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d901      	bls.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e0a4      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800792e:	4b18      	ldr	r3, [pc, #96]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800793a:	d1ef      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 808b 	beq.w	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	4b10      	ldr	r3, [pc, #64]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	4a0f      	ldr	r2, [pc, #60]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007958:	6413      	str	r3, [r2, #64]	@ 0x40
 800795a:	4b0d      	ldr	r3, [pc, #52]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007966:	4b0c      	ldr	r3, [pc, #48]	@ (8007998 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a0b      	ldr	r2, [pc, #44]	@ (8007998 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800796c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007970:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007972:	f7fa fd53 	bl	800241c <HAL_GetTick>
 8007976:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007978:	e010      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800797a:	f7fa fd4f 	bl	800241c <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d909      	bls.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e075      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800798c:	42470068 	.word	0x42470068
 8007990:	40023800 	.word	0x40023800
 8007994:	42470070 	.word	0x42470070
 8007998:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800799c:	4b38      	ldr	r3, [pc, #224]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0e8      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079a8:	4b36      	ldr	r3, [pc, #216]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d02f      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d028      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80079d2:	2201      	movs	r2, #1
 80079d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80079dc:	4a29      	ldr	r2, [pc, #164]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80079e2:	4b28      	ldr	r3, [pc, #160]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d114      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80079ee:	f7fa fd15 	bl	800241c <HAL_GetTick>
 80079f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f4:	e00a      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f6:	f7fa fd11 	bl	800241c <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e035      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0ee      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a24:	d10d      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007a26:	4b17      	ldr	r3, [pc, #92]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a3a:	4912      	ldr	r1, [pc, #72]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	608b      	str	r3, [r1, #8]
 8007a40:	e005      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007a42:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	4a0f      	ldr	r2, [pc, #60]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a48:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007a4c:	6093      	str	r3, [r2, #8]
 8007a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a5a:	490a      	ldr	r1, [pc, #40]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007a72:	4b06      	ldr	r3, [pc, #24]	@ (8007a8c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007a74:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40007000 	.word	0x40007000
 8007a84:	40023800 	.word	0x40023800
 8007a88:	42470e40 	.word	0x42470e40
 8007a8c:	424711e0 	.word	0x424711e0

08007a90 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e025      	b.n	8007af0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d106      	bne.n	8007abe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7fa f8c7 	bl	8001c4c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	f001 fe77 	bl	80097c4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	f001 fecc 	bl	800987e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e07b      	b.n	8007c02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d108      	bne.n	8007b24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b1a:	d009      	beq.n	8007b30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	61da      	str	r2, [r3, #28]
 8007b22:	e005      	b.n	8007b30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7f9 ff04 	bl	8001958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb4:	ea42 0103 	orr.w	r1, r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	0c1b      	lsrs	r3, r3, #16
 8007bce:	f003 0104 	and.w	r1, r3, #4
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd6:	f003 0210 	and.w	r2, r3, #16
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69da      	ldr	r2, [r3, #28]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b088      	sub	sp, #32
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	603b      	str	r3, [r7, #0]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_SPI_Transmit+0x22>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e12d      	b.n	8007e88 <HAL_SPI_Transmit+0x27e>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c34:	f7fa fbf2 	bl	800241c <HAL_GetTick>
 8007c38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d002      	beq.n	8007c50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c4e:	e116      	b.n	8007e7e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <HAL_SPI_Transmit+0x52>
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c60:	e10d      	b.n	8007e7e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2203      	movs	r2, #3
 8007c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	88fa      	ldrh	r2, [r7, #6]
 8007c7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	88fa      	ldrh	r2, [r7, #6]
 8007c80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca8:	d10f      	bne.n	8007cca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd4:	2b40      	cmp	r3, #64	@ 0x40
 8007cd6:	d007      	beq.n	8007ce8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cf0:	d14f      	bne.n	8007d92 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <HAL_SPI_Transmit+0xf6>
 8007cfa:	8afb      	ldrh	r3, [r7, #22]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d142      	bne.n	8007d86 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d04:	881a      	ldrh	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d10:	1c9a      	adds	r2, r3, #2
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d24:	e02f      	b.n	8007d86 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d112      	bne.n	8007d5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d38:	881a      	ldrh	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d44:	1c9a      	adds	r2, r3, #2
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007d58:	e015      	b.n	8007d86 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d5a:	f7fa fb5f 	bl	800241c <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d803      	bhi.n	8007d72 <HAL_SPI_Transmit+0x168>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d70:	d102      	bne.n	8007d78 <HAL_SPI_Transmit+0x16e>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007d84:	e07b      	b.n	8007e7e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1ca      	bne.n	8007d26 <HAL_SPI_Transmit+0x11c>
 8007d90:	e050      	b.n	8007e34 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <HAL_SPI_Transmit+0x196>
 8007d9a:	8afb      	ldrh	r3, [r7, #22]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d144      	bne.n	8007e2a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	7812      	ldrb	r2, [r2, #0]
 8007dac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007dc6:	e030      	b.n	8007e2a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d113      	bne.n	8007dfe <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	7812      	ldrb	r2, [r2, #0]
 8007de2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007dfc:	e015      	b.n	8007e2a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dfe:	f7fa fb0d 	bl	800241c <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d803      	bhi.n	8007e16 <HAL_SPI_Transmit+0x20c>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e14:	d102      	bne.n	8007e1c <HAL_SPI_Transmit+0x212>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d106      	bne.n	8007e2a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007e28:	e029      	b.n	8007e7e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1c9      	bne.n	8007dc8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f000 fbed 	bl	8008618 <SPI_EndRxTxTransaction>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10a      	bne.n	8007e68 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e52:	2300      	movs	r3, #0
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	613b      	str	r3, [r7, #16]
 8007e66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	77fb      	strb	r3, [r7, #31]
 8007e74:	e003      	b.n	8007e7e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007e86:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d002      	beq.n	8007eb6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007eb4:	e0fb      	b.n	80080ae <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ebe:	d112      	bne.n	8007ee6 <HAL_SPI_Receive+0x56>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10e      	bne.n	8007ee6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2204      	movs	r2, #4
 8007ecc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 f8ef 	bl	80080c0 <HAL_SPI_TransmitReceive>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	e0e8      	b.n	80080b8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_SPI_Receive+0x64>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e0e1      	b.n	80080b8 <HAL_SPI_Receive+0x228>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007efc:	f7fa fa8e 	bl	800241c <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <HAL_SPI_Receive+0x7e>
 8007f08:	88fb      	ldrh	r3, [r7, #6]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f12:	e0cc      	b.n	80080ae <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2204      	movs	r2, #4
 8007f18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	88fa      	ldrh	r2, [r7, #6]
 8007f2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	88fa      	ldrh	r2, [r7, #6]
 8007f32:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f5a:	d10f      	bne.n	8007f7c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007f7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f86:	2b40      	cmp	r3, #64	@ 0x40
 8007f88:	d007      	beq.n	8007f9a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d16a      	bne.n	8008078 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007fa2:	e032      	b.n	800800a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d115      	bne.n	8007fde <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f103 020c 	add.w	r2, r3, #12
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbe:	7812      	ldrb	r2, [r2, #0]
 8007fc0:	b2d2      	uxtb	r2, r2
 8007fc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007fdc:	e015      	b.n	800800a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fde:	f7fa fa1d 	bl	800241c <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d803      	bhi.n	8007ff6 <HAL_SPI_Receive+0x166>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff4:	d102      	bne.n	8007ffc <HAL_SPI_Receive+0x16c>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008008:	e051      	b.n	80080ae <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1c7      	bne.n	8007fa4 <HAL_SPI_Receive+0x114>
 8008014:	e035      	b.n	8008082 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b01      	cmp	r3, #1
 8008022:	d113      	bne.n	800804c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802e:	b292      	uxth	r2, r2
 8008030:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008036:	1c9a      	adds	r2, r3, #2
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800804a:	e015      	b.n	8008078 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800804c:	f7fa f9e6 	bl	800241c <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	429a      	cmp	r2, r3
 800805a:	d803      	bhi.n	8008064 <HAL_SPI_Receive+0x1d4>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008062:	d102      	bne.n	800806a <HAL_SPI_Receive+0x1da>
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008076:	e01a      	b.n	80080ae <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1c9      	bne.n	8008016 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 fa60 	bl	800854c <SPI_EndRxTransaction>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2220      	movs	r2, #32
 8008096:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	75fb      	strb	r3, [r7, #23]
 80080a4:	e003      	b.n	80080ae <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08c      	sub	sp, #48	@ 0x30
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080ce:	2301      	movs	r3, #1
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d101      	bne.n	80080e6 <HAL_SPI_TransmitReceive+0x26>
 80080e2:	2302      	movs	r3, #2
 80080e4:	e198      	b.n	8008418 <HAL_SPI_TransmitReceive+0x358>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080ee:	f7fa f995 	bl	800241c <HAL_GetTick>
 80080f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80080fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008104:	887b      	ldrh	r3, [r7, #2]
 8008106:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008108:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800810c:	2b01      	cmp	r3, #1
 800810e:	d00f      	beq.n	8008130 <HAL_SPI_TransmitReceive+0x70>
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008116:	d107      	bne.n	8008128 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d103      	bne.n	8008128 <HAL_SPI_TransmitReceive+0x68>
 8008120:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008124:	2b04      	cmp	r3, #4
 8008126:	d003      	beq.n	8008130 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008128:	2302      	movs	r3, #2
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800812e:	e16d      	b.n	800840c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d005      	beq.n	8008142 <HAL_SPI_TransmitReceive+0x82>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <HAL_SPI_TransmitReceive+0x82>
 800813c:	887b      	ldrh	r3, [r7, #2]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d103      	bne.n	800814a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008148:	e160      	b.n	800840c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b04      	cmp	r3, #4
 8008154:	d003      	beq.n	800815e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2205      	movs	r2, #5
 800815a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	887a      	ldrh	r2, [r7, #2]
 800816e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	887a      	ldrh	r2, [r7, #2]
 8008174:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	887a      	ldrh	r2, [r7, #2]
 8008180:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	887a      	ldrh	r2, [r7, #2]
 8008186:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800819e:	2b40      	cmp	r3, #64	@ 0x40
 80081a0:	d007      	beq.n	80081b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081ba:	d17c      	bne.n	80082b6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <HAL_SPI_TransmitReceive+0x10a>
 80081c4:	8b7b      	ldrh	r3, [r7, #26]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d16a      	bne.n	80082a0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ce:	881a      	ldrh	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081da:	1c9a      	adds	r2, r3, #2
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081ee:	e057      	b.n	80082a0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d11b      	bne.n	8008236 <HAL_SPI_TransmitReceive+0x176>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d016      	beq.n	8008236 <HAL_SPI_TransmitReceive+0x176>
 8008208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820a:	2b01      	cmp	r3, #1
 800820c:	d113      	bne.n	8008236 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008212:	881a      	ldrh	r2, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800821e:	1c9a      	adds	r2, r3, #2
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b01      	cmp	r3, #1
 8008242:	d119      	bne.n	8008278 <HAL_SPI_TransmitReceive+0x1b8>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008248:	b29b      	uxth	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d014      	beq.n	8008278 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68da      	ldr	r2, [r3, #12]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	b292      	uxth	r2, r2
 800825a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	1c9a      	adds	r2, r3, #2
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800826a:	b29b      	uxth	r3, r3
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008274:	2301      	movs	r3, #1
 8008276:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008278:	f7fa f8d0 	bl	800241c <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008284:	429a      	cmp	r2, r3
 8008286:	d80b      	bhi.n	80082a0 <HAL_SPI_TransmitReceive+0x1e0>
 8008288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828e:	d007      	beq.n	80082a0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800829e:	e0b5      	b.n	800840c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1a2      	bne.n	80081f0 <HAL_SPI_TransmitReceive+0x130>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d19d      	bne.n	80081f0 <HAL_SPI_TransmitReceive+0x130>
 80082b4:	e080      	b.n	80083b8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <HAL_SPI_TransmitReceive+0x204>
 80082be:	8b7b      	ldrh	r3, [r7, #26]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d16f      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	330c      	adds	r3, #12
 80082ce:	7812      	ldrb	r2, [r2, #0]
 80082d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082ea:	e05b      	b.n	80083a4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d11c      	bne.n	8008334 <HAL_SPI_TransmitReceive+0x274>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082fe:	b29b      	uxth	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d017      	beq.n	8008334 <HAL_SPI_TransmitReceive+0x274>
 8008304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008306:	2b01      	cmp	r3, #1
 8008308:	d114      	bne.n	8008334 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	330c      	adds	r3, #12
 8008314:	7812      	ldrb	r2, [r2, #0]
 8008316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008326:	b29b      	uxth	r3, r3
 8008328:	3b01      	subs	r3, #1
 800832a:	b29a      	uxth	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b01      	cmp	r3, #1
 8008340:	d119      	bne.n	8008376 <HAL_SPI_TransmitReceive+0x2b6>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008346:	b29b      	uxth	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d014      	beq.n	8008376 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008368:	b29b      	uxth	r3, r3
 800836a:	3b01      	subs	r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008372:	2301      	movs	r3, #1
 8008374:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008376:	f7fa f851 	bl	800241c <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008382:	429a      	cmp	r2, r3
 8008384:	d803      	bhi.n	800838e <HAL_SPI_TransmitReceive+0x2ce>
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838c:	d102      	bne.n	8008394 <HAL_SPI_TransmitReceive+0x2d4>
 800838e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008390:	2b00      	cmp	r3, #0
 8008392:	d107      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80083a2:	e033      	b.n	800840c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d19e      	bne.n	80082ec <HAL_SPI_TransmitReceive+0x22c>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d199      	bne.n	80082ec <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f92b 	bl	8008618 <SPI_EndRxTxTransaction>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d006      	beq.n	80083d6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2220      	movs	r2, #32
 80083d2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80083d4:	e01a      	b.n	800840c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	617b      	str	r3, [r7, #20]
 80083f2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008402:	e003      	b.n	800840c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008414:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008418:	4618      	mov	r0, r3
 800841a:	3730      	adds	r7, #48	@ 0x30
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800842e:	b2db      	uxtb	r3, r3
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	4613      	mov	r3, r2
 800844a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800844c:	f7f9 ffe6 	bl	800241c <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4413      	add	r3, r2
 800845a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800845c:	f7f9 ffde 	bl	800241c <HAL_GetTick>
 8008460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008462:	4b39      	ldr	r3, [pc, #228]	@ (8008548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	015b      	lsls	r3, r3, #5
 8008468:	0d1b      	lsrs	r3, r3, #20
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	fb02 f303 	mul.w	r3, r2, r3
 8008470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008472:	e054      	b.n	800851e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847a:	d050      	beq.n	800851e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800847c:	f7f9 ffce 	bl	800241c <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	69fa      	ldr	r2, [r7, #28]
 8008488:	429a      	cmp	r2, r3
 800848a:	d902      	bls.n	8008492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d13d      	bne.n	800850e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084aa:	d111      	bne.n	80084d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084b4:	d004      	beq.n	80084c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084be:	d107      	bne.n	80084d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084d8:	d10f      	bne.n	80084fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e017      	b.n	800853e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	3b01      	subs	r3, #1
 800851c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4013      	ands	r3, r2
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	429a      	cmp	r2, r3
 800852c:	bf0c      	ite	eq
 800852e:	2301      	moveq	r3, #1
 8008530:	2300      	movne	r3, #0
 8008532:	b2db      	uxtb	r3, r3
 8008534:	461a      	mov	r2, r3
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	429a      	cmp	r2, r3
 800853a:	d19b      	bne.n	8008474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3720      	adds	r7, #32
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000008 	.word	0x20000008

0800854c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af02      	add	r7, sp, #8
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008560:	d111      	bne.n	8008586 <SPI_EndRxTransaction+0x3a>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800856a:	d004      	beq.n	8008576 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008574:	d107      	bne.n	8008586 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008584:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800858e:	d12a      	bne.n	80085e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008598:	d012      	beq.n	80085c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2200      	movs	r2, #0
 80085a2:	2180      	movs	r1, #128	@ 0x80
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff ff49 	bl	800843c <SPI_WaitFlagStateUntilTimeout>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d02d      	beq.n	800860c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b4:	f043 0220 	orr.w	r2, r3, #32
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e026      	b.n	800860e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2200      	movs	r2, #0
 80085c8:	2101      	movs	r1, #1
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff ff36 	bl	800843c <SPI_WaitFlagStateUntilTimeout>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d01a      	beq.n	800860c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085da:	f043 0220 	orr.w	r2, r3, #32
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e013      	b.n	800860e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2200      	movs	r2, #0
 80085ee:	2101      	movs	r1, #1
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7ff ff23 	bl	800843c <SPI_WaitFlagStateUntilTimeout>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008600:	f043 0220 	orr.w	r2, r3, #32
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e000      	b.n	800860e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af02      	add	r7, sp, #8
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2201      	movs	r2, #1
 800862c:	2102      	movs	r1, #2
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7ff ff04 	bl	800843c <SPI_WaitFlagStateUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e032      	b.n	80086b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800864a:	4b1b      	ldr	r3, [pc, #108]	@ (80086b8 <SPI_EndRxTxTransaction+0xa0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a1b      	ldr	r2, [pc, #108]	@ (80086bc <SPI_EndRxTxTransaction+0xa4>)
 8008650:	fba2 2303 	umull	r2, r3, r2, r3
 8008654:	0d5b      	lsrs	r3, r3, #21
 8008656:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800865a:	fb02 f303 	mul.w	r3, r2, r3
 800865e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008668:	d112      	bne.n	8008690 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2200      	movs	r2, #0
 8008672:	2180      	movs	r1, #128	@ 0x80
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7ff fee1 	bl	800843c <SPI_WaitFlagStateUntilTimeout>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d016      	beq.n	80086ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008684:	f043 0220 	orr.w	r2, r3, #32
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e00f      	b.n	80086b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	3b01      	subs	r3, #1
 800869a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a6:	2b80      	cmp	r3, #128	@ 0x80
 80086a8:	d0f2      	beq.n	8008690 <SPI_EndRxTxTransaction+0x78>
 80086aa:	e000      	b.n	80086ae <SPI_EndRxTxTransaction+0x96>
        break;
 80086ac:	bf00      	nop
  }

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20000008 	.word	0x20000008
 80086bc:	165e9f81 	.word	0x165e9f81

080086c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e041      	b.n	8008756 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d106      	bne.n	80086ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7f9 f9b4 	bl	8001a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3304      	adds	r3, #4
 80086fc:	4619      	mov	r1, r3
 80086fe:	4610      	mov	r0, r2
 8008700:	f000 fa7e 	bl	8008c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
	...

08008760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b01      	cmp	r3, #1
 8008772:	d001      	beq.n	8008778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e04e      	b.n	8008816 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a23      	ldr	r2, [pc, #140]	@ (8008824 <HAL_TIM_Base_Start_IT+0xc4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d022      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x80>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a2:	d01d      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x80>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008828 <HAL_TIM_Base_Start_IT+0xc8>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d018      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x80>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a1e      	ldr	r2, [pc, #120]	@ (800882c <HAL_TIM_Base_Start_IT+0xcc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d013      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x80>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008830 <HAL_TIM_Base_Start_IT+0xd0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00e      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x80>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008834 <HAL_TIM_Base_Start_IT+0xd4>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d009      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x80>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a19      	ldr	r2, [pc, #100]	@ (8008838 <HAL_TIM_Base_Start_IT+0xd8>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d004      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0x80>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a18      	ldr	r2, [pc, #96]	@ (800883c <HAL_TIM_Base_Start_IT+0xdc>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d111      	bne.n	8008804 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b06      	cmp	r3, #6
 80087f0:	d010      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f042 0201 	orr.w	r2, r2, #1
 8008800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008802:	e007      	b.n	8008814 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f042 0201 	orr.w	r2, r2, #1
 8008812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40010000 	.word	0x40010000
 8008828:	40000400 	.word	0x40000400
 800882c:	40000800 	.word	0x40000800
 8008830:	40000c00 	.word	0x40000c00
 8008834:	40010400 	.word	0x40010400
 8008838:	40014000 	.word	0x40014000
 800883c:	40001800 	.word	0x40001800

08008840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d020      	beq.n	80088a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01b      	beq.n	80088a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f06f 0202 	mvn.w	r2, #2
 8008874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f999 	bl	8008bc2 <HAL_TIM_IC_CaptureCallback>
 8008890:	e005      	b.n	800889e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f98b 	bl	8008bae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f99c 	bl	8008bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d020      	beq.n	80088f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f003 0304 	and.w	r3, r3, #4
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01b      	beq.n	80088f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f06f 0204 	mvn.w	r2, #4
 80088c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2202      	movs	r2, #2
 80088c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f973 	bl	8008bc2 <HAL_TIM_IC_CaptureCallback>
 80088dc:	e005      	b.n	80088ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f965 	bl	8008bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f976 	bl	8008bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f003 0308 	and.w	r3, r3, #8
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d020      	beq.n	800893c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f003 0308 	and.w	r3, r3, #8
 8008900:	2b00      	cmp	r3, #0
 8008902:	d01b      	beq.n	800893c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f06f 0208 	mvn.w	r2, #8
 800890c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2204      	movs	r2, #4
 8008912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f94d 	bl	8008bc2 <HAL_TIM_IC_CaptureCallback>
 8008928:	e005      	b.n	8008936 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f93f 	bl	8008bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f950 	bl	8008bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 0310 	and.w	r3, r3, #16
 8008942:	2b00      	cmp	r3, #0
 8008944:	d020      	beq.n	8008988 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01b      	beq.n	8008988 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f06f 0210 	mvn.w	r2, #16
 8008958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2208      	movs	r2, #8
 800895e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f927 	bl	8008bc2 <HAL_TIM_IC_CaptureCallback>
 8008974:	e005      	b.n	8008982 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f919 	bl	8008bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f92a 	bl	8008bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00c      	beq.n	80089ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f06f 0201 	mvn.w	r2, #1
 80089a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7f8 fdae 	bl	8001508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00c      	beq.n	80089d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80089c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fae4 	bl	8008f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00c      	beq.n	80089f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80089ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f8fb 	bl	8008bea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00c      	beq.n	8008a18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f003 0320 	and.w	r3, r3, #32
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d007      	beq.n	8008a18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f06f 0220 	mvn.w	r2, #32
 8008a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fab6 	bl	8008f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a18:	bf00      	nop
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d101      	bne.n	8008a3c <HAL_TIM_ConfigClockSource+0x1c>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e0b4      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x186>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2202      	movs	r2, #2
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a74:	d03e      	beq.n	8008af4 <HAL_TIM_ConfigClockSource+0xd4>
 8008a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a7a:	f200 8087 	bhi.w	8008b8c <HAL_TIM_ConfigClockSource+0x16c>
 8008a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a82:	f000 8086 	beq.w	8008b92 <HAL_TIM_ConfigClockSource+0x172>
 8008a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a8a:	d87f      	bhi.n	8008b8c <HAL_TIM_ConfigClockSource+0x16c>
 8008a8c:	2b70      	cmp	r3, #112	@ 0x70
 8008a8e:	d01a      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0xa6>
 8008a90:	2b70      	cmp	r3, #112	@ 0x70
 8008a92:	d87b      	bhi.n	8008b8c <HAL_TIM_ConfigClockSource+0x16c>
 8008a94:	2b60      	cmp	r3, #96	@ 0x60
 8008a96:	d050      	beq.n	8008b3a <HAL_TIM_ConfigClockSource+0x11a>
 8008a98:	2b60      	cmp	r3, #96	@ 0x60
 8008a9a:	d877      	bhi.n	8008b8c <HAL_TIM_ConfigClockSource+0x16c>
 8008a9c:	2b50      	cmp	r3, #80	@ 0x50
 8008a9e:	d03c      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0xfa>
 8008aa0:	2b50      	cmp	r3, #80	@ 0x50
 8008aa2:	d873      	bhi.n	8008b8c <HAL_TIM_ConfigClockSource+0x16c>
 8008aa4:	2b40      	cmp	r3, #64	@ 0x40
 8008aa6:	d058      	beq.n	8008b5a <HAL_TIM_ConfigClockSource+0x13a>
 8008aa8:	2b40      	cmp	r3, #64	@ 0x40
 8008aaa:	d86f      	bhi.n	8008b8c <HAL_TIM_ConfigClockSource+0x16c>
 8008aac:	2b30      	cmp	r3, #48	@ 0x30
 8008aae:	d064      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0x15a>
 8008ab0:	2b30      	cmp	r3, #48	@ 0x30
 8008ab2:	d86b      	bhi.n	8008b8c <HAL_TIM_ConfigClockSource+0x16c>
 8008ab4:	2b20      	cmp	r3, #32
 8008ab6:	d060      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0x15a>
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d867      	bhi.n	8008b8c <HAL_TIM_ConfigClockSource+0x16c>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d05c      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0x15a>
 8008ac0:	2b10      	cmp	r3, #16
 8008ac2:	d05a      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0x15a>
 8008ac4:	e062      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ad6:	f000 f9b9 	bl	8008e4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	609a      	str	r2, [r3, #8]
      break;
 8008af2:	e04f      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b04:	f000 f9a2 	bl	8008e4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689a      	ldr	r2, [r3, #8]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b16:	609a      	str	r2, [r3, #8]
      break;
 8008b18:	e03c      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b26:	461a      	mov	r2, r3
 8008b28:	f000 f916 	bl	8008d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2150      	movs	r1, #80	@ 0x50
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f96f 	bl	8008e16 <TIM_ITRx_SetConfig>
      break;
 8008b38:	e02c      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b46:	461a      	mov	r2, r3
 8008b48:	f000 f935 	bl	8008db6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2160      	movs	r1, #96	@ 0x60
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f95f 	bl	8008e16 <TIM_ITRx_SetConfig>
      break;
 8008b58:	e01c      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b66:	461a      	mov	r2, r3
 8008b68:	f000 f8f6 	bl	8008d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2140      	movs	r1, #64	@ 0x40
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 f94f 	bl	8008e16 <TIM_ITRx_SetConfig>
      break;
 8008b78:	e00c      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4619      	mov	r1, r3
 8008b84:	4610      	mov	r0, r2
 8008b86:	f000 f946 	bl	8008e16 <TIM_ITRx_SetConfig>
      break;
 8008b8a:	e003      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b90:	e000      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
	...

08008c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a46      	ldr	r2, [pc, #280]	@ (8008d2c <TIM_Base_SetConfig+0x12c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d013      	beq.n	8008c40 <TIM_Base_SetConfig+0x40>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c1e:	d00f      	beq.n	8008c40 <TIM_Base_SetConfig+0x40>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a43      	ldr	r2, [pc, #268]	@ (8008d30 <TIM_Base_SetConfig+0x130>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d00b      	beq.n	8008c40 <TIM_Base_SetConfig+0x40>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a42      	ldr	r2, [pc, #264]	@ (8008d34 <TIM_Base_SetConfig+0x134>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d007      	beq.n	8008c40 <TIM_Base_SetConfig+0x40>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a41      	ldr	r2, [pc, #260]	@ (8008d38 <TIM_Base_SetConfig+0x138>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d003      	beq.n	8008c40 <TIM_Base_SetConfig+0x40>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a40      	ldr	r2, [pc, #256]	@ (8008d3c <TIM_Base_SetConfig+0x13c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d108      	bne.n	8008c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a35      	ldr	r2, [pc, #212]	@ (8008d2c <TIM_Base_SetConfig+0x12c>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d02b      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c60:	d027      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a32      	ldr	r2, [pc, #200]	@ (8008d30 <TIM_Base_SetConfig+0x130>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d023      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a31      	ldr	r2, [pc, #196]	@ (8008d34 <TIM_Base_SetConfig+0x134>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d01f      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a30      	ldr	r2, [pc, #192]	@ (8008d38 <TIM_Base_SetConfig+0x138>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d01b      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a2f      	ldr	r2, [pc, #188]	@ (8008d3c <TIM_Base_SetConfig+0x13c>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d017      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a2e      	ldr	r2, [pc, #184]	@ (8008d40 <TIM_Base_SetConfig+0x140>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d013      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8008d44 <TIM_Base_SetConfig+0x144>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d00f      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a2c      	ldr	r2, [pc, #176]	@ (8008d48 <TIM_Base_SetConfig+0x148>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d00b      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8008d4c <TIM_Base_SetConfig+0x14c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d007      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8008d50 <TIM_Base_SetConfig+0x150>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d003      	beq.n	8008cb2 <TIM_Base_SetConfig+0xb2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a29      	ldr	r2, [pc, #164]	@ (8008d54 <TIM_Base_SetConfig+0x154>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d108      	bne.n	8008cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	689a      	ldr	r2, [r3, #8]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a10      	ldr	r2, [pc, #64]	@ (8008d2c <TIM_Base_SetConfig+0x12c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_Base_SetConfig+0xf8>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a12      	ldr	r2, [pc, #72]	@ (8008d3c <TIM_Base_SetConfig+0x13c>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d103      	bne.n	8008d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	691a      	ldr	r2, [r3, #16]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d105      	bne.n	8008d1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f023 0201 	bic.w	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	611a      	str	r2, [r3, #16]
  }
}
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	40010000 	.word	0x40010000
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40000800 	.word	0x40000800
 8008d38:	40000c00 	.word	0x40000c00
 8008d3c:	40010400 	.word	0x40010400
 8008d40:	40014000 	.word	0x40014000
 8008d44:	40014400 	.word	0x40014400
 8008d48:	40014800 	.word	0x40014800
 8008d4c:	40001800 	.word	0x40001800
 8008d50:	40001c00 	.word	0x40001c00
 8008d54:	40002000 	.word	0x40002000

08008d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	f023 0201 	bic.w	r2, r3, #1
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	011b      	lsls	r3, r3, #4
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f023 030a 	bic.w	r3, r3, #10
 8008d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	621a      	str	r2, [r3, #32]
}
 8008daa:	bf00      	nop
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b087      	sub	sp, #28
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	f023 0210 	bic.w	r2, r3, #16
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	031b      	lsls	r3, r3, #12
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008df2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	621a      	str	r2, [r3, #32]
}
 8008e0a:	bf00      	nop
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b085      	sub	sp, #20
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	f043 0307 	orr.w	r3, r3, #7
 8008e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	609a      	str	r2, [r3, #8]
}
 8008e40:	bf00      	nop
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	021a      	lsls	r2, r3, #8
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	609a      	str	r2, [r3, #8]
}
 8008e80:	bf00      	nop
 8008e82:	371c      	adds	r7, #28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d101      	bne.n	8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e05a      	b.n	8008f5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a21      	ldr	r2, [pc, #132]	@ (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d022      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ef0:	d01d      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d018      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a1b      	ldr	r2, [pc, #108]	@ (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d013      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8008f74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00e      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a18      	ldr	r2, [pc, #96]	@ (8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d009      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a17      	ldr	r2, [pc, #92]	@ (8008f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d004      	beq.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a15      	ldr	r2, [pc, #84]	@ (8008f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d10c      	bne.n	8008f48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40010000 	.word	0x40010000
 8008f6c:	40000400 	.word	0x40000400
 8008f70:	40000800 	.word	0x40000800
 8008f74:	40000c00 	.word	0x40000c00
 8008f78:	40010400 	.word	0x40010400
 8008f7c:	40014000 	.word	0x40014000
 8008f80:	40001800 	.word	0x40001800

08008f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e042      	b.n	8009044 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7f8 fd60 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2224      	movs	r2, #36	@ 0x24
 8008fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f973 	bl	80092dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	691a      	ldr	r2, [r3, #16]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	695a      	ldr	r2, [r3, #20]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2220      	movs	r2, #32
 8009038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08a      	sub	sp, #40	@ 0x28
 8009050:	af02      	add	r7, sp, #8
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	4613      	mov	r3, r2
 800905a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b20      	cmp	r3, #32
 800906a:	d175      	bne.n	8009158 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <HAL_UART_Transmit+0x2c>
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e06e      	b.n	800915a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2221      	movs	r2, #33	@ 0x21
 8009086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800908a:	f7f9 f9c7 	bl	800241c <HAL_GetTick>
 800908e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	88fa      	ldrh	r2, [r7, #6]
 8009094:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	88fa      	ldrh	r2, [r7, #6]
 800909a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090a4:	d108      	bne.n	80090b8 <HAL_UART_Transmit+0x6c>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d104      	bne.n	80090b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	61bb      	str	r3, [r7, #24]
 80090b6:	e003      	b.n	80090c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090bc:	2300      	movs	r3, #0
 80090be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80090c0:	e02e      	b.n	8009120 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2200      	movs	r2, #0
 80090ca:	2180      	movs	r1, #128	@ 0x80
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 f848 	bl	8009162 <UART_WaitOnFlagUntilTimeout>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2220      	movs	r2, #32
 80090dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e03a      	b.n	800915a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	3302      	adds	r3, #2
 80090fe:	61bb      	str	r3, [r7, #24]
 8009100:	e007      	b.n	8009112 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	781a      	ldrb	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	3301      	adds	r3, #1
 8009110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009116:	b29b      	uxth	r3, r3
 8009118:	3b01      	subs	r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009124:	b29b      	uxth	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1cb      	bne.n	80090c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2200      	movs	r2, #0
 8009132:	2140      	movs	r1, #64	@ 0x40
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 f814 	bl	8009162 <UART_WaitOnFlagUntilTimeout>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d005      	beq.n	800914c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2220      	movs	r2, #32
 8009144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e006      	b.n	800915a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2220      	movs	r2, #32
 8009150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	e000      	b.n	800915a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009158:	2302      	movs	r3, #2
  }
}
 800915a:	4618      	mov	r0, r3
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b086      	sub	sp, #24
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	603b      	str	r3, [r7, #0]
 800916e:	4613      	mov	r3, r2
 8009170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009172:	e03b      	b.n	80091ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917a:	d037      	beq.n	80091ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800917c:	f7f9 f94e 	bl	800241c <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	6a3a      	ldr	r2, [r7, #32]
 8009188:	429a      	cmp	r2, r3
 800918a:	d302      	bcc.n	8009192 <UART_WaitOnFlagUntilTimeout+0x30>
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e03a      	b.n	800920c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f003 0304 	and.w	r3, r3, #4
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d023      	beq.n	80091ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2b80      	cmp	r3, #128	@ 0x80
 80091a8:	d020      	beq.n	80091ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b40      	cmp	r3, #64	@ 0x40
 80091ae:	d01d      	beq.n	80091ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b08      	cmp	r3, #8
 80091bc:	d116      	bne.n	80091ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	617b      	str	r3, [r7, #20]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 f81d 	bl	8009214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2208      	movs	r2, #8
 80091de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e00f      	b.n	800920c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	4013      	ands	r3, r2
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	bf0c      	ite	eq
 80091fc:	2301      	moveq	r3, #1
 80091fe:	2300      	movne	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	461a      	mov	r2, r3
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	429a      	cmp	r2, r3
 8009208:	d0b4      	beq.n	8009174 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b095      	sub	sp, #84	@ 0x54
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	330c      	adds	r3, #12
 8009222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009226:	e853 3f00 	ldrex	r3, [r3]
 800922a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800922c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	330c      	adds	r3, #12
 800923a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800923c:	643a      	str	r2, [r7, #64]	@ 0x40
 800923e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009244:	e841 2300 	strex	r3, r2, [r1]
 8009248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800924a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1e5      	bne.n	800921c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3314      	adds	r3, #20
 8009256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	e853 3f00 	ldrex	r3, [r3]
 800925e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	f023 0301 	bic.w	r3, r3, #1
 8009266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3314      	adds	r3, #20
 800926e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009278:	e841 2300 	strex	r3, r2, [r1]
 800927c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800927e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e5      	bne.n	8009250 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009288:	2b01      	cmp	r3, #1
 800928a:	d119      	bne.n	80092c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	330c      	adds	r3, #12
 8009292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	60bb      	str	r3, [r7, #8]
   return(result);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f023 0310 	bic.w	r3, r3, #16
 80092a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	330c      	adds	r3, #12
 80092aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092ac:	61ba      	str	r2, [r7, #24]
 80092ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b0:	6979      	ldr	r1, [r7, #20]
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	e841 2300 	strex	r3, r2, [r1]
 80092b8:	613b      	str	r3, [r7, #16]
   return(result);
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1e5      	bne.n	800928c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80092ce:	bf00      	nop
 80092d0:	3754      	adds	r7, #84	@ 0x54
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
	...

080092dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092e0:	b0c0      	sub	sp, #256	@ 0x100
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80092f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f8:	68d9      	ldr	r1, [r3, #12]
 80092fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	ea40 0301 	orr.w	r3, r0, r1
 8009304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	431a      	orrs	r2, r3
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	431a      	orrs	r2, r3
 800931c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	4313      	orrs	r3, r2
 8009324:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009334:	f021 010c 	bic.w	r1, r1, #12
 8009338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009342:	430b      	orrs	r3, r1
 8009344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009356:	6999      	ldr	r1, [r3, #24]
 8009358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	ea40 0301 	orr.w	r3, r0, r1
 8009362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	4b8f      	ldr	r3, [pc, #572]	@ (80095a8 <UART_SetConfig+0x2cc>)
 800936c:	429a      	cmp	r2, r3
 800936e:	d005      	beq.n	800937c <UART_SetConfig+0xa0>
 8009370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	4b8d      	ldr	r3, [pc, #564]	@ (80095ac <UART_SetConfig+0x2d0>)
 8009378:	429a      	cmp	r2, r3
 800937a:	d104      	bne.n	8009386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800937c:	f7fe f982 	bl	8007684 <HAL_RCC_GetPCLK2Freq>
 8009380:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009384:	e003      	b.n	800938e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009386:	f7fe f969 	bl	800765c <HAL_RCC_GetPCLK1Freq>
 800938a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800938e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009398:	f040 810c 	bne.w	80095b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800939c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80093a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80093aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80093ae:	4622      	mov	r2, r4
 80093b0:	462b      	mov	r3, r5
 80093b2:	1891      	adds	r1, r2, r2
 80093b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80093b6:	415b      	adcs	r3, r3
 80093b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80093be:	4621      	mov	r1, r4
 80093c0:	eb12 0801 	adds.w	r8, r2, r1
 80093c4:	4629      	mov	r1, r5
 80093c6:	eb43 0901 	adc.w	r9, r3, r1
 80093ca:	f04f 0200 	mov.w	r2, #0
 80093ce:	f04f 0300 	mov.w	r3, #0
 80093d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093de:	4690      	mov	r8, r2
 80093e0:	4699      	mov	r9, r3
 80093e2:	4623      	mov	r3, r4
 80093e4:	eb18 0303 	adds.w	r3, r8, r3
 80093e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80093ec:	462b      	mov	r3, r5
 80093ee:	eb49 0303 	adc.w	r3, r9, r3
 80093f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009402:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800940a:	460b      	mov	r3, r1
 800940c:	18db      	adds	r3, r3, r3
 800940e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009410:	4613      	mov	r3, r2
 8009412:	eb42 0303 	adc.w	r3, r2, r3
 8009416:	657b      	str	r3, [r7, #84]	@ 0x54
 8009418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800941c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009420:	f7f6 ff3e 	bl	80002a0 <__aeabi_uldivmod>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4b61      	ldr	r3, [pc, #388]	@ (80095b0 <UART_SetConfig+0x2d4>)
 800942a:	fba3 2302 	umull	r2, r3, r3, r2
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	011c      	lsls	r4, r3, #4
 8009432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009436:	2200      	movs	r2, #0
 8009438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800943c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009444:	4642      	mov	r2, r8
 8009446:	464b      	mov	r3, r9
 8009448:	1891      	adds	r1, r2, r2
 800944a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800944c:	415b      	adcs	r3, r3
 800944e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009454:	4641      	mov	r1, r8
 8009456:	eb12 0a01 	adds.w	sl, r2, r1
 800945a:	4649      	mov	r1, r9
 800945c:	eb43 0b01 	adc.w	fp, r3, r1
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800946c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009474:	4692      	mov	sl, r2
 8009476:	469b      	mov	fp, r3
 8009478:	4643      	mov	r3, r8
 800947a:	eb1a 0303 	adds.w	r3, sl, r3
 800947e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009482:	464b      	mov	r3, r9
 8009484:	eb4b 0303 	adc.w	r3, fp, r3
 8009488:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800948c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009498:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800949c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80094a0:	460b      	mov	r3, r1
 80094a2:	18db      	adds	r3, r3, r3
 80094a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80094a6:	4613      	mov	r3, r2
 80094a8:	eb42 0303 	adc.w	r3, r2, r3
 80094ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80094ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80094b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80094b6:	f7f6 fef3 	bl	80002a0 <__aeabi_uldivmod>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4611      	mov	r1, r2
 80094c0:	4b3b      	ldr	r3, [pc, #236]	@ (80095b0 <UART_SetConfig+0x2d4>)
 80094c2:	fba3 2301 	umull	r2, r3, r3, r1
 80094c6:	095b      	lsrs	r3, r3, #5
 80094c8:	2264      	movs	r2, #100	@ 0x64
 80094ca:	fb02 f303 	mul.w	r3, r2, r3
 80094ce:	1acb      	subs	r3, r1, r3
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80094d6:	4b36      	ldr	r3, [pc, #216]	@ (80095b0 <UART_SetConfig+0x2d4>)
 80094d8:	fba3 2302 	umull	r2, r3, r3, r2
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80094e4:	441c      	add	r4, r3
 80094e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80094f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80094f8:	4642      	mov	r2, r8
 80094fa:	464b      	mov	r3, r9
 80094fc:	1891      	adds	r1, r2, r2
 80094fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009500:	415b      	adcs	r3, r3
 8009502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009508:	4641      	mov	r1, r8
 800950a:	1851      	adds	r1, r2, r1
 800950c:	6339      	str	r1, [r7, #48]	@ 0x30
 800950e:	4649      	mov	r1, r9
 8009510:	414b      	adcs	r3, r1
 8009512:	637b      	str	r3, [r7, #52]	@ 0x34
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	f04f 0300 	mov.w	r3, #0
 800951c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009520:	4659      	mov	r1, fp
 8009522:	00cb      	lsls	r3, r1, #3
 8009524:	4651      	mov	r1, sl
 8009526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800952a:	4651      	mov	r1, sl
 800952c:	00ca      	lsls	r2, r1, #3
 800952e:	4610      	mov	r0, r2
 8009530:	4619      	mov	r1, r3
 8009532:	4603      	mov	r3, r0
 8009534:	4642      	mov	r2, r8
 8009536:	189b      	adds	r3, r3, r2
 8009538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800953c:	464b      	mov	r3, r9
 800953e:	460a      	mov	r2, r1
 8009540:	eb42 0303 	adc.w	r3, r2, r3
 8009544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009554:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800955c:	460b      	mov	r3, r1
 800955e:	18db      	adds	r3, r3, r3
 8009560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009562:	4613      	mov	r3, r2
 8009564:	eb42 0303 	adc.w	r3, r2, r3
 8009568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800956a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800956e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009572:	f7f6 fe95 	bl	80002a0 <__aeabi_uldivmod>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4b0d      	ldr	r3, [pc, #52]	@ (80095b0 <UART_SetConfig+0x2d4>)
 800957c:	fba3 1302 	umull	r1, r3, r3, r2
 8009580:	095b      	lsrs	r3, r3, #5
 8009582:	2164      	movs	r1, #100	@ 0x64
 8009584:	fb01 f303 	mul.w	r3, r1, r3
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	00db      	lsls	r3, r3, #3
 800958c:	3332      	adds	r3, #50	@ 0x32
 800958e:	4a08      	ldr	r2, [pc, #32]	@ (80095b0 <UART_SetConfig+0x2d4>)
 8009590:	fba2 2303 	umull	r2, r3, r2, r3
 8009594:	095b      	lsrs	r3, r3, #5
 8009596:	f003 0207 	and.w	r2, r3, #7
 800959a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4422      	add	r2, r4
 80095a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095a4:	e106      	b.n	80097b4 <UART_SetConfig+0x4d8>
 80095a6:	bf00      	nop
 80095a8:	40011000 	.word	0x40011000
 80095ac:	40011400 	.word	0x40011400
 80095b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095b8:	2200      	movs	r2, #0
 80095ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80095be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80095c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80095c6:	4642      	mov	r2, r8
 80095c8:	464b      	mov	r3, r9
 80095ca:	1891      	adds	r1, r2, r2
 80095cc:	6239      	str	r1, [r7, #32]
 80095ce:	415b      	adcs	r3, r3
 80095d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80095d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095d6:	4641      	mov	r1, r8
 80095d8:	1854      	adds	r4, r2, r1
 80095da:	4649      	mov	r1, r9
 80095dc:	eb43 0501 	adc.w	r5, r3, r1
 80095e0:	f04f 0200 	mov.w	r2, #0
 80095e4:	f04f 0300 	mov.w	r3, #0
 80095e8:	00eb      	lsls	r3, r5, #3
 80095ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095ee:	00e2      	lsls	r2, r4, #3
 80095f0:	4614      	mov	r4, r2
 80095f2:	461d      	mov	r5, r3
 80095f4:	4643      	mov	r3, r8
 80095f6:	18e3      	adds	r3, r4, r3
 80095f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095fc:	464b      	mov	r3, r9
 80095fe:	eb45 0303 	adc.w	r3, r5, r3
 8009602:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009612:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009616:	f04f 0200 	mov.w	r2, #0
 800961a:	f04f 0300 	mov.w	r3, #0
 800961e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009622:	4629      	mov	r1, r5
 8009624:	008b      	lsls	r3, r1, #2
 8009626:	4621      	mov	r1, r4
 8009628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800962c:	4621      	mov	r1, r4
 800962e:	008a      	lsls	r2, r1, #2
 8009630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009634:	f7f6 fe34 	bl	80002a0 <__aeabi_uldivmod>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4b60      	ldr	r3, [pc, #384]	@ (80097c0 <UART_SetConfig+0x4e4>)
 800963e:	fba3 2302 	umull	r2, r3, r3, r2
 8009642:	095b      	lsrs	r3, r3, #5
 8009644:	011c      	lsls	r4, r3, #4
 8009646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800964a:	2200      	movs	r2, #0
 800964c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009650:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009658:	4642      	mov	r2, r8
 800965a:	464b      	mov	r3, r9
 800965c:	1891      	adds	r1, r2, r2
 800965e:	61b9      	str	r1, [r7, #24]
 8009660:	415b      	adcs	r3, r3
 8009662:	61fb      	str	r3, [r7, #28]
 8009664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009668:	4641      	mov	r1, r8
 800966a:	1851      	adds	r1, r2, r1
 800966c:	6139      	str	r1, [r7, #16]
 800966e:	4649      	mov	r1, r9
 8009670:	414b      	adcs	r3, r1
 8009672:	617b      	str	r3, [r7, #20]
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009680:	4659      	mov	r1, fp
 8009682:	00cb      	lsls	r3, r1, #3
 8009684:	4651      	mov	r1, sl
 8009686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800968a:	4651      	mov	r1, sl
 800968c:	00ca      	lsls	r2, r1, #3
 800968e:	4610      	mov	r0, r2
 8009690:	4619      	mov	r1, r3
 8009692:	4603      	mov	r3, r0
 8009694:	4642      	mov	r2, r8
 8009696:	189b      	adds	r3, r3, r2
 8009698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800969c:	464b      	mov	r3, r9
 800969e:	460a      	mov	r2, r1
 80096a0:	eb42 0303 	adc.w	r3, r2, r3
 80096a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80096b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80096b4:	f04f 0200 	mov.w	r2, #0
 80096b8:	f04f 0300 	mov.w	r3, #0
 80096bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80096c0:	4649      	mov	r1, r9
 80096c2:	008b      	lsls	r3, r1, #2
 80096c4:	4641      	mov	r1, r8
 80096c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096ca:	4641      	mov	r1, r8
 80096cc:	008a      	lsls	r2, r1, #2
 80096ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80096d2:	f7f6 fde5 	bl	80002a0 <__aeabi_uldivmod>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4611      	mov	r1, r2
 80096dc:	4b38      	ldr	r3, [pc, #224]	@ (80097c0 <UART_SetConfig+0x4e4>)
 80096de:	fba3 2301 	umull	r2, r3, r3, r1
 80096e2:	095b      	lsrs	r3, r3, #5
 80096e4:	2264      	movs	r2, #100	@ 0x64
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	1acb      	subs	r3, r1, r3
 80096ec:	011b      	lsls	r3, r3, #4
 80096ee:	3332      	adds	r3, #50	@ 0x32
 80096f0:	4a33      	ldr	r2, [pc, #204]	@ (80097c0 <UART_SetConfig+0x4e4>)
 80096f2:	fba2 2303 	umull	r2, r3, r2, r3
 80096f6:	095b      	lsrs	r3, r3, #5
 80096f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096fc:	441c      	add	r4, r3
 80096fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009702:	2200      	movs	r2, #0
 8009704:	673b      	str	r3, [r7, #112]	@ 0x70
 8009706:	677a      	str	r2, [r7, #116]	@ 0x74
 8009708:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800970c:	4642      	mov	r2, r8
 800970e:	464b      	mov	r3, r9
 8009710:	1891      	adds	r1, r2, r2
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	415b      	adcs	r3, r3
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800971c:	4641      	mov	r1, r8
 800971e:	1851      	adds	r1, r2, r1
 8009720:	6039      	str	r1, [r7, #0]
 8009722:	4649      	mov	r1, r9
 8009724:	414b      	adcs	r3, r1
 8009726:	607b      	str	r3, [r7, #4]
 8009728:	f04f 0200 	mov.w	r2, #0
 800972c:	f04f 0300 	mov.w	r3, #0
 8009730:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009734:	4659      	mov	r1, fp
 8009736:	00cb      	lsls	r3, r1, #3
 8009738:	4651      	mov	r1, sl
 800973a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800973e:	4651      	mov	r1, sl
 8009740:	00ca      	lsls	r2, r1, #3
 8009742:	4610      	mov	r0, r2
 8009744:	4619      	mov	r1, r3
 8009746:	4603      	mov	r3, r0
 8009748:	4642      	mov	r2, r8
 800974a:	189b      	adds	r3, r3, r2
 800974c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800974e:	464b      	mov	r3, r9
 8009750:	460a      	mov	r2, r1
 8009752:	eb42 0303 	adc.w	r3, r2, r3
 8009756:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	663b      	str	r3, [r7, #96]	@ 0x60
 8009762:	667a      	str	r2, [r7, #100]	@ 0x64
 8009764:	f04f 0200 	mov.w	r2, #0
 8009768:	f04f 0300 	mov.w	r3, #0
 800976c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009770:	4649      	mov	r1, r9
 8009772:	008b      	lsls	r3, r1, #2
 8009774:	4641      	mov	r1, r8
 8009776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800977a:	4641      	mov	r1, r8
 800977c:	008a      	lsls	r2, r1, #2
 800977e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009782:	f7f6 fd8d 	bl	80002a0 <__aeabi_uldivmod>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	4b0d      	ldr	r3, [pc, #52]	@ (80097c0 <UART_SetConfig+0x4e4>)
 800978c:	fba3 1302 	umull	r1, r3, r3, r2
 8009790:	095b      	lsrs	r3, r3, #5
 8009792:	2164      	movs	r1, #100	@ 0x64
 8009794:	fb01 f303 	mul.w	r3, r1, r3
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	3332      	adds	r3, #50	@ 0x32
 800979e:	4a08      	ldr	r2, [pc, #32]	@ (80097c0 <UART_SetConfig+0x4e4>)
 80097a0:	fba2 2303 	umull	r2, r3, r2, r3
 80097a4:	095b      	lsrs	r3, r3, #5
 80097a6:	f003 020f 	and.w	r2, r3, #15
 80097aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4422      	add	r2, r4
 80097b2:	609a      	str	r2, [r3, #8]
}
 80097b4:	bf00      	nop
 80097b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80097ba:	46bd      	mov	sp, r7
 80097bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097c0:	51eb851f 	.word	0x51eb851f

080097c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d123      	bne.n	800981e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80097de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	6851      	ldr	r1, [r2, #4]
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	6892      	ldr	r2, [r2, #8]
 80097ea:	4311      	orrs	r1, r2
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	68d2      	ldr	r2, [r2, #12]
 80097f0:	4311      	orrs	r1, r2
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	6912      	ldr	r2, [r2, #16]
 80097f6:	4311      	orrs	r1, r2
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	6952      	ldr	r2, [r2, #20]
 80097fc:	4311      	orrs	r1, r2
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	6992      	ldr	r2, [r2, #24]
 8009802:	4311      	orrs	r1, r2
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	69d2      	ldr	r2, [r2, #28]
 8009808:	4311      	orrs	r1, r2
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	6a12      	ldr	r2, [r2, #32]
 800980e:	4311      	orrs	r1, r2
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009814:	430a      	orrs	r2, r1
 8009816:	431a      	orrs	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	e028      	b.n	8009870 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	69d9      	ldr	r1, [r3, #28]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	4319      	orrs	r1, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009834:	430b      	orrs	r3, r1
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009844:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009848:	683a      	ldr	r2, [r7, #0]
 800984a:	6851      	ldr	r1, [r2, #4]
 800984c:	683a      	ldr	r2, [r7, #0]
 800984e:	6892      	ldr	r2, [r2, #8]
 8009850:	4311      	orrs	r1, r2
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	68d2      	ldr	r2, [r2, #12]
 8009856:	4311      	orrs	r1, r2
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	6912      	ldr	r2, [r2, #16]
 800985c:	4311      	orrs	r1, r2
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	6952      	ldr	r2, [r2, #20]
 8009862:	4311      	orrs	r1, r2
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	6992      	ldr	r2, [r2, #24]
 8009868:	430a      	orrs	r2, r1
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800987e:	b480      	push	{r7}
 8009880:	b085      	sub	sp, #20
 8009882:	af00      	add	r7, sp, #0
 8009884:	60f8      	str	r0, [r7, #12]
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d128      	bne.n	80098e2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	1e59      	subs	r1, r3, #1
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	011b      	lsls	r3, r3, #4
 80098a6:	4319      	orrs	r1, r3
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	021b      	lsls	r3, r3, #8
 80098b0:	4319      	orrs	r1, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	031b      	lsls	r3, r3, #12
 80098ba:	4319      	orrs	r1, r3
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	3b01      	subs	r3, #1
 80098c2:	041b      	lsls	r3, r3, #16
 80098c4:	4319      	orrs	r1, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	051b      	lsls	r3, r3, #20
 80098ce:	4319      	orrs	r1, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	061b      	lsls	r3, r3, #24
 80098d8:	430b      	orrs	r3, r1
 80098da:	431a      	orrs	r2, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	609a      	str	r2, [r3, #8]
 80098e0:	e02f      	b.n	8009942 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80098ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	68d2      	ldr	r2, [r2, #12]
 80098f2:	3a01      	subs	r2, #1
 80098f4:	0311      	lsls	r1, r2, #12
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	6952      	ldr	r2, [r2, #20]
 80098fa:	3a01      	subs	r2, #1
 80098fc:	0512      	lsls	r2, r2, #20
 80098fe:	430a      	orrs	r2, r1
 8009900:	431a      	orrs	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	1e59      	subs	r1, r3, #1
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	3b01      	subs	r3, #1
 800991a:	011b      	lsls	r3, r3, #4
 800991c:	4319      	orrs	r1, r3
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	3b01      	subs	r3, #1
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	4319      	orrs	r1, r3
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	3b01      	subs	r3, #1
 800992e:	041b      	lsls	r3, r3, #16
 8009930:	4319      	orrs	r1, r3
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	3b01      	subs	r3, #1
 8009938:	061b      	lsls	r3, r3, #24
 800993a:	430b      	orrs	r3, r1
 800993c:	431a      	orrs	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009950:	b084      	sub	sp, #16
 8009952:	b580      	push	{r7, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	f107 001c 	add.w	r0, r7, #28
 800995e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009962:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009966:	2b01      	cmp	r3, #1
 8009968:	d123      	bne.n	80099b2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800997e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009992:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009996:	2b01      	cmp	r3, #1
 8009998:	d105      	bne.n	80099a6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f9dc 	bl	8009d64 <USB_CoreReset>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73fb      	strb	r3, [r7, #15]
 80099b0:	e01b      	b.n	80099ea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f9d0 	bl	8009d64 <USB_CoreReset>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d106      	bne.n	80099de <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	639a      	str	r2, [r3, #56]	@ 0x38
 80099dc:	e005      	b.n	80099ea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80099ea:	7fbb      	ldrb	r3, [r7, #30]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d10b      	bne.n	8009a08 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f043 0206 	orr.w	r2, r3, #6
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f043 0220 	orr.w	r2, r3, #32
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a14:	b004      	add	sp, #16
 8009a16:	4770      	bx	lr

08009a18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f043 0201 	orr.w	r2, r3, #1
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b083      	sub	sp, #12
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f023 0201 	bic.w	r2, r3, #1
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d115      	bne.n	8009aaa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009a8a:	200a      	movs	r0, #10
 8009a8c:	f7f8 fcd2 	bl	8002434 <HAL_Delay>
      ms += 10U;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	330a      	adds	r3, #10
 8009a94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f956 	bl	8009d48 <USB_GetMode>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d01e      	beq.n	8009ae0 <USB_SetCurrentMode+0x84>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2bc7      	cmp	r3, #199	@ 0xc7
 8009aa6:	d9f0      	bls.n	8009a8a <USB_SetCurrentMode+0x2e>
 8009aa8:	e01a      	b.n	8009ae0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d115      	bne.n	8009adc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009abc:	200a      	movs	r0, #10
 8009abe:	f7f8 fcb9 	bl	8002434 <HAL_Delay>
      ms += 10U;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	330a      	adds	r3, #10
 8009ac6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f93d 	bl	8009d48 <USB_GetMode>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d005      	beq.n	8009ae0 <USB_SetCurrentMode+0x84>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2bc7      	cmp	r3, #199	@ 0xc7
 8009ad8:	d9f0      	bls.n	8009abc <USB_SetCurrentMode+0x60>
 8009ada:	e001      	b.n	8009ae0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e005      	b.n	8009aec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2bc8      	cmp	r3, #200	@ 0xc8
 8009ae4:	d101      	bne.n	8009aea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e000      	b.n	8009aec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3301      	adds	r3, #1
 8009b06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b0e:	d901      	bls.n	8009b14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e01b      	b.n	8009b4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	daf2      	bge.n	8009b02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	019b      	lsls	r3, r3, #6
 8009b24:	f043 0220 	orr.w	r2, r3, #32
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b38:	d901      	bls.n	8009b3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e006      	b.n	8009b4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	f003 0320 	and.w	r3, r3, #32
 8009b46:	2b20      	cmp	r3, #32
 8009b48:	d0f0      	beq.n	8009b2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3301      	adds	r3, #1
 8009b68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b70:	d901      	bls.n	8009b76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e018      	b.n	8009ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	daf2      	bge.n	8009b64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2210      	movs	r2, #16
 8009b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b94:	d901      	bls.n	8009b9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e006      	b.n	8009ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	f003 0310 	and.w	r3, r3, #16
 8009ba2:	2b10      	cmp	r3, #16
 8009ba4:	d0f0      	beq.n	8009b88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b089      	sub	sp, #36	@ 0x24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	71fb      	strb	r3, [r7, #7]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009bd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d123      	bne.n	8009c22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009bda:	88bb      	ldrh	r3, [r7, #4]
 8009bdc:	3303      	adds	r3, #3
 8009bde:	089b      	lsrs	r3, r3, #2
 8009be0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009be2:	2300      	movs	r3, #0
 8009be4:	61bb      	str	r3, [r7, #24]
 8009be6:	e018      	b.n	8009c1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	031a      	lsls	r2, r3, #12
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	3301      	adds	r3, #1
 8009c06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	3301      	adds	r3, #1
 8009c12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	3301      	adds	r3, #1
 8009c18:	61bb      	str	r3, [r7, #24]
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d3e2      	bcc.n	8009be8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3724      	adds	r7, #36	@ 0x24
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b08b      	sub	sp, #44	@ 0x2c
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009c46:	88fb      	ldrh	r3, [r7, #6]
 8009c48:	089b      	lsrs	r3, r3, #2
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009c4e:	88fb      	ldrh	r3, [r7, #6]
 8009c50:	f003 0303 	and.w	r3, r3, #3
 8009c54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009c56:	2300      	movs	r3, #0
 8009c58:	623b      	str	r3, [r7, #32]
 8009c5a:	e014      	b.n	8009c86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c66:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c70:	3301      	adds	r3, #1
 8009c72:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c76:	3301      	adds	r3, #1
 8009c78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009c80:	6a3b      	ldr	r3, [r7, #32]
 8009c82:	3301      	adds	r3, #1
 8009c84:	623b      	str	r3, [r7, #32]
 8009c86:	6a3a      	ldr	r2, [r7, #32]
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d3e6      	bcc.n	8009c5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009c8e:	8bfb      	ldrh	r3, [r7, #30]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d01e      	beq.n	8009cd2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009c94:	2300      	movs	r3, #0
 8009c96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f107 0310 	add.w	r3, r7, #16
 8009ca4:	6812      	ldr	r2, [r2, #0]
 8009ca6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	00db      	lsls	r3, r3, #3
 8009cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb8:	701a      	strb	r2, [r3, #0]
      i++;
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	623b      	str	r3, [r7, #32]
      pDest++;
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009cc6:	8bfb      	ldrh	r3, [r7, #30]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ccc:	8bfb      	ldrh	r3, [r7, #30]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1ea      	bne.n	8009ca8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	372c      	adds	r7, #44	@ 0x2c
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3714      	adds	r7, #20
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b085      	sub	sp, #20
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009d16:	78fb      	ldrb	r3, [r7, #3]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009d26:	78fb      	ldrb	r3, [r7, #3]
 8009d28:	015a      	lsls	r2, r3, #5
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	4013      	ands	r3, r2
 8009d38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	695b      	ldr	r3, [r3, #20]
 8009d54:	f003 0301 	and.w	r3, r3, #1
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	3301      	adds	r3, #1
 8009d74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d7c:	d901      	bls.n	8009d82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e01b      	b.n	8009dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	daf2      	bge.n	8009d70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	f043 0201 	orr.w	r2, r3, #1
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009da6:	d901      	bls.n	8009dac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e006      	b.n	8009dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d0f0      	beq.n	8009d9a <USB_CoreReset+0x36>

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
	...

08009dc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009dc8:	b084      	sub	sp, #16
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b086      	sub	sp, #24
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009de8:	461a      	mov	r2, r3
 8009dea:	2300      	movs	r3, #0
 8009dec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d119      	bne.n	8009e52 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d10a      	bne.n	8009e3c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009e34:	f043 0304 	orr.w	r3, r3, #4
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	e014      	b.n	8009e66 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009e4a:	f023 0304 	bic.w	r3, r3, #4
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	e009      	b.n	8009e66 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009e60:	f023 0304 	bic.w	r3, r3, #4
 8009e64:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e66:	2110      	movs	r1, #16
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff fe43 	bl	8009af4 <USB_FlushTxFifo>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d001      	beq.n	8009e78 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff fe6d 	bl	8009b58 <USB_FlushRxFifo>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d001      	beq.n	8009e88 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	613b      	str	r3, [r7, #16]
 8009e8c:	e015      	b.n	8009eba <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009eae:	461a      	mov	r2, r3
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	613b      	str	r3, [r7, #16]
 8009eba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d3e3      	bcc.n	8009e8e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a18      	ldr	r2, [pc, #96]	@ (8009f38 <USB_HostInit+0x170>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d10b      	bne.n	8009ef4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a15      	ldr	r2, [pc, #84]	@ (8009f3c <USB_HostInit+0x174>)
 8009ee8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a14      	ldr	r2, [pc, #80]	@ (8009f40 <USB_HostInit+0x178>)
 8009eee:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009ef2:	e009      	b.n	8009f08 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2280      	movs	r2, #128	@ 0x80
 8009ef8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a11      	ldr	r2, [pc, #68]	@ (8009f44 <USB_HostInit+0x17c>)
 8009efe:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a11      	ldr	r2, [pc, #68]	@ (8009f48 <USB_HostInit+0x180>)
 8009f04:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009f08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d105      	bne.n	8009f1c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	f043 0210 	orr.w	r2, r3, #16
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699a      	ldr	r2, [r3, #24]
 8009f20:	4b0a      	ldr	r3, [pc, #40]	@ (8009f4c <USB_HostInit+0x184>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f34:	b004      	add	sp, #16
 8009f36:	4770      	bx	lr
 8009f38:	40040000 	.word	0x40040000
 8009f3c:	01000200 	.word	0x01000200
 8009f40:	00e00300 	.word	0x00e00300
 8009f44:	00600080 	.word	0x00600080
 8009f48:	004000e0 	.word	0x004000e0
 8009f4c:	a3200008 	.word	0xa3200008

08009f50 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009f6e:	f023 0303 	bic.w	r3, r3, #3
 8009f72:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	78fb      	ldrb	r3, [r7, #3]
 8009f7e:	f003 0303 	and.w	r3, r3, #3
 8009f82:	68f9      	ldr	r1, [r7, #12]
 8009f84:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009f8c:	78fb      	ldrb	r3, [r7, #3]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d107      	bne.n	8009fa2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f98:	461a      	mov	r2, r3
 8009f9a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009f9e:	6053      	str	r3, [r2, #4]
 8009fa0:	e00c      	b.n	8009fbc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009fa2:	78fb      	ldrb	r3, [r7, #3]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d107      	bne.n	8009fb8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009fb4:	6053      	str	r3, [r2, #4]
 8009fb6:	e001      	b.n	8009fbc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e000      	b.n	8009fbe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009fea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ff8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009ffa:	2064      	movs	r0, #100	@ 0x64
 8009ffc:	f7f8 fa1a 	bl	8002434 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a00c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a00e:	200a      	movs	r0, #10
 800a010:	f7f8 fa10 	bl	8002434 <HAL_Delay>

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a01e:	b480      	push	{r7}
 800a020:	b085      	sub	sp, #20
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	460b      	mov	r3, r1
 800a028:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a042:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d109      	bne.n	800a062 <USB_DriveVbus+0x44>
 800a04e:	78fb      	ldrb	r3, [r7, #3]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d106      	bne.n	800a062 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a05c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a060:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a06c:	d109      	bne.n	800a082 <USB_DriveVbus+0x64>
 800a06e:	78fb      	ldrb	r3, [r7, #3]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d106      	bne.n	800a082 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a07c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a080:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	0c5b      	lsrs	r3, r3, #17
 800a0ae:	f003 0303 	and.w	r3, r3, #3
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b085      	sub	sp, #20
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	b29b      	uxth	r3, r3
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3714      	adds	r7, #20
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	70fb      	strb	r3, [r7, #3]
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	70bb      	strb	r3, [r7, #2]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a102:	78fb      	ldrb	r3, [r7, #3]
 800a104:	015a      	lsls	r2, r3, #5
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	4413      	add	r3, r2
 800a10a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a10e:	461a      	mov	r2, r3
 800a110:	f04f 33ff 	mov.w	r3, #4294967295
 800a114:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a116:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d87c      	bhi.n	800a218 <USB_HC_Init+0x138>
 800a11e:	a201      	add	r2, pc, #4	@ (adr r2, 800a124 <USB_HC_Init+0x44>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a135 	.word	0x0800a135
 800a128:	0800a1db 	.word	0x0800a1db
 800a12c:	0800a135 	.word	0x0800a135
 800a130:	0800a19d 	.word	0x0800a19d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a140:	461a      	mov	r2, r3
 800a142:	f240 439d 	movw	r3, #1181	@ 0x49d
 800a146:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a148:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	da10      	bge.n	800a172 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	4413      	add	r3, r2
 800a158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	78fa      	ldrb	r2, [r7, #3]
 800a160:	0151      	lsls	r1, r2, #5
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	440a      	add	r2, r1
 800a166:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a16a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a16e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a170:	e055      	b.n	800a21e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a6f      	ldr	r2, [pc, #444]	@ (800a334 <USB_HC_Init+0x254>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d151      	bne.n	800a21e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a17a:	78fb      	ldrb	r3, [r7, #3]
 800a17c:	015a      	lsls	r2, r3, #5
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	4413      	add	r3, r2
 800a182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	78fa      	ldrb	r2, [r7, #3]
 800a18a:	0151      	lsls	r1, r2, #5
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	440a      	add	r2, r1
 800a190:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a194:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a198:	60d3      	str	r3, [r2, #12]
      break;
 800a19a:	e040      	b.n	800a21e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	015a      	lsls	r2, r3, #5
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	f240 639d 	movw	r3, #1693	@ 0x69d
 800a1ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a1b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da34      	bge.n	800a222 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	78fa      	ldrb	r2, [r7, #3]
 800a1c8:	0151      	lsls	r1, r2, #5
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	440a      	add	r2, r1
 800a1ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a1d8:	e023      	b.n	800a222 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	015a      	lsls	r2, r3, #5
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f240 2325 	movw	r3, #549	@ 0x225
 800a1ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a1ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	da17      	bge.n	800a226 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a1f6:	78fb      	ldrb	r3, [r7, #3]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	78fa      	ldrb	r2, [r7, #3]
 800a206:	0151      	lsls	r1, r2, #5
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	440a      	add	r2, r1
 800a20c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a210:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800a214:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a216:	e006      	b.n	800a226 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	77fb      	strb	r3, [r7, #31]
      break;
 800a21c:	e004      	b.n	800a228 <USB_HC_Init+0x148>
      break;
 800a21e:	bf00      	nop
 800a220:	e002      	b.n	800a228 <USB_HC_Init+0x148>
      break;
 800a222:	bf00      	nop
 800a224:	e000      	b.n	800a228 <USB_HC_Init+0x148>
      break;
 800a226:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a228:	78fb      	ldrb	r3, [r7, #3]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a234:	461a      	mov	r2, r3
 800a236:	2300      	movs	r3, #0
 800a238:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a23a:	78fb      	ldrb	r3, [r7, #3]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	4413      	add	r3, r2
 800a242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	78fa      	ldrb	r2, [r7, #3]
 800a24a:	0151      	lsls	r1, r2, #5
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	440a      	add	r2, r1
 800a250:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a254:	f043 0302 	orr.w	r3, r3, #2
 800a258:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	78fb      	ldrb	r3, [r7, #3]
 800a264:	f003 030f 	and.w	r3, r3, #15
 800a268:	2101      	movs	r1, #1
 800a26a:	fa01 f303 	lsl.w	r3, r1, r3
 800a26e:	6939      	ldr	r1, [r7, #16]
 800a270:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a274:	4313      	orrs	r3, r2
 800a276:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a284:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	da03      	bge.n	800a294 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a28c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	e001      	b.n	800a298 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a294:	2300      	movs	r3, #0
 800a296:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff fef9 	bl	800a090 <USB_GetHostSpeed>
 800a29e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a2a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d106      	bne.n	800a2b6 <USB_HC_Init+0x1d6>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d003      	beq.n	800a2b6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a2ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	e001      	b.n	800a2ba <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a2ba:	787b      	ldrb	r3, [r7, #1]
 800a2bc:	059b      	lsls	r3, r3, #22
 800a2be:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a2c2:	78bb      	ldrb	r3, [r7, #2]
 800a2c4:	02db      	lsls	r3, r3, #11
 800a2c6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a2ca:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a2cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a2d0:	049b      	lsls	r3, r3, #18
 800a2d2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a2d6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a2d8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a2da:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a2de:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a2e8:	78fa      	ldrb	r2, [r7, #3]
 800a2ea:	0151      	lsls	r1, r2, #5
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	440a      	add	r2, r1
 800a2f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a2f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a2f8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a2fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d003      	beq.n	800a30a <USB_HC_Init+0x22a>
 800a302:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a306:	2b01      	cmp	r3, #1
 800a308:	d10f      	bne.n	800a32a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a30a:	78fb      	ldrb	r3, [r7, #3]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	4413      	add	r3, r2
 800a312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	78fa      	ldrb	r2, [r7, #3]
 800a31a:	0151      	lsls	r1, r2, #5
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	440a      	add	r2, r1
 800a320:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a324:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a328:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a32a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3720      	adds	r7, #32
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	40040000 	.word	0x40040000

0800a338 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b08c      	sub	sp, #48	@ 0x30
 800a33c:	af02      	add	r7, sp, #8
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	4613      	mov	r3, r2
 800a344:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	785b      	ldrb	r3, [r3, #1]
 800a34e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a350:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a354:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	4a5d      	ldr	r2, [pc, #372]	@ (800a4d0 <USB_HC_StartXfer+0x198>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d12f      	bne.n	800a3be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d11c      	bne.n	800a39e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	7c9b      	ldrb	r3, [r3, #18]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <USB_HC_StartXfer+0x3c>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	7c9b      	ldrb	r3, [r3, #18]
 800a370:	2b02      	cmp	r3, #2
 800a372:	d124      	bne.n	800a3be <USB_HC_StartXfer+0x86>
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	799b      	ldrb	r3, [r3, #6]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d120      	bne.n	800a3be <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	4413      	add	r3, r2
 800a384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	0151      	lsls	r1, r2, #5
 800a38e:	6a3a      	ldr	r2, [r7, #32]
 800a390:	440a      	add	r2, r1
 800a392:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a39a:	60d3      	str	r3, [r2, #12]
 800a39c:	e00f      	b.n	800a3be <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	791b      	ldrb	r3, [r3, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10b      	bne.n	800a3be <USB_HC_StartXfer+0x86>
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	795b      	ldrb	r3, [r3, #5]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d107      	bne.n	800a3be <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	785b      	ldrb	r3, [r3, #1]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fb6b 	bl	800aa90 <USB_DoPing>
        return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e232      	b.n	800a824 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	799b      	ldrb	r3, [r3, #6]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d158      	bne.n	800a478 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	78db      	ldrb	r3, [r3, #3]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d007      	beq.n	800a3e2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a3d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	8a92      	ldrh	r2, [r2, #20]
 800a3d8:	fb03 f202 	mul.w	r2, r3, r2
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	61da      	str	r2, [r3, #28]
 800a3e0:	e07c      	b.n	800a4dc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	7c9b      	ldrb	r3, [r3, #18]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d130      	bne.n	800a44c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	2bbc      	cmp	r3, #188	@ 0xbc
 800a3f0:	d918      	bls.n	800a424 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	8a9b      	ldrh	r3, [r3, #20]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	69da      	ldr	r2, [r3, #28]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d003      	beq.n	800a414 <USB_HC_StartXfer+0xdc>
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	2b02      	cmp	r3, #2
 800a412:	d103      	bne.n	800a41c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2202      	movs	r2, #2
 800a418:	60da      	str	r2, [r3, #12]
 800a41a:	e05f      	b.n	800a4dc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2201      	movs	r2, #1
 800a420:	60da      	str	r2, [r3, #12]
 800a422:	e05b      	b.n	800a4dc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	6a1a      	ldr	r2, [r3, #32]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d007      	beq.n	800a444 <USB_HC_StartXfer+0x10c>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d003      	beq.n	800a444 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2204      	movs	r2, #4
 800a440:	60da      	str	r2, [r3, #12]
 800a442:	e04b      	b.n	800a4dc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	2203      	movs	r2, #3
 800a448:	60da      	str	r2, [r3, #12]
 800a44a:	e047      	b.n	800a4dc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d10d      	bne.n	800a46e <USB_HC_StartXfer+0x136>
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	8a92      	ldrh	r2, [r2, #20]
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d907      	bls.n	800a46e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a45e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	8a92      	ldrh	r2, [r2, #20]
 800a464:	fb03 f202 	mul.w	r2, r3, r2
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	61da      	str	r2, [r3, #28]
 800a46c:	e036      	b.n	800a4dc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	6a1a      	ldr	r2, [r3, #32]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	61da      	str	r2, [r3, #28]
 800a476:	e031      	b.n	800a4dc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	6a1b      	ldr	r3, [r3, #32]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d018      	beq.n	800a4b2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	6a1b      	ldr	r3, [r3, #32]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	8a92      	ldrh	r2, [r2, #20]
 800a488:	4413      	add	r3, r2
 800a48a:	3b01      	subs	r3, #1
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	8a92      	ldrh	r2, [r2, #20]
 800a490:	fbb3 f3f2 	udiv	r3, r3, r2
 800a494:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800a496:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a498:	8b7b      	ldrh	r3, [r7, #26]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d90b      	bls.n	800a4b6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a49e:	8b7b      	ldrh	r3, [r7, #26]
 800a4a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a4a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	8a92      	ldrh	r2, [r2, #20]
 800a4a8:	fb03 f202 	mul.w	r2, r3, r2
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	61da      	str	r2, [r3, #28]
 800a4b0:	e001      	b.n	800a4b6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	78db      	ldrb	r3, [r3, #3]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a4be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	8a92      	ldrh	r2, [r2, #20]
 800a4c4:	fb03 f202 	mul.w	r2, r3, r2
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	61da      	str	r2, [r3, #28]
 800a4cc:	e006      	b.n	800a4dc <USB_HC_StartXfer+0x1a4>
 800a4ce:	bf00      	nop
 800a4d0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6a1a      	ldr	r2, [r3, #32]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a4e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a4e6:	04d9      	lsls	r1, r3, #19
 800a4e8:	4ba3      	ldr	r3, [pc, #652]	@ (800a778 <USB_HC_StartXfer+0x440>)
 800a4ea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a4ec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	7d9b      	ldrb	r3, [r3, #22]
 800a4f2:	075b      	lsls	r3, r3, #29
 800a4f4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a4f8:	69f9      	ldr	r1, [r7, #28]
 800a4fa:	0148      	lsls	r0, r1, #5
 800a4fc:	6a39      	ldr	r1, [r7, #32]
 800a4fe:	4401      	add	r1, r0
 800a500:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a504:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a506:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d009      	beq.n	800a522 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	6999      	ldr	r1, [r3, #24]
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a51e:	460a      	mov	r2, r1
 800a520:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bf0c      	ite	eq
 800a532:	2301      	moveq	r3, #1
 800a534:	2300      	movne	r3, #0
 800a536:	b2db      	uxtb	r3, r3
 800a538:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	015a      	lsls	r2, r3, #5
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	4413      	add	r3, r2
 800a542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	69fa      	ldr	r2, [r7, #28]
 800a54a:	0151      	lsls	r1, r2, #5
 800a54c:	6a3a      	ldr	r2, [r7, #32]
 800a54e:	440a      	add	r2, r1
 800a550:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a554:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a558:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	4413      	add	r3, r2
 800a562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	7e7b      	ldrb	r3, [r7, #25]
 800a56a:	075b      	lsls	r3, r3, #29
 800a56c:	69f9      	ldr	r1, [r7, #28]
 800a56e:	0148      	lsls	r0, r1, #5
 800a570:	6a39      	ldr	r1, [r7, #32]
 800a572:	4401      	add	r1, r0
 800a574:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800a578:	4313      	orrs	r3, r2
 800a57a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	799b      	ldrb	r3, [r3, #6]
 800a580:	2b01      	cmp	r3, #1
 800a582:	f040 80c3 	bne.w	800a70c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	7c5b      	ldrb	r3, [r3, #17]
 800a58a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a590:	4313      	orrs	r3, r2
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	0151      	lsls	r1, r2, #5
 800a596:	6a3a      	ldr	r2, [r7, #32]
 800a598:	440a      	add	r2, r1
 800a59a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a59e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a5a2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	6a3b      	ldr	r3, [r7, #32]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	69fa      	ldr	r2, [r7, #28]
 800a5b4:	0151      	lsls	r1, r2, #5
 800a5b6:	6a3a      	ldr	r2, [r7, #32]
 800a5b8:	440a      	add	r2, r1
 800a5ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5be:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a5c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	79db      	ldrb	r3, [r3, #7]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d123      	bne.n	800a614 <USB_HC_StartXfer+0x2dc>
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	78db      	ldrb	r3, [r3, #3]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d11f      	bne.n	800a614 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	015a      	lsls	r2, r3, #5
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	69fa      	ldr	r2, [r7, #28]
 800a5e4:	0151      	lsls	r1, r2, #5
 800a5e6:	6a3a      	ldr	r2, [r7, #32]
 800a5e8:	440a      	add	r2, r1
 800a5ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5f2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	015a      	lsls	r2, r3, #5
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	69fa      	ldr	r2, [r7, #28]
 800a604:	0151      	lsls	r1, r2, #5
 800a606:	6a3a      	ldr	r2, [r7, #32]
 800a608:	440a      	add	r2, r1
 800a60a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a60e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a612:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	7c9b      	ldrb	r3, [r3, #18]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d003      	beq.n	800a624 <USB_HC_StartXfer+0x2ec>
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	7c9b      	ldrb	r3, [r3, #18]
 800a620:	2b03      	cmp	r3, #3
 800a622:	d117      	bne.n	800a654 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d113      	bne.n	800a654 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	78db      	ldrb	r3, [r3, #3]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d10f      	bne.n	800a654 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	015a      	lsls	r2, r3, #5
 800a638:	6a3b      	ldr	r3, [r7, #32]
 800a63a:	4413      	add	r3, r2
 800a63c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	69fa      	ldr	r2, [r7, #28]
 800a644:	0151      	lsls	r1, r2, #5
 800a646:	6a3a      	ldr	r2, [r7, #32]
 800a648:	440a      	add	r2, r1
 800a64a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a64e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a652:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	7c9b      	ldrb	r3, [r3, #18]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d162      	bne.n	800a722 <USB_HC_StartXfer+0x3ea>
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	78db      	ldrb	r3, [r3, #3]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d15e      	bne.n	800a722 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	3b01      	subs	r3, #1
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	d858      	bhi.n	800a720 <USB_HC_StartXfer+0x3e8>
 800a66e:	a201      	add	r2, pc, #4	@ (adr r2, 800a674 <USB_HC_StartXfer+0x33c>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a685 	.word	0x0800a685
 800a678:	0800a6a7 	.word	0x0800a6a7
 800a67c:	0800a6c9 	.word	0x0800a6c9
 800a680:	0800a6eb 	.word	0x0800a6eb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	69fa      	ldr	r2, [r7, #28]
 800a694:	0151      	lsls	r1, r2, #5
 800a696:	6a3a      	ldr	r2, [r7, #32]
 800a698:	440a      	add	r2, r1
 800a69a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a69e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6a2:	6053      	str	r3, [r2, #4]
          break;
 800a6a4:	e03d      	b.n	800a722 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	69fa      	ldr	r2, [r7, #28]
 800a6b6:	0151      	lsls	r1, r2, #5
 800a6b8:	6a3a      	ldr	r2, [r7, #32]
 800a6ba:	440a      	add	r2, r1
 800a6bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6c0:	f043 030e 	orr.w	r3, r3, #14
 800a6c4:	6053      	str	r3, [r2, #4]
          break;
 800a6c6:	e02c      	b.n	800a722 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	69fa      	ldr	r2, [r7, #28]
 800a6d8:	0151      	lsls	r1, r2, #5
 800a6da:	6a3a      	ldr	r2, [r7, #32]
 800a6dc:	440a      	add	r2, r1
 800a6de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a6e6:	6053      	str	r3, [r2, #4]
          break;
 800a6e8:	e01b      	b.n	800a722 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	69fa      	ldr	r2, [r7, #28]
 800a6fa:	0151      	lsls	r1, r2, #5
 800a6fc:	6a3a      	ldr	r2, [r7, #32]
 800a6fe:	440a      	add	r2, r1
 800a700:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a704:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a708:	6053      	str	r3, [r2, #4]
          break;
 800a70a:	e00a      	b.n	800a722 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	4413      	add	r3, r2
 800a714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a718:	461a      	mov	r2, r3
 800a71a:	2300      	movs	r3, #0
 800a71c:	6053      	str	r3, [r2, #4]
 800a71e:	e000      	b.n	800a722 <USB_HC_StartXfer+0x3ea>
          break;
 800a720:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a738:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	78db      	ldrb	r3, [r3, #3]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d004      	beq.n	800a74c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a748:	613b      	str	r3, [r7, #16]
 800a74a:	e003      	b.n	800a754 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a752:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a75a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	4413      	add	r3, r2
 800a764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a768:	461a      	mov	r2, r3
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d003      	beq.n	800a77c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	e055      	b.n	800a824 <USB_HC_StartXfer+0x4ec>
 800a778:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	78db      	ldrb	r3, [r3, #3]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d14e      	bne.n	800a822 <USB_HC_StartXfer+0x4ea>
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	6a1b      	ldr	r3, [r3, #32]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d04a      	beq.n	800a822 <USB_HC_StartXfer+0x4ea>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	79db      	ldrb	r3, [r3, #7]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d146      	bne.n	800a822 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	7c9b      	ldrb	r3, [r3, #18]
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d831      	bhi.n	800a800 <USB_HC_StartXfer+0x4c8>
 800a79c:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a4 <USB_HC_StartXfer+0x46c>)
 800a79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a2:	bf00      	nop
 800a7a4:	0800a7b5 	.word	0x0800a7b5
 800a7a8:	0800a7d9 	.word	0x0800a7d9
 800a7ac:	0800a7b5 	.word	0x0800a7b5
 800a7b0:	0800a7d9 	.word	0x0800a7d9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	6a1b      	ldr	r3, [r3, #32]
 800a7b8:	3303      	adds	r3, #3
 800a7ba:	089b      	lsrs	r3, r3, #2
 800a7bc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a7be:	8afa      	ldrh	r2, [r7, #22]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d91c      	bls.n	800a804 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	f043 0220 	orr.w	r2, r3, #32
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a7d6:	e015      	b.n	800a804 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	6a1b      	ldr	r3, [r3, #32]
 800a7dc:	3303      	adds	r3, #3
 800a7de:	089b      	lsrs	r3, r3, #2
 800a7e0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a7e2:	8afa      	ldrh	r2, [r7, #22]
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d90a      	bls.n	800a808 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	619a      	str	r2, [r3, #24]
        }
        break;
 800a7fe:	e003      	b.n	800a808 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a800:	bf00      	nop
 800a802:	e002      	b.n	800a80a <USB_HC_StartXfer+0x4d2>
        break;
 800a804:	bf00      	nop
 800a806:	e000      	b.n	800a80a <USB_HC_StartXfer+0x4d2>
        break;
 800a808:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	6999      	ldr	r1, [r3, #24]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	785a      	ldrb	r2, [r3, #1]
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	b29b      	uxth	r3, r3
 800a818:	2000      	movs	r0, #0
 800a81a:	9000      	str	r0, [sp, #0]
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7ff f9c9 	bl	8009bb4 <USB_WritePacket>
  }

  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3728      	adds	r7, #40	@ 0x28
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a83e:	695b      	ldr	r3, [r3, #20]
 800a840:	b29b      	uxth	r3, r3
}
 800a842:	4618      	mov	r0, r3
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a84e:	b480      	push	{r7}
 800a850:	b089      	sub	sp, #36	@ 0x24
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	460b      	mov	r3, r1
 800a858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a862:	2300      	movs	r3, #0
 800a864:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	015a      	lsls	r2, r3, #5
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	4413      	add	r3, r2
 800a86e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	0c9b      	lsrs	r3, r3, #18
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	4413      	add	r3, r2
 800a884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	0fdb      	lsrs	r3, r3, #31
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	0fdb      	lsrs	r3, r3, #31
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f003 0320 	and.w	r3, r3, #32
 800a8b0:	2b20      	cmp	r3, #32
 800a8b2:	d10d      	bne.n	800a8d0 <USB_HC_Halt+0x82>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10a      	bne.n	800a8d0 <USB_HC_Halt+0x82>
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d002      	beq.n	800a8cc <USB_HC_Halt+0x7e>
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d101      	bne.n	800a8d0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	e0d8      	b.n	800aa82 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d002      	beq.n	800a8dc <USB_HC_Halt+0x8e>
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d173      	bne.n	800a9c4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	69ba      	ldr	r2, [r7, #24]
 800a8ec:	0151      	lsls	r1, r2, #5
 800a8ee:	69fa      	ldr	r2, [r7, #28]
 800a8f0:	440a      	add	r2, r1
 800a8f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a8f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8fa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	f003 0320 	and.w	r3, r3, #32
 800a904:	2b00      	cmp	r3, #0
 800a906:	d14a      	bne.n	800a99e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a90c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d133      	bne.n	800a97c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	015a      	lsls	r2, r3, #5
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	4413      	add	r3, r2
 800a91c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	69ba      	ldr	r2, [r7, #24]
 800a924:	0151      	lsls	r1, r2, #5
 800a926:	69fa      	ldr	r2, [r7, #28]
 800a928:	440a      	add	r2, r1
 800a92a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a92e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a932:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	0151      	lsls	r1, r2, #5
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	440a      	add	r2, r1
 800a94a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a94e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a952:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	3301      	adds	r3, #1
 800a958:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a960:	d82e      	bhi.n	800a9c0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a974:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a978:	d0ec      	beq.n	800a954 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a97a:	e081      	b.n	800aa80 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	015a      	lsls	r2, r3, #5
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	4413      	add	r3, r2
 800a984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	69ba      	ldr	r2, [r7, #24]
 800a98c:	0151      	lsls	r1, r2, #5
 800a98e:	69fa      	ldr	r2, [r7, #28]
 800a990:	440a      	add	r2, r1
 800a992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a99a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a99c:	e070      	b.n	800aa80 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	69ba      	ldr	r2, [r7, #24]
 800a9ae:	0151      	lsls	r1, r2, #5
 800a9b0:	69fa      	ldr	r2, [r7, #28]
 800a9b2:	440a      	add	r2, r1
 800a9b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a9b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a9bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a9be:	e05f      	b.n	800aa80 <USB_HC_Halt+0x232>
            break;
 800a9c0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a9c2:	e05d      	b.n	800aa80 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	69ba      	ldr	r2, [r7, #24]
 800a9d4:	0151      	lsls	r1, r2, #5
 800a9d6:	69fa      	ldr	r2, [r7, #28]
 800a9d8:	440a      	add	r2, r1
 800a9da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a9de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a9e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d133      	bne.n	800aa5c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	69ba      	ldr	r2, [r7, #24]
 800aa04:	0151      	lsls	r1, r2, #5
 800aa06:	69fa      	ldr	r2, [r7, #28]
 800aa08:	440a      	add	r2, r1
 800aa0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	0151      	lsls	r1, r2, #5
 800aa26:	69fa      	ldr	r2, [r7, #28]
 800aa28:	440a      	add	r2, r1
 800aa2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aa32:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	3301      	adds	r3, #1
 800aa38:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa40:	d81d      	bhi.n	800aa7e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa58:	d0ec      	beq.n	800aa34 <USB_HC_Halt+0x1e6>
 800aa5a:	e011      	b.n	800aa80 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	69ba      	ldr	r2, [r7, #24]
 800aa6c:	0151      	lsls	r1, r2, #5
 800aa6e:	69fa      	ldr	r2, [r7, #28]
 800aa70:	440a      	add	r2, r1
 800aa72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	e000      	b.n	800aa80 <USB_HC_Halt+0x232>
          break;
 800aa7e:	bf00      	nop
    }
  }

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3724      	adds	r7, #36	@ 0x24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
	...

0800aa90 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	04da      	lsls	r2, r3, #19
 800aaac:	4b15      	ldr	r3, [pc, #84]	@ (800ab04 <USB_DoPing+0x74>)
 800aaae:	4013      	ands	r3, r2
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	0151      	lsls	r1, r2, #5
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	440a      	add	r2, r1
 800aab8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aabc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aac0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aad8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aae0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	015a      	lsls	r2, r3, #5
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	4413      	add	r3, r2
 800aaea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aaee:	461a      	mov	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	371c      	adds	r7, #28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	1ff80000 	.word	0x1ff80000

0800ab08 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7fe ff8c 	bl	8009a3a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab22:	2110      	movs	r1, #16
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7fe ffe5 	bl	8009af4 <USB_FlushTxFifo>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7ff f80f 	bl	8009b58 <USB_FlushRxFifo>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ab44:	2300      	movs	r3, #0
 800ab46:	61bb      	str	r3, [r7, #24]
 800ab48:	e01f      	b.n	800ab8a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	015a      	lsls	r2, r3, #5
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ab70:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab7e:	461a      	mov	r2, r3
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	3301      	adds	r3, #1
 800ab88:	61bb      	str	r3, [r7, #24]
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	2b0f      	cmp	r3, #15
 800ab8e:	d9dc      	bls.n	800ab4a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ab90:	2300      	movs	r3, #0
 800ab92:	61bb      	str	r3, [r7, #24]
 800ab94:	e034      	b.n	800ac00 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	015a      	lsls	r2, r3, #5
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800abac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800abb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800abbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abca:	461a      	mov	r2, r3
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3301      	adds	r3, #1
 800abd4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800abdc:	d80c      	bhi.n	800abf8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	015a      	lsls	r2, r3, #5
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	4413      	add	r3, r2
 800abe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abf4:	d0ec      	beq.n	800abd0 <USB_StopHost+0xc8>
 800abf6:	e000      	b.n	800abfa <USB_StopHost+0xf2>
        break;
 800abf8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	3301      	adds	r3, #1
 800abfe:	61bb      	str	r3, [r7, #24]
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	2b0f      	cmp	r3, #15
 800ac04:	d9c7      	bls.n	800ab96 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f04f 32ff 	mov.w	r2, #4294967295
 800ac1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7fe fefb 	bl	8009a18 <USB_EnableGlobalInt>

  return ret;
 800ac22:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3720      	adds	r7, #32
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ac2c:	b590      	push	{r4, r7, lr}
 800ac2e:	b089      	sub	sp, #36	@ 0x24
 800ac30:	af04      	add	r7, sp, #16
 800ac32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ac34:	2301      	movs	r3, #1
 800ac36:	2202      	movs	r2, #2
 800ac38:	2102      	movs	r1, #2
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fcd7 	bl	800b5ee <USBH_FindInterface>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
 800ac46:	2bff      	cmp	r3, #255	@ 0xff
 800ac48:	d002      	beq.n	800ac50 <USBH_CDC_InterfaceInit+0x24>
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d901      	bls.n	800ac54 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ac50:	2302      	movs	r3, #2
 800ac52:	e13d      	b.n	800aed0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fcac 	bl	800b5b6 <USBH_SelectInterface>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d001      	beq.n	800ac6c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ac68:	2302      	movs	r3, #2
 800ac6a:	e131      	b.n	800aed0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800ac72:	2050      	movs	r0, #80	@ 0x50
 800ac74:	f005 f898 	bl	800fda8 <malloc>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e11f      	b.n	800aed0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ac90:	2250      	movs	r2, #80	@ 0x50
 800ac92:	2100      	movs	r1, #0
 800ac94:	68b8      	ldr	r0, [r7, #8]
 800ac96:	f005 f967 	bl	800ff68 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ac9a:	7bfb      	ldrb	r3, [r7, #15]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	211a      	movs	r1, #26
 800aca0:	fb01 f303 	mul.w	r3, r1, r3
 800aca4:	4413      	add	r3, r2
 800aca6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	b25b      	sxtb	r3, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	da15      	bge.n	800acde <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	211a      	movs	r1, #26
 800acb8:	fb01 f303 	mul.w	r3, r1, r3
 800acbc:	4413      	add	r3, r2
 800acbe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800acc2:	781a      	ldrb	r2, [r3, #0]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	211a      	movs	r1, #26
 800acce:	fb01 f303 	mul.w	r3, r1, r3
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800acd8:	881a      	ldrh	r2, [r3, #0]
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	785b      	ldrb	r3, [r3, #1]
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f002 fa1c 	bl	800d122 <USBH_AllocPipe>
 800acea:	4603      	mov	r3, r0
 800acec:	461a      	mov	r2, r3
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	7819      	ldrb	r1, [r3, #0]
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	7858      	ldrb	r0, [r3, #1]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	8952      	ldrh	r2, [r2, #10]
 800ad0a:	9202      	str	r2, [sp, #8]
 800ad0c:	2203      	movs	r2, #3
 800ad0e:	9201      	str	r2, [sp, #4]
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	4623      	mov	r3, r4
 800ad14:	4602      	mov	r2, r0
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f002 f9d4 	bl	800d0c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	2200      	movs	r2, #0
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f004 ffb9 	bl	800fc9c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	210a      	movs	r1, #10
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fc5c 	bl	800b5ee <USBH_FindInterface>
 800ad36:	4603      	mov	r3, r0
 800ad38:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ad3a:	7bfb      	ldrb	r3, [r7, #15]
 800ad3c:	2bff      	cmp	r3, #255	@ 0xff
 800ad3e:	d002      	beq.n	800ad46 <USBH_CDC_InterfaceInit+0x11a>
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d901      	bls.n	800ad4a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ad46:	2302      	movs	r3, #2
 800ad48:	e0c2      	b.n	800aed0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	211a      	movs	r1, #26
 800ad50:	fb01 f303 	mul.w	r3, r1, r3
 800ad54:	4413      	add	r3, r2
 800ad56:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	b25b      	sxtb	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	da16      	bge.n	800ad90 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	211a      	movs	r1, #26
 800ad68:	fb01 f303 	mul.w	r3, r1, r3
 800ad6c:	4413      	add	r3, r2
 800ad6e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ad72:	781a      	ldrb	r2, [r3, #0]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	211a      	movs	r1, #26
 800ad7e:	fb01 f303 	mul.w	r3, r1, r3
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800ad88:	881a      	ldrh	r2, [r3, #0]
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	835a      	strh	r2, [r3, #26]
 800ad8e:	e015      	b.n	800adbc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	211a      	movs	r1, #26
 800ad96:	fb01 f303 	mul.w	r3, r1, r3
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ada0:	781a      	ldrb	r2, [r3, #0]
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	211a      	movs	r1, #26
 800adac:	fb01 f303 	mul.w	r3, r1, r3
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800adb6:	881a      	ldrh	r2, [r3, #0]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	211a      	movs	r1, #26
 800adc2:	fb01 f303 	mul.w	r3, r1, r3
 800adc6:	4413      	add	r3, r2
 800adc8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	b25b      	sxtb	r3, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	da16      	bge.n	800ae02 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	211a      	movs	r1, #26
 800adda:	fb01 f303 	mul.w	r3, r1, r3
 800adde:	4413      	add	r3, r2
 800ade0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ade4:	781a      	ldrb	r2, [r3, #0]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800adea:	7bfb      	ldrb	r3, [r7, #15]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	211a      	movs	r1, #26
 800adf0:	fb01 f303 	mul.w	r3, r1, r3
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800adfa:	881a      	ldrh	r2, [r3, #0]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	835a      	strh	r2, [r3, #26]
 800ae00:	e015      	b.n	800ae2e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	211a      	movs	r1, #26
 800ae08:	fb01 f303 	mul.w	r3, r1, r3
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ae12:	781a      	ldrb	r2, [r3, #0]
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	211a      	movs	r1, #26
 800ae1e:	fb01 f303 	mul.w	r3, r1, r3
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800ae28:	881a      	ldrh	r2, [r3, #0]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	7b9b      	ldrb	r3, [r3, #14]
 800ae32:	4619      	mov	r1, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f002 f974 	bl	800d122 <USBH_AllocPipe>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	7bdb      	ldrb	r3, [r3, #15]
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f002 f96a 	bl	800d122 <USBH_AllocPipe>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	461a      	mov	r2, r3
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	7b59      	ldrb	r1, [r3, #13]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	7b98      	ldrb	r0, [r3, #14]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	8b12      	ldrh	r2, [r2, #24]
 800ae6e:	9202      	str	r2, [sp, #8]
 800ae70:	2202      	movs	r2, #2
 800ae72:	9201      	str	r2, [sp, #4]
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	4623      	mov	r3, r4
 800ae78:	4602      	mov	r2, r0
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f002 f922 	bl	800d0c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	7b19      	ldrb	r1, [r3, #12]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	7bd8      	ldrb	r0, [r3, #15]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	8b52      	ldrh	r2, [r2, #26]
 800ae98:	9202      	str	r2, [sp, #8]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	9201      	str	r2, [sp, #4]
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	4623      	mov	r3, r4
 800aea2:	4602      	mov	r2, r0
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f002 f90d 	bl	800d0c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	7b5b      	ldrb	r3, [r3, #13]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f004 feee 	bl	800fc9c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	7b1b      	ldrb	r3, [r3, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f004 fee7 	bl	800fc9c <USBH_LL_SetToggle>

  return USBH_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd90      	pop	{r4, r7, pc}

0800aed8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aee6:	69db      	ldr	r3, [r3, #28]
 800aee8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00e      	beq.n	800af10 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f002 f902 	bl	800d102 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f002 f92d 	bl	800d164 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	7b1b      	ldrb	r3, [r3, #12]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00e      	beq.n	800af36 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	7b1b      	ldrb	r3, [r3, #12]
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f002 f8ef 	bl	800d102 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	7b1b      	ldrb	r3, [r3, #12]
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f002 f91a 	bl	800d164 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	7b5b      	ldrb	r3, [r3, #13]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00e      	beq.n	800af5c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	7b5b      	ldrb	r3, [r3, #13]
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f002 f8dc 	bl	800d102 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	7b5b      	ldrb	r3, [r3, #13]
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f002 f907 	bl	800d164 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2200      	movs	r2, #0
 800af5a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af62:	69db      	ldr	r3, [r3, #28]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00b      	beq.n	800af80 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af6e:	69db      	ldr	r3, [r3, #28]
 800af70:	4618      	mov	r0, r3
 800af72:	f004 ff21 	bl	800fdb8 <free>
    phost->pActiveClass->pData = 0U;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af7c:	2200      	movs	r2, #0
 800af7e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3340      	adds	r3, #64	@ 0x40
 800afa0:	4619      	mov	r1, r3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f8b1 	bl	800b10a <GetLineCoding>
 800afa8:	4603      	mov	r3, r0
 800afaa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800afac:	7afb      	ldrb	r3, [r7, #11]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d105      	bne.n	800afbe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800afb8:	2102      	movs	r1, #2
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800afbe:	7afb      	ldrb	r3, [r7, #11]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800afd0:	2301      	movs	r3, #1
 800afd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800afde:	69db      	ldr	r3, [r3, #28]
 800afe0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800afe8:	2b04      	cmp	r3, #4
 800afea:	d877      	bhi.n	800b0dc <USBH_CDC_Process+0x114>
 800afec:	a201      	add	r2, pc, #4	@ (adr r2, 800aff4 <USBH_CDC_Process+0x2c>)
 800afee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff2:	bf00      	nop
 800aff4:	0800b009 	.word	0x0800b009
 800aff8:	0800b00f 	.word	0x0800b00f
 800affc:	0800b03f 	.word	0x0800b03f
 800b000:	0800b0b3 	.word	0x0800b0b3
 800b004:	0800b0c1 	.word	0x0800b0c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	73fb      	strb	r3, [r7, #15]
      break;
 800b00c:	e06d      	b.n	800b0ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f897 	bl	800b148 <SetLineCoding>
 800b01a:	4603      	mov	r3, r0
 800b01c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b01e:	7bbb      	ldrb	r3, [r7, #14]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d104      	bne.n	800b02e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2202      	movs	r2, #2
 800b028:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b02c:	e058      	b.n	800b0e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d055      	beq.n	800b0e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2204      	movs	r2, #4
 800b038:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800b03c:	e050      	b.n	800b0e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	3340      	adds	r3, #64	@ 0x40
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f860 	bl	800b10a <GetLineCoding>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d126      	bne.n	800b0a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2200      	movs	r2, #0
 800b058:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b066:	791b      	ldrb	r3, [r3, #4]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d13b      	bne.n	800b0e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b076:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b078:	429a      	cmp	r2, r3
 800b07a:	d133      	bne.n	800b0e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b086:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b088:	429a      	cmp	r2, r3
 800b08a:	d12b      	bne.n	800b0e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b094:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b096:	429a      	cmp	r2, r3
 800b098:	d124      	bne.n	800b0e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f982 	bl	800b3a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b0a0:	e020      	b.n	800b0e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d01d      	beq.n	800b0e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2204      	movs	r2, #4
 800b0ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800b0b0:	e018      	b.n	800b0e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f867 	bl	800b186 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f8f6 	bl	800b2aa <CDC_ProcessReception>
      break;
 800b0be:	e014      	b.n	800b0ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f001 f988 	bl	800c3d8 <USBH_ClrFeature>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10a      	bne.n	800b0e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800b0da:	e005      	b.n	800b0e8 <USBH_CDC_Process+0x120>

    default:
      break;
 800b0dc:	bf00      	nop
 800b0de:	e004      	b.n	800b0ea <USBH_CDC_Process+0x122>
      break;
 800b0e0:	bf00      	nop
 800b0e2:	e002      	b.n	800b0ea <USBH_CDC_Process+0x122>
      break;
 800b0e4:	bf00      	nop
 800b0e6:	e000      	b.n	800b0ea <USBH_CDC_Process+0x122>
      break;
 800b0e8:	bf00      	nop

  }

  return status;
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	22a1      	movs	r2, #161	@ 0xa1
 800b118:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2221      	movs	r2, #33	@ 0x21
 800b11e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2207      	movs	r2, #7
 800b130:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2207      	movs	r2, #7
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 fc82 	bl	800ca42 <USBH_CtlReq>
 800b13e:	4603      	mov	r3, r0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2221      	movs	r2, #33	@ 0x21
 800b156:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2220      	movs	r2, #32
 800b15c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2207      	movs	r2, #7
 800b16e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	2207      	movs	r2, #7
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f001 fc63 	bl	800ca42 <USBH_CtlReq>
 800b17c:	4603      	mov	r3, r0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b086      	sub	sp, #24
 800b18a:	af02      	add	r7, sp, #8
 800b18c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b198:	2300      	movs	r3, #0
 800b19a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d002      	beq.n	800b1ac <CDC_ProcessTransmission+0x26>
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d023      	beq.n	800b1f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b1aa:	e07a      	b.n	800b2a2 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	8b12      	ldrh	r2, [r2, #24]
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d90b      	bls.n	800b1d0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	69d9      	ldr	r1, [r3, #28]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	8b1a      	ldrh	r2, [r3, #24]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	7b5b      	ldrb	r3, [r3, #13]
 800b1c4:	2001      	movs	r0, #1
 800b1c6:	9000      	str	r0, [sp, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 ff38 	bl	800d03e <USBH_BulkSendData>
 800b1ce:	e00b      	b.n	800b1e8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	7b5b      	ldrb	r3, [r3, #13]
 800b1de:	2001      	movs	r0, #1
 800b1e0:	9000      	str	r0, [sp, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f001 ff2b 	bl	800d03e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800b1f0:	e057      	b.n	800b2a2 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	7b5b      	ldrb	r3, [r3, #13]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f004 fd25 	bl	800fc48 <USBH_LL_GetURBState>
 800b1fe:	4603      	mov	r3, r0
 800b200:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b202:	7afb      	ldrb	r3, [r7, #11]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d136      	bne.n	800b276 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	8b12      	ldrh	r2, [r2, #24]
 800b210:	4293      	cmp	r3, r2
 800b212:	d90e      	bls.n	800b232 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	8b12      	ldrh	r2, [r2, #24]
 800b21c:	1a9a      	subs	r2, r3, r2
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	69db      	ldr	r3, [r3, #28]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	8b12      	ldrh	r2, [r2, #24]
 800b22a:	441a      	add	r2, r3
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	61da      	str	r2, [r3, #28]
 800b230:	e002      	b.n	800b238 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d004      	beq.n	800b24a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800b248:	e006      	b.n	800b258 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f892 	bl	800b37c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2204      	movs	r2, #4
 800b25c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b26c:	2200      	movs	r2, #0
 800b26e:	4619      	mov	r1, r3
 800b270:	f002 f874 	bl	800d35c <osMessagePut>
      break;
 800b274:	e014      	b.n	800b2a0 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800b276:	7afb      	ldrb	r3, [r7, #11]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d111      	bne.n	800b2a0 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2204      	movs	r2, #4
 800b288:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b298:	2200      	movs	r2, #0
 800b29a:	4619      	mov	r1, r3
 800b29c:	f002 f85e 	bl	800d35c <osMessagePut>
      break;
 800b2a0:	bf00      	nop
  }
}
 800b2a2:	bf00      	nop
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b086      	sub	sp, #24
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d002      	beq.n	800b2d0 <CDC_ProcessReception+0x26>
 800b2ca:	2b04      	cmp	r3, #4
 800b2cc:	d00e      	beq.n	800b2ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b2ce:	e051      	b.n	800b374 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	6a19      	ldr	r1, [r3, #32]
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	8b5a      	ldrh	r2, [r3, #26]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	7b1b      	ldrb	r3, [r3, #12]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f001 fed3 	bl	800d088 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2204      	movs	r2, #4
 800b2e6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800b2ea:	e043      	b.n	800b374 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	7b1b      	ldrb	r3, [r3, #12]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f004 fca8 	bl	800fc48 <USBH_LL_GetURBState>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b2fc:	7cfb      	ldrb	r3, [r7, #19]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d137      	bne.n	800b372 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	7b1b      	ldrb	r3, [r3, #12]
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f004 fc0b 	bl	800fb24 <USBH_LL_GetLastXferSize>
 800b30e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	429a      	cmp	r2, r3
 800b318:	d016      	beq.n	800b348 <CDC_ProcessReception+0x9e>
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	8b5b      	ldrh	r3, [r3, #26]
 800b31e:	461a      	mov	r2, r3
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4293      	cmp	r3, r2
 800b324:	d910      	bls.n	800b348 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	1ad2      	subs	r2, r2, r3
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	6a1a      	ldr	r2, [r3, #32]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	441a      	add	r2, r3
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2203      	movs	r2, #3
 800b342:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800b346:	e006      	b.n	800b356 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f81d 	bl	800b390 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2204      	movs	r2, #4
 800b35a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b36a:	2200      	movs	r2, #0
 800b36c:	4619      	mov	r1, r3
 800b36e:	f001 fff5 	bl	800d35c <osMessagePut>
      break;
 800b372:	bf00      	nop
  }
}
 800b374:	bf00      	nop
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b3b8:	b5b0      	push	{r4, r5, r7, lr}
 800b3ba:	b090      	sub	sp, #64	@ 0x40
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	e04d      	b.n	800b46c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	79fa      	ldrb	r2, [r7, #7]
 800b3d4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 f847 	bl	800b47c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d003      	beq.n	800b41c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800b41c:	4b15      	ldr	r3, [pc, #84]	@ (800b474 <USBH_Init+0xbc>)
 800b41e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800b422:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800b428:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b42c:	2100      	movs	r1, #0
 800b42e:	4618      	mov	r0, r3
 800b430:	f001 ff6b 	bl	800d30a <osMessageCreate>
 800b434:	4602      	mov	r2, r0
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800b43c:	4b0e      	ldr	r3, [pc, #56]	@ (800b478 <USBH_Init+0xc0>)
 800b43e:	f107 0414 	add.w	r4, r7, #20
 800b442:	461d      	mov	r5, r3
 800b444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b448:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b44c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800b450:	f107 0314 	add.w	r3, r7, #20
 800b454:	68f9      	ldr	r1, [r7, #12]
 800b456:	4618      	mov	r0, r3
 800b458:	f001 fef7 	bl	800d24a <osThreadCreate>
 800b45c:	4602      	mov	r2, r0
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f004 fa9f 	bl	800f9a8 <USBH_LL_Init>

  return USBH_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3740      	adds	r7, #64	@ 0x40
 800b470:	46bd      	mov	sp, r7
 800b472:	bdb0      	pop	{r4, r5, r7, pc}
 800b474:	0801079c 	.word	0x0801079c
 800b478:	080107b8 	.word	0x080107b8

0800b47c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b484:	2300      	movs	r3, #0
 800b486:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b488:	2300      	movs	r3, #0
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	e009      	b.n	800b4a2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	33e0      	adds	r3, #224	@ 0xe0
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4413      	add	r3, r2
 800b498:	2200      	movs	r2, #0
 800b49a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	60fb      	str	r3, [r7, #12]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b0f      	cmp	r3, #15
 800b4a6:	d9f2      	bls.n	800b48e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e009      	b.n	800b4c2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	60fb      	str	r3, [r7, #12]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4c8:	d3f1      	bcc.n	800b4ae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2240      	movs	r2, #64	@ 0x40
 800b4ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	331c      	adds	r3, #28
 800b51a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b51e:	2100      	movs	r1, #0
 800b520:	4618      	mov	r0, r3
 800b522:	f004 fd21 	bl	800ff68 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b52c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b530:	2100      	movs	r1, #0
 800b532:	4618      	mov	r0, r3
 800b534:	f004 fd18 	bl	800ff68 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b53e:	2212      	movs	r2, #18
 800b540:	2100      	movs	r1, #0
 800b542:	4618      	mov	r0, r3
 800b544:	f004 fd10 	bl	800ff68 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b54e:	223e      	movs	r2, #62	@ 0x3e
 800b550:	2100      	movs	r1, #0
 800b552:	4618      	mov	r0, r3
 800b554:	f004 fd08 	bl	800ff68 <memset>

  return USBH_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b562:	b480      	push	{r7}
 800b564:	b085      	sub	sp, #20
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d016      	beq.n	800b5a4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10e      	bne.n	800b59e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b586:	1c59      	adds	r1, r3, #1
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	33de      	adds	r3, #222	@ 0xde
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]
 800b59c:	e004      	b.n	800b5a8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b59e:	2302      	movs	r3, #2
 800b5a0:	73fb      	strb	r3, [r7, #15]
 800b5a2:	e001      	b.n	800b5a8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3714      	adds	r7, #20
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b085      	sub	sp, #20
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800b5cc:	78fa      	ldrb	r2, [r7, #3]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d204      	bcs.n	800b5dc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	78fa      	ldrb	r2, [r7, #3]
 800b5d6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800b5da:	e001      	b.n	800b5e0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b5dc:	2302      	movs	r3, #2
 800b5de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b087      	sub	sp, #28
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	4608      	mov	r0, r1
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	70fb      	strb	r3, [r7, #3]
 800b600:	460b      	mov	r3, r1
 800b602:	70bb      	strb	r3, [r7, #2]
 800b604:	4613      	mov	r3, r2
 800b606:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b60c:	2300      	movs	r3, #0
 800b60e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b616:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b618:	e025      	b.n	800b666 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b61a:	7dfb      	ldrb	r3, [r7, #23]
 800b61c:	221a      	movs	r2, #26
 800b61e:	fb02 f303 	mul.w	r3, r2, r3
 800b622:	3308      	adds	r3, #8
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	4413      	add	r3, r2
 800b628:	3302      	adds	r3, #2
 800b62a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	795b      	ldrb	r3, [r3, #5]
 800b630:	78fa      	ldrb	r2, [r7, #3]
 800b632:	429a      	cmp	r2, r3
 800b634:	d002      	beq.n	800b63c <USBH_FindInterface+0x4e>
 800b636:	78fb      	ldrb	r3, [r7, #3]
 800b638:	2bff      	cmp	r3, #255	@ 0xff
 800b63a:	d111      	bne.n	800b660 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b640:	78ba      	ldrb	r2, [r7, #2]
 800b642:	429a      	cmp	r2, r3
 800b644:	d002      	beq.n	800b64c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b646:	78bb      	ldrb	r3, [r7, #2]
 800b648:	2bff      	cmp	r3, #255	@ 0xff
 800b64a:	d109      	bne.n	800b660 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b650:	787a      	ldrb	r2, [r7, #1]
 800b652:	429a      	cmp	r2, r3
 800b654:	d002      	beq.n	800b65c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b656:	787b      	ldrb	r3, [r7, #1]
 800b658:	2bff      	cmp	r3, #255	@ 0xff
 800b65a:	d101      	bne.n	800b660 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	e006      	b.n	800b66e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b660:	7dfb      	ldrb	r3, [r7, #23]
 800b662:	3301      	adds	r3, #1
 800b664:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b666:	7dfb      	ldrb	r3, [r7, #23]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d9d6      	bls.n	800b61a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b66c:	23ff      	movs	r3, #255	@ 0xff
}
 800b66e:	4618      	mov	r0, r3
 800b670:	371c      	adds	r7, #28
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f004 f9d6 	bl	800fa34 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b688:	2101      	movs	r1, #1
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f004 faef 	bl	800fc6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b088      	sub	sp, #32
 800b6a0:	af04      	add	r7, sp, #16
 800b6a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d102      	bne.n	800b6be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2203      	movs	r2, #3
 800b6bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b0b      	cmp	r3, #11
 800b6c6:	f200 8244 	bhi.w	800bb52 <USBH_Process+0x4b6>
 800b6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d0 <USBH_Process+0x34>)
 800b6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d0:	0800b701 	.word	0x0800b701
 800b6d4:	0800b74f 	.word	0x0800b74f
 800b6d8:	0800b7d3 	.word	0x0800b7d3
 800b6dc:	0800bad1 	.word	0x0800bad1
 800b6e0:	0800bb53 	.word	0x0800bb53
 800b6e4:	0800b88f 	.word	0x0800b88f
 800b6e8:	0800ba5b 	.word	0x0800ba5b
 800b6ec:	0800b8e1 	.word	0x0800b8e1
 800b6f0:	0800b91d 	.word	0x0800b91d
 800b6f4:	0800b955 	.word	0x0800b955
 800b6f8:	0800b9b3 	.word	0x0800b9b3
 800b6fc:	0800bab9 	.word	0x0800bab9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 8224 	beq.w	800bb56 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2201      	movs	r2, #1
 800b712:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b714:	20c8      	movs	r0, #200	@ 0xc8
 800b716:	f004 faf4 	bl	800fd02 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f004 f9e7 	bl	800faee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b744:	2200      	movs	r2, #0
 800b746:	4619      	mov	r1, r3
 800b748:	f001 fe08 	bl	800d35c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b74c:	e203      	b.n	800bb56 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b754:	2b01      	cmp	r3, #1
 800b756:	d107      	bne.n	800b768 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2202      	movs	r2, #2
 800b764:	701a      	strb	r2, [r3, #0]
 800b766:	e025      	b.n	800b7b4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b76e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b772:	d914      	bls.n	800b79e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b77a:	3301      	adds	r3, #1
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d903      	bls.n	800b796 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	220d      	movs	r2, #13
 800b792:	701a      	strb	r2, [r3, #0]
 800b794:	e00e      	b.n	800b7b4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	e00a      	b.n	800b7b4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b7a4:	f103 020a 	add.w	r2, r3, #10
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800b7ae:	200a      	movs	r0, #10
 800b7b0:	f004 faa7 	bl	800fd02 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	f001 fdc6 	bl	800d35c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b7d0:	e1c8      	b.n	800bb64 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d005      	beq.n	800b7e8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b7e2:	2104      	movs	r1, #4
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b7e8:	2064      	movs	r0, #100	@ 0x64
 800b7ea:	f004 fa8a 	bl	800fd02 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f004 f956 	bl	800faa0 <USBH_LL_GetSpeed>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2205      	movs	r2, #5
 800b802:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b804:	2100      	movs	r1, #0
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f001 fc8b 	bl	800d122 <USBH_AllocPipe>
 800b80c:	4603      	mov	r3, r0
 800b80e:	461a      	mov	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b814:	2180      	movs	r1, #128	@ 0x80
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f001 fc83 	bl	800d122 <USBH_AllocPipe>
 800b81c:	4603      	mov	r3, r0
 800b81e:	461a      	mov	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	7919      	ldrb	r1, [r3, #4]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b838:	9202      	str	r2, [sp, #8]
 800b83a:	2200      	movs	r2, #0
 800b83c:	9201      	str	r2, [sp, #4]
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	4603      	mov	r3, r0
 800b842:	2280      	movs	r2, #128	@ 0x80
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f001 fc3d 	bl	800d0c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	7959      	ldrb	r1, [r3, #5]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b85e:	9202      	str	r2, [sp, #8]
 800b860:	2200      	movs	r2, #0
 800b862:	9201      	str	r2, [sp, #4]
 800b864:	9300      	str	r3, [sp, #0]
 800b866:	4603      	mov	r3, r0
 800b868:	2200      	movs	r2, #0
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f001 fc2a 	bl	800d0c4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b884:	2200      	movs	r2, #0
 800b886:	4619      	mov	r1, r3
 800b888:	f001 fd68 	bl	800d35c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b88c:	e16a      	b.n	800bb64 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f96e 	bl	800bb70 <USBH_HandleEnum>
 800b894:	4603      	mov	r3, r0
 800b896:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b898:	7bbb      	ldrb	r3, [r7, #14]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f040 815c 	bne.w	800bb5a <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d103      	bne.n	800b8bc <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2208      	movs	r2, #8
 800b8b8:	701a      	strb	r2, [r3, #0]
 800b8ba:	e002      	b.n	800b8c2 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2207      	movs	r2, #7
 800b8c0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2205      	movs	r2, #5
 800b8c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	4619      	mov	r1, r3
 800b8da:	f001 fd3f 	bl	800d35c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b8de:	e13c      	b.n	800bb5a <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f000 8139 	beq.w	800bb5e <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b8f2:	2101      	movs	r1, #1
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2208      	movs	r2, #8
 800b8fc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2205      	movs	r2, #5
 800b902:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b912:	2200      	movs	r2, #0
 800b914:	4619      	mov	r1, r3
 800b916:	f001 fd21 	bl	800d35c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b91a:	e120      	b.n	800bb5e <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b922:	4619      	mov	r1, r3
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fd10 	bl	800c34a <USBH_SetCfg>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d102      	bne.n	800b936 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2209      	movs	r2, #9
 800b934:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b94a:	2200      	movs	r2, #0
 800b94c:	4619      	mov	r1, r3
 800b94e:	f001 fd05 	bl	800d35c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b952:	e107      	b.n	800bb64 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b95a:	f003 0320 	and.w	r3, r3, #32
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d015      	beq.n	800b98e <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b962:	2101      	movs	r1, #1
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fd13 	bl	800c390 <USBH_SetFeature>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b00      	cmp	r3, #0
 800b974:	d103      	bne.n	800b97e <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	220a      	movs	r2, #10
 800b97a:	701a      	strb	r2, [r3, #0]
 800b97c:	e00a      	b.n	800b994 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b97e:	7bbb      	ldrb	r3, [r7, #14]
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b03      	cmp	r3, #3
 800b984:	d106      	bne.n	800b994 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	220a      	movs	r2, #10
 800b98a:	701a      	strb	r2, [r3, #0]
 800b98c:	e002      	b.n	800b994 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	220a      	movs	r2, #10
 800b992:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	f001 fcd6 	bl	800d35c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b9b0:	e0d8      	b.n	800bb64 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d03f      	beq.n	800ba3c <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
 800b9c8:	e016      	b.n	800b9f8 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b9ca:	7bfa      	ldrb	r2, [r7, #15]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	32de      	adds	r2, #222	@ 0xde
 800b9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d4:	791a      	ldrb	r2, [r3, #4]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d108      	bne.n	800b9f2 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b9e0:	7bfa      	ldrb	r2, [r7, #15]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	32de      	adds	r2, #222	@ 0xde
 800b9e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b9f0:	e005      	b.n	800b9fe <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	73fb      	strb	r3, [r7, #15]
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0e5      	beq.n	800b9ca <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d016      	beq.n	800ba36 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	4798      	blx	r3
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d109      	bne.n	800ba2e <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2206      	movs	r2, #6
 800ba1e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ba26:	2103      	movs	r1, #3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	4798      	blx	r3
 800ba2c:	e006      	b.n	800ba3c <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	220d      	movs	r2, #13
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	e002      	b.n	800ba3c <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	220d      	movs	r2, #13
 800ba3a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2205      	movs	r2, #5
 800ba40:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ba50:	2200      	movs	r2, #0
 800ba52:	4619      	mov	r1, r3
 800ba54:	f001 fc82 	bl	800d35c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba58:	e084      	b.n	800bb64 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d017      	beq.n	800ba94 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	4798      	blx	r3
 800ba70:	4603      	mov	r3, r0
 800ba72:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d103      	bne.n	800ba84 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	220b      	movs	r2, #11
 800ba80:	701a      	strb	r2, [r3, #0]
 800ba82:	e00a      	b.n	800ba9a <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800ba84:	7bbb      	ldrb	r3, [r7, #14]
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d106      	bne.n	800ba9a <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	220d      	movs	r2, #13
 800ba90:	701a      	strb	r2, [r3, #0]
 800ba92:	e002      	b.n	800ba9a <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	220d      	movs	r2, #13
 800ba98:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2205      	movs	r2, #5
 800ba9e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800baae:	2200      	movs	r2, #0
 800bab0:	4619      	mov	r1, r3
 800bab2:	f001 fc53 	bl	800d35c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bab6:	e055      	b.n	800bb64 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d04f      	beq.n	800bb62 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	4798      	blx	r3
      }
      break;
 800bace:	e048      	b.n	800bb62 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f7ff fccf 	bl	800b47c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d009      	beq.n	800bafc <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d005      	beq.n	800bb12 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800bb0c:	2105      	movs	r1, #5
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d107      	bne.n	800bb2e <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff fda7 	bl	800b67a <USBH_Start>
 800bb2c:	e002      	b.n	800bb34 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f003 ff80 	bl	800fa34 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800bb48:	2200      	movs	r2, #0
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	f001 fc06 	bl	800d35c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb50:	e008      	b.n	800bb64 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800bb52:	bf00      	nop
 800bb54:	e006      	b.n	800bb64 <USBH_Process+0x4c8>
      break;
 800bb56:	bf00      	nop
 800bb58:	e004      	b.n	800bb64 <USBH_Process+0x4c8>
      break;
 800bb5a:	bf00      	nop
 800bb5c:	e002      	b.n	800bb64 <USBH_Process+0x4c8>
    break;
 800bb5e:	bf00      	nop
 800bb60:	e000      	b.n	800bb64 <USBH_Process+0x4c8>
      break;
 800bb62:	bf00      	nop
  }
  return USBH_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop

0800bb70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af04      	add	r7, sp, #16
 800bb76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	785b      	ldrb	r3, [r3, #1]
 800bb84:	2b07      	cmp	r3, #7
 800bb86:	f200 8204 	bhi.w	800bf92 <USBH_HandleEnum+0x422>
 800bb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb90 <USBH_HandleEnum+0x20>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bbb1 	.word	0x0800bbb1
 800bb94:	0800bc6b 	.word	0x0800bc6b
 800bb98:	0800bcd5 	.word	0x0800bcd5
 800bb9c:	0800bd5f 	.word	0x0800bd5f
 800bba0:	0800bdc9 	.word	0x0800bdc9
 800bba4:	0800be39 	.word	0x0800be39
 800bba8:	0800bed5 	.word	0x0800bed5
 800bbac:	0800bf53 	.word	0x0800bf53
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bbb0:	2108      	movs	r1, #8
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fae6 	bl	800c184 <USBH_Get_DevDesc>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bbbc:	7bbb      	ldrb	r3, [r7, #14]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d12e      	bne.n	800bc20 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	7919      	ldrb	r1, [r3, #4]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bbe6:	9202      	str	r2, [sp, #8]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	9201      	str	r2, [sp, #4]
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2280      	movs	r2, #128	@ 0x80
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f001 fa66 	bl	800d0c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	7959      	ldrb	r1, [r3, #5]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bc0c:	9202      	str	r2, [sp, #8]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	9201      	str	r2, [sp, #4]
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	4603      	mov	r3, r0
 800bc16:	2200      	movs	r2, #0
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f001 fa53 	bl	800d0c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bc1e:	e1ba      	b.n	800bf96 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc20:	7bbb      	ldrb	r3, [r7, #14]
 800bc22:	2b03      	cmp	r3, #3
 800bc24:	f040 81b7 	bne.w	800bf96 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bc2e:	3301      	adds	r3, #1
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d903      	bls.n	800bc4a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	220d      	movs	r2, #13
 800bc46:	701a      	strb	r2, [r3, #0]
      break;
 800bc48:	e1a5      	b.n	800bf96 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	795b      	ldrb	r3, [r3, #5]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f001 fa87 	bl	800d164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	791b      	ldrb	r3, [r3, #4]
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f001 fa81 	bl	800d164 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	701a      	strb	r2, [r3, #0]
      break;
 800bc68:	e195      	b.n	800bf96 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bc6a:	2112      	movs	r1, #18
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fa89 	bl	800c184 <USBH_Get_DevDesc>
 800bc72:	4603      	mov	r3, r0
 800bc74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc76:	7bbb      	ldrb	r3, [r7, #14]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d103      	bne.n	800bc84 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bc82:	e18a      	b.n	800bf9a <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc84:	7bbb      	ldrb	r3, [r7, #14]
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	f040 8187 	bne.w	800bf9a <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bc92:	3301      	adds	r3, #1
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d903      	bls.n	800bcae <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	220d      	movs	r2, #13
 800bcaa:	701a      	strb	r2, [r3, #0]
      break;
 800bcac:	e175      	b.n	800bf9a <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	795b      	ldrb	r3, [r3, #5]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f001 fa55 	bl	800d164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	791b      	ldrb	r3, [r3, #4]
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f001 fa4f 	bl	800d164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	701a      	strb	r2, [r3, #0]
      break;
 800bcd2:	e162      	b.n	800bf9a <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 fb13 	bl	800c302 <USBH_SetAddress>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d130      	bne.n	800bd48 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800bce6:	2002      	movs	r0, #2
 800bce8:	f004 f80b 	bl	800fd02 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2203      	movs	r2, #3
 800bcf8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	7919      	ldrb	r1, [r3, #4]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bd0e:	9202      	str	r2, [sp, #8]
 800bd10:	2200      	movs	r2, #0
 800bd12:	9201      	str	r2, [sp, #4]
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	4603      	mov	r3, r0
 800bd18:	2280      	movs	r2, #128	@ 0x80
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f001 f9d2 	bl	800d0c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	7959      	ldrb	r1, [r3, #5]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bd34:	9202      	str	r2, [sp, #8]
 800bd36:	2200      	movs	r2, #0
 800bd38:	9201      	str	r2, [sp, #4]
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2200      	movs	r2, #0
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f001 f9bf 	bl	800d0c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bd46:	e12a      	b.n	800bf9e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
 800bd4a:	2b03      	cmp	r3, #3
 800bd4c:	f040 8127 	bne.w	800bf9e <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	220d      	movs	r2, #13
 800bd54:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	705a      	strb	r2, [r3, #1]
      break;
 800bd5c:	e11f      	b.n	800bf9e <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bd5e:	2109      	movs	r1, #9
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fa3b 	bl	800c1dc <USBH_Get_CfgDesc>
 800bd66:	4603      	mov	r3, r0
 800bd68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd6a:	7bbb      	ldrb	r3, [r7, #14]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d103      	bne.n	800bd78 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2204      	movs	r2, #4
 800bd74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd76:	e114      	b.n	800bfa2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	2b03      	cmp	r3, #3
 800bd7c:	f040 8111 	bne.w	800bfa2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bd86:	3301      	adds	r3, #1
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	d903      	bls.n	800bda2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	220d      	movs	r2, #13
 800bd9e:	701a      	strb	r2, [r3, #0]
      break;
 800bda0:	e0ff      	b.n	800bfa2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	795b      	ldrb	r3, [r3, #5]
 800bda6:	4619      	mov	r1, r3
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f001 f9db 	bl	800d164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	791b      	ldrb	r3, [r3, #4]
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f001 f9d5 	bl	800d164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	701a      	strb	r2, [r3, #0]
      break;
 800bdc6:	e0ec      	b.n	800bfa2 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800bdce:	4619      	mov	r1, r3
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fa03 	bl	800c1dc <USBH_Get_CfgDesc>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bdda:	7bbb      	ldrb	r3, [r7, #14]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d103      	bne.n	800bde8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2205      	movs	r2, #5
 800bde4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bde6:	e0de      	b.n	800bfa6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bde8:	7bbb      	ldrb	r3, [r7, #14]
 800bdea:	2b03      	cmp	r3, #3
 800bdec:	f040 80db 	bne.w	800bfa6 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800be06:	2b03      	cmp	r3, #3
 800be08:	d903      	bls.n	800be12 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	220d      	movs	r2, #13
 800be0e:	701a      	strb	r2, [r3, #0]
      break;
 800be10:	e0c9      	b.n	800bfa6 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	795b      	ldrb	r3, [r3, #5]
 800be16:	4619      	mov	r1, r3
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f001 f9a3 	bl	800d164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	791b      	ldrb	r3, [r3, #4]
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f001 f99d 	bl	800d164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	701a      	strb	r2, [r3, #0]
      break;
 800be36:	e0b6      	b.n	800bfa6 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d036      	beq.n	800beb0 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800be4e:	23ff      	movs	r3, #255	@ 0xff
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f9ed 	bl	800c230 <USBH_Get_StringDesc>
 800be56:	4603      	mov	r3, r0
 800be58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be5a:	7bbb      	ldrb	r3, [r7, #14]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d111      	bne.n	800be84 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2206      	movs	r2, #6
 800be64:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2205      	movs	r2, #5
 800be6a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800be7a:	2200      	movs	r2, #0
 800be7c:	4619      	mov	r1, r3
 800be7e:	f001 fa6d 	bl	800d35c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be82:	e092      	b.n	800bfaa <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be84:	7bbb      	ldrb	r3, [r7, #14]
 800be86:	2b03      	cmp	r3, #3
 800be88:	f040 808f 	bne.w	800bfaa <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2206      	movs	r2, #6
 800be90:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2205      	movs	r2, #5
 800be96:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800bea6:	2200      	movs	r2, #0
 800bea8:	4619      	mov	r1, r3
 800beaa:	f001 fa57 	bl	800d35c <osMessagePut>
      break;
 800beae:	e07c      	b.n	800bfaa <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2206      	movs	r2, #6
 800beb4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2205      	movs	r2, #5
 800beba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800beca:	2200      	movs	r2, #0
 800becc:	4619      	mov	r1, r3
 800bece:	f001 fa45 	bl	800d35c <osMessagePut>
      break;
 800bed2:	e06a      	b.n	800bfaa <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d027      	beq.n	800bf2e <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800beea:	23ff      	movs	r3, #255	@ 0xff
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 f99f 	bl	800c230 <USBH_Get_StringDesc>
 800bef2:	4603      	mov	r3, r0
 800bef4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bef6:	7bbb      	ldrb	r3, [r7, #14]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d103      	bne.n	800bf04 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2207      	movs	r2, #7
 800bf00:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bf02:	e054      	b.n	800bfae <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf04:	7bbb      	ldrb	r3, [r7, #14]
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	d151      	bne.n	800bfae <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2207      	movs	r2, #7
 800bf0e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2205      	movs	r2, #5
 800bf14:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800bf24:	2200      	movs	r2, #0
 800bf26:	4619      	mov	r1, r3
 800bf28:	f001 fa18 	bl	800d35c <osMessagePut>
      break;
 800bf2c:	e03f      	b.n	800bfae <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2207      	movs	r2, #7
 800bf32:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2205      	movs	r2, #5
 800bf38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	f001 fa06 	bl	800d35c <osMessagePut>
      break;
 800bf50:	e02d      	b.n	800bfae <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d017      	beq.n	800bf8c <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bf68:	23ff      	movs	r3, #255	@ 0xff
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 f960 	bl	800c230 <USBH_Get_StringDesc>
 800bf70:	4603      	mov	r3, r0
 800bf72:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bf74:	7bbb      	ldrb	r3, [r7, #14]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d102      	bne.n	800bf80 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bf7e:	e018      	b.n	800bfb2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
 800bf82:	2b03      	cmp	r3, #3
 800bf84:	d115      	bne.n	800bfb2 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	73fb      	strb	r3, [r7, #15]
      break;
 800bf8a:	e012      	b.n	800bfb2 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf90:	e00f      	b.n	800bfb2 <USBH_HandleEnum+0x442>

    default:
      break;
 800bf92:	bf00      	nop
 800bf94:	e00e      	b.n	800bfb4 <USBH_HandleEnum+0x444>
      break;
 800bf96:	bf00      	nop
 800bf98:	e00c      	b.n	800bfb4 <USBH_HandleEnum+0x444>
      break;
 800bf9a:	bf00      	nop
 800bf9c:	e00a      	b.n	800bfb4 <USBH_HandleEnum+0x444>
      break;
 800bf9e:	bf00      	nop
 800bfa0:	e008      	b.n	800bfb4 <USBH_HandleEnum+0x444>
      break;
 800bfa2:	bf00      	nop
 800bfa4:	e006      	b.n	800bfb4 <USBH_HandleEnum+0x444>
      break;
 800bfa6:	bf00      	nop
 800bfa8:	e004      	b.n	800bfb4 <USBH_HandleEnum+0x444>
      break;
 800bfaa:	bf00      	nop
 800bfac:	e002      	b.n	800bfb4 <USBH_HandleEnum+0x444>
      break;
 800bfae:	bf00      	nop
 800bfb0:	e000      	b.n	800bfb4 <USBH_HandleEnum+0x444>
      break;
 800bfb2:	bf00      	nop
  }
  return Status;
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop

0800bfc0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800bfd2:	bf00      	nop
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b082      	sub	sp, #8
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 f804 	bl	800c002 <USBH_HandleSof>
}
 800bffa:	bf00      	nop
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b0b      	cmp	r3, #11
 800c012:	d10a      	bne.n	800c02a <USBH_HandleSof+0x28>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d005      	beq.n	800c02a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c024:	699b      	ldr	r3, [r3, #24]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	4798      	blx	r3
  }
}
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2201      	movs	r2, #1
 800c046:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c056:	2200      	movs	r2, #0
 800c058:	4619      	mov	r1, r3
 800c05a:	f001 f97f 	bl	800d35c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c05e:	bf00      	nop
}
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c066:	b480      	push	{r7}
 800c068:	b083      	sub	sp, #12
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800c076:	bf00      	nop
}
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b082      	sub	sp, #8
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	f001 f94f 	bl	800d35c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f003 fcbe 	bl	800fa6a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	791b      	ldrb	r3, [r3, #4]
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f001 f835 	bl	800d164 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	795b      	ldrb	r3, [r3, #5]
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f001 f82f 	bl	800d164 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c11a:	2200      	movs	r2, #0
 800c11c:	4619      	mov	r1, r3
 800c11e:	f001 f91d 	bl	800d35c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 800c13a:	f107 030c 	add.w	r3, r7, #12
 800c13e:	f04f 32ff 	mov.w	r2, #4294967295
 800c142:	4618      	mov	r0, r3
 800c144:	f001 f94a 	bl	800d3dc <osMessageGet>
    if (event.status == osEventMessage)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2b10      	cmp	r3, #16
 800c14c:	d1f2      	bne.n	800c134 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff faa4 	bl	800b69c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800c154:	e7ee      	b.n	800c134 <USBH_Process_OS+0x8>

0800c156 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800c172:	2200      	movs	r2, #0
 800c174:	4619      	mov	r1, r3
 800c176:	f001 f8f1 	bl	800d35c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af02      	add	r7, sp, #8
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c190:	887b      	ldrh	r3, [r7, #2]
 800c192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c196:	d901      	bls.n	800c19c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c198:	2303      	movs	r3, #3
 800c19a:	e01b      	b.n	800c1d4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c1a2:	887b      	ldrh	r3, [r7, #2]
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 f872 	bl	800c298 <USBH_GetDescriptor>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d109      	bne.n	800c1d2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c1c4:	887a      	ldrh	r2, [r7, #2]
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f929 	bl	800c420 <USBH_ParseDevDesc>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af02      	add	r7, sp, #8
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	331c      	adds	r3, #28
 800c1ec:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800c1ee:	887b      	ldrh	r3, [r7, #2]
 800c1f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1f4:	d901      	bls.n	800c1fa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	e016      	b.n	800c228 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c1fa:	887b      	ldrh	r3, [r7, #2]
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c204:	2100      	movs	r1, #0
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 f846 	bl	800c298 <USBH_GetDescriptor>
 800c20c:	4603      	mov	r3, r0
 800c20e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d107      	bne.n	800c226 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c216:	887b      	ldrh	r3, [r7, #2]
 800c218:	461a      	mov	r2, r3
 800c21a:	68b9      	ldr	r1, [r7, #8]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f9af 	bl	800c580 <USBH_ParseCfgDesc>
 800c222:	4603      	mov	r3, r0
 800c224:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c226:	7bfb      	ldrb	r3, [r7, #15]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b088      	sub	sp, #32
 800c234:	af02      	add	r7, sp, #8
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	607a      	str	r2, [r7, #4]
 800c23a:	461a      	mov	r2, r3
 800c23c:	460b      	mov	r3, r1
 800c23e:	72fb      	strb	r3, [r7, #11]
 800c240:	4613      	mov	r3, r2
 800c242:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800c244:	893b      	ldrh	r3, [r7, #8]
 800c246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c24a:	d802      	bhi.n	800c252 <USBH_Get_StringDesc+0x22>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d101      	bne.n	800c256 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c252:	2303      	movs	r3, #3
 800c254:	e01c      	b.n	800c290 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800c256:	7afb      	ldrb	r3, [r7, #11]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800c25e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c266:	893b      	ldrh	r3, [r7, #8]
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	460b      	mov	r3, r1
 800c26c:	2100      	movs	r1, #0
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 f812 	bl	800c298 <USBH_GetDescriptor>
 800c274:	4603      	mov	r3, r0
 800c276:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d107      	bne.n	800c28e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c284:	893a      	ldrh	r2, [r7, #8]
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 fb8d 	bl	800c9a8 <USBH_ParseStringDesc>
  }

  return status;
 800c28e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c290:	4618      	mov	r0, r3
 800c292:	3718      	adds	r7, #24
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	607b      	str	r3, [r7, #4]
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	72fb      	strb	r3, [r7, #11]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	789b      	ldrb	r3, [r3, #2]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d11c      	bne.n	800c2ec <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c2b2:	7afb      	ldrb	r3, [r7, #11]
 800c2b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2206      	movs	r2, #6
 800c2c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	893a      	ldrh	r2, [r7, #8]
 800c2c8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c2ca:	893b      	ldrh	r3, [r7, #8]
 800c2cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c2d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2d4:	d104      	bne.n	800c2e0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f240 4209 	movw	r2, #1033	@ 0x409
 800c2dc:	829a      	strh	r2, [r3, #20]
 800c2de:	e002      	b.n	800c2e6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	8b3a      	ldrh	r2, [r7, #24]
 800c2ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c2ec:	8b3b      	ldrh	r3, [r7, #24]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	6879      	ldr	r1, [r7, #4]
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f000 fba5 	bl	800ca42 <USBH_CtlReq>
 800c2f8:	4603      	mov	r3, r0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b082      	sub	sp, #8
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	460b      	mov	r3, r1
 800c30c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	789b      	ldrb	r3, [r3, #2]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d10f      	bne.n	800c336 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2205      	movs	r2, #5
 800c320:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c322:	78fb      	ldrb	r3, [r7, #3]
 800c324:	b29a      	uxth	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c336:	2200      	movs	r2, #0
 800c338:	2100      	movs	r1, #0
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 fb81 	bl	800ca42 <USBH_CtlReq>
 800c340:	4603      	mov	r3, r0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b082      	sub	sp, #8
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	460b      	mov	r3, r1
 800c354:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	789b      	ldrb	r3, [r3, #2]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d10e      	bne.n	800c37c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2209      	movs	r2, #9
 800c368:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	887a      	ldrh	r2, [r7, #2]
 800c36e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c37c:	2200      	movs	r2, #0
 800c37e:	2100      	movs	r1, #0
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fb5e 	bl	800ca42 <USBH_CtlReq>
 800c386:	4603      	mov	r3, r0
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	789b      	ldrb	r3, [r3, #2]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d10f      	bne.n	800c3c4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2203      	movs	r2, #3
 800c3ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c3b0:	78fb      	ldrb	r3, [r7, #3]
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fb3a 	bl	800ca42 <USBH_CtlReq>
 800c3ce:	4603      	mov	r3, r0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	789b      	ldrb	r3, [r3, #2]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d10f      	bne.n	800c40c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2202      	movs	r2, #2
 800c3f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c3fe:	78fb      	ldrb	r3, [r7, #3]
 800c400:	b29a      	uxth	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c40c:	2200      	movs	r2, #0
 800c40e:	2100      	movs	r1, #0
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fb16 	bl	800ca42 <USBH_CtlReq>
 800c416:	4603      	mov	r3, r0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	4613      	mov	r3, r2
 800c42c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c434:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c440:	2302      	movs	r3, #2
 800c442:	e094      	b.n	800c56e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	781a      	ldrb	r2, [r3, #0]
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	785a      	ldrb	r2, [r3, #1]
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	3302      	adds	r3, #2
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	3303      	adds	r3, #3
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	021b      	lsls	r3, r3, #8
 800c464:	b29b      	uxth	r3, r3
 800c466:	4313      	orrs	r3, r2
 800c468:	b29a      	uxth	r2, r3
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	791a      	ldrb	r2, [r3, #4]
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	795a      	ldrb	r2, [r3, #5]
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	799a      	ldrb	r2, [r3, #6]
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	79da      	ldrb	r2, [r3, #7]
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c494:	2b00      	cmp	r3, #0
 800c496:	d004      	beq.n	800c4a2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d11b      	bne.n	800c4da <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	79db      	ldrb	r3, [r3, #7]
 800c4a6:	2b20      	cmp	r3, #32
 800c4a8:	dc0f      	bgt.n	800c4ca <USBH_ParseDevDesc+0xaa>
 800c4aa:	2b08      	cmp	r3, #8
 800c4ac:	db0f      	blt.n	800c4ce <USBH_ParseDevDesc+0xae>
 800c4ae:	3b08      	subs	r3, #8
 800c4b0:	4a32      	ldr	r2, [pc, #200]	@ (800c57c <USBH_ParseDevDesc+0x15c>)
 800c4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4b6:	f003 0301 	and.w	r3, r3, #1
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	bf14      	ite	ne
 800c4be:	2301      	movne	r3, #1
 800c4c0:	2300      	moveq	r3, #0
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d106      	bne.n	800c4d6 <USBH_ParseDevDesc+0xb6>
 800c4c8:	e001      	b.n	800c4ce <USBH_ParseDevDesc+0xae>
 800c4ca:	2b40      	cmp	r3, #64	@ 0x40
 800c4cc:	d003      	beq.n	800c4d6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	2208      	movs	r2, #8
 800c4d2:	71da      	strb	r2, [r3, #7]
        break;
 800c4d4:	e000      	b.n	800c4d8 <USBH_ParseDevDesc+0xb8>
        break;
 800c4d6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c4d8:	e00e      	b.n	800c4f8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d107      	bne.n	800c4f4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	79db      	ldrb	r3, [r3, #7]
 800c4e8:	2b08      	cmp	r3, #8
 800c4ea:	d005      	beq.n	800c4f8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2208      	movs	r2, #8
 800c4f0:	71da      	strb	r2, [r3, #7]
 800c4f2:	e001      	b.n	800c4f8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c4f8:	88fb      	ldrh	r3, [r7, #6]
 800c4fa:	2b08      	cmp	r3, #8
 800c4fc:	d936      	bls.n	800c56c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	3308      	adds	r3, #8
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	461a      	mov	r2, r3
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	3309      	adds	r3, #9
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	021b      	lsls	r3, r3, #8
 800c50e:	b29b      	uxth	r3, r3
 800c510:	4313      	orrs	r3, r2
 800c512:	b29a      	uxth	r2, r3
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	330a      	adds	r3, #10
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	330b      	adds	r3, #11
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	021b      	lsls	r3, r3, #8
 800c528:	b29b      	uxth	r3, r3
 800c52a:	4313      	orrs	r3, r2
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	330c      	adds	r3, #12
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	461a      	mov	r2, r3
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	330d      	adds	r3, #13
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	021b      	lsls	r3, r3, #8
 800c542:	b29b      	uxth	r3, r3
 800c544:	4313      	orrs	r3, r2
 800c546:	b29a      	uxth	r2, r3
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	7b9a      	ldrb	r2, [r3, #14]
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	7bda      	ldrb	r2, [r3, #15]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	7c1a      	ldrb	r2, [r3, #16]
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	7c5a      	ldrb	r2, [r3, #17]
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	371c      	adds	r7, #28
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	01000101 	.word	0x01000101

0800c580 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08c      	sub	sp, #48	@ 0x30
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4613      	mov	r3, r2
 800c58c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c594:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c59c:	2300      	movs	r3, #0
 800c59e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d101      	bne.n	800c5b2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	e0da      	b.n	800c768 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	781a      	ldrb	r2, [r3, #0]
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	785a      	ldrb	r2, [r3, #1]
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	3302      	adds	r3, #2
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	3303      	adds	r3, #3
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	021b      	lsls	r3, r3, #8
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5e0:	bf28      	it	cs
 800c5e2:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	6a3b      	ldr	r3, [r7, #32]
 800c5ea:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	791a      	ldrb	r2, [r3, #4]
 800c5f0:	6a3b      	ldr	r3, [r7, #32]
 800c5f2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	795a      	ldrb	r2, [r3, #5]
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	799a      	ldrb	r2, [r3, #6]
 800c600:	6a3b      	ldr	r3, [r7, #32]
 800c602:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	79da      	ldrb	r2, [r3, #7]
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	7a1a      	ldrb	r2, [r3, #8]
 800c610:	6a3b      	ldr	r3, [r7, #32]
 800c612:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	2b09      	cmp	r3, #9
 800c61a:	d002      	beq.n	800c622 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c61c:	6a3b      	ldr	r3, [r7, #32]
 800c61e:	2209      	movs	r2, #9
 800c620:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c622:	88fb      	ldrh	r3, [r7, #6]
 800c624:	2b09      	cmp	r3, #9
 800c626:	f240 809d 	bls.w	800c764 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800c62a:	2309      	movs	r3, #9
 800c62c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c62e:	2300      	movs	r3, #0
 800c630:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c632:	e081      	b.n	800c738 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c634:	f107 0316 	add.w	r3, r7, #22
 800c638:	4619      	mov	r1, r3
 800c63a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c63c:	f000 f9e7 	bl	800ca0e <USBH_GetNextDesc>
 800c640:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c644:	785b      	ldrb	r3, [r3, #1]
 800c646:	2b04      	cmp	r3, #4
 800c648:	d176      	bne.n	800c738 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	2b09      	cmp	r3, #9
 800c650:	d002      	beq.n	800c658 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c654:	2209      	movs	r2, #9
 800c656:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c65c:	221a      	movs	r2, #26
 800c65e:	fb02 f303 	mul.w	r3, r2, r3
 800c662:	3308      	adds	r3, #8
 800c664:	6a3a      	ldr	r2, [r7, #32]
 800c666:	4413      	add	r3, r2
 800c668:	3302      	adds	r3, #2
 800c66a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c66c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c66e:	69f8      	ldr	r0, [r7, #28]
 800c670:	f000 f87e 	bl	800c770 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c674:	2300      	movs	r3, #0
 800c676:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c67a:	2300      	movs	r3, #0
 800c67c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c67e:	e043      	b.n	800c708 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c680:	f107 0316 	add.w	r3, r7, #22
 800c684:	4619      	mov	r1, r3
 800c686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c688:	f000 f9c1 	bl	800ca0e <USBH_GetNextDesc>
 800c68c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c690:	785b      	ldrb	r3, [r3, #1]
 800c692:	2b05      	cmp	r3, #5
 800c694:	d138      	bne.n	800c708 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	795b      	ldrb	r3, [r3, #5]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d113      	bne.n	800c6c6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d003      	beq.n	800c6ae <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	799b      	ldrb	r3, [r3, #6]
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d10b      	bne.n	800c6c6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	79db      	ldrb	r3, [r3, #7]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10b      	bne.n	800c6ce <USBH_ParseCfgDesc+0x14e>
 800c6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	2b09      	cmp	r3, #9
 800c6bc:	d007      	beq.n	800c6ce <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800c6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c0:	2209      	movs	r2, #9
 800c6c2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c6c4:	e003      	b.n	800c6ce <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c8:	2207      	movs	r2, #7
 800c6ca:	701a      	strb	r2, [r3, #0]
 800c6cc:	e000      	b.n	800c6d0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c6ce:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6d4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c6d8:	3201      	adds	r2, #1
 800c6da:	00d2      	lsls	r2, r2, #3
 800c6dc:	211a      	movs	r1, #26
 800c6de:	fb01 f303 	mul.w	r3, r1, r3
 800c6e2:	4413      	add	r3, r2
 800c6e4:	3308      	adds	r3, #8
 800c6e6:	6a3a      	ldr	r2, [r7, #32]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c6ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6f0:	69b9      	ldr	r1, [r7, #24]
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f000 f870 	bl	800c7d8 <USBH_ParseEPDesc>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800c6fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c702:	3301      	adds	r3, #1
 800c704:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	791b      	ldrb	r3, [r3, #4]
 800c70c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c710:	429a      	cmp	r2, r3
 800c712:	d204      	bcs.n	800c71e <USBH_ParseCfgDesc+0x19e>
 800c714:	6a3b      	ldr	r3, [r7, #32]
 800c716:	885a      	ldrh	r2, [r3, #2]
 800c718:	8afb      	ldrh	r3, [r7, #22]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d8b0      	bhi.n	800c680 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	791b      	ldrb	r3, [r3, #4]
 800c722:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c726:	429a      	cmp	r2, r3
 800c728:	d201      	bcs.n	800c72e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800c72a:	2303      	movs	r3, #3
 800c72c:	e01c      	b.n	800c768 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800c72e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c732:	3301      	adds	r3, #1
 800c734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d805      	bhi.n	800c74c <USBH_ParseCfgDesc+0x1cc>
 800c740:	6a3b      	ldr	r3, [r7, #32]
 800c742:	885a      	ldrh	r2, [r3, #2]
 800c744:	8afb      	ldrh	r3, [r7, #22]
 800c746:	429a      	cmp	r2, r3
 800c748:	f63f af74 	bhi.w	800c634 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c74c:	6a3b      	ldr	r3, [r7, #32]
 800c74e:	791b      	ldrb	r3, [r3, #4]
 800c750:	2b02      	cmp	r3, #2
 800c752:	bf28      	it	cs
 800c754:	2302      	movcs	r3, #2
 800c756:	b2db      	uxtb	r3, r3
 800c758:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d201      	bcs.n	800c764 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800c760:	2303      	movs	r3, #3
 800c762:	e001      	b.n	800c768 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800c764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3730      	adds	r7, #48	@ 0x30
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	781a      	ldrb	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	785a      	ldrb	r2, [r3, #1]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	789a      	ldrb	r2, [r3, #2]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	78da      	ldrb	r2, [r3, #3]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	3304      	adds	r3, #4
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	bf28      	it	cs
 800c7a4:	2302      	movcs	r3, #2
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	795a      	ldrb	r2, [r3, #5]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	799a      	ldrb	r2, [r3, #6]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	79da      	ldrb	r2, [r3, #7]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	7a1a      	ldrb	r2, [r3, #8]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	721a      	strb	r2, [r3, #8]
}
 800c7cc:	bf00      	nop
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b087      	sub	sp, #28
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	781a      	ldrb	r2, [r3, #0]
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	785a      	ldrb	r2, [r3, #1]
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	789a      	ldrb	r2, [r3, #2]
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	78da      	ldrb	r2, [r3, #3]
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	3304      	adds	r3, #4
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	3305      	adds	r3, #5
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	021b      	lsls	r3, r3, #8
 800c818:	b29b      	uxth	r3, r3
 800c81a:	4313      	orrs	r3, r2
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	799a      	ldrb	r2, [r3, #6]
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	889b      	ldrh	r3, [r3, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d009      	beq.n	800c846 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c83a:	d804      	bhi.n	800c846 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c844:	d901      	bls.n	800c84a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800c846:	2303      	movs	r3, #3
 800c848:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c850:	2b00      	cmp	r3, #0
 800c852:	d136      	bne.n	800c8c2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	78db      	ldrb	r3, [r3, #3]
 800c858:	f003 0303 	and.w	r3, r3, #3
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d108      	bne.n	800c872 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	889b      	ldrh	r3, [r3, #4]
 800c864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c868:	f240 8097 	bls.w	800c99a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c86c:	2303      	movs	r3, #3
 800c86e:	75fb      	strb	r3, [r7, #23]
 800c870:	e093      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	78db      	ldrb	r3, [r3, #3]
 800c876:	f003 0303 	and.w	r3, r3, #3
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d107      	bne.n	800c88e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	889b      	ldrh	r3, [r3, #4]
 800c882:	2b40      	cmp	r3, #64	@ 0x40
 800c884:	f240 8089 	bls.w	800c99a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c888:	2303      	movs	r3, #3
 800c88a:	75fb      	strb	r3, [r7, #23]
 800c88c:	e085      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	78db      	ldrb	r3, [r3, #3]
 800c892:	f003 0303 	and.w	r3, r3, #3
 800c896:	2b01      	cmp	r3, #1
 800c898:	d005      	beq.n	800c8a6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	78db      	ldrb	r3, [r3, #3]
 800c89e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c8a2:	2b03      	cmp	r3, #3
 800c8a4:	d10a      	bne.n	800c8bc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	799b      	ldrb	r3, [r3, #6]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <USBH_ParseEPDesc+0xde>
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	799b      	ldrb	r3, [r3, #6]
 800c8b2:	2b10      	cmp	r3, #16
 800c8b4:	d970      	bls.n	800c998 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c8ba:	e06d      	b.n	800c998 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	75fb      	strb	r3, [r7, #23]
 800c8c0:	e06b      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d13c      	bne.n	800c946 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	78db      	ldrb	r3, [r3, #3]
 800c8d0:	f003 0303 	and.w	r3, r3, #3
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d005      	beq.n	800c8e4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	78db      	ldrb	r3, [r3, #3]
 800c8dc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d106      	bne.n	800c8f2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	889b      	ldrh	r3, [r3, #4]
 800c8e8:	2b40      	cmp	r3, #64	@ 0x40
 800c8ea:	d956      	bls.n	800c99a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c8f0:	e053      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	78db      	ldrb	r3, [r3, #3]
 800c8f6:	f003 0303 	and.w	r3, r3, #3
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d10e      	bne.n	800c91c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	799b      	ldrb	r3, [r3, #6]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d007      	beq.n	800c916 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c90a:	2b10      	cmp	r3, #16
 800c90c:	d803      	bhi.n	800c916 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c912:	2b40      	cmp	r3, #64	@ 0x40
 800c914:	d941      	bls.n	800c99a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c916:	2303      	movs	r3, #3
 800c918:	75fb      	strb	r3, [r7, #23]
 800c91a:	e03e      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	78db      	ldrb	r3, [r3, #3]
 800c920:	f003 0303 	and.w	r3, r3, #3
 800c924:	2b03      	cmp	r3, #3
 800c926:	d10b      	bne.n	800c940 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	799b      	ldrb	r3, [r3, #6]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d004      	beq.n	800c93a <USBH_ParseEPDesc+0x162>
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	889b      	ldrh	r3, [r3, #4]
 800c934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c938:	d32f      	bcc.n	800c99a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c93a:	2303      	movs	r3, #3
 800c93c:	75fb      	strb	r3, [r7, #23]
 800c93e:	e02c      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c940:	2303      	movs	r3, #3
 800c942:	75fb      	strb	r3, [r7, #23]
 800c944:	e029      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d120      	bne.n	800c992 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	78db      	ldrb	r3, [r3, #3]
 800c954:	f003 0303 	and.w	r3, r3, #3
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d106      	bne.n	800c96a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	889b      	ldrh	r3, [r3, #4]
 800c960:	2b08      	cmp	r3, #8
 800c962:	d01a      	beq.n	800c99a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c964:	2303      	movs	r3, #3
 800c966:	75fb      	strb	r3, [r7, #23]
 800c968:	e017      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	78db      	ldrb	r3, [r3, #3]
 800c96e:	f003 0303 	and.w	r3, r3, #3
 800c972:	2b03      	cmp	r3, #3
 800c974:	d10a      	bne.n	800c98c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	799b      	ldrb	r3, [r3, #6]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d003      	beq.n	800c986 <USBH_ParseEPDesc+0x1ae>
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	889b      	ldrh	r3, [r3, #4]
 800c982:	2b08      	cmp	r3, #8
 800c984:	d909      	bls.n	800c99a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c986:	2303      	movs	r3, #3
 800c988:	75fb      	strb	r3, [r7, #23]
 800c98a:	e006      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c98c:	2303      	movs	r3, #3
 800c98e:	75fb      	strb	r3, [r7, #23]
 800c990:	e003      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c992:	2303      	movs	r3, #3
 800c994:	75fb      	strb	r3, [r7, #23]
 800c996:	e000      	b.n	800c99a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c998:	bf00      	nop
  }

  return status;
 800c99a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	371c      	adds	r7, #28
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b087      	sub	sp, #28
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2b03      	cmp	r3, #3
 800c9be:	d120      	bne.n	800ca02 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	1e9a      	subs	r2, r3, #2
 800c9c6:	88fb      	ldrh	r3, [r7, #6]
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	bf28      	it	cs
 800c9cc:	4613      	movcs	r3, r2
 800c9ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	3302      	adds	r3, #2
 800c9d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	82fb      	strh	r3, [r7, #22]
 800c9da:	e00b      	b.n	800c9f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c9dc:	8afb      	ldrh	r3, [r7, #22]
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c9ee:	8afb      	ldrh	r3, [r7, #22]
 800c9f0:	3302      	adds	r3, #2
 800c9f2:	82fb      	strh	r3, [r7, #22]
 800c9f4:	8afa      	ldrh	r2, [r7, #22]
 800c9f6:	8abb      	ldrh	r3, [r7, #20]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d3ef      	bcc.n	800c9dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	701a      	strb	r2, [r3, #0]
  }
}
 800ca02:	bf00      	nop
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b085      	sub	sp, #20
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	881b      	ldrh	r3, [r3, #0]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	7812      	ldrb	r2, [r2, #0]
 800ca20:	4413      	add	r3, r2
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4413      	add	r3, r2
 800ca32:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ca34:	68fb      	ldr	r3, [r7, #12]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b086      	sub	sp, #24
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	60f8      	str	r0, [r7, #12]
 800ca4a:	60b9      	str	r1, [r7, #8]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ca50:	2301      	movs	r3, #1
 800ca52:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	789b      	ldrb	r3, [r3, #2]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d002      	beq.n	800ca62 <USBH_CtlReq+0x20>
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	d01d      	beq.n	800ca9c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800ca60:	e043      	b.n	800caea <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	88fa      	ldrh	r2, [r7, #6]
 800ca6c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2201      	movs	r2, #1
 800ca72:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2202      	movs	r2, #2
 800ca78:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2203      	movs	r2, #3
 800ca82:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ca92:	2200      	movs	r2, #0
 800ca94:	4619      	mov	r1, r3
 800ca96:	f000 fc61 	bl	800d35c <osMessagePut>
      break;
 800ca9a:	e026      	b.n	800caea <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f000 f829 	bl	800caf4 <USBH_HandleControl>
 800caa2:	4603      	mov	r3, r0
 800caa4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d002      	beq.n	800cab2 <USBH_CtlReq+0x70>
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d106      	bne.n	800cac0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2201      	movs	r2, #1
 800cab6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2200      	movs	r2, #0
 800cabc:	761a      	strb	r2, [r3, #24]
 800cabe:	e005      	b.n	800cacc <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800cac0:	7dfb      	ldrb	r3, [r7, #23]
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d102      	bne.n	800cacc <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2201      	movs	r2, #1
 800caca:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2203      	movs	r2, #3
 800cad0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cae0:	2200      	movs	r2, #0
 800cae2:	4619      	mov	r1, r3
 800cae4:	f000 fc3a 	bl	800d35c <osMessagePut>
      break;
 800cae8:	bf00      	nop
  }
  return status;
 800caea:	7dfb      	ldrb	r3, [r7, #23]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3718      	adds	r7, #24
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af02      	add	r7, sp, #8
 800cafa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cafc:	2301      	movs	r3, #1
 800cafe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cb00:	2300      	movs	r3, #0
 800cb02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	7e1b      	ldrb	r3, [r3, #24]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	2b0a      	cmp	r3, #10
 800cb0c:	f200 8229 	bhi.w	800cf62 <USBH_HandleControl+0x46e>
 800cb10:	a201      	add	r2, pc, #4	@ (adr r2, 800cb18 <USBH_HandleControl+0x24>)
 800cb12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb16:	bf00      	nop
 800cb18:	0800cb45 	.word	0x0800cb45
 800cb1c:	0800cb5f 	.word	0x0800cb5f
 800cb20:	0800cc01 	.word	0x0800cc01
 800cb24:	0800cc27 	.word	0x0800cc27
 800cb28:	0800ccb3 	.word	0x0800ccb3
 800cb2c:	0800ccdd 	.word	0x0800ccdd
 800cb30:	0800cd9f 	.word	0x0800cd9f
 800cb34:	0800cdc1 	.word	0x0800cdc1
 800cb38:	0800ce53 	.word	0x0800ce53
 800cb3c:	0800ce79 	.word	0x0800ce79
 800cb40:	0800cf0b 	.word	0x0800cf0b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f103 0110 	add.w	r1, r3, #16
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	795b      	ldrb	r3, [r3, #5]
 800cb4e:	461a      	mov	r2, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fa17 	bl	800cf84 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2202      	movs	r2, #2
 800cb5a:	761a      	strb	r2, [r3, #24]
      break;
 800cb5c:	e20c      	b.n	800cf78 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	795b      	ldrb	r3, [r3, #5]
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f003 f86f 	bl	800fc48 <USBH_LL_GetURBState>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cb6e:	7bbb      	ldrb	r3, [r7, #14]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d12c      	bne.n	800cbce <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	7c1b      	ldrb	r3, [r3, #16]
 800cb78:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb7c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	8adb      	ldrh	r3, [r3, #22]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00a      	beq.n	800cb9c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cb86:	7b7b      	ldrb	r3, [r7, #13]
 800cb88:	2b80      	cmp	r3, #128	@ 0x80
 800cb8a:	d103      	bne.n	800cb94 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2203      	movs	r2, #3
 800cb90:	761a      	strb	r2, [r3, #24]
 800cb92:	e00d      	b.n	800cbb0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2205      	movs	r2, #5
 800cb98:	761a      	strb	r2, [r3, #24]
 800cb9a:	e009      	b.n	800cbb0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800cb9c:	7b7b      	ldrb	r3, [r7, #13]
 800cb9e:	2b80      	cmp	r3, #128	@ 0x80
 800cba0:	d103      	bne.n	800cbaa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2209      	movs	r2, #9
 800cba6:	761a      	strb	r2, [r3, #24]
 800cba8:	e002      	b.n	800cbb0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2207      	movs	r2, #7
 800cbae:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2203      	movs	r2, #3
 800cbb4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	f000 fbc8 	bl	800d35c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cbcc:	e1cb      	b.n	800cf66 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cbce:	7bbb      	ldrb	r3, [r7, #14]
 800cbd0:	2b04      	cmp	r3, #4
 800cbd2:	d003      	beq.n	800cbdc <USBH_HandleControl+0xe8>
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	f040 81c5 	bne.w	800cf66 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	220b      	movs	r2, #11
 800cbe0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2203      	movs	r2, #3
 800cbe6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	f000 fbaf 	bl	800d35c <osMessagePut>
      break;
 800cbfe:	e1b2      	b.n	800cf66 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6899      	ldr	r1, [r3, #8]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	899a      	ldrh	r2, [r3, #12]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	791b      	ldrb	r3, [r3, #4]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f9f2 	bl	800d002 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2204      	movs	r2, #4
 800cc22:	761a      	strb	r2, [r3, #24]
      break;
 800cc24:	e1a8      	b.n	800cf78 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	791b      	ldrb	r3, [r3, #4]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f003 f80b 	bl	800fc48 <USBH_LL_GetURBState>
 800cc32:	4603      	mov	r3, r0
 800cc34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cc36:	7bbb      	ldrb	r3, [r7, #14]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d110      	bne.n	800cc5e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2209      	movs	r2, #9
 800cc40:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2203      	movs	r2, #3
 800cc46:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cc56:	2200      	movs	r2, #0
 800cc58:	4619      	mov	r1, r3
 800cc5a:	f000 fb7f 	bl	800d35c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
 800cc60:	2b05      	cmp	r3, #5
 800cc62:	d110      	bne.n	800cc86 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cc64:	2303      	movs	r3, #3
 800cc66:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2203      	movs	r2, #3
 800cc6c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	4619      	mov	r1, r3
 800cc80:	f000 fb6c 	bl	800d35c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cc84:	e171      	b.n	800cf6a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800cc86:	7bbb      	ldrb	r3, [r7, #14]
 800cc88:	2b04      	cmp	r3, #4
 800cc8a:	f040 816e 	bne.w	800cf6a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	220b      	movs	r2, #11
 800cc92:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2203      	movs	r2, #3
 800cc98:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cca8:	2200      	movs	r2, #0
 800ccaa:	4619      	mov	r1, r3
 800ccac:	f000 fb56 	bl	800d35c <osMessagePut>
      break;
 800ccb0:	e15b      	b.n	800cf6a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6899      	ldr	r1, [r3, #8]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	899a      	ldrh	r2, [r3, #12]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	795b      	ldrb	r3, [r3, #5]
 800ccbe:	2001      	movs	r0, #1
 800ccc0:	9000      	str	r0, [sp, #0]
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f978 	bl	800cfb8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2206      	movs	r2, #6
 800ccd8:	761a      	strb	r2, [r3, #24]
      break;
 800ccda:	e14d      	b.n	800cf78 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	795b      	ldrb	r3, [r3, #5]
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f002 ffb0 	bl	800fc48 <USBH_LL_GetURBState>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d111      	bne.n	800cd16 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2207      	movs	r2, #7
 800ccf6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2203      	movs	r2, #3
 800ccfc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	4619      	mov	r1, r3
 800cd10:	f000 fb24 	bl	800d35c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cd14:	e12b      	b.n	800cf6e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800cd16:	7bbb      	ldrb	r3, [r7, #14]
 800cd18:	2b05      	cmp	r3, #5
 800cd1a:	d113      	bne.n	800cd44 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	220c      	movs	r2, #12
 800cd20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cd22:	2303      	movs	r3, #3
 800cd24:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2203      	movs	r2, #3
 800cd2a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	f000 fb0d 	bl	800d35c <osMessagePut>
      break;
 800cd42:	e114      	b.n	800cf6e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cd44:	7bbb      	ldrb	r3, [r7, #14]
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	d111      	bne.n	800cd6e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2205      	movs	r2, #5
 800cd4e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2203      	movs	r2, #3
 800cd54:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cd64:	2200      	movs	r2, #0
 800cd66:	4619      	mov	r1, r3
 800cd68:	f000 faf8 	bl	800d35c <osMessagePut>
      break;
 800cd6c:	e0ff      	b.n	800cf6e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800cd6e:	7bbb      	ldrb	r3, [r7, #14]
 800cd70:	2b04      	cmp	r3, #4
 800cd72:	f040 80fc 	bne.w	800cf6e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	220b      	movs	r2, #11
 800cd7a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2203      	movs	r2, #3
 800cd84:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cd94:	2200      	movs	r2, #0
 800cd96:	4619      	mov	r1, r3
 800cd98:	f000 fae0 	bl	800d35c <osMessagePut>
      break;
 800cd9c:	e0e7      	b.n	800cf6e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	791b      	ldrb	r3, [r3, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	2100      	movs	r1, #0
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f92b 	bl	800d002 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2208      	movs	r2, #8
 800cdbc:	761a      	strb	r2, [r3, #24]

      break;
 800cdbe:	e0db      	b.n	800cf78 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	791b      	ldrb	r3, [r3, #4]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f002 ff3e 	bl	800fc48 <USBH_LL_GetURBState>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cdd0:	7bbb      	ldrb	r3, [r7, #14]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d113      	bne.n	800cdfe <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	220d      	movs	r2, #13
 800cdda:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2203      	movs	r2, #3
 800cde4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	f000 fab0 	bl	800d35c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cdfc:	e0b9      	b.n	800cf72 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800cdfe:	7bbb      	ldrb	r3, [r7, #14]
 800ce00:	2b04      	cmp	r3, #4
 800ce02:	d111      	bne.n	800ce28 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	220b      	movs	r2, #11
 800ce08:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2203      	movs	r2, #3
 800ce0e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ce1e:	2200      	movs	r2, #0
 800ce20:	4619      	mov	r1, r3
 800ce22:	f000 fa9b 	bl	800d35c <osMessagePut>
      break;
 800ce26:	e0a4      	b.n	800cf72 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800ce28:	7bbb      	ldrb	r3, [r7, #14]
 800ce2a:	2b05      	cmp	r3, #5
 800ce2c:	f040 80a1 	bne.w	800cf72 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800ce30:	2303      	movs	r3, #3
 800ce32:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2203      	movs	r2, #3
 800ce38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ce48:	2200      	movs	r2, #0
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	f000 fa86 	bl	800d35c <osMessagePut>
      break;
 800ce50:	e08f      	b.n	800cf72 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	795b      	ldrb	r3, [r3, #5]
 800ce56:	2201      	movs	r2, #1
 800ce58:	9200      	str	r2, [sp, #0]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f8aa 	bl	800cfb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	220a      	movs	r2, #10
 800ce74:	761a      	strb	r2, [r3, #24]
      break;
 800ce76:	e07f      	b.n	800cf78 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	795b      	ldrb	r3, [r3, #5]
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f002 fee2 	bl	800fc48 <USBH_LL_GetURBState>
 800ce84:	4603      	mov	r3, r0
 800ce86:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d113      	bne.n	800ceb6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	220d      	movs	r2, #13
 800ce96:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2203      	movs	r2, #3
 800ce9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ceac:	2200      	movs	r2, #0
 800ceae:	4619      	mov	r1, r3
 800ceb0:	f000 fa54 	bl	800d35c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ceb4:	e05f      	b.n	800cf76 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ceb6:	7bbb      	ldrb	r3, [r7, #14]
 800ceb8:	2b02      	cmp	r3, #2
 800ceba:	d111      	bne.n	800cee0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2209      	movs	r2, #9
 800cec0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2203      	movs	r2, #3
 800cec6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ced6:	2200      	movs	r2, #0
 800ced8:	4619      	mov	r1, r3
 800ceda:	f000 fa3f 	bl	800d35c <osMessagePut>
      break;
 800cede:	e04a      	b.n	800cf76 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800cee0:	7bbb      	ldrb	r3, [r7, #14]
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	d147      	bne.n	800cf76 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	220b      	movs	r2, #11
 800ceea:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2203      	movs	r2, #3
 800cef0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800cf00:	2200      	movs	r2, #0
 800cf02:	4619      	mov	r1, r3
 800cf04:	f000 fa2a 	bl	800d35c <osMessagePut>
      break;
 800cf08:	e035      	b.n	800cf76 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	7e5b      	ldrb	r3, [r3, #25]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	765a      	strb	r2, [r3, #25]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	7e5b      	ldrb	r3, [r3, #25]
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	d806      	bhi.n	800cf2c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2201      	movs	r2, #1
 800cf22:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cf2a:	e025      	b.n	800cf78 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cf32:	2106      	movs	r1, #6
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	795b      	ldrb	r3, [r3, #5]
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 f90d 	bl	800d164 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	791b      	ldrb	r3, [r3, #4]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 f907 	bl	800d164 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cf5c:	2302      	movs	r3, #2
 800cf5e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf60:	e00a      	b.n	800cf78 <USBH_HandleControl+0x484>

    default:
      break;
 800cf62:	bf00      	nop
 800cf64:	e008      	b.n	800cf78 <USBH_HandleControl+0x484>
      break;
 800cf66:	bf00      	nop
 800cf68:	e006      	b.n	800cf78 <USBH_HandleControl+0x484>
      break;
 800cf6a:	bf00      	nop
 800cf6c:	e004      	b.n	800cf78 <USBH_HandleControl+0x484>
      break;
 800cf6e:	bf00      	nop
 800cf70:	e002      	b.n	800cf78 <USBH_HandleControl+0x484>
      break;
 800cf72:	bf00      	nop
 800cf74:	e000      	b.n	800cf78 <USBH_HandleControl+0x484>
      break;
 800cf76:	bf00      	nop
  }

  return status;
 800cf78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop

0800cf84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b088      	sub	sp, #32
 800cf88:	af04      	add	r7, sp, #16
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf92:	79f9      	ldrb	r1, [r7, #7]
 800cf94:	2300      	movs	r3, #0
 800cf96:	9303      	str	r3, [sp, #12]
 800cf98:	2308      	movs	r3, #8
 800cf9a:	9302      	str	r3, [sp, #8]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	9300      	str	r3, [sp, #0]
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f002 fe1c 	bl	800fbe6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af04      	add	r7, sp, #16
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	4611      	mov	r1, r2
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	80fb      	strh	r3, [r7, #6]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cfdc:	7979      	ldrb	r1, [r7, #5]
 800cfde:	7e3b      	ldrb	r3, [r7, #24]
 800cfe0:	9303      	str	r3, [sp, #12]
 800cfe2:	88fb      	ldrh	r3, [r7, #6]
 800cfe4:	9302      	str	r3, [sp, #8]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	9301      	str	r3, [sp, #4]
 800cfea:	2301      	movs	r3, #1
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	2300      	movs	r3, #0
 800cff0:	2200      	movs	r2, #0
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f002 fdf7 	bl	800fbe6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b088      	sub	sp, #32
 800d006:	af04      	add	r7, sp, #16
 800d008:	60f8      	str	r0, [r7, #12]
 800d00a:	60b9      	str	r1, [r7, #8]
 800d00c:	4611      	mov	r1, r2
 800d00e:	461a      	mov	r2, r3
 800d010:	460b      	mov	r3, r1
 800d012:	80fb      	strh	r3, [r7, #6]
 800d014:	4613      	mov	r3, r2
 800d016:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d018:	7979      	ldrb	r1, [r7, #5]
 800d01a:	2300      	movs	r3, #0
 800d01c:	9303      	str	r3, [sp, #12]
 800d01e:	88fb      	ldrh	r3, [r7, #6]
 800d020:	9302      	str	r3, [sp, #8]
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	2301      	movs	r3, #1
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	2300      	movs	r3, #0
 800d02c:	2201      	movs	r2, #1
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f002 fdd9 	bl	800fbe6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d034:	2300      	movs	r3, #0

}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b088      	sub	sp, #32
 800d042:	af04      	add	r7, sp, #16
 800d044:	60f8      	str	r0, [r7, #12]
 800d046:	60b9      	str	r1, [r7, #8]
 800d048:	4611      	mov	r1, r2
 800d04a:	461a      	mov	r2, r3
 800d04c:	460b      	mov	r3, r1
 800d04e:	80fb      	strh	r3, [r7, #6]
 800d050:	4613      	mov	r3, r2
 800d052:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d001      	beq.n	800d062 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d05e:	2300      	movs	r3, #0
 800d060:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d062:	7979      	ldrb	r1, [r7, #5]
 800d064:	7e3b      	ldrb	r3, [r7, #24]
 800d066:	9303      	str	r3, [sp, #12]
 800d068:	88fb      	ldrh	r3, [r7, #6]
 800d06a:	9302      	str	r3, [sp, #8]
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	2301      	movs	r3, #1
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	2302      	movs	r3, #2
 800d076:	2200      	movs	r2, #0
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f002 fdb4 	bl	800fbe6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b088      	sub	sp, #32
 800d08c:	af04      	add	r7, sp, #16
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	4611      	mov	r1, r2
 800d094:	461a      	mov	r2, r3
 800d096:	460b      	mov	r3, r1
 800d098:	80fb      	strh	r3, [r7, #6]
 800d09a:	4613      	mov	r3, r2
 800d09c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d09e:	7979      	ldrb	r1, [r7, #5]
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	9303      	str	r3, [sp, #12]
 800d0a4:	88fb      	ldrh	r3, [r7, #6]
 800d0a6:	9302      	str	r3, [sp, #8]
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	9301      	str	r3, [sp, #4]
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f002 fd96 	bl	800fbe6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af04      	add	r7, sp, #16
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	4608      	mov	r0, r1
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	70fb      	strb	r3, [r7, #3]
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	70bb      	strb	r3, [r7, #2]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d0de:	7878      	ldrb	r0, [r7, #1]
 800d0e0:	78ba      	ldrb	r2, [r7, #2]
 800d0e2:	78f9      	ldrb	r1, [r7, #3]
 800d0e4:	8b3b      	ldrh	r3, [r7, #24]
 800d0e6:	9302      	str	r3, [sp, #8]
 800d0e8:	7d3b      	ldrb	r3, [r7, #20]
 800d0ea:	9301      	str	r3, [sp, #4]
 800d0ec:	7c3b      	ldrb	r3, [r7, #16]
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f002 fd29 	bl	800fb4a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b082      	sub	sp, #8
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	460b      	mov	r3, r1
 800d10c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d10e:	78fb      	ldrb	r3, [r7, #3]
 800d110:	4619      	mov	r1, r3
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f002 fd48 	bl	800fba8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
 800d12a:	460b      	mov	r3, r1
 800d12c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f836 	bl	800d1a0 <USBH_GetFreePipe>
 800d134:	4603      	mov	r3, r0
 800d136:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d138:	89fb      	ldrh	r3, [r7, #14]
 800d13a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d13e:	4293      	cmp	r3, r2
 800d140:	d00a      	beq.n	800d158 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	89fb      	ldrh	r3, [r7, #14]
 800d146:	f003 030f 	and.w	r3, r3, #15
 800d14a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d14e:	6879      	ldr	r1, [r7, #4]
 800d150:	33e0      	adds	r3, #224	@ 0xe0
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	440b      	add	r3, r1
 800d156:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d158:	89fb      	ldrh	r3, [r7, #14]
 800d15a:	b2db      	uxtb	r3, r3
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	460b      	mov	r3, r1
 800d16e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d170:	78fb      	ldrb	r3, [r7, #3]
 800d172:	2b0f      	cmp	r3, #15
 800d174:	d80d      	bhi.n	800d192 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d176:	78fb      	ldrb	r3, [r7, #3]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	33e0      	adds	r3, #224	@ 0xe0
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4413      	add	r3, r2
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	78fb      	ldrb	r3, [r7, #3]
 800d184:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d188:	6879      	ldr	r1, [r7, #4]
 800d18a:	33e0      	adds	r3, #224	@ 0xe0
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	440b      	add	r3, r1
 800d190:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73fb      	strb	r3, [r7, #15]
 800d1b0:	e00f      	b.n	800d1d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	33e0      	adds	r3, #224	@ 0xe0
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d102      	bne.n	800d1cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d1c6:	7bfb      	ldrb	r3, [r7, #15]
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	e007      	b.n	800d1dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	73fb      	strb	r3, [r7, #15]
 800d1d2:	7bfb      	ldrb	r3, [r7, #15]
 800d1d4:	2b0f      	cmp	r3, #15
 800d1d6:	d9ec      	bls.n	800d1b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d1d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3714      	adds	r7, #20
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d1f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1fa:	2b84      	cmp	r3, #132	@ 0x84
 800d1fc:	d005      	beq.n	800d20a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d1fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	4413      	add	r3, r2
 800d206:	3303      	adds	r3, #3
 800d208:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d20a:	68fb      	ldr	r3, [r7, #12]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3714      	adds	r7, #20
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d21e:	f3ef 8305 	mrs	r3, IPSR
 800d222:	607b      	str	r3, [r7, #4]
  return(result);
 800d224:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d226:	2b00      	cmp	r3, #0
 800d228:	bf14      	ite	ne
 800d22a:	2301      	movne	r3, #1
 800d22c:	2300      	moveq	r3, #0
 800d22e:	b2db      	uxtb	r3, r3
}
 800d230:	4618      	mov	r0, r3
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d240:	f001 f922 	bl	800e488 <vTaskStartScheduler>
  
  return osOK;
 800d244:	2300      	movs	r3, #0
}
 800d246:	4618      	mov	r0, r3
 800d248:	bd80      	pop	{r7, pc}

0800d24a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d24a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d24c:	b089      	sub	sp, #36	@ 0x24
 800d24e:	af04      	add	r7, sp, #16
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	695b      	ldr	r3, [r3, #20]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d020      	beq.n	800d29e <osThreadCreate+0x54>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d01c      	beq.n	800d29e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	685c      	ldr	r4, [r3, #4]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	691e      	ldr	r6, [r3, #16]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d276:	4618      	mov	r0, r3
 800d278:	f7ff ffb6 	bl	800d1e8 <makeFreeRtosPriority>
 800d27c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	695b      	ldr	r3, [r3, #20]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d286:	9202      	str	r2, [sp, #8]
 800d288:	9301      	str	r3, [sp, #4]
 800d28a:	9100      	str	r1, [sp, #0]
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	4632      	mov	r2, r6
 800d290:	4629      	mov	r1, r5
 800d292:	4620      	mov	r0, r4
 800d294:	f000 ff20 	bl	800e0d8 <xTaskCreateStatic>
 800d298:	4603      	mov	r3, r0
 800d29a:	60fb      	str	r3, [r7, #12]
 800d29c:	e01c      	b.n	800d2d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685c      	ldr	r4, [r3, #4]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2aa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff ff98 	bl	800d1e8 <makeFreeRtosPriority>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	f107 030c 	add.w	r3, r7, #12
 800d2be:	9301      	str	r3, [sp, #4]
 800d2c0:	9200      	str	r2, [sp, #0]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	4632      	mov	r2, r6
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 ff65 	bl	800e198 <xTaskCreate>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d001      	beq.n	800d2d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	e000      	b.n	800d2da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d2e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d001      	beq.n	800d2f8 <osDelay+0x16>
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	e000      	b.n	800d2fa <osDelay+0x18>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f001 f88e 	bl	800e41c <vTaskDelay>
  
  return osOK;
 800d300:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d302:	4618      	mov	r0, r3
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d30a:	b590      	push	{r4, r7, lr}
 800d30c:	b085      	sub	sp, #20
 800d30e:	af02      	add	r7, sp, #8
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d011      	beq.n	800d340 <osMessageCreate+0x36>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00d      	beq.n	800d340 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6818      	ldr	r0, [r3, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6859      	ldr	r1, [r3, #4]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	689a      	ldr	r2, [r3, #8]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	2400      	movs	r4, #0
 800d336:	9400      	str	r4, [sp, #0]
 800d338:	f000 f9e2 	bl	800d700 <xQueueGenericCreateStatic>
 800d33c:	4603      	mov	r3, r0
 800d33e:	e008      	b.n	800d352 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6818      	ldr	r0, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	4619      	mov	r1, r3
 800d34c:	f000 fa55 	bl	800d7fa <xQueueGenericCreate>
 800d350:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d352:	4618      	mov	r0, r3
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	bd90      	pop	{r4, r7, pc}
	...

0800d35c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d368:	2300      	movs	r3, #0
 800d36a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d101      	bne.n	800d37a <osMessagePut+0x1e>
    ticks = 1;
 800d376:	2301      	movs	r3, #1
 800d378:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d37a:	f7ff ff4d 	bl	800d218 <inHandlerMode>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d018      	beq.n	800d3b6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d384:	f107 0210 	add.w	r2, r7, #16
 800d388:	f107 0108 	add.w	r1, r7, #8
 800d38c:	2300      	movs	r3, #0
 800d38e:	68f8      	ldr	r0, [r7, #12]
 800d390:	f000 fb90 	bl	800dab4 <xQueueGenericSendFromISR>
 800d394:	4603      	mov	r3, r0
 800d396:	2b01      	cmp	r3, #1
 800d398:	d001      	beq.n	800d39e <osMessagePut+0x42>
      return osErrorOS;
 800d39a:	23ff      	movs	r3, #255	@ 0xff
 800d39c:	e018      	b.n	800d3d0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d014      	beq.n	800d3ce <osMessagePut+0x72>
 800d3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d3d8 <osMessagePut+0x7c>)
 800d3a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3aa:	601a      	str	r2, [r3, #0]
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	e00b      	b.n	800d3ce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d3b6:	f107 0108 	add.w	r1, r7, #8
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	697a      	ldr	r2, [r7, #20]
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	f000 fa76 	bl	800d8b0 <xQueueGenericSend>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d001      	beq.n	800d3ce <osMessagePut+0x72>
      return osErrorOS;
 800d3ca:	23ff      	movs	r3, #255	@ 0xff
 800d3cc:	e000      	b.n	800d3d0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d3ce:	2300      	movs	r3, #0
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3718      	adds	r7, #24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	e000ed04 	.word	0xe000ed04

0800d3dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d3dc:	b590      	push	{r4, r7, lr}
 800d3de:	b08b      	sub	sp, #44	@ 0x2c
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10a      	bne.n	800d40c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d3f6:	2380      	movs	r3, #128	@ 0x80
 800d3f8:	617b      	str	r3, [r7, #20]
    return event;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	461c      	mov	r4, r3
 800d3fe:	f107 0314 	add.w	r3, r7, #20
 800d402:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d406:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d40a:	e054      	b.n	800d4b6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d40c:	2300      	movs	r3, #0
 800d40e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d410:	2300      	movs	r3, #0
 800d412:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41a:	d103      	bne.n	800d424 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d41c:	f04f 33ff 	mov.w	r3, #4294967295
 800d420:	627b      	str	r3, [r7, #36]	@ 0x24
 800d422:	e009      	b.n	800d438 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d006      	beq.n	800d438 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800d42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d430:	2b00      	cmp	r3, #0
 800d432:	d101      	bne.n	800d438 <osMessageGet+0x5c>
      ticks = 1;
 800d434:	2301      	movs	r3, #1
 800d436:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d438:	f7ff feee 	bl	800d218 <inHandlerMode>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d01c      	beq.n	800d47c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d442:	f107 0220 	add.w	r2, r7, #32
 800d446:	f107 0314 	add.w	r3, r7, #20
 800d44a:	3304      	adds	r3, #4
 800d44c:	4619      	mov	r1, r3
 800d44e:	68b8      	ldr	r0, [r7, #8]
 800d450:	f000 fcb0 	bl	800ddb4 <xQueueReceiveFromISR>
 800d454:	4603      	mov	r3, r0
 800d456:	2b01      	cmp	r3, #1
 800d458:	d102      	bne.n	800d460 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d45a:	2310      	movs	r3, #16
 800d45c:	617b      	str	r3, [r7, #20]
 800d45e:	e001      	b.n	800d464 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d460:	2300      	movs	r3, #0
 800d462:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d464:	6a3b      	ldr	r3, [r7, #32]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d01d      	beq.n	800d4a6 <osMessageGet+0xca>
 800d46a:	4b15      	ldr	r3, [pc, #84]	@ (800d4c0 <osMessageGet+0xe4>)
 800d46c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	e014      	b.n	800d4a6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d47c:	f107 0314 	add.w	r3, r7, #20
 800d480:	3304      	adds	r3, #4
 800d482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d484:	4619      	mov	r1, r3
 800d486:	68b8      	ldr	r0, [r7, #8]
 800d488:	f000 fbb2 	bl	800dbf0 <xQueueReceive>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d102      	bne.n	800d498 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d492:	2310      	movs	r3, #16
 800d494:	617b      	str	r3, [r7, #20]
 800d496:	e006      	b.n	800d4a6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d101      	bne.n	800d4a2 <osMessageGet+0xc6>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	e000      	b.n	800d4a4 <osMessageGet+0xc8>
 800d4a2:	2340      	movs	r3, #64	@ 0x40
 800d4a4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	461c      	mov	r4, r3
 800d4aa:	f107 0314 	add.w	r3, r7, #20
 800d4ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	372c      	adds	r7, #44	@ 0x2c
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd90      	pop	{r4, r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	e000ed04 	.word	0xe000ed04

0800d4c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f103 0208 	add.w	r2, r3, #8
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f103 0208 	add.w	r2, r3, #8
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f103 0208 	add.w	r2, r3, #8
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d512:	bf00      	nop
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr

0800d51e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d51e:	b480      	push	{r7}
 800d520:	b085      	sub	sp, #20
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
 800d526:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	689a      	ldr	r2, [r3, #8]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	683a      	ldr	r2, [r7, #0]
 800d542:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	683a      	ldr	r2, [r7, #0]
 800d548:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	601a      	str	r2, [r3, #0]
}
 800d55a:	bf00      	nop
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d566:	b480      	push	{r7}
 800d568:	b085      	sub	sp, #20
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
 800d56e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d57c:	d103      	bne.n	800d586 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	691b      	ldr	r3, [r3, #16]
 800d582:	60fb      	str	r3, [r7, #12]
 800d584:	e00c      	b.n	800d5a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	3308      	adds	r3, #8
 800d58a:	60fb      	str	r3, [r7, #12]
 800d58c:	e002      	b.n	800d594 <vListInsert+0x2e>
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	60fb      	str	r3, [r7, #12]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d2f6      	bcs.n	800d58e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	685a      	ldr	r2, [r3, #4]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	683a      	ldr	r2, [r7, #0]
 800d5ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	1c5a      	adds	r2, r3, #1
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	601a      	str	r2, [r3, #0]
}
 800d5cc:	bf00      	nop
 800d5ce:	3714      	adds	r7, #20
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	6892      	ldr	r2, [r2, #8]
 800d5ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	6852      	ldr	r2, [r2, #4]
 800d5f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	429a      	cmp	r2, r3
 800d602:	d103      	bne.n	800d60c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	689a      	ldr	r2, [r3, #8]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	1e5a      	subs	r2, r3, #1
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
}
 800d620:	4618      	mov	r0, r3
 800d622:	3714      	adds	r7, #20
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d10b      	bne.n	800d658 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d652:	bf00      	nop
 800d654:	bf00      	nop
 800d656:	e7fd      	b.n	800d654 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d658:	f001 fd86 	bl	800f168 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d664:	68f9      	ldr	r1, [r7, #12]
 800d666:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d668:	fb01 f303 	mul.w	r3, r1, r3
 800d66c:	441a      	add	r2, r3
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2200      	movs	r2, #0
 800d676:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d688:	3b01      	subs	r3, #1
 800d68a:	68f9      	ldr	r1, [r7, #12]
 800d68c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d68e:	fb01 f303 	mul.w	r3, r1, r3
 800d692:	441a      	add	r2, r3
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	22ff      	movs	r2, #255	@ 0xff
 800d69c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	22ff      	movs	r2, #255	@ 0xff
 800d6a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d114      	bne.n	800d6d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d01a      	beq.n	800d6ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	3310      	adds	r3, #16
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f001 f954 	bl	800e968 <xTaskRemoveFromEventList>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d012      	beq.n	800d6ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d6fc <xQueueGenericReset+0xd0>)
 800d6c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6cc:	601a      	str	r2, [r3, #0]
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	f3bf 8f6f 	isb	sy
 800d6d6:	e009      	b.n	800d6ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	3310      	adds	r3, #16
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7ff fef1 	bl	800d4c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	3324      	adds	r3, #36	@ 0x24
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7ff feec 	bl	800d4c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d6ec:	f001 fd6e 	bl	800f1cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d6f0:	2301      	movs	r3, #1
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	e000ed04 	.word	0xe000ed04

0800d700 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d700:	b580      	push	{r7, lr}
 800d702:	b08e      	sub	sp, #56	@ 0x38
 800d704:	af02      	add	r7, sp, #8
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	607a      	str	r2, [r7, #4]
 800d70c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10b      	bne.n	800d72c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d726:	bf00      	nop
 800d728:	bf00      	nop
 800d72a:	e7fd      	b.n	800d728 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10b      	bne.n	800d74a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop
 800d748:	e7fd      	b.n	800d746 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d002      	beq.n	800d756 <xQueueGenericCreateStatic+0x56>
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d001      	beq.n	800d75a <xQueueGenericCreateStatic+0x5a>
 800d756:	2301      	movs	r3, #1
 800d758:	e000      	b.n	800d75c <xQueueGenericCreateStatic+0x5c>
 800d75a:	2300      	movs	r3, #0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10b      	bne.n	800d778 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d764:	f383 8811 	msr	BASEPRI, r3
 800d768:	f3bf 8f6f 	isb	sy
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	623b      	str	r3, [r7, #32]
}
 800d772:	bf00      	nop
 800d774:	bf00      	nop
 800d776:	e7fd      	b.n	800d774 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d102      	bne.n	800d784 <xQueueGenericCreateStatic+0x84>
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d101      	bne.n	800d788 <xQueueGenericCreateStatic+0x88>
 800d784:	2301      	movs	r3, #1
 800d786:	e000      	b.n	800d78a <xQueueGenericCreateStatic+0x8a>
 800d788:	2300      	movs	r3, #0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d10b      	bne.n	800d7a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	61fb      	str	r3, [r7, #28]
}
 800d7a0:	bf00      	nop
 800d7a2:	bf00      	nop
 800d7a4:	e7fd      	b.n	800d7a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d7a6:	2348      	movs	r3, #72	@ 0x48
 800d7a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	2b48      	cmp	r3, #72	@ 0x48
 800d7ae:	d00b      	beq.n	800d7c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7b4:	f383 8811 	msr	BASEPRI, r3
 800d7b8:	f3bf 8f6f 	isb	sy
 800d7bc:	f3bf 8f4f 	dsb	sy
 800d7c0:	61bb      	str	r3, [r7, #24]
}
 800d7c2:	bf00      	nop
 800d7c4:	bf00      	nop
 800d7c6:	e7fd      	b.n	800d7c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d7c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00d      	beq.n	800d7f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	68b9      	ldr	r1, [r7, #8]
 800d7ea:	68f8      	ldr	r0, [r7, #12]
 800d7ec:	f000 f840 	bl	800d870 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3730      	adds	r7, #48	@ 0x30
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b08a      	sub	sp, #40	@ 0x28
 800d7fe:	af02      	add	r7, sp, #8
 800d800:	60f8      	str	r0, [r7, #12]
 800d802:	60b9      	str	r1, [r7, #8]
 800d804:	4613      	mov	r3, r2
 800d806:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d10b      	bne.n	800d826 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	613b      	str	r3, [r7, #16]
}
 800d820:	bf00      	nop
 800d822:	bf00      	nop
 800d824:	e7fd      	b.n	800d822 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	fb02 f303 	mul.w	r3, r2, r3
 800d82e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	3348      	adds	r3, #72	@ 0x48
 800d834:	4618      	mov	r0, r3
 800d836:	f001 fdb9 	bl	800f3ac <pvPortMalloc>
 800d83a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d011      	beq.n	800d866 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	3348      	adds	r3, #72	@ 0x48
 800d84a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	2200      	movs	r2, #0
 800d850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d854:	79fa      	ldrb	r2, [r7, #7]
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	4613      	mov	r3, r2
 800d85c:	697a      	ldr	r2, [r7, #20]
 800d85e:	68b9      	ldr	r1, [r7, #8]
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f000 f805 	bl	800d870 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d866:	69bb      	ldr	r3, [r7, #24]
	}
 800d868:	4618      	mov	r0, r3
 800d86a:	3720      	adds	r7, #32
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]
 800d87c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d103      	bne.n	800d88c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	69ba      	ldr	r2, [r7, #24]
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	e002      	b.n	800d892 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d89e:	2101      	movs	r1, #1
 800d8a0:	69b8      	ldr	r0, [r7, #24]
 800d8a2:	f7ff fec3 	bl	800d62c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d8a6:	bf00      	nop
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
	...

0800d8b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b08e      	sub	sp, #56	@ 0x38
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
 800d8bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10b      	bne.n	800d8e4 <xQueueGenericSend+0x34>
	__asm volatile
 800d8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	e7fd      	b.n	800d8e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d103      	bne.n	800d8f2 <xQueueGenericSend+0x42>
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d101      	bne.n	800d8f6 <xQueueGenericSend+0x46>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e000      	b.n	800d8f8 <xQueueGenericSend+0x48>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10b      	bne.n	800d914 <xQueueGenericSend+0x64>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d90e:	bf00      	nop
 800d910:	bf00      	nop
 800d912:	e7fd      	b.n	800d910 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2b02      	cmp	r3, #2
 800d918:	d103      	bne.n	800d922 <xQueueGenericSend+0x72>
 800d91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d101      	bne.n	800d926 <xQueueGenericSend+0x76>
 800d922:	2301      	movs	r3, #1
 800d924:	e000      	b.n	800d928 <xQueueGenericSend+0x78>
 800d926:	2300      	movs	r3, #0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10b      	bne.n	800d944 <xQueueGenericSend+0x94>
	__asm volatile
 800d92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d930:	f383 8811 	msr	BASEPRI, r3
 800d934:	f3bf 8f6f 	isb	sy
 800d938:	f3bf 8f4f 	dsb	sy
 800d93c:	623b      	str	r3, [r7, #32]
}
 800d93e:	bf00      	nop
 800d940:	bf00      	nop
 800d942:	e7fd      	b.n	800d940 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d944:	f001 f9d2 	bl	800ecec <xTaskGetSchedulerState>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d102      	bne.n	800d954 <xQueueGenericSend+0xa4>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <xQueueGenericSend+0xa8>
 800d954:	2301      	movs	r3, #1
 800d956:	e000      	b.n	800d95a <xQueueGenericSend+0xaa>
 800d958:	2300      	movs	r3, #0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10b      	bne.n	800d976 <xQueueGenericSend+0xc6>
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	61fb      	str	r3, [r7, #28]
}
 800d970:	bf00      	nop
 800d972:	bf00      	nop
 800d974:	e7fd      	b.n	800d972 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d976:	f001 fbf7 	bl	800f168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d982:	429a      	cmp	r2, r3
 800d984:	d302      	bcc.n	800d98c <xQueueGenericSend+0xdc>
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	2b02      	cmp	r3, #2
 800d98a:	d129      	bne.n	800d9e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d98c:	683a      	ldr	r2, [r7, #0]
 800d98e:	68b9      	ldr	r1, [r7, #8]
 800d990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d992:	f000 fa91 	bl	800deb8 <prvCopyDataToQueue>
 800d996:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d010      	beq.n	800d9c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a2:	3324      	adds	r3, #36	@ 0x24
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f000 ffdf 	bl	800e968 <xTaskRemoveFromEventList>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d013      	beq.n	800d9d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d9b0:	4b3f      	ldr	r3, [pc, #252]	@ (800dab0 <xQueueGenericSend+0x200>)
 800d9b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	f3bf 8f6f 	isb	sy
 800d9c0:	e00a      	b.n	800d9d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d007      	beq.n	800d9d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d9c8:	4b39      	ldr	r3, [pc, #228]	@ (800dab0 <xQueueGenericSend+0x200>)
 800d9ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d9d8:	f001 fbf8 	bl	800f1cc <vPortExitCritical>
				return pdPASS;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e063      	b.n	800daa8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d103      	bne.n	800d9ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9e6:	f001 fbf1 	bl	800f1cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e05c      	b.n	800daa8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d106      	bne.n	800da02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9f4:	f107 0314 	add.w	r3, r7, #20
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f001 f819 	bl	800ea30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9fe:	2301      	movs	r3, #1
 800da00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da02:	f001 fbe3 	bl	800f1cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da06:	f000 fda1 	bl	800e54c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da0a:	f001 fbad 	bl	800f168 <vPortEnterCritical>
 800da0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da14:	b25b      	sxtb	r3, r3
 800da16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da1a:	d103      	bne.n	800da24 <xQueueGenericSend+0x174>
 800da1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1e:	2200      	movs	r2, #0
 800da20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da2a:	b25b      	sxtb	r3, r3
 800da2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da30:	d103      	bne.n	800da3a <xQueueGenericSend+0x18a>
 800da32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da34:	2200      	movs	r2, #0
 800da36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da3a:	f001 fbc7 	bl	800f1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da3e:	1d3a      	adds	r2, r7, #4
 800da40:	f107 0314 	add.w	r3, r7, #20
 800da44:	4611      	mov	r1, r2
 800da46:	4618      	mov	r0, r3
 800da48:	f001 f808 	bl	800ea5c <xTaskCheckForTimeOut>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d124      	bne.n	800da9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da54:	f000 fb28 	bl	800e0a8 <prvIsQueueFull>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d018      	beq.n	800da90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da60:	3310      	adds	r3, #16
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	4611      	mov	r1, r2
 800da66:	4618      	mov	r0, r3
 800da68:	f000 ff58 	bl	800e91c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da6e:	f000 fab3 	bl	800dfd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da72:	f000 fd79 	bl	800e568 <xTaskResumeAll>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f47f af7c 	bne.w	800d976 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800da7e:	4b0c      	ldr	r3, [pc, #48]	@ (800dab0 <xQueueGenericSend+0x200>)
 800da80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	f3bf 8f6f 	isb	sy
 800da8e:	e772      	b.n	800d976 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da92:	f000 faa1 	bl	800dfd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da96:	f000 fd67 	bl	800e568 <xTaskResumeAll>
 800da9a:	e76c      	b.n	800d976 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da9e:	f000 fa9b 	bl	800dfd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800daa2:	f000 fd61 	bl	800e568 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800daa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3738      	adds	r7, #56	@ 0x38
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	e000ed04 	.word	0xe000ed04

0800dab4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b090      	sub	sp, #64	@ 0x40
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	607a      	str	r2, [r7, #4]
 800dac0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800dac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10b      	bne.n	800dae4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800dacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad0:	f383 8811 	msr	BASEPRI, r3
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dade:	bf00      	nop
 800dae0:	bf00      	nop
 800dae2:	e7fd      	b.n	800dae0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d103      	bne.n	800daf2 <xQueueGenericSendFromISR+0x3e>
 800daea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d101      	bne.n	800daf6 <xQueueGenericSendFromISR+0x42>
 800daf2:	2301      	movs	r3, #1
 800daf4:	e000      	b.n	800daf8 <xQueueGenericSendFromISR+0x44>
 800daf6:	2300      	movs	r3, #0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10b      	bne.n	800db14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800dafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800db0e:	bf00      	nop
 800db10:	bf00      	nop
 800db12:	e7fd      	b.n	800db10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	2b02      	cmp	r3, #2
 800db18:	d103      	bne.n	800db22 <xQueueGenericSendFromISR+0x6e>
 800db1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d101      	bne.n	800db26 <xQueueGenericSendFromISR+0x72>
 800db22:	2301      	movs	r3, #1
 800db24:	e000      	b.n	800db28 <xQueueGenericSendFromISR+0x74>
 800db26:	2300      	movs	r3, #0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10b      	bne.n	800db44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	623b      	str	r3, [r7, #32]
}
 800db3e:	bf00      	nop
 800db40:	bf00      	nop
 800db42:	e7fd      	b.n	800db40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db44:	f001 fbf0 	bl	800f328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db48:	f3ef 8211 	mrs	r2, BASEPRI
 800db4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	61fa      	str	r2, [r7, #28]
 800db5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800db60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d302      	bcc.n	800db76 <xQueueGenericSendFromISR+0xc2>
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	2b02      	cmp	r3, #2
 800db74:	d12f      	bne.n	800dbd6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	68b9      	ldr	r1, [r7, #8]
 800db8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db8c:	f000 f994 	bl	800deb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800db94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db98:	d112      	bne.n	800dbc0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d016      	beq.n	800dbd0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba4:	3324      	adds	r3, #36	@ 0x24
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 fede 	bl	800e968 <xTaskRemoveFromEventList>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00e      	beq.n	800dbd0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00b      	beq.n	800dbd0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	601a      	str	r2, [r3, #0]
 800dbbe:	e007      	b.n	800dbd0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dbc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	b25a      	sxtb	r2, r3
 800dbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dbd4:	e001      	b.n	800dbda <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbdc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dbe4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3740      	adds	r7, #64	@ 0x40
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b08c      	sub	sp, #48	@ 0x30
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10b      	bne.n	800dc22 <xQueueReceive+0x32>
	__asm volatile
 800dc0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc0e:	f383 8811 	msr	BASEPRI, r3
 800dc12:	f3bf 8f6f 	isb	sy
 800dc16:	f3bf 8f4f 	dsb	sy
 800dc1a:	623b      	str	r3, [r7, #32]
}
 800dc1c:	bf00      	nop
 800dc1e:	bf00      	nop
 800dc20:	e7fd      	b.n	800dc1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d103      	bne.n	800dc30 <xQueueReceive+0x40>
 800dc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <xQueueReceive+0x44>
 800dc30:	2301      	movs	r3, #1
 800dc32:	e000      	b.n	800dc36 <xQueueReceive+0x46>
 800dc34:	2300      	movs	r3, #0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d10b      	bne.n	800dc52 <xQueueReceive+0x62>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	61fb      	str	r3, [r7, #28]
}
 800dc4c:	bf00      	nop
 800dc4e:	bf00      	nop
 800dc50:	e7fd      	b.n	800dc4e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc52:	f001 f84b 	bl	800ecec <xTaskGetSchedulerState>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d102      	bne.n	800dc62 <xQueueReceive+0x72>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d101      	bne.n	800dc66 <xQueueReceive+0x76>
 800dc62:	2301      	movs	r3, #1
 800dc64:	e000      	b.n	800dc68 <xQueueReceive+0x78>
 800dc66:	2300      	movs	r3, #0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10b      	bne.n	800dc84 <xQueueReceive+0x94>
	__asm volatile
 800dc6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc70:	f383 8811 	msr	BASEPRI, r3
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	61bb      	str	r3, [r7, #24]
}
 800dc7e:	bf00      	nop
 800dc80:	bf00      	nop
 800dc82:	e7fd      	b.n	800dc80 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc84:	f001 fa70 	bl	800f168 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc8c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d01f      	beq.n	800dcd4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc94:	68b9      	ldr	r1, [r7, #8]
 800dc96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc98:	f000 f978 	bl	800df8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9e:	1e5a      	subs	r2, r3, #1
 800dca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dca2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00f      	beq.n	800dccc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcae:	3310      	adds	r3, #16
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f000 fe59 	bl	800e968 <xTaskRemoveFromEventList>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d007      	beq.n	800dccc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dcbc:	4b3c      	ldr	r3, [pc, #240]	@ (800ddb0 <xQueueReceive+0x1c0>)
 800dcbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	f3bf 8f4f 	dsb	sy
 800dcc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dccc:	f001 fa7e 	bl	800f1cc <vPortExitCritical>
				return pdPASS;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e069      	b.n	800dda8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d103      	bne.n	800dce2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcda:	f001 fa77 	bl	800f1cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dcde:	2300      	movs	r3, #0
 800dce0:	e062      	b.n	800dda8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d106      	bne.n	800dcf6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dce8:	f107 0310 	add.w	r3, r7, #16
 800dcec:	4618      	mov	r0, r3
 800dcee:	f000 fe9f 	bl	800ea30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcf6:	f001 fa69 	bl	800f1cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcfa:	f000 fc27 	bl	800e54c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcfe:	f001 fa33 	bl	800f168 <vPortEnterCritical>
 800dd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd08:	b25b      	sxtb	r3, r3
 800dd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0e:	d103      	bne.n	800dd18 <xQueueReceive+0x128>
 800dd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd1e:	b25b      	sxtb	r3, r3
 800dd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd24:	d103      	bne.n	800dd2e <xQueueReceive+0x13e>
 800dd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd2e:	f001 fa4d 	bl	800f1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd32:	1d3a      	adds	r2, r7, #4
 800dd34:	f107 0310 	add.w	r3, r7, #16
 800dd38:	4611      	mov	r1, r2
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 fe8e 	bl	800ea5c <xTaskCheckForTimeOut>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d123      	bne.n	800dd8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd48:	f000 f998 	bl	800e07c <prvIsQueueEmpty>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d017      	beq.n	800dd82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd54:	3324      	adds	r3, #36	@ 0x24
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	4611      	mov	r1, r2
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 fdde 	bl	800e91c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd62:	f000 f939 	bl	800dfd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd66:	f000 fbff 	bl	800e568 <xTaskResumeAll>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d189      	bne.n	800dc84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dd70:	4b0f      	ldr	r3, [pc, #60]	@ (800ddb0 <xQueueReceive+0x1c0>)
 800dd72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd76:	601a      	str	r2, [r3, #0]
 800dd78:	f3bf 8f4f 	dsb	sy
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	e780      	b.n	800dc84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd84:	f000 f928 	bl	800dfd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd88:	f000 fbee 	bl	800e568 <xTaskResumeAll>
 800dd8c:	e77a      	b.n	800dc84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd90:	f000 f922 	bl	800dfd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd94:	f000 fbe8 	bl	800e568 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd9a:	f000 f96f 	bl	800e07c <prvIsQueueEmpty>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f43f af6f 	beq.w	800dc84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dda6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3730      	adds	r7, #48	@ 0x30
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	e000ed04 	.word	0xe000ed04

0800ddb4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b08e      	sub	sp, #56	@ 0x38
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10b      	bne.n	800dde2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ddca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddce:	f383 8811 	msr	BASEPRI, r3
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	623b      	str	r3, [r7, #32]
}
 800dddc:	bf00      	nop
 800ddde:	bf00      	nop
 800dde0:	e7fd      	b.n	800ddde <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d103      	bne.n	800ddf0 <xQueueReceiveFromISR+0x3c>
 800dde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <xQueueReceiveFromISR+0x40>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e000      	b.n	800ddf6 <xQueueReceiveFromISR+0x42>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10b      	bne.n	800de12 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ddfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfe:	f383 8811 	msr	BASEPRI, r3
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	f3bf 8f4f 	dsb	sy
 800de0a:	61fb      	str	r3, [r7, #28]
}
 800de0c:	bf00      	nop
 800de0e:	bf00      	nop
 800de10:	e7fd      	b.n	800de0e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de12:	f001 fa89 	bl	800f328 <vPortValidateInterruptPriority>
	__asm volatile
 800de16:	f3ef 8211 	mrs	r2, BASEPRI
 800de1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de1e:	f383 8811 	msr	BASEPRI, r3
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	f3bf 8f4f 	dsb	sy
 800de2a:	61ba      	str	r2, [r7, #24]
 800de2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800de2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d02f      	beq.n	800de9e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800de3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800de48:	68b9      	ldr	r1, [r7, #8]
 800de4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de4c:	f000 f89e 	bl	800df8c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800de50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de52:	1e5a      	subs	r2, r3, #1
 800de54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de56:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800de58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800de5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de60:	d112      	bne.n	800de88 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d016      	beq.n	800de98 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6c:	3310      	adds	r3, #16
 800de6e:	4618      	mov	r0, r3
 800de70:	f000 fd7a 	bl	800e968 <xTaskRemoveFromEventList>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00e      	beq.n	800de98 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00b      	beq.n	800de98 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2201      	movs	r2, #1
 800de84:	601a      	str	r2, [r3, #0]
 800de86:	e007      	b.n	800de98 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800de88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800de8c:	3301      	adds	r3, #1
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	b25a      	sxtb	r2, r3
 800de92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800de98:	2301      	movs	r3, #1
 800de9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800de9c:	e001      	b.n	800dea2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800de9e:	2300      	movs	r3, #0
 800dea0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	f383 8811 	msr	BASEPRI, r3
}
 800deac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800deae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3738      	adds	r7, #56	@ 0x38
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b086      	sub	sp, #24
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dec4:	2300      	movs	r3, #0
 800dec6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800decc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10d      	bne.n	800def2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d14d      	bne.n	800df7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f000 ff20 	bl	800ed28 <xTaskPriorityDisinherit>
 800dee8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	609a      	str	r2, [r3, #8]
 800def0:	e043      	b.n	800df7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d119      	bne.n	800df2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6858      	ldr	r0, [r3, #4]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df00:	461a      	mov	r2, r3
 800df02:	68b9      	ldr	r1, [r7, #8]
 800df04:	f002 f874 	bl	800fff0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df10:	441a      	add	r2, r3
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	685a      	ldr	r2, [r3, #4]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	689b      	ldr	r3, [r3, #8]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d32b      	bcc.n	800df7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	605a      	str	r2, [r3, #4]
 800df2a:	e026      	b.n	800df7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	68d8      	ldr	r0, [r3, #12]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df34:	461a      	mov	r2, r3
 800df36:	68b9      	ldr	r1, [r7, #8]
 800df38:	f002 f85a 	bl	800fff0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	68da      	ldr	r2, [r3, #12]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df44:	425b      	negs	r3, r3
 800df46:	441a      	add	r2, r3
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	68da      	ldr	r2, [r3, #12]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	429a      	cmp	r2, r3
 800df56:	d207      	bcs.n	800df68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	689a      	ldr	r2, [r3, #8]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df60:	425b      	negs	r3, r3
 800df62:	441a      	add	r2, r3
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b02      	cmp	r3, #2
 800df6c:	d105      	bne.n	800df7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	3b01      	subs	r3, #1
 800df78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	1c5a      	adds	r2, r3, #1
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800df82:	697b      	ldr	r3, [r7, #20]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3718      	adds	r7, #24
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d018      	beq.n	800dfd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	68da      	ldr	r2, [r3, #12]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfa6:	441a      	add	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	68da      	ldr	r2, [r3, #12]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d303      	bcc.n	800dfc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	68d9      	ldr	r1, [r3, #12]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfc8:	461a      	mov	r2, r3
 800dfca:	6838      	ldr	r0, [r7, #0]
 800dfcc:	f002 f810 	bl	800fff0 <memcpy>
	}
}
 800dfd0:	bf00      	nop
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dfe0:	f001 f8c2 	bl	800f168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dfea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfec:	e011      	b.n	800e012 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d012      	beq.n	800e01c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	3324      	adds	r3, #36	@ 0x24
 800dffa:	4618      	mov	r0, r3
 800dffc:	f000 fcb4 	bl	800e968 <xTaskRemoveFromEventList>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d001      	beq.n	800e00a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e006:	f000 fd8d 	bl	800eb24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e016:	2b00      	cmp	r3, #0
 800e018:	dce9      	bgt.n	800dfee <prvUnlockQueue+0x16>
 800e01a:	e000      	b.n	800e01e <prvUnlockQueue+0x46>
					break;
 800e01c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	22ff      	movs	r2, #255	@ 0xff
 800e022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e026:	f001 f8d1 	bl	800f1cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e02a:	f001 f89d 	bl	800f168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e034:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e036:	e011      	b.n	800e05c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	691b      	ldr	r3, [r3, #16]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d012      	beq.n	800e066 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	3310      	adds	r3, #16
 800e044:	4618      	mov	r0, r3
 800e046:	f000 fc8f 	bl	800e968 <xTaskRemoveFromEventList>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d001      	beq.n	800e054 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e050:	f000 fd68 	bl	800eb24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e054:	7bbb      	ldrb	r3, [r7, #14]
 800e056:	3b01      	subs	r3, #1
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e05c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e060:	2b00      	cmp	r3, #0
 800e062:	dce9      	bgt.n	800e038 <prvUnlockQueue+0x60>
 800e064:	e000      	b.n	800e068 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e066:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	22ff      	movs	r2, #255	@ 0xff
 800e06c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e070:	f001 f8ac 	bl	800f1cc <vPortExitCritical>
}
 800e074:	bf00      	nop
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e084:	f001 f870 	bl	800f168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d102      	bne.n	800e096 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e090:	2301      	movs	r3, #1
 800e092:	60fb      	str	r3, [r7, #12]
 800e094:	e001      	b.n	800e09a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e096:	2300      	movs	r3, #0
 800e098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e09a:	f001 f897 	bl	800f1cc <vPortExitCritical>

	return xReturn;
 800e09e:	68fb      	ldr	r3, [r7, #12]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3710      	adds	r7, #16
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e0b0:	f001 f85a 	bl	800f168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d102      	bne.n	800e0c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	60fb      	str	r3, [r7, #12]
 800e0c4:	e001      	b.n	800e0ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e0ca:	f001 f87f 	bl	800f1cc <vPortExitCritical>

	return xReturn;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3710      	adds	r7, #16
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b08e      	sub	sp, #56	@ 0x38
 800e0dc:	af04      	add	r7, sp, #16
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
 800e0e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10b      	bne.n	800e104 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f0:	f383 8811 	msr	BASEPRI, r3
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	623b      	str	r3, [r7, #32]
}
 800e0fe:	bf00      	nop
 800e100:	bf00      	nop
 800e102:	e7fd      	b.n	800e100 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10b      	bne.n	800e122 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e10e:	f383 8811 	msr	BASEPRI, r3
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	f3bf 8f4f 	dsb	sy
 800e11a:	61fb      	str	r3, [r7, #28]
}
 800e11c:	bf00      	nop
 800e11e:	bf00      	nop
 800e120:	e7fd      	b.n	800e11e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e122:	2358      	movs	r3, #88	@ 0x58
 800e124:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2b58      	cmp	r3, #88	@ 0x58
 800e12a:	d00b      	beq.n	800e144 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e130:	f383 8811 	msr	BASEPRI, r3
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	61bb      	str	r3, [r7, #24]
}
 800e13e:	bf00      	nop
 800e140:	bf00      	nop
 800e142:	e7fd      	b.n	800e140 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e144:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d01e      	beq.n	800e18a <xTaskCreateStatic+0xb2>
 800e14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d01b      	beq.n	800e18a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e154:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e15a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15e:	2202      	movs	r2, #2
 800e160:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e164:	2300      	movs	r3, #0
 800e166:	9303      	str	r3, [sp, #12]
 800e168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16a:	9302      	str	r3, [sp, #8]
 800e16c:	f107 0314 	add.w	r3, r7, #20
 800e170:	9301      	str	r3, [sp, #4]
 800e172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	68b9      	ldr	r1, [r7, #8]
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f000 f850 	bl	800e222 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e182:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e184:	f000 f8e0 	bl	800e348 <prvAddNewTaskToReadyList>
 800e188:	e001      	b.n	800e18e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e18a:	2300      	movs	r3, #0
 800e18c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e18e:	697b      	ldr	r3, [r7, #20]
	}
 800e190:	4618      	mov	r0, r3
 800e192:	3728      	adds	r7, #40	@ 0x28
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08c      	sub	sp, #48	@ 0x30
 800e19c:	af04      	add	r7, sp, #16
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	603b      	str	r3, [r7, #0]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e1a8:	88fb      	ldrh	r3, [r7, #6]
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f001 f8fd 	bl	800f3ac <pvPortMalloc>
 800e1b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00e      	beq.n	800e1d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e1ba:	2058      	movs	r0, #88	@ 0x58
 800e1bc:	f001 f8f6 	bl	800f3ac <pvPortMalloc>
 800e1c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d003      	beq.n	800e1d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	631a      	str	r2, [r3, #48]	@ 0x30
 800e1ce:	e005      	b.n	800e1dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e1d0:	6978      	ldr	r0, [r7, #20]
 800e1d2:	f001 f9bf 	bl	800f554 <vPortFree>
 800e1d6:	e001      	b.n	800e1dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d017      	beq.n	800e212 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e1ea:	88fa      	ldrh	r2, [r7, #6]
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	9303      	str	r3, [sp, #12]
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	9302      	str	r3, [sp, #8]
 800e1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f6:	9301      	str	r3, [sp, #4]
 800e1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1fa:	9300      	str	r3, [sp, #0]
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	68b9      	ldr	r1, [r7, #8]
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f000 f80e 	bl	800e222 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e206:	69f8      	ldr	r0, [r7, #28]
 800e208:	f000 f89e 	bl	800e348 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e20c:	2301      	movs	r3, #1
 800e20e:	61bb      	str	r3, [r7, #24]
 800e210:	e002      	b.n	800e218 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e212:	f04f 33ff 	mov.w	r3, #4294967295
 800e216:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e218:	69bb      	ldr	r3, [r7, #24]
	}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3720      	adds	r7, #32
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e222:	b580      	push	{r7, lr}
 800e224:	b088      	sub	sp, #32
 800e226:	af00      	add	r7, sp, #0
 800e228:	60f8      	str	r0, [r7, #12]
 800e22a:	60b9      	str	r1, [r7, #8]
 800e22c:	607a      	str	r2, [r7, #4]
 800e22e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e232:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	461a      	mov	r2, r3
 800e23a:	21a5      	movs	r1, #165	@ 0xa5
 800e23c:	f001 fe94 	bl	800ff68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e242:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e24a:	3b01      	subs	r3, #1
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4413      	add	r3, r2
 800e250:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	f023 0307 	bic.w	r3, r3, #7
 800e258:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	f003 0307 	and.w	r3, r3, #7
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00b      	beq.n	800e27c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e268:	f383 8811 	msr	BASEPRI, r3
 800e26c:	f3bf 8f6f 	isb	sy
 800e270:	f3bf 8f4f 	dsb	sy
 800e274:	617b      	str	r3, [r7, #20]
}
 800e276:	bf00      	nop
 800e278:	bf00      	nop
 800e27a:	e7fd      	b.n	800e278 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d01f      	beq.n	800e2c2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e282:	2300      	movs	r3, #0
 800e284:	61fb      	str	r3, [r7, #28]
 800e286:	e012      	b.n	800e2ae <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	4413      	add	r3, r2
 800e28e:	7819      	ldrb	r1, [r3, #0]
 800e290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	4413      	add	r3, r2
 800e296:	3334      	adds	r3, #52	@ 0x34
 800e298:	460a      	mov	r2, r1
 800e29a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d006      	beq.n	800e2b6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	61fb      	str	r3, [r7, #28]
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	2b0f      	cmp	r3, #15
 800e2b2:	d9e9      	bls.n	800e288 <prvInitialiseNewTask+0x66>
 800e2b4:	e000      	b.n	800e2b8 <prvInitialiseNewTask+0x96>
			{
				break;
 800e2b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e2c0:	e003      	b.n	800e2ca <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2cc:	2b06      	cmp	r3, #6
 800e2ce:	d901      	bls.n	800e2d4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e2d0:	2306      	movs	r3, #6
 800e2d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e2de:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e8:	3304      	adds	r3, #4
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7ff f90a 	bl	800d504 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f2:	3318      	adds	r3, #24
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7ff f905 	bl	800d504 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e302:	f1c3 0207 	rsb	r2, r3, #7
 800e306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e308:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e30c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e30e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e312:	2200      	movs	r2, #0
 800e314:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e318:	2200      	movs	r2, #0
 800e31a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31e:	2200      	movs	r2, #0
 800e320:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	68f9      	ldr	r1, [r7, #12]
 800e328:	69b8      	ldr	r0, [r7, #24]
 800e32a:	f000 fdeb 	bl	800ef04 <pxPortInitialiseStack>
 800e32e:	4602      	mov	r2, r0
 800e330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e332:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	2b00      	cmp	r3, #0
 800e338:	d002      	beq.n	800e340 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e33c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e33e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e340:	bf00      	nop
 800e342:	3720      	adds	r7, #32
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e350:	f000 ff0a 	bl	800f168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e354:	4b2a      	ldr	r3, [pc, #168]	@ (800e400 <prvAddNewTaskToReadyList+0xb8>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	3301      	adds	r3, #1
 800e35a:	4a29      	ldr	r2, [pc, #164]	@ (800e400 <prvAddNewTaskToReadyList+0xb8>)
 800e35c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e35e:	4b29      	ldr	r3, [pc, #164]	@ (800e404 <prvAddNewTaskToReadyList+0xbc>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d109      	bne.n	800e37a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e366:	4a27      	ldr	r2, [pc, #156]	@ (800e404 <prvAddNewTaskToReadyList+0xbc>)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e36c:	4b24      	ldr	r3, [pc, #144]	@ (800e400 <prvAddNewTaskToReadyList+0xb8>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d110      	bne.n	800e396 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e374:	f000 fbfc 	bl	800eb70 <prvInitialiseTaskLists>
 800e378:	e00d      	b.n	800e396 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e37a:	4b23      	ldr	r3, [pc, #140]	@ (800e408 <prvAddNewTaskToReadyList+0xc0>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d109      	bne.n	800e396 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e382:	4b20      	ldr	r3, [pc, #128]	@ (800e404 <prvAddNewTaskToReadyList+0xbc>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d802      	bhi.n	800e396 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e390:	4a1c      	ldr	r2, [pc, #112]	@ (800e404 <prvAddNewTaskToReadyList+0xbc>)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e396:	4b1d      	ldr	r3, [pc, #116]	@ (800e40c <prvAddNewTaskToReadyList+0xc4>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3301      	adds	r3, #1
 800e39c:	4a1b      	ldr	r2, [pc, #108]	@ (800e40c <prvAddNewTaskToReadyList+0xc4>)
 800e39e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	409a      	lsls	r2, r3
 800e3a8:	4b19      	ldr	r3, [pc, #100]	@ (800e410 <prvAddNewTaskToReadyList+0xc8>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	4a18      	ldr	r2, [pc, #96]	@ (800e410 <prvAddNewTaskToReadyList+0xc8>)
 800e3b0:	6013      	str	r3, [r2, #0]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	4413      	add	r3, r2
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4a15      	ldr	r2, [pc, #84]	@ (800e414 <prvAddNewTaskToReadyList+0xcc>)
 800e3c0:	441a      	add	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	4610      	mov	r0, r2
 800e3ca:	f7ff f8a8 	bl	800d51e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e3ce:	f000 fefd 	bl	800f1cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e408 <prvAddNewTaskToReadyList+0xc0>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00e      	beq.n	800e3f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e3da:	4b0a      	ldr	r3, [pc, #40]	@ (800e404 <prvAddNewTaskToReadyList+0xbc>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d207      	bcs.n	800e3f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800e418 <prvAddNewTaskToReadyList+0xd0>)
 800e3ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3ee:	601a      	str	r2, [r3, #0]
 800e3f0:	f3bf 8f4f 	dsb	sy
 800e3f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3f8:	bf00      	nop
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	20000b14 	.word	0x20000b14
 800e404:	20000a14 	.word	0x20000a14
 800e408:	20000b20 	.word	0x20000b20
 800e40c:	20000b30 	.word	0x20000b30
 800e410:	20000b1c 	.word	0x20000b1c
 800e414:	20000a18 	.word	0x20000a18
 800e418:	e000ed04 	.word	0xe000ed04

0800e41c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e424:	2300      	movs	r3, #0
 800e426:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d018      	beq.n	800e460 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e42e:	4b14      	ldr	r3, [pc, #80]	@ (800e480 <vTaskDelay+0x64>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00b      	beq.n	800e44e <vTaskDelay+0x32>
	__asm volatile
 800e436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e43a:	f383 8811 	msr	BASEPRI, r3
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f3bf 8f4f 	dsb	sy
 800e446:	60bb      	str	r3, [r7, #8]
}
 800e448:	bf00      	nop
 800e44a:	bf00      	nop
 800e44c:	e7fd      	b.n	800e44a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e44e:	f000 f87d 	bl	800e54c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e452:	2100      	movs	r1, #0
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 fcef 	bl	800ee38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e45a:	f000 f885 	bl	800e568 <xTaskResumeAll>
 800e45e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d107      	bne.n	800e476 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e466:	4b07      	ldr	r3, [pc, #28]	@ (800e484 <vTaskDelay+0x68>)
 800e468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e46c:	601a      	str	r2, [r3, #0]
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e476:	bf00      	nop
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	20000b3c 	.word	0x20000b3c
 800e484:	e000ed04 	.word	0xe000ed04

0800e488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b08a      	sub	sp, #40	@ 0x28
 800e48c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e48e:	2300      	movs	r3, #0
 800e490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e492:	2300      	movs	r3, #0
 800e494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e496:	463a      	mov	r2, r7
 800e498:	1d39      	adds	r1, r7, #4
 800e49a:	f107 0308 	add.w	r3, r7, #8
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7f2 fb36 	bl	8000b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e4a4:	6839      	ldr	r1, [r7, #0]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	68ba      	ldr	r2, [r7, #8]
 800e4aa:	9202      	str	r2, [sp, #8]
 800e4ac:	9301      	str	r3, [sp, #4]
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	9300      	str	r3, [sp, #0]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	460a      	mov	r2, r1
 800e4b6:	491f      	ldr	r1, [pc, #124]	@ (800e534 <vTaskStartScheduler+0xac>)
 800e4b8:	481f      	ldr	r0, [pc, #124]	@ (800e538 <vTaskStartScheduler+0xb0>)
 800e4ba:	f7ff fe0d 	bl	800e0d8 <xTaskCreateStatic>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	4a1e      	ldr	r2, [pc, #120]	@ (800e53c <vTaskStartScheduler+0xb4>)
 800e4c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e4c4:	4b1d      	ldr	r3, [pc, #116]	@ (800e53c <vTaskStartScheduler+0xb4>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d002      	beq.n	800e4d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	617b      	str	r3, [r7, #20]
 800e4d0:	e001      	b.n	800e4d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d116      	bne.n	800e50a <vTaskStartScheduler+0x82>
	__asm volatile
 800e4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4e0:	f383 8811 	msr	BASEPRI, r3
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	613b      	str	r3, [r7, #16]
}
 800e4ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e4f0:	4b13      	ldr	r3, [pc, #76]	@ (800e540 <vTaskStartScheduler+0xb8>)
 800e4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e4f8:	4b12      	ldr	r3, [pc, #72]	@ (800e544 <vTaskStartScheduler+0xbc>)
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e4fe:	4b12      	ldr	r3, [pc, #72]	@ (800e548 <vTaskStartScheduler+0xc0>)
 800e500:	2200      	movs	r2, #0
 800e502:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e504:	f000 fd8c 	bl	800f020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e508:	e00f      	b.n	800e52a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e510:	d10b      	bne.n	800e52a <vTaskStartScheduler+0xa2>
	__asm volatile
 800e512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	60fb      	str	r3, [r7, #12]
}
 800e524:	bf00      	nop
 800e526:	bf00      	nop
 800e528:	e7fd      	b.n	800e526 <vTaskStartScheduler+0x9e>
}
 800e52a:	bf00      	nop
 800e52c:	3718      	adds	r7, #24
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	080107d4 	.word	0x080107d4
 800e538:	0800eb3d 	.word	0x0800eb3d
 800e53c:	20000b38 	.word	0x20000b38
 800e540:	20000b34 	.word	0x20000b34
 800e544:	20000b20 	.word	0x20000b20
 800e548:	20000b18 	.word	0x20000b18

0800e54c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e54c:	b480      	push	{r7}
 800e54e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e550:	4b04      	ldr	r3, [pc, #16]	@ (800e564 <vTaskSuspendAll+0x18>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	3301      	adds	r3, #1
 800e556:	4a03      	ldr	r2, [pc, #12]	@ (800e564 <vTaskSuspendAll+0x18>)
 800e558:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e55a:	bf00      	nop
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr
 800e564:	20000b3c 	.word	0x20000b3c

0800e568 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e56e:	2300      	movs	r3, #0
 800e570:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e572:	2300      	movs	r3, #0
 800e574:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e576:	4b42      	ldr	r3, [pc, #264]	@ (800e680 <xTaskResumeAll+0x118>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10b      	bne.n	800e596 <xTaskResumeAll+0x2e>
	__asm volatile
 800e57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e582:	f383 8811 	msr	BASEPRI, r3
 800e586:	f3bf 8f6f 	isb	sy
 800e58a:	f3bf 8f4f 	dsb	sy
 800e58e:	603b      	str	r3, [r7, #0]
}
 800e590:	bf00      	nop
 800e592:	bf00      	nop
 800e594:	e7fd      	b.n	800e592 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e596:	f000 fde7 	bl	800f168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e59a:	4b39      	ldr	r3, [pc, #228]	@ (800e680 <xTaskResumeAll+0x118>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3b01      	subs	r3, #1
 800e5a0:	4a37      	ldr	r2, [pc, #220]	@ (800e680 <xTaskResumeAll+0x118>)
 800e5a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5a4:	4b36      	ldr	r3, [pc, #216]	@ (800e680 <xTaskResumeAll+0x118>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d161      	bne.n	800e670 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e5ac:	4b35      	ldr	r3, [pc, #212]	@ (800e684 <xTaskResumeAll+0x11c>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d05d      	beq.n	800e670 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5b4:	e02e      	b.n	800e614 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5b6:	4b34      	ldr	r3, [pc, #208]	@ (800e688 <xTaskResumeAll+0x120>)
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3318      	adds	r3, #24
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7ff f808 	bl	800d5d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7ff f803 	bl	800d5d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	409a      	lsls	r2, r3
 800e5da:	4b2c      	ldr	r3, [pc, #176]	@ (800e68c <xTaskResumeAll+0x124>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	4a2a      	ldr	r2, [pc, #168]	@ (800e68c <xTaskResumeAll+0x124>)
 800e5e2:	6013      	str	r3, [r2, #0]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	4413      	add	r3, r2
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	4a27      	ldr	r2, [pc, #156]	@ (800e690 <xTaskResumeAll+0x128>)
 800e5f2:	441a      	add	r2, r3
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	3304      	adds	r3, #4
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	4610      	mov	r0, r2
 800e5fc:	f7fe ff8f 	bl	800d51e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e604:	4b23      	ldr	r3, [pc, #140]	@ (800e694 <xTaskResumeAll+0x12c>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d302      	bcc.n	800e614 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e60e:	4b22      	ldr	r3, [pc, #136]	@ (800e698 <xTaskResumeAll+0x130>)
 800e610:	2201      	movs	r2, #1
 800e612:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e614:	4b1c      	ldr	r3, [pc, #112]	@ (800e688 <xTaskResumeAll+0x120>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1cc      	bne.n	800e5b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d001      	beq.n	800e626 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e622:	f000 fb43 	bl	800ecac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e626:	4b1d      	ldr	r3, [pc, #116]	@ (800e69c <xTaskResumeAll+0x134>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d010      	beq.n	800e654 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e632:	f000 f837 	bl	800e6a4 <xTaskIncrementTick>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e63c:	4b16      	ldr	r3, [pc, #88]	@ (800e698 <xTaskResumeAll+0x130>)
 800e63e:	2201      	movs	r2, #1
 800e640:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	3b01      	subs	r3, #1
 800e646:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1f1      	bne.n	800e632 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e64e:	4b13      	ldr	r3, [pc, #76]	@ (800e69c <xTaskResumeAll+0x134>)
 800e650:	2200      	movs	r2, #0
 800e652:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e654:	4b10      	ldr	r3, [pc, #64]	@ (800e698 <xTaskResumeAll+0x130>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d009      	beq.n	800e670 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e65c:	2301      	movs	r3, #1
 800e65e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e660:	4b0f      	ldr	r3, [pc, #60]	@ (800e6a0 <xTaskResumeAll+0x138>)
 800e662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e666:	601a      	str	r2, [r3, #0]
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e670:	f000 fdac 	bl	800f1cc <vPortExitCritical>

	return xAlreadyYielded;
 800e674:	68bb      	ldr	r3, [r7, #8]
}
 800e676:	4618      	mov	r0, r3
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	20000b3c 	.word	0x20000b3c
 800e684:	20000b14 	.word	0x20000b14
 800e688:	20000ad4 	.word	0x20000ad4
 800e68c:	20000b1c 	.word	0x20000b1c
 800e690:	20000a18 	.word	0x20000a18
 800e694:	20000a14 	.word	0x20000a14
 800e698:	20000b28 	.word	0x20000b28
 800e69c:	20000b24 	.word	0x20000b24
 800e6a0:	e000ed04 	.word	0xe000ed04

0800e6a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b086      	sub	sp, #24
 800e6a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6ae:	4b4f      	ldr	r3, [pc, #316]	@ (800e7ec <xTaskIncrementTick+0x148>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f040 808f 	bne.w	800e7d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e6b8:	4b4d      	ldr	r3, [pc, #308]	@ (800e7f0 <xTaskIncrementTick+0x14c>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e6c0:	4a4b      	ldr	r2, [pc, #300]	@ (800e7f0 <xTaskIncrementTick+0x14c>)
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d121      	bne.n	800e710 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e6cc:	4b49      	ldr	r3, [pc, #292]	@ (800e7f4 <xTaskIncrementTick+0x150>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00b      	beq.n	800e6ee <xTaskIncrementTick+0x4a>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	603b      	str	r3, [r7, #0]
}
 800e6e8:	bf00      	nop
 800e6ea:	bf00      	nop
 800e6ec:	e7fd      	b.n	800e6ea <xTaskIncrementTick+0x46>
 800e6ee:	4b41      	ldr	r3, [pc, #260]	@ (800e7f4 <xTaskIncrementTick+0x150>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	4b40      	ldr	r3, [pc, #256]	@ (800e7f8 <xTaskIncrementTick+0x154>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a3e      	ldr	r2, [pc, #248]	@ (800e7f4 <xTaskIncrementTick+0x150>)
 800e6fa:	6013      	str	r3, [r2, #0]
 800e6fc:	4a3e      	ldr	r2, [pc, #248]	@ (800e7f8 <xTaskIncrementTick+0x154>)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6013      	str	r3, [r2, #0]
 800e702:	4b3e      	ldr	r3, [pc, #248]	@ (800e7fc <xTaskIncrementTick+0x158>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3301      	adds	r3, #1
 800e708:	4a3c      	ldr	r2, [pc, #240]	@ (800e7fc <xTaskIncrementTick+0x158>)
 800e70a:	6013      	str	r3, [r2, #0]
 800e70c:	f000 face 	bl	800ecac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e710:	4b3b      	ldr	r3, [pc, #236]	@ (800e800 <xTaskIncrementTick+0x15c>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	693a      	ldr	r2, [r7, #16]
 800e716:	429a      	cmp	r2, r3
 800e718:	d348      	bcc.n	800e7ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e71a:	4b36      	ldr	r3, [pc, #216]	@ (800e7f4 <xTaskIncrementTick+0x150>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d104      	bne.n	800e72e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e724:	4b36      	ldr	r3, [pc, #216]	@ (800e800 <xTaskIncrementTick+0x15c>)
 800e726:	f04f 32ff 	mov.w	r2, #4294967295
 800e72a:	601a      	str	r2, [r3, #0]
					break;
 800e72c:	e03e      	b.n	800e7ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e72e:	4b31      	ldr	r3, [pc, #196]	@ (800e7f4 <xTaskIncrementTick+0x150>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	68db      	ldr	r3, [r3, #12]
 800e736:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e73e:	693a      	ldr	r2, [r7, #16]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	429a      	cmp	r2, r3
 800e744:	d203      	bcs.n	800e74e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e746:	4a2e      	ldr	r2, [pc, #184]	@ (800e800 <xTaskIncrementTick+0x15c>)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e74c:	e02e      	b.n	800e7ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	3304      	adds	r3, #4
 800e752:	4618      	mov	r0, r3
 800e754:	f7fe ff40 	bl	800d5d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d004      	beq.n	800e76a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	3318      	adds	r3, #24
 800e764:	4618      	mov	r0, r3
 800e766:	f7fe ff37 	bl	800d5d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e76e:	2201      	movs	r2, #1
 800e770:	409a      	lsls	r2, r3
 800e772:	4b24      	ldr	r3, [pc, #144]	@ (800e804 <xTaskIncrementTick+0x160>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4313      	orrs	r3, r2
 800e778:	4a22      	ldr	r2, [pc, #136]	@ (800e804 <xTaskIncrementTick+0x160>)
 800e77a:	6013      	str	r3, [r2, #0]
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e780:	4613      	mov	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	4a1f      	ldr	r2, [pc, #124]	@ (800e808 <xTaskIncrementTick+0x164>)
 800e78a:	441a      	add	r2, r3
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	3304      	adds	r3, #4
 800e790:	4619      	mov	r1, r3
 800e792:	4610      	mov	r0, r2
 800e794:	f7fe fec3 	bl	800d51e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e79c:	4b1b      	ldr	r3, [pc, #108]	@ (800e80c <xTaskIncrementTick+0x168>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d3b9      	bcc.n	800e71a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7aa:	e7b6      	b.n	800e71a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e7ac:	4b17      	ldr	r3, [pc, #92]	@ (800e80c <xTaskIncrementTick+0x168>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7b2:	4915      	ldr	r1, [pc, #84]	@ (800e808 <xTaskIncrementTick+0x164>)
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	4413      	add	r3, r2
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	440b      	add	r3, r1
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d901      	bls.n	800e7c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e7c8:	4b11      	ldr	r3, [pc, #68]	@ (800e810 <xTaskIncrementTick+0x16c>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d007      	beq.n	800e7e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	617b      	str	r3, [r7, #20]
 800e7d4:	e004      	b.n	800e7e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800e814 <xTaskIncrementTick+0x170>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	4a0d      	ldr	r2, [pc, #52]	@ (800e814 <xTaskIncrementTick+0x170>)
 800e7de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e7e0:	697b      	ldr	r3, [r7, #20]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3718      	adds	r7, #24
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	20000b3c 	.word	0x20000b3c
 800e7f0:	20000b18 	.word	0x20000b18
 800e7f4:	20000acc 	.word	0x20000acc
 800e7f8:	20000ad0 	.word	0x20000ad0
 800e7fc:	20000b2c 	.word	0x20000b2c
 800e800:	20000b34 	.word	0x20000b34
 800e804:	20000b1c 	.word	0x20000b1c
 800e808:	20000a18 	.word	0x20000a18
 800e80c:	20000a14 	.word	0x20000a14
 800e810:	20000b28 	.word	0x20000b28
 800e814:	20000b24 	.word	0x20000b24

0800e818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b088      	sub	sp, #32
 800e81c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e81e:	4b3a      	ldr	r3, [pc, #232]	@ (800e908 <vTaskSwitchContext+0xf0>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d003      	beq.n	800e82e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e826:	4b39      	ldr	r3, [pc, #228]	@ (800e90c <vTaskSwitchContext+0xf4>)
 800e828:	2201      	movs	r2, #1
 800e82a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e82c:	e067      	b.n	800e8fe <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800e82e:	4b37      	ldr	r3, [pc, #220]	@ (800e90c <vTaskSwitchContext+0xf4>)
 800e830:	2200      	movs	r2, #0
 800e832:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e834:	4b36      	ldr	r3, [pc, #216]	@ (800e910 <vTaskSwitchContext+0xf8>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e83a:	61fb      	str	r3, [r7, #28]
 800e83c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800e840:	61bb      	str	r3, [r7, #24]
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	69ba      	ldr	r2, [r7, #24]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d111      	bne.n	800e870 <vTaskSwitchContext+0x58>
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	3304      	adds	r3, #4
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	69ba      	ldr	r2, [r7, #24]
 800e854:	429a      	cmp	r2, r3
 800e856:	d10b      	bne.n	800e870 <vTaskSwitchContext+0x58>
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	3308      	adds	r3, #8
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	69ba      	ldr	r2, [r7, #24]
 800e860:	429a      	cmp	r2, r3
 800e862:	d105      	bne.n	800e870 <vTaskSwitchContext+0x58>
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	330c      	adds	r3, #12
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	69ba      	ldr	r2, [r7, #24]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d008      	beq.n	800e882 <vTaskSwitchContext+0x6a>
 800e870:	4b27      	ldr	r3, [pc, #156]	@ (800e910 <vTaskSwitchContext+0xf8>)
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	4b26      	ldr	r3, [pc, #152]	@ (800e910 <vTaskSwitchContext+0xf8>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	3334      	adds	r3, #52	@ 0x34
 800e87a:	4619      	mov	r1, r3
 800e87c:	4610      	mov	r0, r2
 800e87e:	f7f2 f934 	bl	8000aea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e882:	4b24      	ldr	r3, [pc, #144]	@ (800e914 <vTaskSwitchContext+0xfc>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	fab3 f383 	clz	r3, r3
 800e88e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e890:	7afb      	ldrb	r3, [r7, #11]
 800e892:	f1c3 031f 	rsb	r3, r3, #31
 800e896:	617b      	str	r3, [r7, #20]
 800e898:	491f      	ldr	r1, [pc, #124]	@ (800e918 <vTaskSwitchContext+0x100>)
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	4613      	mov	r3, r2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	440b      	add	r3, r1
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d10b      	bne.n	800e8c4 <vTaskSwitchContext+0xac>
	__asm volatile
 800e8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b0:	f383 8811 	msr	BASEPRI, r3
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	607b      	str	r3, [r7, #4]
}
 800e8be:	bf00      	nop
 800e8c0:	bf00      	nop
 800e8c2:	e7fd      	b.n	800e8c0 <vTaskSwitchContext+0xa8>
 800e8c4:	697a      	ldr	r2, [r7, #20]
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	4413      	add	r3, r2
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	4a12      	ldr	r2, [pc, #72]	@ (800e918 <vTaskSwitchContext+0x100>)
 800e8d0:	4413      	add	r3, r2
 800e8d2:	613b      	str	r3, [r7, #16]
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	685a      	ldr	r2, [r3, #4]
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	605a      	str	r2, [r3, #4]
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	3308      	adds	r3, #8
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d104      	bne.n	800e8f4 <vTaskSwitchContext+0xdc>
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	685a      	ldr	r2, [r3, #4]
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	605a      	str	r2, [r3, #4]
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	4a05      	ldr	r2, [pc, #20]	@ (800e910 <vTaskSwitchContext+0xf8>)
 800e8fc:	6013      	str	r3, [r2, #0]
}
 800e8fe:	bf00      	nop
 800e900:	3720      	adds	r7, #32
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	20000b3c 	.word	0x20000b3c
 800e90c:	20000b28 	.word	0x20000b28
 800e910:	20000a14 	.word	0x20000a14
 800e914:	20000b1c 	.word	0x20000b1c
 800e918:	20000a18 	.word	0x20000a18

0800e91c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d10b      	bne.n	800e944 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e930:	f383 8811 	msr	BASEPRI, r3
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	60fb      	str	r3, [r7, #12]
}
 800e93e:	bf00      	nop
 800e940:	bf00      	nop
 800e942:	e7fd      	b.n	800e940 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e944:	4b07      	ldr	r3, [pc, #28]	@ (800e964 <vTaskPlaceOnEventList+0x48>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	3318      	adds	r3, #24
 800e94a:	4619      	mov	r1, r3
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f7fe fe0a 	bl	800d566 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e952:	2101      	movs	r1, #1
 800e954:	6838      	ldr	r0, [r7, #0]
 800e956:	f000 fa6f 	bl	800ee38 <prvAddCurrentTaskToDelayedList>
}
 800e95a:	bf00      	nop
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	20000a14 	.word	0x20000a14

0800e968 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b086      	sub	sp, #24
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10b      	bne.n	800e996 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	60fb      	str	r3, [r7, #12]
}
 800e990:	bf00      	nop
 800e992:	bf00      	nop
 800e994:	e7fd      	b.n	800e992 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	3318      	adds	r3, #24
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7fe fe1c 	bl	800d5d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9a0:	4b1d      	ldr	r3, [pc, #116]	@ (800ea18 <xTaskRemoveFromEventList+0xb0>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d11c      	bne.n	800e9e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	3304      	adds	r3, #4
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7fe fe13 	bl	800d5d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	409a      	lsls	r2, r3
 800e9ba:	4b18      	ldr	r3, [pc, #96]	@ (800ea1c <xTaskRemoveFromEventList+0xb4>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	4a16      	ldr	r2, [pc, #88]	@ (800ea1c <xTaskRemoveFromEventList+0xb4>)
 800e9c2:	6013      	str	r3, [r2, #0]
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	4413      	add	r3, r2
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	4a13      	ldr	r2, [pc, #76]	@ (800ea20 <xTaskRemoveFromEventList+0xb8>)
 800e9d2:	441a      	add	r2, r3
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	3304      	adds	r3, #4
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4610      	mov	r0, r2
 800e9dc:	f7fe fd9f 	bl	800d51e <vListInsertEnd>
 800e9e0:	e005      	b.n	800e9ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	3318      	adds	r3, #24
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	480e      	ldr	r0, [pc, #56]	@ (800ea24 <xTaskRemoveFromEventList+0xbc>)
 800e9ea:	f7fe fd98 	bl	800d51e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800ea28 <xTaskRemoveFromEventList+0xc0>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d905      	bls.n	800ea08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea00:	4b0a      	ldr	r3, [pc, #40]	@ (800ea2c <xTaskRemoveFromEventList+0xc4>)
 800ea02:	2201      	movs	r2, #1
 800ea04:	601a      	str	r2, [r3, #0]
 800ea06:	e001      	b.n	800ea0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea0c:	697b      	ldr	r3, [r7, #20]
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3718      	adds	r7, #24
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20000b3c 	.word	0x20000b3c
 800ea1c:	20000b1c 	.word	0x20000b1c
 800ea20:	20000a18 	.word	0x20000a18
 800ea24:	20000ad4 	.word	0x20000ad4
 800ea28:	20000a14 	.word	0x20000a14
 800ea2c:	20000b28 	.word	0x20000b28

0800ea30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea38:	4b06      	ldr	r3, [pc, #24]	@ (800ea54 <vTaskInternalSetTimeOutState+0x24>)
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea40:	4b05      	ldr	r3, [pc, #20]	@ (800ea58 <vTaskInternalSetTimeOutState+0x28>)
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	605a      	str	r2, [r3, #4]
}
 800ea48:	bf00      	nop
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr
 800ea54:	20000b2c 	.word	0x20000b2c
 800ea58:	20000b18 	.word	0x20000b18

0800ea5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b088      	sub	sp, #32
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d10b      	bne.n	800ea84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ea6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea70:	f383 8811 	msr	BASEPRI, r3
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	613b      	str	r3, [r7, #16]
}
 800ea7e:	bf00      	nop
 800ea80:	bf00      	nop
 800ea82:	e7fd      	b.n	800ea80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10b      	bne.n	800eaa2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ea8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8e:	f383 8811 	msr	BASEPRI, r3
 800ea92:	f3bf 8f6f 	isb	sy
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	60fb      	str	r3, [r7, #12]
}
 800ea9c:	bf00      	nop
 800ea9e:	bf00      	nop
 800eaa0:	e7fd      	b.n	800ea9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800eaa2:	f000 fb61 	bl	800f168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eaa6:	4b1d      	ldr	r3, [pc, #116]	@ (800eb1c <xTaskCheckForTimeOut+0xc0>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	69ba      	ldr	r2, [r7, #24]
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eabe:	d102      	bne.n	800eac6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eac0:	2300      	movs	r3, #0
 800eac2:	61fb      	str	r3, [r7, #28]
 800eac4:	e023      	b.n	800eb0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	4b15      	ldr	r3, [pc, #84]	@ (800eb20 <xTaskCheckForTimeOut+0xc4>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d007      	beq.n	800eae2 <xTaskCheckForTimeOut+0x86>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	69ba      	ldr	r2, [r7, #24]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d302      	bcc.n	800eae2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eadc:	2301      	movs	r3, #1
 800eade:	61fb      	str	r3, [r7, #28]
 800eae0:	e015      	b.n	800eb0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	697a      	ldr	r2, [r7, #20]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d20b      	bcs.n	800eb04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	1ad2      	subs	r2, r2, r3
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f7ff ff99 	bl	800ea30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eafe:	2300      	movs	r3, #0
 800eb00:	61fb      	str	r3, [r7, #28]
 800eb02:	e004      	b.n	800eb0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	2200      	movs	r2, #0
 800eb08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb0e:	f000 fb5d 	bl	800f1cc <vPortExitCritical>

	return xReturn;
 800eb12:	69fb      	ldr	r3, [r7, #28]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3720      	adds	r7, #32
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	20000b18 	.word	0x20000b18
 800eb20:	20000b2c 	.word	0x20000b2c

0800eb24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb24:	b480      	push	{r7}
 800eb26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb28:	4b03      	ldr	r3, [pc, #12]	@ (800eb38 <vTaskMissedYield+0x14>)
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	601a      	str	r2, [r3, #0]
}
 800eb2e:	bf00      	nop
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	20000b28 	.word	0x20000b28

0800eb3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb44:	f000 f854 	bl	800ebf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb48:	4b07      	ldr	r3, [pc, #28]	@ (800eb68 <prvIdleTask+0x2c>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d907      	bls.n	800eb60 <prvIdleTask+0x24>
			{
				taskYIELD();
 800eb50:	4b06      	ldr	r3, [pc, #24]	@ (800eb6c <prvIdleTask+0x30>)
 800eb52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb56:	601a      	str	r2, [r3, #0]
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800eb60:	f7f1 ffbc 	bl	8000adc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800eb64:	e7ee      	b.n	800eb44 <prvIdleTask+0x8>
 800eb66:	bf00      	nop
 800eb68:	20000a18 	.word	0x20000a18
 800eb6c:	e000ed04 	.word	0xe000ed04

0800eb70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb76:	2300      	movs	r3, #0
 800eb78:	607b      	str	r3, [r7, #4]
 800eb7a:	e00c      	b.n	800eb96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	4413      	add	r3, r2
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	4a12      	ldr	r2, [pc, #72]	@ (800ebd0 <prvInitialiseTaskLists+0x60>)
 800eb88:	4413      	add	r3, r2
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fe fc9a 	bl	800d4c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	3301      	adds	r3, #1
 800eb94:	607b      	str	r3, [r7, #4]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b06      	cmp	r3, #6
 800eb9a:	d9ef      	bls.n	800eb7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb9c:	480d      	ldr	r0, [pc, #52]	@ (800ebd4 <prvInitialiseTaskLists+0x64>)
 800eb9e:	f7fe fc91 	bl	800d4c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eba2:	480d      	ldr	r0, [pc, #52]	@ (800ebd8 <prvInitialiseTaskLists+0x68>)
 800eba4:	f7fe fc8e 	bl	800d4c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eba8:	480c      	ldr	r0, [pc, #48]	@ (800ebdc <prvInitialiseTaskLists+0x6c>)
 800ebaa:	f7fe fc8b 	bl	800d4c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ebae:	480c      	ldr	r0, [pc, #48]	@ (800ebe0 <prvInitialiseTaskLists+0x70>)
 800ebb0:	f7fe fc88 	bl	800d4c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ebb4:	480b      	ldr	r0, [pc, #44]	@ (800ebe4 <prvInitialiseTaskLists+0x74>)
 800ebb6:	f7fe fc85 	bl	800d4c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ebba:	4b0b      	ldr	r3, [pc, #44]	@ (800ebe8 <prvInitialiseTaskLists+0x78>)
 800ebbc:	4a05      	ldr	r2, [pc, #20]	@ (800ebd4 <prvInitialiseTaskLists+0x64>)
 800ebbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ebc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ebec <prvInitialiseTaskLists+0x7c>)
 800ebc2:	4a05      	ldr	r2, [pc, #20]	@ (800ebd8 <prvInitialiseTaskLists+0x68>)
 800ebc4:	601a      	str	r2, [r3, #0]
}
 800ebc6:	bf00      	nop
 800ebc8:	3708      	adds	r7, #8
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	20000a18 	.word	0x20000a18
 800ebd4:	20000aa4 	.word	0x20000aa4
 800ebd8:	20000ab8 	.word	0x20000ab8
 800ebdc:	20000ad4 	.word	0x20000ad4
 800ebe0:	20000ae8 	.word	0x20000ae8
 800ebe4:	20000b00 	.word	0x20000b00
 800ebe8:	20000acc 	.word	0x20000acc
 800ebec:	20000ad0 	.word	0x20000ad0

0800ebf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebf6:	e019      	b.n	800ec2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ebf8:	f000 fab6 	bl	800f168 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebfc:	4b10      	ldr	r3, [pc, #64]	@ (800ec40 <prvCheckTasksWaitingTermination+0x50>)
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	3304      	adds	r3, #4
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7fe fce5 	bl	800d5d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec44 <prvCheckTasksWaitingTermination+0x54>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3b01      	subs	r3, #1
 800ec14:	4a0b      	ldr	r2, [pc, #44]	@ (800ec44 <prvCheckTasksWaitingTermination+0x54>)
 800ec16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec18:	4b0b      	ldr	r3, [pc, #44]	@ (800ec48 <prvCheckTasksWaitingTermination+0x58>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	4a0a      	ldr	r2, [pc, #40]	@ (800ec48 <prvCheckTasksWaitingTermination+0x58>)
 800ec20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ec22:	f000 fad3 	bl	800f1cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 f810 	bl	800ec4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec2c:	4b06      	ldr	r3, [pc, #24]	@ (800ec48 <prvCheckTasksWaitingTermination+0x58>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1e1      	bne.n	800ebf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec34:	bf00      	nop
 800ec36:	bf00      	nop
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	20000ae8 	.word	0x20000ae8
 800ec44:	20000b14 	.word	0x20000b14
 800ec48:	20000afc 	.word	0x20000afc

0800ec4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d108      	bne.n	800ec70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec62:	4618      	mov	r0, r3
 800ec64:	f000 fc76 	bl	800f554 <vPortFree>
				vPortFree( pxTCB );
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 fc73 	bl	800f554 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec6e:	e019      	b.n	800eca4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800ec76:	2b01      	cmp	r3, #1
 800ec78:	d103      	bne.n	800ec82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 fc6a 	bl	800f554 <vPortFree>
	}
 800ec80:	e010      	b.n	800eca4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d00b      	beq.n	800eca4 <prvDeleteTCB+0x58>
	__asm volatile
 800ec8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec90:	f383 8811 	msr	BASEPRI, r3
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	60fb      	str	r3, [r7, #12]
}
 800ec9e:	bf00      	nop
 800eca0:	bf00      	nop
 800eca2:	e7fd      	b.n	800eca0 <prvDeleteTCB+0x54>
	}
 800eca4:	bf00      	nop
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecb2:	4b0c      	ldr	r3, [pc, #48]	@ (800ece4 <prvResetNextTaskUnblockTime+0x38>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d104      	bne.n	800ecc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ecbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ece8 <prvResetNextTaskUnblockTime+0x3c>)
 800ecbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ecc4:	e008      	b.n	800ecd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecc6:	4b07      	ldr	r3, [pc, #28]	@ (800ece4 <prvResetNextTaskUnblockTime+0x38>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	68db      	ldr	r3, [r3, #12]
 800eccc:	68db      	ldr	r3, [r3, #12]
 800ecce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	4a04      	ldr	r2, [pc, #16]	@ (800ece8 <prvResetNextTaskUnblockTime+0x3c>)
 800ecd6:	6013      	str	r3, [r2, #0]
}
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr
 800ece4:	20000acc 	.word	0x20000acc
 800ece8:	20000b34 	.word	0x20000b34

0800ecec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ed20 <xTaskGetSchedulerState+0x34>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d102      	bne.n	800ed00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	607b      	str	r3, [r7, #4]
 800ecfe:	e008      	b.n	800ed12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed00:	4b08      	ldr	r3, [pc, #32]	@ (800ed24 <xTaskGetSchedulerState+0x38>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d102      	bne.n	800ed0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ed08:	2302      	movs	r3, #2
 800ed0a:	607b      	str	r3, [r7, #4]
 800ed0c:	e001      	b.n	800ed12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed12:	687b      	ldr	r3, [r7, #4]
	}
 800ed14:	4618      	mov	r0, r3
 800ed16:	370c      	adds	r7, #12
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr
 800ed20:	20000b20 	.word	0x20000b20
 800ed24:	20000b3c 	.word	0x20000b3c

0800ed28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b086      	sub	sp, #24
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed34:	2300      	movs	r3, #0
 800ed36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d070      	beq.n	800ee20 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed3e:	4b3b      	ldr	r3, [pc, #236]	@ (800ee2c <xTaskPriorityDisinherit+0x104>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d00b      	beq.n	800ed60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ed48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed4c:	f383 8811 	msr	BASEPRI, r3
 800ed50:	f3bf 8f6f 	isb	sy
 800ed54:	f3bf 8f4f 	dsb	sy
 800ed58:	60fb      	str	r3, [r7, #12]
}
 800ed5a:	bf00      	nop
 800ed5c:	bf00      	nop
 800ed5e:	e7fd      	b.n	800ed5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d10b      	bne.n	800ed80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	60bb      	str	r3, [r7, #8]
}
 800ed7a:	bf00      	nop
 800ed7c:	bf00      	nop
 800ed7e:	e7fd      	b.n	800ed7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed84:	1e5a      	subs	r2, r3, #1
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d044      	beq.n	800ee20 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d140      	bne.n	800ee20 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	3304      	adds	r3, #4
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fe fc18 	bl	800d5d8 <uxListRemove>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d115      	bne.n	800edda <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edb2:	491f      	ldr	r1, [pc, #124]	@ (800ee30 <xTaskPriorityDisinherit+0x108>)
 800edb4:	4613      	mov	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4413      	add	r3, r2
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	440b      	add	r3, r1
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d10a      	bne.n	800edda <xTaskPriorityDisinherit+0xb2>
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc8:	2201      	movs	r2, #1
 800edca:	fa02 f303 	lsl.w	r3, r2, r3
 800edce:	43da      	mvns	r2, r3
 800edd0:	4b18      	ldr	r3, [pc, #96]	@ (800ee34 <xTaskPriorityDisinherit+0x10c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4013      	ands	r3, r2
 800edd6:	4a17      	ldr	r2, [pc, #92]	@ (800ee34 <xTaskPriorityDisinherit+0x10c>)
 800edd8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede6:	f1c3 0207 	rsb	r2, r3, #7
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edf2:	2201      	movs	r2, #1
 800edf4:	409a      	lsls	r2, r3
 800edf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ee34 <xTaskPriorityDisinherit+0x10c>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	4a0d      	ldr	r2, [pc, #52]	@ (800ee34 <xTaskPriorityDisinherit+0x10c>)
 800edfe:	6013      	str	r3, [r2, #0]
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee04:	4613      	mov	r3, r2
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4413      	add	r3, r2
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	4a08      	ldr	r2, [pc, #32]	@ (800ee30 <xTaskPriorityDisinherit+0x108>)
 800ee0e:	441a      	add	r2, r3
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	3304      	adds	r3, #4
 800ee14:	4619      	mov	r1, r3
 800ee16:	4610      	mov	r0, r2
 800ee18:	f7fe fb81 	bl	800d51e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee20:	697b      	ldr	r3, [r7, #20]
	}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3718      	adds	r7, #24
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	20000a14 	.word	0x20000a14
 800ee30:	20000a18 	.word	0x20000a18
 800ee34:	20000b1c 	.word	0x20000b1c

0800ee38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee42:	4b29      	ldr	r3, [pc, #164]	@ (800eee8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee48:	4b28      	ldr	r3, [pc, #160]	@ (800eeec <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fe fbc2 	bl	800d5d8 <uxListRemove>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d10b      	bne.n	800ee72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ee5a:	4b24      	ldr	r3, [pc, #144]	@ (800eeec <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee60:	2201      	movs	r2, #1
 800ee62:	fa02 f303 	lsl.w	r3, r2, r3
 800ee66:	43da      	mvns	r2, r3
 800ee68:	4b21      	ldr	r3, [pc, #132]	@ (800eef0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4013      	ands	r3, r2
 800ee6e:	4a20      	ldr	r2, [pc, #128]	@ (800eef0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee78:	d10a      	bne.n	800ee90 <prvAddCurrentTaskToDelayedList+0x58>
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d007      	beq.n	800ee90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee80:	4b1a      	ldr	r3, [pc, #104]	@ (800eeec <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	3304      	adds	r3, #4
 800ee86:	4619      	mov	r1, r3
 800ee88:	481a      	ldr	r0, [pc, #104]	@ (800eef4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ee8a:	f7fe fb48 	bl	800d51e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee8e:	e026      	b.n	800eede <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee90:	68fa      	ldr	r2, [r7, #12]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	4413      	add	r3, r2
 800ee96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee98:	4b14      	ldr	r3, [pc, #80]	@ (800eeec <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eea0:	68ba      	ldr	r2, [r7, #8]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d209      	bcs.n	800eebc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eea8:	4b13      	ldr	r3, [pc, #76]	@ (800eef8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	4b0f      	ldr	r3, [pc, #60]	@ (800eeec <prvAddCurrentTaskToDelayedList+0xb4>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	3304      	adds	r3, #4
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	4610      	mov	r0, r2
 800eeb6:	f7fe fb56 	bl	800d566 <vListInsert>
}
 800eeba:	e010      	b.n	800eede <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eebc:	4b0f      	ldr	r3, [pc, #60]	@ (800eefc <prvAddCurrentTaskToDelayedList+0xc4>)
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	4b0a      	ldr	r3, [pc, #40]	@ (800eeec <prvAddCurrentTaskToDelayedList+0xb4>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	3304      	adds	r3, #4
 800eec6:	4619      	mov	r1, r3
 800eec8:	4610      	mov	r0, r2
 800eeca:	f7fe fb4c 	bl	800d566 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eece:	4b0c      	ldr	r3, [pc, #48]	@ (800ef00 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d202      	bcs.n	800eede <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eed8:	4a09      	ldr	r2, [pc, #36]	@ (800ef00 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	6013      	str	r3, [r2, #0]
}
 800eede:	bf00      	nop
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	20000b18 	.word	0x20000b18
 800eeec:	20000a14 	.word	0x20000a14
 800eef0:	20000b1c 	.word	0x20000b1c
 800eef4:	20000b00 	.word	0x20000b00
 800eef8:	20000ad0 	.word	0x20000ad0
 800eefc:	20000acc 	.word	0x20000acc
 800ef00:	20000b34 	.word	0x20000b34

0800ef04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef04:	b480      	push	{r7}
 800ef06:	b085      	sub	sp, #20
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	3b04      	subs	r3, #4
 800ef14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ef1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	3b04      	subs	r3, #4
 800ef22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	f023 0201 	bic.w	r2, r3, #1
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	3b04      	subs	r3, #4
 800ef32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef34:	4a0c      	ldr	r2, [pc, #48]	@ (800ef68 <pxPortInitialiseStack+0x64>)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	3b14      	subs	r3, #20
 800ef3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	3b04      	subs	r3, #4
 800ef4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f06f 0202 	mvn.w	r2, #2
 800ef52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	3b20      	subs	r3, #32
 800ef58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	0800ef6d 	.word	0x0800ef6d

0800ef6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ef72:	2300      	movs	r3, #0
 800ef74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ef76:	4b13      	ldr	r3, [pc, #76]	@ (800efc4 <prvTaskExitError+0x58>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7e:	d00b      	beq.n	800ef98 <prvTaskExitError+0x2c>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	60fb      	str	r3, [r7, #12]
}
 800ef92:	bf00      	nop
 800ef94:	bf00      	nop
 800ef96:	e7fd      	b.n	800ef94 <prvTaskExitError+0x28>
	__asm volatile
 800ef98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef9c:	f383 8811 	msr	BASEPRI, r3
 800efa0:	f3bf 8f6f 	isb	sy
 800efa4:	f3bf 8f4f 	dsb	sy
 800efa8:	60bb      	str	r3, [r7, #8]
}
 800efaa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800efac:	bf00      	nop
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d0fc      	beq.n	800efae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800efb4:	bf00      	nop
 800efb6:	bf00      	nop
 800efb8:	3714      	adds	r7, #20
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	20000034 	.word	0x20000034
	...

0800efd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800efd0:	4b07      	ldr	r3, [pc, #28]	@ (800eff0 <pxCurrentTCBConst2>)
 800efd2:	6819      	ldr	r1, [r3, #0]
 800efd4:	6808      	ldr	r0, [r1, #0]
 800efd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efda:	f380 8809 	msr	PSP, r0
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	f04f 0000 	mov.w	r0, #0
 800efe6:	f380 8811 	msr	BASEPRI, r0
 800efea:	4770      	bx	lr
 800efec:	f3af 8000 	nop.w

0800eff0 <pxCurrentTCBConst2>:
 800eff0:	20000a14 	.word	0x20000a14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eff4:	bf00      	nop
 800eff6:	bf00      	nop

0800eff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eff8:	4808      	ldr	r0, [pc, #32]	@ (800f01c <prvPortStartFirstTask+0x24>)
 800effa:	6800      	ldr	r0, [r0, #0]
 800effc:	6800      	ldr	r0, [r0, #0]
 800effe:	f380 8808 	msr	MSP, r0
 800f002:	f04f 0000 	mov.w	r0, #0
 800f006:	f380 8814 	msr	CONTROL, r0
 800f00a:	b662      	cpsie	i
 800f00c:	b661      	cpsie	f
 800f00e:	f3bf 8f4f 	dsb	sy
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	df00      	svc	0
 800f018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f01a:	bf00      	nop
 800f01c:	e000ed08 	.word	0xe000ed08

0800f020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f026:	4b47      	ldr	r3, [pc, #284]	@ (800f144 <xPortStartScheduler+0x124>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4a47      	ldr	r2, [pc, #284]	@ (800f148 <xPortStartScheduler+0x128>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d10b      	bne.n	800f048 <xPortStartScheduler+0x28>
	__asm volatile
 800f030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f034:	f383 8811 	msr	BASEPRI, r3
 800f038:	f3bf 8f6f 	isb	sy
 800f03c:	f3bf 8f4f 	dsb	sy
 800f040:	60fb      	str	r3, [r7, #12]
}
 800f042:	bf00      	nop
 800f044:	bf00      	nop
 800f046:	e7fd      	b.n	800f044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f048:	4b3e      	ldr	r3, [pc, #248]	@ (800f144 <xPortStartScheduler+0x124>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4a3f      	ldr	r2, [pc, #252]	@ (800f14c <xPortStartScheduler+0x12c>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d10b      	bne.n	800f06a <xPortStartScheduler+0x4a>
	__asm volatile
 800f052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f056:	f383 8811 	msr	BASEPRI, r3
 800f05a:	f3bf 8f6f 	isb	sy
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	613b      	str	r3, [r7, #16]
}
 800f064:	bf00      	nop
 800f066:	bf00      	nop
 800f068:	e7fd      	b.n	800f066 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f06a:	4b39      	ldr	r3, [pc, #228]	@ (800f150 <xPortStartScheduler+0x130>)
 800f06c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	b2db      	uxtb	r3, r3
 800f074:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	22ff      	movs	r2, #255	@ 0xff
 800f07a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	b2db      	uxtb	r3, r3
 800f082:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f084:	78fb      	ldrb	r3, [r7, #3]
 800f086:	b2db      	uxtb	r3, r3
 800f088:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	4b31      	ldr	r3, [pc, #196]	@ (800f154 <xPortStartScheduler+0x134>)
 800f090:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f092:	4b31      	ldr	r3, [pc, #196]	@ (800f158 <xPortStartScheduler+0x138>)
 800f094:	2207      	movs	r2, #7
 800f096:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f098:	e009      	b.n	800f0ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f09a:	4b2f      	ldr	r3, [pc, #188]	@ (800f158 <xPortStartScheduler+0x138>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	3b01      	subs	r3, #1
 800f0a0:	4a2d      	ldr	r2, [pc, #180]	@ (800f158 <xPortStartScheduler+0x138>)
 800f0a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f0a4:	78fb      	ldrb	r3, [r7, #3]
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	005b      	lsls	r3, r3, #1
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0ae:	78fb      	ldrb	r3, [r7, #3]
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0b6:	2b80      	cmp	r3, #128	@ 0x80
 800f0b8:	d0ef      	beq.n	800f09a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f0ba:	4b27      	ldr	r3, [pc, #156]	@ (800f158 <xPortStartScheduler+0x138>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f1c3 0307 	rsb	r3, r3, #7
 800f0c2:	2b04      	cmp	r3, #4
 800f0c4:	d00b      	beq.n	800f0de <xPortStartScheduler+0xbe>
	__asm volatile
 800f0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ca:	f383 8811 	msr	BASEPRI, r3
 800f0ce:	f3bf 8f6f 	isb	sy
 800f0d2:	f3bf 8f4f 	dsb	sy
 800f0d6:	60bb      	str	r3, [r7, #8]
}
 800f0d8:	bf00      	nop
 800f0da:	bf00      	nop
 800f0dc:	e7fd      	b.n	800f0da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f0de:	4b1e      	ldr	r3, [pc, #120]	@ (800f158 <xPortStartScheduler+0x138>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	021b      	lsls	r3, r3, #8
 800f0e4:	4a1c      	ldr	r2, [pc, #112]	@ (800f158 <xPortStartScheduler+0x138>)
 800f0e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f0e8:	4b1b      	ldr	r3, [pc, #108]	@ (800f158 <xPortStartScheduler+0x138>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f0f0:	4a19      	ldr	r2, [pc, #100]	@ (800f158 <xPortStartScheduler+0x138>)
 800f0f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	b2da      	uxtb	r2, r3
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f0fc:	4b17      	ldr	r3, [pc, #92]	@ (800f15c <xPortStartScheduler+0x13c>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a16      	ldr	r2, [pc, #88]	@ (800f15c <xPortStartScheduler+0x13c>)
 800f102:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f106:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f108:	4b14      	ldr	r3, [pc, #80]	@ (800f15c <xPortStartScheduler+0x13c>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	4a13      	ldr	r2, [pc, #76]	@ (800f15c <xPortStartScheduler+0x13c>)
 800f10e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f112:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f114:	f000 f8da 	bl	800f2cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f118:	4b11      	ldr	r3, [pc, #68]	@ (800f160 <xPortStartScheduler+0x140>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f11e:	f000 f8f9 	bl	800f314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f122:	4b10      	ldr	r3, [pc, #64]	@ (800f164 <xPortStartScheduler+0x144>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4a0f      	ldr	r2, [pc, #60]	@ (800f164 <xPortStartScheduler+0x144>)
 800f128:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f12c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f12e:	f7ff ff63 	bl	800eff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f132:	f7ff fb71 	bl	800e818 <vTaskSwitchContext>
	prvTaskExitError();
 800f136:	f7ff ff19 	bl	800ef6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3718      	adds	r7, #24
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	e000ed00 	.word	0xe000ed00
 800f148:	410fc271 	.word	0x410fc271
 800f14c:	410fc270 	.word	0x410fc270
 800f150:	e000e400 	.word	0xe000e400
 800f154:	20000b40 	.word	0x20000b40
 800f158:	20000b44 	.word	0x20000b44
 800f15c:	e000ed20 	.word	0xe000ed20
 800f160:	20000034 	.word	0x20000034
 800f164:	e000ef34 	.word	0xe000ef34

0800f168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
	__asm volatile
 800f16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f172:	f383 8811 	msr	BASEPRI, r3
 800f176:	f3bf 8f6f 	isb	sy
 800f17a:	f3bf 8f4f 	dsb	sy
 800f17e:	607b      	str	r3, [r7, #4]
}
 800f180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f182:	4b10      	ldr	r3, [pc, #64]	@ (800f1c4 <vPortEnterCritical+0x5c>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	3301      	adds	r3, #1
 800f188:	4a0e      	ldr	r2, [pc, #56]	@ (800f1c4 <vPortEnterCritical+0x5c>)
 800f18a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f18c:	4b0d      	ldr	r3, [pc, #52]	@ (800f1c4 <vPortEnterCritical+0x5c>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b01      	cmp	r3, #1
 800f192:	d110      	bne.n	800f1b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f194:	4b0c      	ldr	r3, [pc, #48]	@ (800f1c8 <vPortEnterCritical+0x60>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00b      	beq.n	800f1b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	603b      	str	r3, [r7, #0]
}
 800f1b0:	bf00      	nop
 800f1b2:	bf00      	nop
 800f1b4:	e7fd      	b.n	800f1b2 <vPortEnterCritical+0x4a>
	}
}
 800f1b6:	bf00      	nop
 800f1b8:	370c      	adds	r7, #12
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr
 800f1c2:	bf00      	nop
 800f1c4:	20000034 	.word	0x20000034
 800f1c8:	e000ed04 	.word	0xe000ed04

0800f1cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f1d2:	4b12      	ldr	r3, [pc, #72]	@ (800f21c <vPortExitCritical+0x50>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10b      	bne.n	800f1f2 <vPortExitCritical+0x26>
	__asm volatile
 800f1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1de:	f383 8811 	msr	BASEPRI, r3
 800f1e2:	f3bf 8f6f 	isb	sy
 800f1e6:	f3bf 8f4f 	dsb	sy
 800f1ea:	607b      	str	r3, [r7, #4]
}
 800f1ec:	bf00      	nop
 800f1ee:	bf00      	nop
 800f1f0:	e7fd      	b.n	800f1ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f21c <vPortExitCritical+0x50>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	4a08      	ldr	r2, [pc, #32]	@ (800f21c <vPortExitCritical+0x50>)
 800f1fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f1fc:	4b07      	ldr	r3, [pc, #28]	@ (800f21c <vPortExitCritical+0x50>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d105      	bne.n	800f210 <vPortExitCritical+0x44>
 800f204:	2300      	movs	r3, #0
 800f206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	f383 8811 	msr	BASEPRI, r3
}
 800f20e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr
 800f21c:	20000034 	.word	0x20000034

0800f220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f220:	f3ef 8009 	mrs	r0, PSP
 800f224:	f3bf 8f6f 	isb	sy
 800f228:	4b15      	ldr	r3, [pc, #84]	@ (800f280 <pxCurrentTCBConst>)
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	f01e 0f10 	tst.w	lr, #16
 800f230:	bf08      	it	eq
 800f232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f23a:	6010      	str	r0, [r2, #0]
 800f23c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f240:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f244:	f380 8811 	msr	BASEPRI, r0
 800f248:	f3bf 8f4f 	dsb	sy
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f7ff fae2 	bl	800e818 <vTaskSwitchContext>
 800f254:	f04f 0000 	mov.w	r0, #0
 800f258:	f380 8811 	msr	BASEPRI, r0
 800f25c:	bc09      	pop	{r0, r3}
 800f25e:	6819      	ldr	r1, [r3, #0]
 800f260:	6808      	ldr	r0, [r1, #0]
 800f262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f266:	f01e 0f10 	tst.w	lr, #16
 800f26a:	bf08      	it	eq
 800f26c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f270:	f380 8809 	msr	PSP, r0
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	f3af 8000 	nop.w

0800f280 <pxCurrentTCBConst>:
 800f280:	20000a14 	.word	0x20000a14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f284:	bf00      	nop
 800f286:	bf00      	nop

0800f288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
	__asm volatile
 800f28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f292:	f383 8811 	msr	BASEPRI, r3
 800f296:	f3bf 8f6f 	isb	sy
 800f29a:	f3bf 8f4f 	dsb	sy
 800f29e:	607b      	str	r3, [r7, #4]
}
 800f2a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f2a2:	f7ff f9ff 	bl	800e6a4 <xTaskIncrementTick>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d003      	beq.n	800f2b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f2ac:	4b06      	ldr	r3, [pc, #24]	@ (800f2c8 <SysTick_Handler+0x40>)
 800f2ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2b2:	601a      	str	r2, [r3, #0]
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	f383 8811 	msr	BASEPRI, r3
}
 800f2be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f2c0:	bf00      	nop
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	e000ed04 	.word	0xe000ed04

0800f2cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f2d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f300 <vPortSetupTimerInterrupt+0x34>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f304 <vPortSetupTimerInterrupt+0x38>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f308 <vPortSetupTimerInterrupt+0x3c>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	4a0a      	ldr	r2, [pc, #40]	@ (800f30c <vPortSetupTimerInterrupt+0x40>)
 800f2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2e6:	099b      	lsrs	r3, r3, #6
 800f2e8:	4a09      	ldr	r2, [pc, #36]	@ (800f310 <vPortSetupTimerInterrupt+0x44>)
 800f2ea:	3b01      	subs	r3, #1
 800f2ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f2ee:	4b04      	ldr	r3, [pc, #16]	@ (800f300 <vPortSetupTimerInterrupt+0x34>)
 800f2f0:	2207      	movs	r2, #7
 800f2f2:	601a      	str	r2, [r3, #0]
}
 800f2f4:	bf00      	nop
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr
 800f2fe:	bf00      	nop
 800f300:	e000e010 	.word	0xe000e010
 800f304:	e000e018 	.word	0xe000e018
 800f308:	20000008 	.word	0x20000008
 800f30c:	10624dd3 	.word	0x10624dd3
 800f310:	e000e014 	.word	0xe000e014

0800f314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f314:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f324 <vPortEnableVFP+0x10>
 800f318:	6801      	ldr	r1, [r0, #0]
 800f31a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f31e:	6001      	str	r1, [r0, #0]
 800f320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f322:	bf00      	nop
 800f324:	e000ed88 	.word	0xe000ed88

0800f328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f328:	b480      	push	{r7}
 800f32a:	b085      	sub	sp, #20
 800f32c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f32e:	f3ef 8305 	mrs	r3, IPSR
 800f332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2b0f      	cmp	r3, #15
 800f338:	d915      	bls.n	800f366 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f33a:	4a18      	ldr	r2, [pc, #96]	@ (800f39c <vPortValidateInterruptPriority+0x74>)
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	4413      	add	r3, r2
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f344:	4b16      	ldr	r3, [pc, #88]	@ (800f3a0 <vPortValidateInterruptPriority+0x78>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	7afa      	ldrb	r2, [r7, #11]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d20b      	bcs.n	800f366 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	607b      	str	r3, [r7, #4]
}
 800f360:	bf00      	nop
 800f362:	bf00      	nop
 800f364:	e7fd      	b.n	800f362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f366:	4b0f      	ldr	r3, [pc, #60]	@ (800f3a4 <vPortValidateInterruptPriority+0x7c>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f36e:	4b0e      	ldr	r3, [pc, #56]	@ (800f3a8 <vPortValidateInterruptPriority+0x80>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	429a      	cmp	r2, r3
 800f374:	d90b      	bls.n	800f38e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	603b      	str	r3, [r7, #0]
}
 800f388:	bf00      	nop
 800f38a:	bf00      	nop
 800f38c:	e7fd      	b.n	800f38a <vPortValidateInterruptPriority+0x62>
	}
 800f38e:	bf00      	nop
 800f390:	3714      	adds	r7, #20
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	e000e3f0 	.word	0xe000e3f0
 800f3a0:	20000b40 	.word	0x20000b40
 800f3a4:	e000ed0c 	.word	0xe000ed0c
 800f3a8:	20000b44 	.word	0x20000b44

0800f3ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08a      	sub	sp, #40	@ 0x28
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f3b8:	f7ff f8c8 	bl	800e54c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f3bc:	4b5f      	ldr	r3, [pc, #380]	@ (800f53c <pvPortMalloc+0x190>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d101      	bne.n	800f3c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f3c4:	f000 f92a 	bl	800f61c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f3c8:	4b5d      	ldr	r3, [pc, #372]	@ (800f540 <pvPortMalloc+0x194>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	4013      	ands	r3, r2
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f040 8095 	bne.w	800f500 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d01e      	beq.n	800f41a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f3dc:	2208      	movs	r2, #8
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f003 0307 	and.w	r3, r3, #7
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d015      	beq.n	800f41a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f023 0307 	bic.w	r3, r3, #7
 800f3f4:	3308      	adds	r3, #8
 800f3f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f003 0307 	and.w	r3, r3, #7
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00b      	beq.n	800f41a <pvPortMalloc+0x6e>
	__asm volatile
 800f402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f406:	f383 8811 	msr	BASEPRI, r3
 800f40a:	f3bf 8f6f 	isb	sy
 800f40e:	f3bf 8f4f 	dsb	sy
 800f412:	617b      	str	r3, [r7, #20]
}
 800f414:	bf00      	nop
 800f416:	bf00      	nop
 800f418:	e7fd      	b.n	800f416 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d06f      	beq.n	800f500 <pvPortMalloc+0x154>
 800f420:	4b48      	ldr	r3, [pc, #288]	@ (800f544 <pvPortMalloc+0x198>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	429a      	cmp	r2, r3
 800f428:	d86a      	bhi.n	800f500 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f42a:	4b47      	ldr	r3, [pc, #284]	@ (800f548 <pvPortMalloc+0x19c>)
 800f42c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f42e:	4b46      	ldr	r3, [pc, #280]	@ (800f548 <pvPortMalloc+0x19c>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f434:	e004      	b.n	800f440 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f438:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	429a      	cmp	r2, r3
 800f448:	d903      	bls.n	800f452 <pvPortMalloc+0xa6>
 800f44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d1f1      	bne.n	800f436 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f452:	4b3a      	ldr	r3, [pc, #232]	@ (800f53c <pvPortMalloc+0x190>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f458:	429a      	cmp	r2, r3
 800f45a:	d051      	beq.n	800f500 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f45c:	6a3b      	ldr	r3, [r7, #32]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2208      	movs	r2, #8
 800f462:	4413      	add	r3, r2
 800f464:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	6a3b      	ldr	r3, [r7, #32]
 800f46c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f470:	685a      	ldr	r2, [r3, #4]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	1ad2      	subs	r2, r2, r3
 800f476:	2308      	movs	r3, #8
 800f478:	005b      	lsls	r3, r3, #1
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d920      	bls.n	800f4c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f47e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4413      	add	r3, r2
 800f484:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	f003 0307 	and.w	r3, r3, #7
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00b      	beq.n	800f4a8 <pvPortMalloc+0xfc>
	__asm volatile
 800f490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f494:	f383 8811 	msr	BASEPRI, r3
 800f498:	f3bf 8f6f 	isb	sy
 800f49c:	f3bf 8f4f 	dsb	sy
 800f4a0:	613b      	str	r3, [r7, #16]
}
 800f4a2:	bf00      	nop
 800f4a4:	bf00      	nop
 800f4a6:	e7fd      	b.n	800f4a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4aa:	685a      	ldr	r2, [r3, #4]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	1ad2      	subs	r2, r2, r3
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f4ba:	69b8      	ldr	r0, [r7, #24]
 800f4bc:	f000 f910 	bl	800f6e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f4c0:	4b20      	ldr	r3, [pc, #128]	@ (800f544 <pvPortMalloc+0x198>)
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	4a1e      	ldr	r2, [pc, #120]	@ (800f544 <pvPortMalloc+0x198>)
 800f4cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f4ce:	4b1d      	ldr	r3, [pc, #116]	@ (800f544 <pvPortMalloc+0x198>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	4b1e      	ldr	r3, [pc, #120]	@ (800f54c <pvPortMalloc+0x1a0>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d203      	bcs.n	800f4e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f4da:	4b1a      	ldr	r3, [pc, #104]	@ (800f544 <pvPortMalloc+0x198>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	4a1b      	ldr	r2, [pc, #108]	@ (800f54c <pvPortMalloc+0x1a0>)
 800f4e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e4:	685a      	ldr	r2, [r3, #4]
 800f4e6:	4b16      	ldr	r3, [pc, #88]	@ (800f540 <pvPortMalloc+0x194>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	431a      	orrs	r2, r3
 800f4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f4f6:	4b16      	ldr	r3, [pc, #88]	@ (800f550 <pvPortMalloc+0x1a4>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	4a14      	ldr	r2, [pc, #80]	@ (800f550 <pvPortMalloc+0x1a4>)
 800f4fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f500:	f7ff f832 	bl	800e568 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d101      	bne.n	800f50e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f50a:	f7f1 faf9 	bl	8000b00 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	f003 0307 	and.w	r3, r3, #7
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00b      	beq.n	800f530 <pvPortMalloc+0x184>
	__asm volatile
 800f518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f51c:	f383 8811 	msr	BASEPRI, r3
 800f520:	f3bf 8f6f 	isb	sy
 800f524:	f3bf 8f4f 	dsb	sy
 800f528:	60fb      	str	r3, [r7, #12]
}
 800f52a:	bf00      	nop
 800f52c:	bf00      	nop
 800f52e:	e7fd      	b.n	800f52c <pvPortMalloc+0x180>
	return pvReturn;
 800f530:	69fb      	ldr	r3, [r7, #28]
}
 800f532:	4618      	mov	r0, r3
 800f534:	3728      	adds	r7, #40	@ 0x28
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	20008b50 	.word	0x20008b50
 800f540:	20008b64 	.word	0x20008b64
 800f544:	20008b54 	.word	0x20008b54
 800f548:	20008b48 	.word	0x20008b48
 800f54c:	20008b58 	.word	0x20008b58
 800f550:	20008b5c 	.word	0x20008b5c

0800f554 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b086      	sub	sp, #24
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d04f      	beq.n	800f606 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f566:	2308      	movs	r3, #8
 800f568:	425b      	negs	r3, r3
 800f56a:	697a      	ldr	r2, [r7, #20]
 800f56c:	4413      	add	r3, r2
 800f56e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	685a      	ldr	r2, [r3, #4]
 800f578:	4b25      	ldr	r3, [pc, #148]	@ (800f610 <vPortFree+0xbc>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4013      	ands	r3, r2
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d10b      	bne.n	800f59a <vPortFree+0x46>
	__asm volatile
 800f582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f586:	f383 8811 	msr	BASEPRI, r3
 800f58a:	f3bf 8f6f 	isb	sy
 800f58e:	f3bf 8f4f 	dsb	sy
 800f592:	60fb      	str	r3, [r7, #12]
}
 800f594:	bf00      	nop
 800f596:	bf00      	nop
 800f598:	e7fd      	b.n	800f596 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d00b      	beq.n	800f5ba <vPortFree+0x66>
	__asm volatile
 800f5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a6:	f383 8811 	msr	BASEPRI, r3
 800f5aa:	f3bf 8f6f 	isb	sy
 800f5ae:	f3bf 8f4f 	dsb	sy
 800f5b2:	60bb      	str	r3, [r7, #8]
}
 800f5b4:	bf00      	nop
 800f5b6:	bf00      	nop
 800f5b8:	e7fd      	b.n	800f5b6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	685a      	ldr	r2, [r3, #4]
 800f5be:	4b14      	ldr	r3, [pc, #80]	@ (800f610 <vPortFree+0xbc>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d01e      	beq.n	800f606 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d11a      	bne.n	800f606 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	685a      	ldr	r2, [r3, #4]
 800f5d4:	4b0e      	ldr	r3, [pc, #56]	@ (800f610 <vPortFree+0xbc>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	43db      	mvns	r3, r3
 800f5da:	401a      	ands	r2, r3
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f5e0:	f7fe ffb4 	bl	800e54c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	685a      	ldr	r2, [r3, #4]
 800f5e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f614 <vPortFree+0xc0>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	4a09      	ldr	r2, [pc, #36]	@ (800f614 <vPortFree+0xc0>)
 800f5f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f5f2:	6938      	ldr	r0, [r7, #16]
 800f5f4:	f000 f874 	bl	800f6e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f5f8:	4b07      	ldr	r3, [pc, #28]	@ (800f618 <vPortFree+0xc4>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	4a06      	ldr	r2, [pc, #24]	@ (800f618 <vPortFree+0xc4>)
 800f600:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f602:	f7fe ffb1 	bl	800e568 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f606:	bf00      	nop
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	20008b64 	.word	0x20008b64
 800f614:	20008b54 	.word	0x20008b54
 800f618:	20008b60 	.word	0x20008b60

0800f61c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f61c:	b480      	push	{r7}
 800f61e:	b085      	sub	sp, #20
 800f620:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f626:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f628:	4b27      	ldr	r3, [pc, #156]	@ (800f6c8 <prvHeapInit+0xac>)
 800f62a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f003 0307 	and.w	r3, r3, #7
 800f632:	2b00      	cmp	r3, #0
 800f634:	d00c      	beq.n	800f650 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	3307      	adds	r3, #7
 800f63a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f023 0307 	bic.w	r3, r3, #7
 800f642:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	4a1f      	ldr	r2, [pc, #124]	@ (800f6c8 <prvHeapInit+0xac>)
 800f64c:	4413      	add	r3, r2
 800f64e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f654:	4a1d      	ldr	r2, [pc, #116]	@ (800f6cc <prvHeapInit+0xb0>)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f65a:	4b1c      	ldr	r3, [pc, #112]	@ (800f6cc <prvHeapInit+0xb0>)
 800f65c:	2200      	movs	r2, #0
 800f65e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	68ba      	ldr	r2, [r7, #8]
 800f664:	4413      	add	r3, r2
 800f666:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f668:	2208      	movs	r2, #8
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	1a9b      	subs	r3, r3, r2
 800f66e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	f023 0307 	bic.w	r3, r3, #7
 800f676:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	4a15      	ldr	r2, [pc, #84]	@ (800f6d0 <prvHeapInit+0xb4>)
 800f67c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f67e:	4b14      	ldr	r3, [pc, #80]	@ (800f6d0 <prvHeapInit+0xb4>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2200      	movs	r2, #0
 800f684:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f686:	4b12      	ldr	r3, [pc, #72]	@ (800f6d0 <prvHeapInit+0xb4>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2200      	movs	r2, #0
 800f68c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	1ad2      	subs	r2, r2, r3
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f69c:	4b0c      	ldr	r3, [pc, #48]	@ (800f6d0 <prvHeapInit+0xb4>)
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	4a0a      	ldr	r2, [pc, #40]	@ (800f6d4 <prvHeapInit+0xb8>)
 800f6aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	4a09      	ldr	r2, [pc, #36]	@ (800f6d8 <prvHeapInit+0xbc>)
 800f6b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f6b4:	4b09      	ldr	r3, [pc, #36]	@ (800f6dc <prvHeapInit+0xc0>)
 800f6b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f6ba:	601a      	str	r2, [r3, #0]
}
 800f6bc:	bf00      	nop
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr
 800f6c8:	20000b48 	.word	0x20000b48
 800f6cc:	20008b48 	.word	0x20008b48
 800f6d0:	20008b50 	.word	0x20008b50
 800f6d4:	20008b58 	.word	0x20008b58
 800f6d8:	20008b54 	.word	0x20008b54
 800f6dc:	20008b64 	.word	0x20008b64

0800f6e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f6e8:	4b28      	ldr	r3, [pc, #160]	@ (800f78c <prvInsertBlockIntoFreeList+0xac>)
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	e002      	b.n	800f6f4 <prvInsertBlockIntoFreeList+0x14>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	60fb      	str	r3, [r7, #12]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d8f7      	bhi.n	800f6ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	68ba      	ldr	r2, [r7, #8]
 800f708:	4413      	add	r3, r2
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d108      	bne.n	800f722 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	685a      	ldr	r2, [r3, #4]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	441a      	add	r2, r3
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	685b      	ldr	r3, [r3, #4]
 800f72a:	68ba      	ldr	r2, [r7, #8]
 800f72c:	441a      	add	r2, r3
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	429a      	cmp	r2, r3
 800f734:	d118      	bne.n	800f768 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	4b15      	ldr	r3, [pc, #84]	@ (800f790 <prvInsertBlockIntoFreeList+0xb0>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d00d      	beq.n	800f75e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	685a      	ldr	r2, [r3, #4]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	441a      	add	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	601a      	str	r2, [r3, #0]
 800f75c:	e008      	b.n	800f770 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f75e:	4b0c      	ldr	r3, [pc, #48]	@ (800f790 <prvInsertBlockIntoFreeList+0xb0>)
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	e003      	b.n	800f770 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f770:	68fa      	ldr	r2, [r7, #12]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	429a      	cmp	r2, r3
 800f776:	d002      	beq.n	800f77e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f77e:	bf00      	nop
 800f780:	3714      	adds	r7, #20
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	20008b48 	.word	0x20008b48
 800f790:	20008b50 	.word	0x20008b50

0800f794 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800f798:	2200      	movs	r2, #0
 800f79a:	490e      	ldr	r1, [pc, #56]	@ (800f7d4 <MX_USB_HOST_Init+0x40>)
 800f79c:	480e      	ldr	r0, [pc, #56]	@ (800f7d8 <MX_USB_HOST_Init+0x44>)
 800f79e:	f7fb fe0b 	bl	800b3b8 <USBH_Init>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d001      	beq.n	800f7ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f7a8:	f7f1 fec0 	bl	800152c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800f7ac:	490b      	ldr	r1, [pc, #44]	@ (800f7dc <MX_USB_HOST_Init+0x48>)
 800f7ae:	480a      	ldr	r0, [pc, #40]	@ (800f7d8 <MX_USB_HOST_Init+0x44>)
 800f7b0:	f7fb fed7 	bl	800b562 <USBH_RegisterClass>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f7ba:	f7f1 feb7 	bl	800152c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800f7be:	4806      	ldr	r0, [pc, #24]	@ (800f7d8 <MX_USB_HOST_Init+0x44>)
 800f7c0:	f7fb ff5b 	bl	800b67a <USBH_Start>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d001      	beq.n	800f7ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f7ca:	f7f1 feaf 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f7ce:	bf00      	nop
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	0800f7e1 	.word	0x0800f7e1
 800f7d8:	20008b68 	.word	0x20008b68
 800f7dc:	20000014 	.word	0x20000014

0800f7e0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f7ec:	78fb      	ldrb	r3, [r7, #3]
 800f7ee:	3b01      	subs	r3, #1
 800f7f0:	2b04      	cmp	r3, #4
 800f7f2:	d819      	bhi.n	800f828 <USBH_UserProcess+0x48>
 800f7f4:	a201      	add	r2, pc, #4	@ (adr r2, 800f7fc <USBH_UserProcess+0x1c>)
 800f7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fa:	bf00      	nop
 800f7fc:	0800f829 	.word	0x0800f829
 800f800:	0800f819 	.word	0x0800f819
 800f804:	0800f829 	.word	0x0800f829
 800f808:	0800f821 	.word	0x0800f821
 800f80c:	0800f811 	.word	0x0800f811
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f810:	4b09      	ldr	r3, [pc, #36]	@ (800f838 <USBH_UserProcess+0x58>)
 800f812:	2203      	movs	r2, #3
 800f814:	701a      	strb	r2, [r3, #0]
  break;
 800f816:	e008      	b.n	800f82a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f818:	4b07      	ldr	r3, [pc, #28]	@ (800f838 <USBH_UserProcess+0x58>)
 800f81a:	2202      	movs	r2, #2
 800f81c:	701a      	strb	r2, [r3, #0]
  break;
 800f81e:	e004      	b.n	800f82a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f820:	4b05      	ldr	r3, [pc, #20]	@ (800f838 <USBH_UserProcess+0x58>)
 800f822:	2201      	movs	r2, #1
 800f824:	701a      	strb	r2, [r3, #0]
  break;
 800f826:	e000      	b.n	800f82a <USBH_UserProcess+0x4a>

  default:
  break;
 800f828:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f82a:	bf00      	nop
 800f82c:	370c      	adds	r7, #12
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr
 800f836:	bf00      	nop
 800f838:	20008f4c 	.word	0x20008f4c

0800f83c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b08a      	sub	sp, #40	@ 0x28
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f844:	f107 0314 	add.w	r3, r7, #20
 800f848:	2200      	movs	r2, #0
 800f84a:	601a      	str	r2, [r3, #0]
 800f84c:	605a      	str	r2, [r3, #4]
 800f84e:	609a      	str	r2, [r3, #8]
 800f850:	60da      	str	r2, [r3, #12]
 800f852:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a24      	ldr	r2, [pc, #144]	@ (800f8ec <HAL_HCD_MspInit+0xb0>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d141      	bne.n	800f8e2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f85e:	2300      	movs	r3, #0
 800f860:	613b      	str	r3, [r7, #16]
 800f862:	4b23      	ldr	r3, [pc, #140]	@ (800f8f0 <HAL_HCD_MspInit+0xb4>)
 800f864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f866:	4a22      	ldr	r2, [pc, #136]	@ (800f8f0 <HAL_HCD_MspInit+0xb4>)
 800f868:	f043 0302 	orr.w	r3, r3, #2
 800f86c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f86e:	4b20      	ldr	r3, [pc, #128]	@ (800f8f0 <HAL_HCD_MspInit+0xb4>)
 800f870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f872:	f003 0302 	and.w	r3, r3, #2
 800f876:	613b      	str	r3, [r7, #16]
 800f878:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800f87a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800f87e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f880:	2302      	movs	r3, #2
 800f882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f884:	2300      	movs	r3, #0
 800f886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f888:	2300      	movs	r3, #0
 800f88a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800f88c:	230c      	movs	r3, #12
 800f88e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f890:	f107 0314 	add.w	r3, r7, #20
 800f894:	4619      	mov	r1, r3
 800f896:	4817      	ldr	r0, [pc, #92]	@ (800f8f4 <HAL_HCD_MspInit+0xb8>)
 800f898:	f7f3 f8da 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800f89c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f8a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800f8aa:	f107 0314 	add.w	r3, r7, #20
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	4810      	ldr	r0, [pc, #64]	@ (800f8f4 <HAL_HCD_MspInit+0xb8>)
 800f8b2:	f7f3 f8cd 	bl	8002a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	60fb      	str	r3, [r7, #12]
 800f8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f8f0 <HAL_HCD_MspInit+0xb4>)
 800f8bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8be:	4a0c      	ldr	r2, [pc, #48]	@ (800f8f0 <HAL_HCD_MspInit+0xb4>)
 800f8c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f8c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800f8c6:	4b0a      	ldr	r3, [pc, #40]	@ (800f8f0 <HAL_HCD_MspInit+0xb4>)
 800f8c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f8ce:	60fb      	str	r3, [r7, #12]
 800f8d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	2105      	movs	r1, #5
 800f8d6:	204d      	movs	r0, #77	@ 0x4d
 800f8d8:	f7f2 fe88 	bl	80025ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f8dc:	204d      	movs	r0, #77	@ 0x4d
 800f8de:	f7f2 fea1 	bl	8002624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f8e2:	bf00      	nop
 800f8e4:	3728      	adds	r7, #40	@ 0x28
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	40040000 	.word	0x40040000
 800f8f0:	40023800 	.word	0x40023800
 800f8f4:	40020400 	.word	0x40020400

0800f8f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f906:	4618      	mov	r0, r3
 800f908:	f7fc fb69 	bl	800bfde <USBH_LL_IncTimer>
}
 800f90c:	bf00      	nop
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f922:	4618      	mov	r0, r3
 800f924:	f7fc fbad 	bl	800c082 <USBH_LL_Connect>
}
 800f928:	bf00      	nop
 800f92a:	3708      	adds	r7, #8
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fc fbc2 	bl	800c0c8 <USBH_LL_Disconnect>
}
 800f944:	bf00      	nop
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	460b      	mov	r3, r1
 800f956:	70fb      	strb	r3, [r7, #3]
 800f958:	4613      	mov	r3, r2
 800f95a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f962:	4618      	mov	r0, r3
 800f964:	f7fc fbf7 	bl	800c156 <USBH_LL_NotifyURBChange>
#endif
}
 800f968:	bf00      	nop
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fc fb57 	bl	800c032 <USBH_LL_PortEnabled>
}
 800f984:	bf00      	nop
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fc fb63 	bl	800c066 <USBH_LL_PortDisabled>
}
 800f9a0:	bf00      	nop
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d132      	bne.n	800fa20 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800f9ba:	4a1c      	ldr	r2, [pc, #112]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4a19      	ldr	r2, [pc, #100]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9c6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f9ca:	4b18      	ldr	r3, [pc, #96]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9cc:	4a18      	ldr	r2, [pc, #96]	@ (800fa30 <USBH_LL_Init+0x88>)
 800f9ce:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800f9d0:	4b16      	ldr	r3, [pc, #88]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9d2:	220c      	movs	r2, #12
 800f9d4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800f9d6:	4b15      	ldr	r3, [pc, #84]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9d8:	2201      	movs	r2, #1
 800f9da:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f9dc:	4b13      	ldr	r3, [pc, #76]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9de:	2200      	movs	r2, #0
 800f9e0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f9e2:	4b12      	ldr	r3, [pc, #72]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9e4:	2202      	movs	r2, #2
 800f9e6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f9e8:	4b10      	ldr	r3, [pc, #64]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f9ee:	4b0f      	ldr	r3, [pc, #60]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f9f4:	4b0d      	ldr	r3, [pc, #52]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f9fa:	4b0c      	ldr	r3, [pc, #48]	@ (800fa2c <USBH_LL_Init+0x84>)
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800fa00:	480a      	ldr	r0, [pc, #40]	@ (800fa2c <USBH_LL_Init+0x84>)
 800fa02:	f7f3 f9ea 	bl	8002dda <HAL_HCD_Init>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d001      	beq.n	800fa10 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800fa0c:	f7f1 fd8e 	bl	800152c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800fa10:	4806      	ldr	r0, [pc, #24]	@ (800fa2c <USBH_LL_Init+0x84>)
 800fa12:	f7f3 fe4b 	bl	80036ac <HAL_HCD_GetCurrentFrame>
 800fa16:	4603      	mov	r3, r0
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7fc fad0 	bl	800bfc0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3708      	adds	r7, #8
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	20008f50 	.word	0x20008f50
 800fa30:	40040000 	.word	0x40040000

0800fa34 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7f3 fdb6 	bl	80035bc <HAL_HCD_Start>
 800fa50:	4603      	mov	r3, r0
 800fa52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa54:	7bfb      	ldrb	r3, [r7, #15]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f000 f95e 	bl	800fd18 <USBH_Get_USB_Status>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa60:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b084      	sub	sp, #16
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa72:	2300      	movs	r3, #0
 800fa74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fa76:	2300      	movs	r3, #0
 800fa78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7f3 fdbe 	bl	8003602 <HAL_HCD_Stop>
 800fa86:	4603      	mov	r3, r0
 800fa88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fa8a:	7bfb      	ldrb	r3, [r7, #15]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f000 f943 	bl	800fd18 <USBH_Get_USB_Status>
 800fa92:	4603      	mov	r3, r0
 800fa94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa96:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3710      	adds	r7, #16
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800faa8:	2301      	movs	r3, #1
 800faaa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7f3 fe08 	bl	80036c8 <HAL_HCD_GetCurrentSpeed>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d00c      	beq.n	800fad8 <USBH_LL_GetSpeed+0x38>
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d80d      	bhi.n	800fade <USBH_LL_GetSpeed+0x3e>
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d002      	beq.n	800facc <USBH_LL_GetSpeed+0x2c>
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d003      	beq.n	800fad2 <USBH_LL_GetSpeed+0x32>
 800faca:	e008      	b.n	800fade <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800facc:	2300      	movs	r3, #0
 800face:	73fb      	strb	r3, [r7, #15]
    break;
 800fad0:	e008      	b.n	800fae4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fad2:	2301      	movs	r3, #1
 800fad4:	73fb      	strb	r3, [r7, #15]
    break;
 800fad6:	e005      	b.n	800fae4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fad8:	2302      	movs	r3, #2
 800fada:	73fb      	strb	r3, [r7, #15]
    break;
 800fadc:	e002      	b.n	800fae4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fade:	2301      	movs	r3, #1
 800fae0:	73fb      	strb	r3, [r7, #15]
    break;
 800fae2:	bf00      	nop
  }
  return  speed;
 800fae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b084      	sub	sp, #16
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800faf6:	2300      	movs	r3, #0
 800faf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fafa:	2300      	movs	r3, #0
 800fafc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7f3 fd99 	bl	800363c <HAL_HCD_ResetPort>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb0e:	7bfb      	ldrb	r3, [r7, #15]
 800fb10:	4618      	mov	r0, r3
 800fb12:	f000 f901 	bl	800fd18 <USBH_Get_USB_Status>
 800fb16:	4603      	mov	r3, r0
 800fb18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3710      	adds	r7, #16
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb36:	78fa      	ldrb	r2, [r7, #3]
 800fb38:	4611      	mov	r1, r2
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7f3 fda1 	bl	8003682 <HAL_HCD_HC_GetXferCount>
 800fb40:	4603      	mov	r3, r0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fb4a:	b590      	push	{r4, r7, lr}
 800fb4c:	b089      	sub	sp, #36	@ 0x24
 800fb4e:	af04      	add	r7, sp, #16
 800fb50:	6078      	str	r0, [r7, #4]
 800fb52:	4608      	mov	r0, r1
 800fb54:	4611      	mov	r1, r2
 800fb56:	461a      	mov	r2, r3
 800fb58:	4603      	mov	r3, r0
 800fb5a:	70fb      	strb	r3, [r7, #3]
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	70bb      	strb	r3, [r7, #2]
 800fb60:	4613      	mov	r3, r2
 800fb62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb64:	2300      	movs	r3, #0
 800fb66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fb72:	787c      	ldrb	r4, [r7, #1]
 800fb74:	78ba      	ldrb	r2, [r7, #2]
 800fb76:	78f9      	ldrb	r1, [r7, #3]
 800fb78:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fb7a:	9302      	str	r3, [sp, #8]
 800fb7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fb80:	9301      	str	r3, [sp, #4]
 800fb82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	4623      	mov	r3, r4
 800fb8a:	f7f3 f98d 	bl	8002ea8 <HAL_HCD_HC_Init>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb92:	7bfb      	ldrb	r3, [r7, #15]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f000 f8bf 	bl	800fd18 <USBH_Get_USB_Status>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3714      	adds	r7, #20
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd90      	pop	{r4, r7, pc}

0800fba8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fbc2:	78fa      	ldrb	r2, [r7, #3]
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f3 fa26 	bl	8003018 <HAL_HCD_HC_Halt>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fbd0:	7bfb      	ldrb	r3, [r7, #15]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f000 f8a0 	bl	800fd18 <USBH_Get_USB_Status>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fbe6:	b590      	push	{r4, r7, lr}
 800fbe8:	b089      	sub	sp, #36	@ 0x24
 800fbea:	af04      	add	r7, sp, #16
 800fbec:	6078      	str	r0, [r7, #4]
 800fbee:	4608      	mov	r0, r1
 800fbf0:	4611      	mov	r1, r2
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	70fb      	strb	r3, [r7, #3]
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	70bb      	strb	r3, [r7, #2]
 800fbfc:	4613      	mov	r3, r2
 800fbfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc00:	2300      	movs	r3, #0
 800fc02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc04:	2300      	movs	r3, #0
 800fc06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fc0e:	787c      	ldrb	r4, [r7, #1]
 800fc10:	78ba      	ldrb	r2, [r7, #2]
 800fc12:	78f9      	ldrb	r1, [r7, #3]
 800fc14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc18:	9303      	str	r3, [sp, #12]
 800fc1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fc1c:	9302      	str	r3, [sp, #8]
 800fc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc20:	9301      	str	r3, [sp, #4]
 800fc22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	4623      	mov	r3, r4
 800fc2a:	f7f3 fa19 	bl	8003060 <HAL_HCD_HC_SubmitRequest>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fc32:	7bfb      	ldrb	r3, [r7, #15]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f000 f86f 	bl	800fd18 <USBH_Get_USB_Status>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3714      	adds	r7, #20
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd90      	pop	{r4, r7, pc}

0800fc48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	460b      	mov	r3, r1
 800fc52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fc5a:	78fa      	ldrb	r2, [r7, #3]
 800fc5c:	4611      	mov	r1, r2
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7f3 fcfa 	bl	8003658 <HAL_HCD_HC_GetURBState>
 800fc64:	4603      	mov	r3, r0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3708      	adds	r7, #8
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b082      	sub	sp, #8
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
 800fc76:	460b      	mov	r3, r1
 800fc78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d103      	bne.n	800fc8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800fc84:	78fb      	ldrb	r3, [r7, #3]
 800fc86:	4618      	mov	r0, r3
 800fc88:	f000 f872 	bl	800fd70 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fc8c:	20c8      	movs	r0, #200	@ 0xc8
 800fc8e:	f7f2 fbd1 	bl	8002434 <HAL_Delay>
  return USBH_OK;
 800fc92:	2300      	movs	r3, #0
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b085      	sub	sp, #20
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	460b      	mov	r3, r1
 800fca6:	70fb      	strb	r3, [r7, #3]
 800fca8:	4613      	mov	r3, r2
 800fcaa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fcb2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fcb4:	78fa      	ldrb	r2, [r7, #3]
 800fcb6:	68f9      	ldr	r1, [r7, #12]
 800fcb8:	4613      	mov	r3, r2
 800fcba:	011b      	lsls	r3, r3, #4
 800fcbc:	1a9b      	subs	r3, r3, r2
 800fcbe:	009b      	lsls	r3, r3, #2
 800fcc0:	440b      	add	r3, r1
 800fcc2:	3317      	adds	r3, #23
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00a      	beq.n	800fce0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fcca:	78fa      	ldrb	r2, [r7, #3]
 800fccc:	68f9      	ldr	r1, [r7, #12]
 800fcce:	4613      	mov	r3, r2
 800fcd0:	011b      	lsls	r3, r3, #4
 800fcd2:	1a9b      	subs	r3, r3, r2
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	440b      	add	r3, r1
 800fcd8:	333c      	adds	r3, #60	@ 0x3c
 800fcda:	78ba      	ldrb	r2, [r7, #2]
 800fcdc:	701a      	strb	r2, [r3, #0]
 800fcde:	e009      	b.n	800fcf4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fce0:	78fa      	ldrb	r2, [r7, #3]
 800fce2:	68f9      	ldr	r1, [r7, #12]
 800fce4:	4613      	mov	r3, r2
 800fce6:	011b      	lsls	r3, r3, #4
 800fce8:	1a9b      	subs	r3, r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	440b      	add	r3, r1
 800fcee:	333d      	adds	r3, #61	@ 0x3d
 800fcf0:	78ba      	ldrb	r2, [r7, #2]
 800fcf2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fcf4:	2300      	movs	r3, #0
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3714      	adds	r7, #20
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr

0800fd02 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b082      	sub	sp, #8
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7f2 fb92 	bl	8002434 <HAL_Delay>
}
 800fd10:	bf00      	nop
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	4603      	mov	r3, r0
 800fd20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fd22:	2300      	movs	r3, #0
 800fd24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fd26:	79fb      	ldrb	r3, [r7, #7]
 800fd28:	2b03      	cmp	r3, #3
 800fd2a:	d817      	bhi.n	800fd5c <USBH_Get_USB_Status+0x44>
 800fd2c:	a201      	add	r2, pc, #4	@ (adr r2, 800fd34 <USBH_Get_USB_Status+0x1c>)
 800fd2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd32:	bf00      	nop
 800fd34:	0800fd45 	.word	0x0800fd45
 800fd38:	0800fd4b 	.word	0x0800fd4b
 800fd3c:	0800fd51 	.word	0x0800fd51
 800fd40:	0800fd57 	.word	0x0800fd57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fd44:	2300      	movs	r3, #0
 800fd46:	73fb      	strb	r3, [r7, #15]
    break;
 800fd48:	e00b      	b.n	800fd62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fd4a:	2302      	movs	r3, #2
 800fd4c:	73fb      	strb	r3, [r7, #15]
    break;
 800fd4e:	e008      	b.n	800fd62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fd50:	2301      	movs	r3, #1
 800fd52:	73fb      	strb	r3, [r7, #15]
    break;
 800fd54:	e005      	b.n	800fd62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fd56:	2302      	movs	r3, #2
 800fd58:	73fb      	strb	r3, [r7, #15]
    break;
 800fd5a:	e002      	b.n	800fd62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fd5c:	2302      	movs	r3, #2
 800fd5e:	73fb      	strb	r3, [r7, #15]
    break;
 800fd60:	bf00      	nop
  }
  return usb_status;
 800fd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3714      	adds	r7, #20
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	4603      	mov	r3, r0
 800fd78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fd7a:	79fb      	ldrb	r3, [r7, #7]
 800fd7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800fd7e:	79fb      	ldrb	r3, [r7, #7]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d102      	bne.n	800fd8a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800fd84:	2301      	movs	r3, #1
 800fd86:	73fb      	strb	r3, [r7, #15]
 800fd88:	e001      	b.n	800fd8e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800fd8e:	7bfb      	ldrb	r3, [r7, #15]
 800fd90:	461a      	mov	r2, r3
 800fd92:	2110      	movs	r1, #16
 800fd94:	4803      	ldr	r0, [pc, #12]	@ (800fda4 <MX_DriverVbusHS+0x34>)
 800fd96:	f7f3 f807 	bl	8002da8 <HAL_GPIO_WritePin>
}
 800fd9a:	bf00      	nop
 800fd9c:	3710      	adds	r7, #16
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	40020800 	.word	0x40020800

0800fda8 <malloc>:
 800fda8:	4b02      	ldr	r3, [pc, #8]	@ (800fdb4 <malloc+0xc>)
 800fdaa:	4601      	mov	r1, r0
 800fdac:	6818      	ldr	r0, [r3, #0]
 800fdae:	f000 b82d 	b.w	800fe0c <_malloc_r>
 800fdb2:	bf00      	nop
 800fdb4:	20000038 	.word	0x20000038

0800fdb8 <free>:
 800fdb8:	4b02      	ldr	r3, [pc, #8]	@ (800fdc4 <free+0xc>)
 800fdba:	4601      	mov	r1, r0
 800fdbc:	6818      	ldr	r0, [r3, #0]
 800fdbe:	f000 b925 	b.w	801000c <_free_r>
 800fdc2:	bf00      	nop
 800fdc4:	20000038 	.word	0x20000038

0800fdc8 <sbrk_aligned>:
 800fdc8:	b570      	push	{r4, r5, r6, lr}
 800fdca:	4e0f      	ldr	r6, [pc, #60]	@ (800fe08 <sbrk_aligned+0x40>)
 800fdcc:	460c      	mov	r4, r1
 800fdce:	6831      	ldr	r1, [r6, #0]
 800fdd0:	4605      	mov	r5, r0
 800fdd2:	b911      	cbnz	r1, 800fdda <sbrk_aligned+0x12>
 800fdd4:	f000 f8d0 	bl	800ff78 <_sbrk_r>
 800fdd8:	6030      	str	r0, [r6, #0]
 800fdda:	4621      	mov	r1, r4
 800fddc:	4628      	mov	r0, r5
 800fdde:	f000 f8cb 	bl	800ff78 <_sbrk_r>
 800fde2:	1c43      	adds	r3, r0, #1
 800fde4:	d103      	bne.n	800fdee <sbrk_aligned+0x26>
 800fde6:	f04f 34ff 	mov.w	r4, #4294967295
 800fdea:	4620      	mov	r0, r4
 800fdec:	bd70      	pop	{r4, r5, r6, pc}
 800fdee:	1cc4      	adds	r4, r0, #3
 800fdf0:	f024 0403 	bic.w	r4, r4, #3
 800fdf4:	42a0      	cmp	r0, r4
 800fdf6:	d0f8      	beq.n	800fdea <sbrk_aligned+0x22>
 800fdf8:	1a21      	subs	r1, r4, r0
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	f000 f8bc 	bl	800ff78 <_sbrk_r>
 800fe00:	3001      	adds	r0, #1
 800fe02:	d1f2      	bne.n	800fdea <sbrk_aligned+0x22>
 800fe04:	e7ef      	b.n	800fde6 <sbrk_aligned+0x1e>
 800fe06:	bf00      	nop
 800fe08:	20009330 	.word	0x20009330

0800fe0c <_malloc_r>:
 800fe0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe10:	1ccd      	adds	r5, r1, #3
 800fe12:	f025 0503 	bic.w	r5, r5, #3
 800fe16:	3508      	adds	r5, #8
 800fe18:	2d0c      	cmp	r5, #12
 800fe1a:	bf38      	it	cc
 800fe1c:	250c      	movcc	r5, #12
 800fe1e:	2d00      	cmp	r5, #0
 800fe20:	4606      	mov	r6, r0
 800fe22:	db01      	blt.n	800fe28 <_malloc_r+0x1c>
 800fe24:	42a9      	cmp	r1, r5
 800fe26:	d904      	bls.n	800fe32 <_malloc_r+0x26>
 800fe28:	230c      	movs	r3, #12
 800fe2a:	6033      	str	r3, [r6, #0]
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ff08 <_malloc_r+0xfc>
 800fe36:	f000 f869 	bl	800ff0c <__malloc_lock>
 800fe3a:	f8d8 3000 	ldr.w	r3, [r8]
 800fe3e:	461c      	mov	r4, r3
 800fe40:	bb44      	cbnz	r4, 800fe94 <_malloc_r+0x88>
 800fe42:	4629      	mov	r1, r5
 800fe44:	4630      	mov	r0, r6
 800fe46:	f7ff ffbf 	bl	800fdc8 <sbrk_aligned>
 800fe4a:	1c43      	adds	r3, r0, #1
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	d158      	bne.n	800ff02 <_malloc_r+0xf6>
 800fe50:	f8d8 4000 	ldr.w	r4, [r8]
 800fe54:	4627      	mov	r7, r4
 800fe56:	2f00      	cmp	r7, #0
 800fe58:	d143      	bne.n	800fee2 <_malloc_r+0xd6>
 800fe5a:	2c00      	cmp	r4, #0
 800fe5c:	d04b      	beq.n	800fef6 <_malloc_r+0xea>
 800fe5e:	6823      	ldr	r3, [r4, #0]
 800fe60:	4639      	mov	r1, r7
 800fe62:	4630      	mov	r0, r6
 800fe64:	eb04 0903 	add.w	r9, r4, r3
 800fe68:	f000 f886 	bl	800ff78 <_sbrk_r>
 800fe6c:	4581      	cmp	r9, r0
 800fe6e:	d142      	bne.n	800fef6 <_malloc_r+0xea>
 800fe70:	6821      	ldr	r1, [r4, #0]
 800fe72:	1a6d      	subs	r5, r5, r1
 800fe74:	4629      	mov	r1, r5
 800fe76:	4630      	mov	r0, r6
 800fe78:	f7ff ffa6 	bl	800fdc8 <sbrk_aligned>
 800fe7c:	3001      	adds	r0, #1
 800fe7e:	d03a      	beq.n	800fef6 <_malloc_r+0xea>
 800fe80:	6823      	ldr	r3, [r4, #0]
 800fe82:	442b      	add	r3, r5
 800fe84:	6023      	str	r3, [r4, #0]
 800fe86:	f8d8 3000 	ldr.w	r3, [r8]
 800fe8a:	685a      	ldr	r2, [r3, #4]
 800fe8c:	bb62      	cbnz	r2, 800fee8 <_malloc_r+0xdc>
 800fe8e:	f8c8 7000 	str.w	r7, [r8]
 800fe92:	e00f      	b.n	800feb4 <_malloc_r+0xa8>
 800fe94:	6822      	ldr	r2, [r4, #0]
 800fe96:	1b52      	subs	r2, r2, r5
 800fe98:	d420      	bmi.n	800fedc <_malloc_r+0xd0>
 800fe9a:	2a0b      	cmp	r2, #11
 800fe9c:	d917      	bls.n	800fece <_malloc_r+0xc2>
 800fe9e:	1961      	adds	r1, r4, r5
 800fea0:	42a3      	cmp	r3, r4
 800fea2:	6025      	str	r5, [r4, #0]
 800fea4:	bf18      	it	ne
 800fea6:	6059      	strne	r1, [r3, #4]
 800fea8:	6863      	ldr	r3, [r4, #4]
 800feaa:	bf08      	it	eq
 800feac:	f8c8 1000 	streq.w	r1, [r8]
 800feb0:	5162      	str	r2, [r4, r5]
 800feb2:	604b      	str	r3, [r1, #4]
 800feb4:	4630      	mov	r0, r6
 800feb6:	f000 f82f 	bl	800ff18 <__malloc_unlock>
 800feba:	f104 000b 	add.w	r0, r4, #11
 800febe:	1d23      	adds	r3, r4, #4
 800fec0:	f020 0007 	bic.w	r0, r0, #7
 800fec4:	1ac2      	subs	r2, r0, r3
 800fec6:	bf1c      	itt	ne
 800fec8:	1a1b      	subne	r3, r3, r0
 800feca:	50a3      	strne	r3, [r4, r2]
 800fecc:	e7af      	b.n	800fe2e <_malloc_r+0x22>
 800fece:	6862      	ldr	r2, [r4, #4]
 800fed0:	42a3      	cmp	r3, r4
 800fed2:	bf0c      	ite	eq
 800fed4:	f8c8 2000 	streq.w	r2, [r8]
 800fed8:	605a      	strne	r2, [r3, #4]
 800feda:	e7eb      	b.n	800feb4 <_malloc_r+0xa8>
 800fedc:	4623      	mov	r3, r4
 800fede:	6864      	ldr	r4, [r4, #4]
 800fee0:	e7ae      	b.n	800fe40 <_malloc_r+0x34>
 800fee2:	463c      	mov	r4, r7
 800fee4:	687f      	ldr	r7, [r7, #4]
 800fee6:	e7b6      	b.n	800fe56 <_malloc_r+0x4a>
 800fee8:	461a      	mov	r2, r3
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	42a3      	cmp	r3, r4
 800feee:	d1fb      	bne.n	800fee8 <_malloc_r+0xdc>
 800fef0:	2300      	movs	r3, #0
 800fef2:	6053      	str	r3, [r2, #4]
 800fef4:	e7de      	b.n	800feb4 <_malloc_r+0xa8>
 800fef6:	230c      	movs	r3, #12
 800fef8:	6033      	str	r3, [r6, #0]
 800fefa:	4630      	mov	r0, r6
 800fefc:	f000 f80c 	bl	800ff18 <__malloc_unlock>
 800ff00:	e794      	b.n	800fe2c <_malloc_r+0x20>
 800ff02:	6005      	str	r5, [r0, #0]
 800ff04:	e7d6      	b.n	800feb4 <_malloc_r+0xa8>
 800ff06:	bf00      	nop
 800ff08:	20009334 	.word	0x20009334

0800ff0c <__malloc_lock>:
 800ff0c:	4801      	ldr	r0, [pc, #4]	@ (800ff14 <__malloc_lock+0x8>)
 800ff0e:	f000 b86d 	b.w	800ffec <__retarget_lock_acquire_recursive>
 800ff12:	bf00      	nop
 800ff14:	20009474 	.word	0x20009474

0800ff18 <__malloc_unlock>:
 800ff18:	4801      	ldr	r0, [pc, #4]	@ (800ff20 <__malloc_unlock+0x8>)
 800ff1a:	f000 b868 	b.w	800ffee <__retarget_lock_release_recursive>
 800ff1e:	bf00      	nop
 800ff20:	20009474 	.word	0x20009474

0800ff24 <siprintf>:
 800ff24:	b40e      	push	{r1, r2, r3}
 800ff26:	b510      	push	{r4, lr}
 800ff28:	b09d      	sub	sp, #116	@ 0x74
 800ff2a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ff2c:	9002      	str	r0, [sp, #8]
 800ff2e:	9006      	str	r0, [sp, #24]
 800ff30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ff34:	480a      	ldr	r0, [pc, #40]	@ (800ff60 <siprintf+0x3c>)
 800ff36:	9107      	str	r1, [sp, #28]
 800ff38:	9104      	str	r1, [sp, #16]
 800ff3a:	490a      	ldr	r1, [pc, #40]	@ (800ff64 <siprintf+0x40>)
 800ff3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff40:	9105      	str	r1, [sp, #20]
 800ff42:	2400      	movs	r4, #0
 800ff44:	a902      	add	r1, sp, #8
 800ff46:	6800      	ldr	r0, [r0, #0]
 800ff48:	9301      	str	r3, [sp, #4]
 800ff4a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ff4c:	f000 f904 	bl	8010158 <_svfiprintf_r>
 800ff50:	9b02      	ldr	r3, [sp, #8]
 800ff52:	701c      	strb	r4, [r3, #0]
 800ff54:	b01d      	add	sp, #116	@ 0x74
 800ff56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff5a:	b003      	add	sp, #12
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	20000038 	.word	0x20000038
 800ff64:	ffff0208 	.word	0xffff0208

0800ff68 <memset>:
 800ff68:	4402      	add	r2, r0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d100      	bne.n	800ff72 <memset+0xa>
 800ff70:	4770      	bx	lr
 800ff72:	f803 1b01 	strb.w	r1, [r3], #1
 800ff76:	e7f9      	b.n	800ff6c <memset+0x4>

0800ff78 <_sbrk_r>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	4d06      	ldr	r5, [pc, #24]	@ (800ff94 <_sbrk_r+0x1c>)
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	4604      	mov	r4, r0
 800ff80:	4608      	mov	r0, r1
 800ff82:	602b      	str	r3, [r5, #0]
 800ff84:	f7f1 ff2c 	bl	8001de0 <_sbrk>
 800ff88:	1c43      	adds	r3, r0, #1
 800ff8a:	d102      	bne.n	800ff92 <_sbrk_r+0x1a>
 800ff8c:	682b      	ldr	r3, [r5, #0]
 800ff8e:	b103      	cbz	r3, 800ff92 <_sbrk_r+0x1a>
 800ff90:	6023      	str	r3, [r4, #0]
 800ff92:	bd38      	pop	{r3, r4, r5, pc}
 800ff94:	20009470 	.word	0x20009470

0800ff98 <__errno>:
 800ff98:	4b01      	ldr	r3, [pc, #4]	@ (800ffa0 <__errno+0x8>)
 800ff9a:	6818      	ldr	r0, [r3, #0]
 800ff9c:	4770      	bx	lr
 800ff9e:	bf00      	nop
 800ffa0:	20000038 	.word	0x20000038

0800ffa4 <__libc_init_array>:
 800ffa4:	b570      	push	{r4, r5, r6, lr}
 800ffa6:	4d0d      	ldr	r5, [pc, #52]	@ (800ffdc <__libc_init_array+0x38>)
 800ffa8:	4c0d      	ldr	r4, [pc, #52]	@ (800ffe0 <__libc_init_array+0x3c>)
 800ffaa:	1b64      	subs	r4, r4, r5
 800ffac:	10a4      	asrs	r4, r4, #2
 800ffae:	2600      	movs	r6, #0
 800ffb0:	42a6      	cmp	r6, r4
 800ffb2:	d109      	bne.n	800ffc8 <__libc_init_array+0x24>
 800ffb4:	4d0b      	ldr	r5, [pc, #44]	@ (800ffe4 <__libc_init_array+0x40>)
 800ffb6:	4c0c      	ldr	r4, [pc, #48]	@ (800ffe8 <__libc_init_array+0x44>)
 800ffb8:	f000 fba6 	bl	8010708 <_init>
 800ffbc:	1b64      	subs	r4, r4, r5
 800ffbe:	10a4      	asrs	r4, r4, #2
 800ffc0:	2600      	movs	r6, #0
 800ffc2:	42a6      	cmp	r6, r4
 800ffc4:	d105      	bne.n	800ffd2 <__libc_init_array+0x2e>
 800ffc6:	bd70      	pop	{r4, r5, r6, pc}
 800ffc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffcc:	4798      	blx	r3
 800ffce:	3601      	adds	r6, #1
 800ffd0:	e7ee      	b.n	800ffb0 <__libc_init_array+0xc>
 800ffd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffd6:	4798      	blx	r3
 800ffd8:	3601      	adds	r6, #1
 800ffda:	e7f2      	b.n	800ffc2 <__libc_init_array+0x1e>
 800ffdc:	0801158c 	.word	0x0801158c
 800ffe0:	0801158c 	.word	0x0801158c
 800ffe4:	0801158c 	.word	0x0801158c
 800ffe8:	08011590 	.word	0x08011590

0800ffec <__retarget_lock_acquire_recursive>:
 800ffec:	4770      	bx	lr

0800ffee <__retarget_lock_release_recursive>:
 800ffee:	4770      	bx	lr

0800fff0 <memcpy>:
 800fff0:	440a      	add	r2, r1
 800fff2:	4291      	cmp	r1, r2
 800fff4:	f100 33ff 	add.w	r3, r0, #4294967295
 800fff8:	d100      	bne.n	800fffc <memcpy+0xc>
 800fffa:	4770      	bx	lr
 800fffc:	b510      	push	{r4, lr}
 800fffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010006:	4291      	cmp	r1, r2
 8010008:	d1f9      	bne.n	800fffe <memcpy+0xe>
 801000a:	bd10      	pop	{r4, pc}

0801000c <_free_r>:
 801000c:	b538      	push	{r3, r4, r5, lr}
 801000e:	4605      	mov	r5, r0
 8010010:	2900      	cmp	r1, #0
 8010012:	d041      	beq.n	8010098 <_free_r+0x8c>
 8010014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010018:	1f0c      	subs	r4, r1, #4
 801001a:	2b00      	cmp	r3, #0
 801001c:	bfb8      	it	lt
 801001e:	18e4      	addlt	r4, r4, r3
 8010020:	f7ff ff74 	bl	800ff0c <__malloc_lock>
 8010024:	4a1d      	ldr	r2, [pc, #116]	@ (801009c <_free_r+0x90>)
 8010026:	6813      	ldr	r3, [r2, #0]
 8010028:	b933      	cbnz	r3, 8010038 <_free_r+0x2c>
 801002a:	6063      	str	r3, [r4, #4]
 801002c:	6014      	str	r4, [r2, #0]
 801002e:	4628      	mov	r0, r5
 8010030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010034:	f7ff bf70 	b.w	800ff18 <__malloc_unlock>
 8010038:	42a3      	cmp	r3, r4
 801003a:	d908      	bls.n	801004e <_free_r+0x42>
 801003c:	6820      	ldr	r0, [r4, #0]
 801003e:	1821      	adds	r1, r4, r0
 8010040:	428b      	cmp	r3, r1
 8010042:	bf01      	itttt	eq
 8010044:	6819      	ldreq	r1, [r3, #0]
 8010046:	685b      	ldreq	r3, [r3, #4]
 8010048:	1809      	addeq	r1, r1, r0
 801004a:	6021      	streq	r1, [r4, #0]
 801004c:	e7ed      	b.n	801002a <_free_r+0x1e>
 801004e:	461a      	mov	r2, r3
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	b10b      	cbz	r3, 8010058 <_free_r+0x4c>
 8010054:	42a3      	cmp	r3, r4
 8010056:	d9fa      	bls.n	801004e <_free_r+0x42>
 8010058:	6811      	ldr	r1, [r2, #0]
 801005a:	1850      	adds	r0, r2, r1
 801005c:	42a0      	cmp	r0, r4
 801005e:	d10b      	bne.n	8010078 <_free_r+0x6c>
 8010060:	6820      	ldr	r0, [r4, #0]
 8010062:	4401      	add	r1, r0
 8010064:	1850      	adds	r0, r2, r1
 8010066:	4283      	cmp	r3, r0
 8010068:	6011      	str	r1, [r2, #0]
 801006a:	d1e0      	bne.n	801002e <_free_r+0x22>
 801006c:	6818      	ldr	r0, [r3, #0]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	6053      	str	r3, [r2, #4]
 8010072:	4408      	add	r0, r1
 8010074:	6010      	str	r0, [r2, #0]
 8010076:	e7da      	b.n	801002e <_free_r+0x22>
 8010078:	d902      	bls.n	8010080 <_free_r+0x74>
 801007a:	230c      	movs	r3, #12
 801007c:	602b      	str	r3, [r5, #0]
 801007e:	e7d6      	b.n	801002e <_free_r+0x22>
 8010080:	6820      	ldr	r0, [r4, #0]
 8010082:	1821      	adds	r1, r4, r0
 8010084:	428b      	cmp	r3, r1
 8010086:	bf04      	itt	eq
 8010088:	6819      	ldreq	r1, [r3, #0]
 801008a:	685b      	ldreq	r3, [r3, #4]
 801008c:	6063      	str	r3, [r4, #4]
 801008e:	bf04      	itt	eq
 8010090:	1809      	addeq	r1, r1, r0
 8010092:	6021      	streq	r1, [r4, #0]
 8010094:	6054      	str	r4, [r2, #4]
 8010096:	e7ca      	b.n	801002e <_free_r+0x22>
 8010098:	bd38      	pop	{r3, r4, r5, pc}
 801009a:	bf00      	nop
 801009c:	20009334 	.word	0x20009334

080100a0 <__ssputs_r>:
 80100a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100a4:	688e      	ldr	r6, [r1, #8]
 80100a6:	461f      	mov	r7, r3
 80100a8:	42be      	cmp	r6, r7
 80100aa:	680b      	ldr	r3, [r1, #0]
 80100ac:	4682      	mov	sl, r0
 80100ae:	460c      	mov	r4, r1
 80100b0:	4690      	mov	r8, r2
 80100b2:	d82d      	bhi.n	8010110 <__ssputs_r+0x70>
 80100b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80100bc:	d026      	beq.n	801010c <__ssputs_r+0x6c>
 80100be:	6965      	ldr	r5, [r4, #20]
 80100c0:	6909      	ldr	r1, [r1, #16]
 80100c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100c6:	eba3 0901 	sub.w	r9, r3, r1
 80100ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100ce:	1c7b      	adds	r3, r7, #1
 80100d0:	444b      	add	r3, r9
 80100d2:	106d      	asrs	r5, r5, #1
 80100d4:	429d      	cmp	r5, r3
 80100d6:	bf38      	it	cc
 80100d8:	461d      	movcc	r5, r3
 80100da:	0553      	lsls	r3, r2, #21
 80100dc:	d527      	bpl.n	801012e <__ssputs_r+0x8e>
 80100de:	4629      	mov	r1, r5
 80100e0:	f7ff fe94 	bl	800fe0c <_malloc_r>
 80100e4:	4606      	mov	r6, r0
 80100e6:	b360      	cbz	r0, 8010142 <__ssputs_r+0xa2>
 80100e8:	6921      	ldr	r1, [r4, #16]
 80100ea:	464a      	mov	r2, r9
 80100ec:	f7ff ff80 	bl	800fff0 <memcpy>
 80100f0:	89a3      	ldrh	r3, [r4, #12]
 80100f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80100f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100fa:	81a3      	strh	r3, [r4, #12]
 80100fc:	6126      	str	r6, [r4, #16]
 80100fe:	6165      	str	r5, [r4, #20]
 8010100:	444e      	add	r6, r9
 8010102:	eba5 0509 	sub.w	r5, r5, r9
 8010106:	6026      	str	r6, [r4, #0]
 8010108:	60a5      	str	r5, [r4, #8]
 801010a:	463e      	mov	r6, r7
 801010c:	42be      	cmp	r6, r7
 801010e:	d900      	bls.n	8010112 <__ssputs_r+0x72>
 8010110:	463e      	mov	r6, r7
 8010112:	6820      	ldr	r0, [r4, #0]
 8010114:	4632      	mov	r2, r6
 8010116:	4641      	mov	r1, r8
 8010118:	f000 faa6 	bl	8010668 <memmove>
 801011c:	68a3      	ldr	r3, [r4, #8]
 801011e:	1b9b      	subs	r3, r3, r6
 8010120:	60a3      	str	r3, [r4, #8]
 8010122:	6823      	ldr	r3, [r4, #0]
 8010124:	4433      	add	r3, r6
 8010126:	6023      	str	r3, [r4, #0]
 8010128:	2000      	movs	r0, #0
 801012a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801012e:	462a      	mov	r2, r5
 8010130:	f000 fab4 	bl	801069c <_realloc_r>
 8010134:	4606      	mov	r6, r0
 8010136:	2800      	cmp	r0, #0
 8010138:	d1e0      	bne.n	80100fc <__ssputs_r+0x5c>
 801013a:	6921      	ldr	r1, [r4, #16]
 801013c:	4650      	mov	r0, sl
 801013e:	f7ff ff65 	bl	801000c <_free_r>
 8010142:	230c      	movs	r3, #12
 8010144:	f8ca 3000 	str.w	r3, [sl]
 8010148:	89a3      	ldrh	r3, [r4, #12]
 801014a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801014e:	81a3      	strh	r3, [r4, #12]
 8010150:	f04f 30ff 	mov.w	r0, #4294967295
 8010154:	e7e9      	b.n	801012a <__ssputs_r+0x8a>
	...

08010158 <_svfiprintf_r>:
 8010158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801015c:	4698      	mov	r8, r3
 801015e:	898b      	ldrh	r3, [r1, #12]
 8010160:	061b      	lsls	r3, r3, #24
 8010162:	b09d      	sub	sp, #116	@ 0x74
 8010164:	4607      	mov	r7, r0
 8010166:	460d      	mov	r5, r1
 8010168:	4614      	mov	r4, r2
 801016a:	d510      	bpl.n	801018e <_svfiprintf_r+0x36>
 801016c:	690b      	ldr	r3, [r1, #16]
 801016e:	b973      	cbnz	r3, 801018e <_svfiprintf_r+0x36>
 8010170:	2140      	movs	r1, #64	@ 0x40
 8010172:	f7ff fe4b 	bl	800fe0c <_malloc_r>
 8010176:	6028      	str	r0, [r5, #0]
 8010178:	6128      	str	r0, [r5, #16]
 801017a:	b930      	cbnz	r0, 801018a <_svfiprintf_r+0x32>
 801017c:	230c      	movs	r3, #12
 801017e:	603b      	str	r3, [r7, #0]
 8010180:	f04f 30ff 	mov.w	r0, #4294967295
 8010184:	b01d      	add	sp, #116	@ 0x74
 8010186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801018a:	2340      	movs	r3, #64	@ 0x40
 801018c:	616b      	str	r3, [r5, #20]
 801018e:	2300      	movs	r3, #0
 8010190:	9309      	str	r3, [sp, #36]	@ 0x24
 8010192:	2320      	movs	r3, #32
 8010194:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010198:	f8cd 800c 	str.w	r8, [sp, #12]
 801019c:	2330      	movs	r3, #48	@ 0x30
 801019e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801033c <_svfiprintf_r+0x1e4>
 80101a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101a6:	f04f 0901 	mov.w	r9, #1
 80101aa:	4623      	mov	r3, r4
 80101ac:	469a      	mov	sl, r3
 80101ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101b2:	b10a      	cbz	r2, 80101b8 <_svfiprintf_r+0x60>
 80101b4:	2a25      	cmp	r2, #37	@ 0x25
 80101b6:	d1f9      	bne.n	80101ac <_svfiprintf_r+0x54>
 80101b8:	ebba 0b04 	subs.w	fp, sl, r4
 80101bc:	d00b      	beq.n	80101d6 <_svfiprintf_r+0x7e>
 80101be:	465b      	mov	r3, fp
 80101c0:	4622      	mov	r2, r4
 80101c2:	4629      	mov	r1, r5
 80101c4:	4638      	mov	r0, r7
 80101c6:	f7ff ff6b 	bl	80100a0 <__ssputs_r>
 80101ca:	3001      	adds	r0, #1
 80101cc:	f000 80a7 	beq.w	801031e <_svfiprintf_r+0x1c6>
 80101d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101d2:	445a      	add	r2, fp
 80101d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80101d6:	f89a 3000 	ldrb.w	r3, [sl]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f000 809f 	beq.w	801031e <_svfiprintf_r+0x1c6>
 80101e0:	2300      	movs	r3, #0
 80101e2:	f04f 32ff 	mov.w	r2, #4294967295
 80101e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101ea:	f10a 0a01 	add.w	sl, sl, #1
 80101ee:	9304      	str	r3, [sp, #16]
 80101f0:	9307      	str	r3, [sp, #28]
 80101f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80101f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80101f8:	4654      	mov	r4, sl
 80101fa:	2205      	movs	r2, #5
 80101fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010200:	484e      	ldr	r0, [pc, #312]	@ (801033c <_svfiprintf_r+0x1e4>)
 8010202:	f7ef fffd 	bl	8000200 <memchr>
 8010206:	9a04      	ldr	r2, [sp, #16]
 8010208:	b9d8      	cbnz	r0, 8010242 <_svfiprintf_r+0xea>
 801020a:	06d0      	lsls	r0, r2, #27
 801020c:	bf44      	itt	mi
 801020e:	2320      	movmi	r3, #32
 8010210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010214:	0711      	lsls	r1, r2, #28
 8010216:	bf44      	itt	mi
 8010218:	232b      	movmi	r3, #43	@ 0x2b
 801021a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801021e:	f89a 3000 	ldrb.w	r3, [sl]
 8010222:	2b2a      	cmp	r3, #42	@ 0x2a
 8010224:	d015      	beq.n	8010252 <_svfiprintf_r+0xfa>
 8010226:	9a07      	ldr	r2, [sp, #28]
 8010228:	4654      	mov	r4, sl
 801022a:	2000      	movs	r0, #0
 801022c:	f04f 0c0a 	mov.w	ip, #10
 8010230:	4621      	mov	r1, r4
 8010232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010236:	3b30      	subs	r3, #48	@ 0x30
 8010238:	2b09      	cmp	r3, #9
 801023a:	d94b      	bls.n	80102d4 <_svfiprintf_r+0x17c>
 801023c:	b1b0      	cbz	r0, 801026c <_svfiprintf_r+0x114>
 801023e:	9207      	str	r2, [sp, #28]
 8010240:	e014      	b.n	801026c <_svfiprintf_r+0x114>
 8010242:	eba0 0308 	sub.w	r3, r0, r8
 8010246:	fa09 f303 	lsl.w	r3, r9, r3
 801024a:	4313      	orrs	r3, r2
 801024c:	9304      	str	r3, [sp, #16]
 801024e:	46a2      	mov	sl, r4
 8010250:	e7d2      	b.n	80101f8 <_svfiprintf_r+0xa0>
 8010252:	9b03      	ldr	r3, [sp, #12]
 8010254:	1d19      	adds	r1, r3, #4
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	9103      	str	r1, [sp, #12]
 801025a:	2b00      	cmp	r3, #0
 801025c:	bfbb      	ittet	lt
 801025e:	425b      	neglt	r3, r3
 8010260:	f042 0202 	orrlt.w	r2, r2, #2
 8010264:	9307      	strge	r3, [sp, #28]
 8010266:	9307      	strlt	r3, [sp, #28]
 8010268:	bfb8      	it	lt
 801026a:	9204      	strlt	r2, [sp, #16]
 801026c:	7823      	ldrb	r3, [r4, #0]
 801026e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010270:	d10a      	bne.n	8010288 <_svfiprintf_r+0x130>
 8010272:	7863      	ldrb	r3, [r4, #1]
 8010274:	2b2a      	cmp	r3, #42	@ 0x2a
 8010276:	d132      	bne.n	80102de <_svfiprintf_r+0x186>
 8010278:	9b03      	ldr	r3, [sp, #12]
 801027a:	1d1a      	adds	r2, r3, #4
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	9203      	str	r2, [sp, #12]
 8010280:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010284:	3402      	adds	r4, #2
 8010286:	9305      	str	r3, [sp, #20]
 8010288:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801034c <_svfiprintf_r+0x1f4>
 801028c:	7821      	ldrb	r1, [r4, #0]
 801028e:	2203      	movs	r2, #3
 8010290:	4650      	mov	r0, sl
 8010292:	f7ef ffb5 	bl	8000200 <memchr>
 8010296:	b138      	cbz	r0, 80102a8 <_svfiprintf_r+0x150>
 8010298:	9b04      	ldr	r3, [sp, #16]
 801029a:	eba0 000a 	sub.w	r0, r0, sl
 801029e:	2240      	movs	r2, #64	@ 0x40
 80102a0:	4082      	lsls	r2, r0
 80102a2:	4313      	orrs	r3, r2
 80102a4:	3401      	adds	r4, #1
 80102a6:	9304      	str	r3, [sp, #16]
 80102a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ac:	4824      	ldr	r0, [pc, #144]	@ (8010340 <_svfiprintf_r+0x1e8>)
 80102ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102b2:	2206      	movs	r2, #6
 80102b4:	f7ef ffa4 	bl	8000200 <memchr>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d036      	beq.n	801032a <_svfiprintf_r+0x1d2>
 80102bc:	4b21      	ldr	r3, [pc, #132]	@ (8010344 <_svfiprintf_r+0x1ec>)
 80102be:	bb1b      	cbnz	r3, 8010308 <_svfiprintf_r+0x1b0>
 80102c0:	9b03      	ldr	r3, [sp, #12]
 80102c2:	3307      	adds	r3, #7
 80102c4:	f023 0307 	bic.w	r3, r3, #7
 80102c8:	3308      	adds	r3, #8
 80102ca:	9303      	str	r3, [sp, #12]
 80102cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ce:	4433      	add	r3, r6
 80102d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80102d2:	e76a      	b.n	80101aa <_svfiprintf_r+0x52>
 80102d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80102d8:	460c      	mov	r4, r1
 80102da:	2001      	movs	r0, #1
 80102dc:	e7a8      	b.n	8010230 <_svfiprintf_r+0xd8>
 80102de:	2300      	movs	r3, #0
 80102e0:	3401      	adds	r4, #1
 80102e2:	9305      	str	r3, [sp, #20]
 80102e4:	4619      	mov	r1, r3
 80102e6:	f04f 0c0a 	mov.w	ip, #10
 80102ea:	4620      	mov	r0, r4
 80102ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102f0:	3a30      	subs	r2, #48	@ 0x30
 80102f2:	2a09      	cmp	r2, #9
 80102f4:	d903      	bls.n	80102fe <_svfiprintf_r+0x1a6>
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d0c6      	beq.n	8010288 <_svfiprintf_r+0x130>
 80102fa:	9105      	str	r1, [sp, #20]
 80102fc:	e7c4      	b.n	8010288 <_svfiprintf_r+0x130>
 80102fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010302:	4604      	mov	r4, r0
 8010304:	2301      	movs	r3, #1
 8010306:	e7f0      	b.n	80102ea <_svfiprintf_r+0x192>
 8010308:	ab03      	add	r3, sp, #12
 801030a:	9300      	str	r3, [sp, #0]
 801030c:	462a      	mov	r2, r5
 801030e:	4b0e      	ldr	r3, [pc, #56]	@ (8010348 <_svfiprintf_r+0x1f0>)
 8010310:	a904      	add	r1, sp, #16
 8010312:	4638      	mov	r0, r7
 8010314:	f3af 8000 	nop.w
 8010318:	1c42      	adds	r2, r0, #1
 801031a:	4606      	mov	r6, r0
 801031c:	d1d6      	bne.n	80102cc <_svfiprintf_r+0x174>
 801031e:	89ab      	ldrh	r3, [r5, #12]
 8010320:	065b      	lsls	r3, r3, #25
 8010322:	f53f af2d 	bmi.w	8010180 <_svfiprintf_r+0x28>
 8010326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010328:	e72c      	b.n	8010184 <_svfiprintf_r+0x2c>
 801032a:	ab03      	add	r3, sp, #12
 801032c:	9300      	str	r3, [sp, #0]
 801032e:	462a      	mov	r2, r5
 8010330:	4b05      	ldr	r3, [pc, #20]	@ (8010348 <_svfiprintf_r+0x1f0>)
 8010332:	a904      	add	r1, sp, #16
 8010334:	4638      	mov	r0, r7
 8010336:	f000 f879 	bl	801042c <_printf_i>
 801033a:	e7ed      	b.n	8010318 <_svfiprintf_r+0x1c0>
 801033c:	08011550 	.word	0x08011550
 8010340:	0801155a 	.word	0x0801155a
 8010344:	00000000 	.word	0x00000000
 8010348:	080100a1 	.word	0x080100a1
 801034c:	08011556 	.word	0x08011556

08010350 <_printf_common>:
 8010350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010354:	4616      	mov	r6, r2
 8010356:	4698      	mov	r8, r3
 8010358:	688a      	ldr	r2, [r1, #8]
 801035a:	690b      	ldr	r3, [r1, #16]
 801035c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010360:	4293      	cmp	r3, r2
 8010362:	bfb8      	it	lt
 8010364:	4613      	movlt	r3, r2
 8010366:	6033      	str	r3, [r6, #0]
 8010368:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801036c:	4607      	mov	r7, r0
 801036e:	460c      	mov	r4, r1
 8010370:	b10a      	cbz	r2, 8010376 <_printf_common+0x26>
 8010372:	3301      	adds	r3, #1
 8010374:	6033      	str	r3, [r6, #0]
 8010376:	6823      	ldr	r3, [r4, #0]
 8010378:	0699      	lsls	r1, r3, #26
 801037a:	bf42      	ittt	mi
 801037c:	6833      	ldrmi	r3, [r6, #0]
 801037e:	3302      	addmi	r3, #2
 8010380:	6033      	strmi	r3, [r6, #0]
 8010382:	6825      	ldr	r5, [r4, #0]
 8010384:	f015 0506 	ands.w	r5, r5, #6
 8010388:	d106      	bne.n	8010398 <_printf_common+0x48>
 801038a:	f104 0a19 	add.w	sl, r4, #25
 801038e:	68e3      	ldr	r3, [r4, #12]
 8010390:	6832      	ldr	r2, [r6, #0]
 8010392:	1a9b      	subs	r3, r3, r2
 8010394:	42ab      	cmp	r3, r5
 8010396:	dc26      	bgt.n	80103e6 <_printf_common+0x96>
 8010398:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801039c:	6822      	ldr	r2, [r4, #0]
 801039e:	3b00      	subs	r3, #0
 80103a0:	bf18      	it	ne
 80103a2:	2301      	movne	r3, #1
 80103a4:	0692      	lsls	r2, r2, #26
 80103a6:	d42b      	bmi.n	8010400 <_printf_common+0xb0>
 80103a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80103ac:	4641      	mov	r1, r8
 80103ae:	4638      	mov	r0, r7
 80103b0:	47c8      	blx	r9
 80103b2:	3001      	adds	r0, #1
 80103b4:	d01e      	beq.n	80103f4 <_printf_common+0xa4>
 80103b6:	6823      	ldr	r3, [r4, #0]
 80103b8:	6922      	ldr	r2, [r4, #16]
 80103ba:	f003 0306 	and.w	r3, r3, #6
 80103be:	2b04      	cmp	r3, #4
 80103c0:	bf02      	ittt	eq
 80103c2:	68e5      	ldreq	r5, [r4, #12]
 80103c4:	6833      	ldreq	r3, [r6, #0]
 80103c6:	1aed      	subeq	r5, r5, r3
 80103c8:	68a3      	ldr	r3, [r4, #8]
 80103ca:	bf0c      	ite	eq
 80103cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103d0:	2500      	movne	r5, #0
 80103d2:	4293      	cmp	r3, r2
 80103d4:	bfc4      	itt	gt
 80103d6:	1a9b      	subgt	r3, r3, r2
 80103d8:	18ed      	addgt	r5, r5, r3
 80103da:	2600      	movs	r6, #0
 80103dc:	341a      	adds	r4, #26
 80103de:	42b5      	cmp	r5, r6
 80103e0:	d11a      	bne.n	8010418 <_printf_common+0xc8>
 80103e2:	2000      	movs	r0, #0
 80103e4:	e008      	b.n	80103f8 <_printf_common+0xa8>
 80103e6:	2301      	movs	r3, #1
 80103e8:	4652      	mov	r2, sl
 80103ea:	4641      	mov	r1, r8
 80103ec:	4638      	mov	r0, r7
 80103ee:	47c8      	blx	r9
 80103f0:	3001      	adds	r0, #1
 80103f2:	d103      	bne.n	80103fc <_printf_common+0xac>
 80103f4:	f04f 30ff 	mov.w	r0, #4294967295
 80103f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103fc:	3501      	adds	r5, #1
 80103fe:	e7c6      	b.n	801038e <_printf_common+0x3e>
 8010400:	18e1      	adds	r1, r4, r3
 8010402:	1c5a      	adds	r2, r3, #1
 8010404:	2030      	movs	r0, #48	@ 0x30
 8010406:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801040a:	4422      	add	r2, r4
 801040c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010410:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010414:	3302      	adds	r3, #2
 8010416:	e7c7      	b.n	80103a8 <_printf_common+0x58>
 8010418:	2301      	movs	r3, #1
 801041a:	4622      	mov	r2, r4
 801041c:	4641      	mov	r1, r8
 801041e:	4638      	mov	r0, r7
 8010420:	47c8      	blx	r9
 8010422:	3001      	adds	r0, #1
 8010424:	d0e6      	beq.n	80103f4 <_printf_common+0xa4>
 8010426:	3601      	adds	r6, #1
 8010428:	e7d9      	b.n	80103de <_printf_common+0x8e>
	...

0801042c <_printf_i>:
 801042c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010430:	7e0f      	ldrb	r7, [r1, #24]
 8010432:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010434:	2f78      	cmp	r7, #120	@ 0x78
 8010436:	4691      	mov	r9, r2
 8010438:	4680      	mov	r8, r0
 801043a:	460c      	mov	r4, r1
 801043c:	469a      	mov	sl, r3
 801043e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010442:	d807      	bhi.n	8010454 <_printf_i+0x28>
 8010444:	2f62      	cmp	r7, #98	@ 0x62
 8010446:	d80a      	bhi.n	801045e <_printf_i+0x32>
 8010448:	2f00      	cmp	r7, #0
 801044a:	f000 80d1 	beq.w	80105f0 <_printf_i+0x1c4>
 801044e:	2f58      	cmp	r7, #88	@ 0x58
 8010450:	f000 80b8 	beq.w	80105c4 <_printf_i+0x198>
 8010454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010458:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801045c:	e03a      	b.n	80104d4 <_printf_i+0xa8>
 801045e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010462:	2b15      	cmp	r3, #21
 8010464:	d8f6      	bhi.n	8010454 <_printf_i+0x28>
 8010466:	a101      	add	r1, pc, #4	@ (adr r1, 801046c <_printf_i+0x40>)
 8010468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801046c:	080104c5 	.word	0x080104c5
 8010470:	080104d9 	.word	0x080104d9
 8010474:	08010455 	.word	0x08010455
 8010478:	08010455 	.word	0x08010455
 801047c:	08010455 	.word	0x08010455
 8010480:	08010455 	.word	0x08010455
 8010484:	080104d9 	.word	0x080104d9
 8010488:	08010455 	.word	0x08010455
 801048c:	08010455 	.word	0x08010455
 8010490:	08010455 	.word	0x08010455
 8010494:	08010455 	.word	0x08010455
 8010498:	080105d7 	.word	0x080105d7
 801049c:	08010503 	.word	0x08010503
 80104a0:	08010591 	.word	0x08010591
 80104a4:	08010455 	.word	0x08010455
 80104a8:	08010455 	.word	0x08010455
 80104ac:	080105f9 	.word	0x080105f9
 80104b0:	08010455 	.word	0x08010455
 80104b4:	08010503 	.word	0x08010503
 80104b8:	08010455 	.word	0x08010455
 80104bc:	08010455 	.word	0x08010455
 80104c0:	08010599 	.word	0x08010599
 80104c4:	6833      	ldr	r3, [r6, #0]
 80104c6:	1d1a      	adds	r2, r3, #4
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	6032      	str	r2, [r6, #0]
 80104cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80104d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80104d4:	2301      	movs	r3, #1
 80104d6:	e09c      	b.n	8010612 <_printf_i+0x1e6>
 80104d8:	6833      	ldr	r3, [r6, #0]
 80104da:	6820      	ldr	r0, [r4, #0]
 80104dc:	1d19      	adds	r1, r3, #4
 80104de:	6031      	str	r1, [r6, #0]
 80104e0:	0606      	lsls	r6, r0, #24
 80104e2:	d501      	bpl.n	80104e8 <_printf_i+0xbc>
 80104e4:	681d      	ldr	r5, [r3, #0]
 80104e6:	e003      	b.n	80104f0 <_printf_i+0xc4>
 80104e8:	0645      	lsls	r5, r0, #25
 80104ea:	d5fb      	bpl.n	80104e4 <_printf_i+0xb8>
 80104ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80104f0:	2d00      	cmp	r5, #0
 80104f2:	da03      	bge.n	80104fc <_printf_i+0xd0>
 80104f4:	232d      	movs	r3, #45	@ 0x2d
 80104f6:	426d      	negs	r5, r5
 80104f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80104fc:	4858      	ldr	r0, [pc, #352]	@ (8010660 <_printf_i+0x234>)
 80104fe:	230a      	movs	r3, #10
 8010500:	e011      	b.n	8010526 <_printf_i+0xfa>
 8010502:	6821      	ldr	r1, [r4, #0]
 8010504:	6833      	ldr	r3, [r6, #0]
 8010506:	0608      	lsls	r0, r1, #24
 8010508:	f853 5b04 	ldr.w	r5, [r3], #4
 801050c:	d402      	bmi.n	8010514 <_printf_i+0xe8>
 801050e:	0649      	lsls	r1, r1, #25
 8010510:	bf48      	it	mi
 8010512:	b2ad      	uxthmi	r5, r5
 8010514:	2f6f      	cmp	r7, #111	@ 0x6f
 8010516:	4852      	ldr	r0, [pc, #328]	@ (8010660 <_printf_i+0x234>)
 8010518:	6033      	str	r3, [r6, #0]
 801051a:	bf14      	ite	ne
 801051c:	230a      	movne	r3, #10
 801051e:	2308      	moveq	r3, #8
 8010520:	2100      	movs	r1, #0
 8010522:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010526:	6866      	ldr	r6, [r4, #4]
 8010528:	60a6      	str	r6, [r4, #8]
 801052a:	2e00      	cmp	r6, #0
 801052c:	db05      	blt.n	801053a <_printf_i+0x10e>
 801052e:	6821      	ldr	r1, [r4, #0]
 8010530:	432e      	orrs	r6, r5
 8010532:	f021 0104 	bic.w	r1, r1, #4
 8010536:	6021      	str	r1, [r4, #0]
 8010538:	d04b      	beq.n	80105d2 <_printf_i+0x1a6>
 801053a:	4616      	mov	r6, r2
 801053c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010540:	fb03 5711 	mls	r7, r3, r1, r5
 8010544:	5dc7      	ldrb	r7, [r0, r7]
 8010546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801054a:	462f      	mov	r7, r5
 801054c:	42bb      	cmp	r3, r7
 801054e:	460d      	mov	r5, r1
 8010550:	d9f4      	bls.n	801053c <_printf_i+0x110>
 8010552:	2b08      	cmp	r3, #8
 8010554:	d10b      	bne.n	801056e <_printf_i+0x142>
 8010556:	6823      	ldr	r3, [r4, #0]
 8010558:	07df      	lsls	r7, r3, #31
 801055a:	d508      	bpl.n	801056e <_printf_i+0x142>
 801055c:	6923      	ldr	r3, [r4, #16]
 801055e:	6861      	ldr	r1, [r4, #4]
 8010560:	4299      	cmp	r1, r3
 8010562:	bfde      	ittt	le
 8010564:	2330      	movle	r3, #48	@ 0x30
 8010566:	f806 3c01 	strble.w	r3, [r6, #-1]
 801056a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801056e:	1b92      	subs	r2, r2, r6
 8010570:	6122      	str	r2, [r4, #16]
 8010572:	f8cd a000 	str.w	sl, [sp]
 8010576:	464b      	mov	r3, r9
 8010578:	aa03      	add	r2, sp, #12
 801057a:	4621      	mov	r1, r4
 801057c:	4640      	mov	r0, r8
 801057e:	f7ff fee7 	bl	8010350 <_printf_common>
 8010582:	3001      	adds	r0, #1
 8010584:	d14a      	bne.n	801061c <_printf_i+0x1f0>
 8010586:	f04f 30ff 	mov.w	r0, #4294967295
 801058a:	b004      	add	sp, #16
 801058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010590:	6823      	ldr	r3, [r4, #0]
 8010592:	f043 0320 	orr.w	r3, r3, #32
 8010596:	6023      	str	r3, [r4, #0]
 8010598:	4832      	ldr	r0, [pc, #200]	@ (8010664 <_printf_i+0x238>)
 801059a:	2778      	movs	r7, #120	@ 0x78
 801059c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80105a0:	6823      	ldr	r3, [r4, #0]
 80105a2:	6831      	ldr	r1, [r6, #0]
 80105a4:	061f      	lsls	r7, r3, #24
 80105a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80105aa:	d402      	bmi.n	80105b2 <_printf_i+0x186>
 80105ac:	065f      	lsls	r7, r3, #25
 80105ae:	bf48      	it	mi
 80105b0:	b2ad      	uxthmi	r5, r5
 80105b2:	6031      	str	r1, [r6, #0]
 80105b4:	07d9      	lsls	r1, r3, #31
 80105b6:	bf44      	itt	mi
 80105b8:	f043 0320 	orrmi.w	r3, r3, #32
 80105bc:	6023      	strmi	r3, [r4, #0]
 80105be:	b11d      	cbz	r5, 80105c8 <_printf_i+0x19c>
 80105c0:	2310      	movs	r3, #16
 80105c2:	e7ad      	b.n	8010520 <_printf_i+0xf4>
 80105c4:	4826      	ldr	r0, [pc, #152]	@ (8010660 <_printf_i+0x234>)
 80105c6:	e7e9      	b.n	801059c <_printf_i+0x170>
 80105c8:	6823      	ldr	r3, [r4, #0]
 80105ca:	f023 0320 	bic.w	r3, r3, #32
 80105ce:	6023      	str	r3, [r4, #0]
 80105d0:	e7f6      	b.n	80105c0 <_printf_i+0x194>
 80105d2:	4616      	mov	r6, r2
 80105d4:	e7bd      	b.n	8010552 <_printf_i+0x126>
 80105d6:	6833      	ldr	r3, [r6, #0]
 80105d8:	6825      	ldr	r5, [r4, #0]
 80105da:	6961      	ldr	r1, [r4, #20]
 80105dc:	1d18      	adds	r0, r3, #4
 80105de:	6030      	str	r0, [r6, #0]
 80105e0:	062e      	lsls	r6, r5, #24
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	d501      	bpl.n	80105ea <_printf_i+0x1be>
 80105e6:	6019      	str	r1, [r3, #0]
 80105e8:	e002      	b.n	80105f0 <_printf_i+0x1c4>
 80105ea:	0668      	lsls	r0, r5, #25
 80105ec:	d5fb      	bpl.n	80105e6 <_printf_i+0x1ba>
 80105ee:	8019      	strh	r1, [r3, #0]
 80105f0:	2300      	movs	r3, #0
 80105f2:	6123      	str	r3, [r4, #16]
 80105f4:	4616      	mov	r6, r2
 80105f6:	e7bc      	b.n	8010572 <_printf_i+0x146>
 80105f8:	6833      	ldr	r3, [r6, #0]
 80105fa:	1d1a      	adds	r2, r3, #4
 80105fc:	6032      	str	r2, [r6, #0]
 80105fe:	681e      	ldr	r6, [r3, #0]
 8010600:	6862      	ldr	r2, [r4, #4]
 8010602:	2100      	movs	r1, #0
 8010604:	4630      	mov	r0, r6
 8010606:	f7ef fdfb 	bl	8000200 <memchr>
 801060a:	b108      	cbz	r0, 8010610 <_printf_i+0x1e4>
 801060c:	1b80      	subs	r0, r0, r6
 801060e:	6060      	str	r0, [r4, #4]
 8010610:	6863      	ldr	r3, [r4, #4]
 8010612:	6123      	str	r3, [r4, #16]
 8010614:	2300      	movs	r3, #0
 8010616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801061a:	e7aa      	b.n	8010572 <_printf_i+0x146>
 801061c:	6923      	ldr	r3, [r4, #16]
 801061e:	4632      	mov	r2, r6
 8010620:	4649      	mov	r1, r9
 8010622:	4640      	mov	r0, r8
 8010624:	47d0      	blx	sl
 8010626:	3001      	adds	r0, #1
 8010628:	d0ad      	beq.n	8010586 <_printf_i+0x15a>
 801062a:	6823      	ldr	r3, [r4, #0]
 801062c:	079b      	lsls	r3, r3, #30
 801062e:	d413      	bmi.n	8010658 <_printf_i+0x22c>
 8010630:	68e0      	ldr	r0, [r4, #12]
 8010632:	9b03      	ldr	r3, [sp, #12]
 8010634:	4298      	cmp	r0, r3
 8010636:	bfb8      	it	lt
 8010638:	4618      	movlt	r0, r3
 801063a:	e7a6      	b.n	801058a <_printf_i+0x15e>
 801063c:	2301      	movs	r3, #1
 801063e:	4632      	mov	r2, r6
 8010640:	4649      	mov	r1, r9
 8010642:	4640      	mov	r0, r8
 8010644:	47d0      	blx	sl
 8010646:	3001      	adds	r0, #1
 8010648:	d09d      	beq.n	8010586 <_printf_i+0x15a>
 801064a:	3501      	adds	r5, #1
 801064c:	68e3      	ldr	r3, [r4, #12]
 801064e:	9903      	ldr	r1, [sp, #12]
 8010650:	1a5b      	subs	r3, r3, r1
 8010652:	42ab      	cmp	r3, r5
 8010654:	dcf2      	bgt.n	801063c <_printf_i+0x210>
 8010656:	e7eb      	b.n	8010630 <_printf_i+0x204>
 8010658:	2500      	movs	r5, #0
 801065a:	f104 0619 	add.w	r6, r4, #25
 801065e:	e7f5      	b.n	801064c <_printf_i+0x220>
 8010660:	08011561 	.word	0x08011561
 8010664:	08011572 	.word	0x08011572

08010668 <memmove>:
 8010668:	4288      	cmp	r0, r1
 801066a:	b510      	push	{r4, lr}
 801066c:	eb01 0402 	add.w	r4, r1, r2
 8010670:	d902      	bls.n	8010678 <memmove+0x10>
 8010672:	4284      	cmp	r4, r0
 8010674:	4623      	mov	r3, r4
 8010676:	d807      	bhi.n	8010688 <memmove+0x20>
 8010678:	1e43      	subs	r3, r0, #1
 801067a:	42a1      	cmp	r1, r4
 801067c:	d008      	beq.n	8010690 <memmove+0x28>
 801067e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010682:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010686:	e7f8      	b.n	801067a <memmove+0x12>
 8010688:	4402      	add	r2, r0
 801068a:	4601      	mov	r1, r0
 801068c:	428a      	cmp	r2, r1
 801068e:	d100      	bne.n	8010692 <memmove+0x2a>
 8010690:	bd10      	pop	{r4, pc}
 8010692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801069a:	e7f7      	b.n	801068c <memmove+0x24>

0801069c <_realloc_r>:
 801069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a0:	4607      	mov	r7, r0
 80106a2:	4614      	mov	r4, r2
 80106a4:	460d      	mov	r5, r1
 80106a6:	b921      	cbnz	r1, 80106b2 <_realloc_r+0x16>
 80106a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106ac:	4611      	mov	r1, r2
 80106ae:	f7ff bbad 	b.w	800fe0c <_malloc_r>
 80106b2:	b92a      	cbnz	r2, 80106c0 <_realloc_r+0x24>
 80106b4:	f7ff fcaa 	bl	801000c <_free_r>
 80106b8:	4625      	mov	r5, r4
 80106ba:	4628      	mov	r0, r5
 80106bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106c0:	f000 f81a 	bl	80106f8 <_malloc_usable_size_r>
 80106c4:	4284      	cmp	r4, r0
 80106c6:	4606      	mov	r6, r0
 80106c8:	d802      	bhi.n	80106d0 <_realloc_r+0x34>
 80106ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80106ce:	d8f4      	bhi.n	80106ba <_realloc_r+0x1e>
 80106d0:	4621      	mov	r1, r4
 80106d2:	4638      	mov	r0, r7
 80106d4:	f7ff fb9a 	bl	800fe0c <_malloc_r>
 80106d8:	4680      	mov	r8, r0
 80106da:	b908      	cbnz	r0, 80106e0 <_realloc_r+0x44>
 80106dc:	4645      	mov	r5, r8
 80106de:	e7ec      	b.n	80106ba <_realloc_r+0x1e>
 80106e0:	42b4      	cmp	r4, r6
 80106e2:	4622      	mov	r2, r4
 80106e4:	4629      	mov	r1, r5
 80106e6:	bf28      	it	cs
 80106e8:	4632      	movcs	r2, r6
 80106ea:	f7ff fc81 	bl	800fff0 <memcpy>
 80106ee:	4629      	mov	r1, r5
 80106f0:	4638      	mov	r0, r7
 80106f2:	f7ff fc8b 	bl	801000c <_free_r>
 80106f6:	e7f1      	b.n	80106dc <_realloc_r+0x40>

080106f8 <_malloc_usable_size_r>:
 80106f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106fc:	1f18      	subs	r0, r3, #4
 80106fe:	2b00      	cmp	r3, #0
 8010700:	bfbc      	itt	lt
 8010702:	580b      	ldrlt	r3, [r1, r0]
 8010704:	18c0      	addlt	r0, r0, r3
 8010706:	4770      	bx	lr

08010708 <_init>:
 8010708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070a:	bf00      	nop
 801070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801070e:	bc08      	pop	{r3}
 8010710:	469e      	mov	lr, r3
 8010712:	4770      	bx	lr

08010714 <_fini>:
 8010714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010716:	bf00      	nop
 8010718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801071a:	bc08      	pop	{r3}
 801071c:	469e      	mov	lr, r3
 801071e:	4770      	bx	lr
