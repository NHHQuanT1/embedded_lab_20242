
Lab_02_1005.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d48  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001650  08004ef8  08004ef8  00005ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006548  08006548  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006550  08006550  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006558  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          0000066c  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006d8  200006d8  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db4f  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002019  00000000  00000000  00015beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00017c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d4  00000000  00000000  000188a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cf3  00000000  00000000  00019274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fcd9  00000000  00000000  0003cf67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d64e0  00000000  00000000  0004cc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123120  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003948  00000000  00000000  00123164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00126aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004ee0 	.word	0x08004ee0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08004ee0 	.word	0x08004ee0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t SH1106_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SH1106_I2C, SH1106_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005d2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80005d6:	2201      	movs	r2, #1
 80005d8:	2178      	movs	r1, #120	@ 0x78
 80005da:	484c      	ldr	r0, [pc, #304]	@ (800070c <SH1106_Init+0x140>)
 80005dc:	f002 f884 	bl	80026e8 <HAL_I2C_IsDeviceReady>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SH1106_Init+0x1e>
		/* Return false */
		return 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e08b      	b.n	8000702 <SH1106_Init+0x136>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005ea:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80005ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005f0:	e002      	b.n	80005f8 <SH1106_Init+0x2c>
		p--;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f9      	bne.n	80005f2 <SH1106_Init+0x26>
	
	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
 80005fe:	22ae      	movs	r2, #174	@ 0xae
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	@ 0x78
 8000604:	f000 fa4c 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
 8000608:	22b0      	movs	r2, #176	@ 0xb0
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	@ 0x78
 800060e:	f000 fa47 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
 8000612:	2281      	movs	r2, #129	@ 0x81
 8000614:	2100      	movs	r1, #0
 8000616:	2078      	movs	r0, #120	@ 0x78
 8000618:	f000 fa42 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
 800061c:	22ff      	movs	r2, #255	@ 0xff
 800061e:	2100      	movs	r1, #0
 8000620:	2078      	movs	r0, #120	@ 0x78
 8000622:	f000 fa3d 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000626:	22a1      	movs	r2, #161	@ 0xa1
 8000628:	2100      	movs	r1, #0
 800062a:	2078      	movs	r0, #120	@ 0x78
 800062c:	f000 fa38 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
 8000630:	22a6      	movs	r2, #166	@ 0xa6
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	@ 0x78
 8000636:	f000 fa33 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800063a:	22a8      	movs	r2, #168	@ 0xa8
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	@ 0x78
 8000640:	f000 fa2e 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
 8000644:	223f      	movs	r2, #63	@ 0x3f
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	@ 0x78
 800064a:	f000 fa29 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
 800064e:	22ad      	movs	r2, #173	@ 0xad
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	@ 0x78
 8000654:	f000 fa24 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
 8000658:	228b      	movs	r2, #139	@ 0x8b
 800065a:	2100      	movs	r1, #0
 800065c:	2078      	movs	r0, #120	@ 0x78
 800065e:	f000 fa1f 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
 8000662:	2232      	movs	r2, #50	@ 0x32
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	@ 0x78
 8000668:	f000 fa1a 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800066c:	22c8      	movs	r2, #200	@ 0xc8
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	@ 0x78
 8000672:	f000 fa15 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
 8000676:	22d3      	movs	r2, #211	@ 0xd3
 8000678:	2100      	movs	r1, #0
 800067a:	2078      	movs	r0, #120	@ 0x78
 800067c:	f000 fa10 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2078      	movs	r0, #120	@ 0x78
 8000686:	f000 fa0b 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800068a:	22d5      	movs	r2, #213	@ 0xd5
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	@ 0x78
 8000690:	f000 fa06 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
 8000694:	2280      	movs	r2, #128	@ 0x80
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	@ 0x78
 800069a:	f000 fa01 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
 800069e:	22d9      	movs	r2, #217	@ 0xd9
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	@ 0x78
 80006a4:	f000 f9fc 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
 80006a8:	221f      	movs	r2, #31
 80006aa:	2100      	movs	r1, #0
 80006ac:	2078      	movs	r0, #120	@ 0x78
 80006ae:	f000 f9f7 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006b2:	22da      	movs	r2, #218	@ 0xda
 80006b4:	2100      	movs	r1, #0
 80006b6:	2078      	movs	r0, #120	@ 0x78
 80006b8:	f000 f9f2 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
 80006bc:	2212      	movs	r2, #18
 80006be:	2100      	movs	r1, #0
 80006c0:	2078      	movs	r0, #120	@ 0x78
 80006c2:	f000 f9ed 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
 80006c6:	22db      	movs	r2, #219	@ 0xdb
 80006c8:	2100      	movs	r1, #0
 80006ca:	2078      	movs	r0, #120	@ 0x78
 80006cc:	f000 f9e8 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
 80006d0:	2240      	movs	r2, #64	@ 0x40
 80006d2:	2100      	movs	r1, #0
 80006d4:	2078      	movs	r0, #120	@ 0x78
 80006d6:	f000 f9e3 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
 80006da:	22af      	movs	r2, #175	@ 0xaf
 80006dc:	2100      	movs	r1, #0
 80006de:	2078      	movs	r0, #120	@ 0x78
 80006e0:	f000 f9de 	bl	8000aa0 <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 f843 	bl	8000770 <SH1106_Fill>
	
	/* Update screen */
	SH1106_UpdateScreen();
 80006ea:	f000 f813 	bl	8000714 <SH1106_UpdateScreen>
	
	/* Set default values */
	SH1106.CurrentX = 0;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <SH1106_Init+0x144>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <SH1106_Init+0x144>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SH1106.Initialized = 1;
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <SH1106_Init+0x144>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000700:	2301      	movs	r3, #1
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000490 	.word	0x20000490
 8000710:	20000488 	.word	0x20000488

08000714 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
 800071e:	e01d      	b.n	800075c <SH1106_UpdateScreen+0x48>
		SH1106_WRITECOMMAND(0xB0 + m);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	3b50      	subs	r3, #80	@ 0x50
 8000724:	b2db      	uxtb	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	2078      	movs	r0, #120	@ 0x78
 800072c:	f000 f9b8 	bl	8000aa0 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2078      	movs	r0, #120	@ 0x78
 8000736:	f000 f9b3 	bl	8000aa0 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 800073a:	2210      	movs	r2, #16
 800073c:	2100      	movs	r1, #0
 800073e:	2078      	movs	r0, #120	@ 0x78
 8000740:	f000 f9ae 	bl	8000aa0 <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	01db      	lsls	r3, r3, #7
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <SH1106_UpdateScreen+0x58>)
 800074a:	441a      	add	r2, r3
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	2140      	movs	r1, #64	@ 0x40
 8000750:	2078      	movs	r0, #120	@ 0x78
 8000752:	f000 f93f 	bl	80009d4 <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	3301      	adds	r3, #1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9de      	bls.n	8000720 <SH1106_UpdateScreen+0xc>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000088 	.word	0x20000088

08000770 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <SH1106_Fill+0x14>
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <SH1106_Fill+0x16>
 8000784:	23ff      	movs	r3, #255	@ 0xff
 8000786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800078a:	4619      	mov	r1, r3
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <SH1106_Fill+0x2c>)
 800078e:	f003 ff29 	bl	80045e4 <memset>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000088 	.word	0x20000088

080007a0 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]
 80007aa:	460b      	mov	r3, r1
 80007ac:	80bb      	strh	r3, [r7, #4]
 80007ae:	4613      	mov	r3, r2
 80007b0:	70fb      	strb	r3, [r7, #3]
	if (
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007b6:	d848      	bhi.n	800084a <SH1106_DrawPixel+0xaa>
		x >= SH1106_WIDTH ||
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80007bc:	d845      	bhi.n	800084a <SH1106_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <SH1106_DrawPixel+0xb8>)
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf0c      	ite	eq
 80007cc:	2301      	moveq	r3, #1
 80007ce:	2300      	movne	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d11a      	bne.n	8000810 <SH1106_DrawPixel+0x70>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 80007da:	88fa      	ldrh	r2, [r7, #6]
 80007dc:	88bb      	ldrh	r3, [r7, #4]
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	b298      	uxth	r0, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	01db      	lsls	r3, r3, #7
 80007e6:	4413      	add	r3, r2
 80007e8:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <SH1106_DrawPixel+0xbc>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	f003 0307 	and.w	r3, r3, #7
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b259      	sxtb	r1, r3
 8000800:	88fa      	ldrh	r2, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	01db      	lsls	r3, r3, #7
 8000806:	4413      	add	r3, r2
 8000808:	b2c9      	uxtb	r1, r1
 800080a:	4a14      	ldr	r2, [pc, #80]	@ (800085c <SH1106_DrawPixel+0xbc>)
 800080c:	54d1      	strb	r1, [r2, r3]
 800080e:	e01d      	b.n	800084c <SH1106_DrawPixel+0xac>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 8000810:	88fa      	ldrh	r2, [r7, #6]
 8000812:	88bb      	ldrh	r3, [r7, #4]
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	b298      	uxth	r0, r3
 8000818:	4603      	mov	r3, r0
 800081a:	01db      	lsls	r3, r3, #7
 800081c:	4413      	add	r3, r2
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <SH1106_DrawPixel+0xbc>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	b25a      	sxtb	r2, r3
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	b25b      	sxtb	r3, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4013      	ands	r3, r2
 8000838:	b259      	sxtb	r1, r3
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	4603      	mov	r3, r0
 800083e:	01db      	lsls	r3, r3, #7
 8000840:	4413      	add	r3, r2
 8000842:	b2c9      	uxtb	r1, r1
 8000844:	4a05      	ldr	r2, [pc, #20]	@ (800085c <SH1106_DrawPixel+0xbc>)
 8000846:	54d1      	strb	r1, [r2, r3]
 8000848:	e000      	b.n	800084c <SH1106_DrawPixel+0xac>
		return;
 800084a:	bf00      	nop
	}
}
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000488 	.word	0x20000488
 800085c:	20000088 	.word	0x20000088

08000860 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	80fb      	strh	r3, [r7, #6]
 800086c:	4613      	mov	r3, r2
 800086e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 8000870:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <SH1106_GotoXY+0x28>)
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <SH1106_GotoXY+0x28>)
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	8053      	strh	r3, [r2, #2]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	20000488 	.word	0x20000488

0800088c <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 800089c:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <SH1106_Putc+0xf8>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
	if (
 80008a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008aa:	dc07      	bgt.n	80008bc <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 80008ac:	4b35      	ldr	r3, [pc, #212]	@ (8000984 <SH1106_Putc+0xf8>)
 80008ae:	885b      	ldrh	r3, [r3, #2]
 80008b0:	461a      	mov	r2, r3
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 80008b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ba:	dd01      	ble.n	80008c0 <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	e05d      	b.n	800097c <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e04b      	b.n	800095e <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b20      	subs	r3, #32
 80008ce:	6839      	ldr	r1, [r7, #0]
 80008d0:	7849      	ldrb	r1, [r1, #1]
 80008d2:	fb01 f303 	mul.w	r3, r1, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	440b      	add	r3, r1
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	e030      	b.n	800094c <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d010      	beq.n	800091c <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <SH1106_Putc+0xf8>)
 80008fc:	881a      	ldrh	r2, [r3, #0]
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	b29b      	uxth	r3, r3
 8000902:	4413      	add	r3, r2
 8000904:	b298      	uxth	r0, r3
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <SH1106_Putc+0xf8>)
 8000908:	885a      	ldrh	r2, [r3, #2]
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	b29b      	uxth	r3, r3
 800090e:	4413      	add	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	4619      	mov	r1, r3
 8000916:	f7ff ff43 	bl	80007a0 <SH1106_DrawPixel>
 800091a:	e014      	b.n	8000946 <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <SH1106_Putc+0xf8>)
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	b29b      	uxth	r3, r3
 8000924:	4413      	add	r3, r2
 8000926:	b298      	uxth	r0, r3
 8000928:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <SH1106_Putc+0xf8>)
 800092a:	885a      	ldrh	r2, [r3, #2]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	b29b      	uxth	r3, r3
 8000930:	4413      	add	r3, r2
 8000932:	b299      	uxth	r1, r3
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf0c      	ite	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	2300      	movne	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	461a      	mov	r2, r3
 8000942:	f7ff ff2d 	bl	80007a0 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	3301      	adds	r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4293      	cmp	r3, r2
 8000956:	d3c8      	bcc.n	80008ea <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3301      	adds	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	785b      	ldrb	r3, [r3, #1]
 8000962:	461a      	mov	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	4293      	cmp	r3, r2
 8000968:	d3ad      	bcc.n	80008c6 <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <SH1106_Putc+0xf8>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	4413      	add	r3, r2
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <SH1106_Putc+0xf8>)
 8000978:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800097a:	79fb      	ldrb	r3, [r7, #7]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000488 	.word	0x20000488

08000988 <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	4613      	mov	r3, r2
 8000994:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000996:	e012      	b.n	80009be <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	68b9      	ldr	r1, [r7, #8]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff73 	bl	800088c <SH1106_Putc>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d002      	beq.n	80009b8 <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	e008      	b.n	80009ca <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1e8      	bne.n	8000998 <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	781b      	ldrb	r3, [r3, #0]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x8D);
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b0c7      	sub	sp, #284	@ 0x11c
 80009d8:	af02      	add	r7, sp, #8
 80009da:	4604      	mov	r4, r0
 80009dc:	4608      	mov	r0, r1
 80009de:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80009e2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80009e6:	600a      	str	r2, [r1, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009ee:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80009f2:	4622      	mov	r2, r4
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009fa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80009fe:	4602      	mov	r2, r0
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a0a:	460a      	mov	r2, r1
 8000a0c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a16:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a1a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000a1e:	7812      	ldrb	r2, [r2, #0]
 8000a20:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a28:	e015      	b.n	8000a56 <SH1106_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a2a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a2e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a32:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	441a      	add	r2, r3
 8000a3a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a3e:	3301      	adds	r3, #1
 8000a40:	7811      	ldrb	r1, [r2, #0]
 8000a42:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a46:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a4a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a4c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a50:	3301      	adds	r3, #1
 8000a52:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a56:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a60:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a64:	8812      	ldrh	r2, [r2, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d8df      	bhi.n	8000a2a <SH1106_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 8000a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a6e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b299      	uxth	r1, r3
 8000a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	f107 020c 	add.w	r2, r7, #12
 8000a88:	200a      	movs	r0, #10
 8000a8a:	9000      	str	r0, [sp, #0]
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <SH1106_I2C_WriteMulti+0xc8>)
 8000a8e:	f001 fa01 	bl	8001e94 <HAL_I2C_Master_Transmit>
}
 8000a92:	bf00      	nop
 8000a94:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	20000490 	.word	0x20000490

08000aa0 <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	71bb      	strb	r3, [r7, #6]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ab6:	797b      	ldrb	r3, [r7, #5]
 8000ab8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	b299      	uxth	r1, r3
 8000abe:	f107 020c 	add.w	r2, r7, #12
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <SH1106_I2C_Write+0x38>)
 8000aca:	f001 f9e3 	bl	8001e94 <HAL_I2C_Master_Transmit>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000490 	.word	0x20000490

08000adc <I2C_Scan>:
    uint8_t year;
};

// Hàm quét địa chỉ I2C để kiểm tra thiết bị
void I2C_Scan(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	@ 0x38
 8000ae0:	af00      	add	r7, sp, #0
    char uart_buf[50];
    int i;
    HAL_StatusTypeDef result;

    sprintf(uart_buf, "Scanning I2C bus...\r\n");
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4929      	ldr	r1, [pc, #164]	@ (8000b8c <I2C_Scan+0xb0>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fd5a 	bl	80045a0 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 8000aec:	463b      	mov	r3, r7
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb7e 	bl	80001f0 <strlen>
 8000af4:	4603      	mov	r3, r0
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4639      	mov	r1, r7
 8000afa:	2364      	movs	r3, #100	@ 0x64
 8000afc:	4824      	ldr	r0, [pc, #144]	@ (8000b90 <I2C_Scan+0xb4>)
 8000afe:	f003 f994 	bl	8003e2a <HAL_UART_Transmit>

    for(i=1; i<128; i++)
 8000b02:	2301      	movs	r3, #1
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b06:	e026      	b.n	8000b56 <I2C_Scan+0x7a>
    {
        result = HAL_I2C_IsDeviceReady(&hi2c3, (uint16_t)(i<<1), 2, 10);
 8000b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	b299      	uxth	r1, r3
 8000b10:	230a      	movs	r3, #10
 8000b12:	2202      	movs	r2, #2
 8000b14:	481f      	ldr	r0, [pc, #124]	@ (8000b94 <I2C_Scan+0xb8>)
 8000b16:	f001 fde7 	bl	80026e8 <HAL_I2C_IsDeviceReady>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (result == HAL_OK)
 8000b20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d113      	bne.n	8000b50 <I2C_Scan+0x74>
        {
            sprintf(uart_buf, "0x%02X found!\r\n", i);
 8000b28:	463b      	mov	r3, r7
 8000b2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b2c:	491a      	ldr	r1, [pc, #104]	@ (8000b98 <I2C_Scan+0xbc>)
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f003 fd36 	bl	80045a0 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 8000b34:	463b      	mov	r3, r7
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fb5a 	bl	80001f0 <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4639      	mov	r1, r7
 8000b42:	2364      	movs	r3, #100	@ 0x64
 8000b44:	4812      	ldr	r0, [pc, #72]	@ (8000b90 <I2C_Scan+0xb4>)
 8000b46:	f003 f970 	bl	8003e2a <HAL_UART_Transmit>
            I2C_Scan_Status = 1;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <I2C_Scan+0xc0>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
    for(i=1; i<128; i++)
 8000b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b52:	3301      	adds	r3, #1
 8000b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b58:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b5a:	ddd5      	ble.n	8000b08 <I2C_Scan+0x2c>
        }
    }

    if(I2C_Scan_Status == 0)
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <I2C_Scan+0xc0>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10f      	bne.n	8000b84 <I2C_Scan+0xa8>
    {
        sprintf(uart_buf, "No I2C devices found!\r\n");
 8000b64:	463b      	mov	r3, r7
 8000b66:	490e      	ldr	r1, [pc, #56]	@ (8000ba0 <I2C_Scan+0xc4>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 fd19 	bl	80045a0 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fb3d 	bl	80001f0 <strlen>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	4639      	mov	r1, r7
 8000b7c:	2364      	movs	r3, #100	@ 0x64
 8000b7e:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <I2C_Scan+0xb4>)
 8000b80:	f003 f953 	bl	8003e2a <HAL_UART_Transmit>
    }
}
 8000b84:	bf00      	nop
 8000b86:	3738      	adds	r7, #56	@ 0x38
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08004ef8 	.word	0x08004ef8
 8000b90:	2000053c 	.word	0x2000053c
 8000b94:	20000490 	.word	0x20000490
 8000b98:	08004f10 	.word	0x08004f10
 8000b9c:	20000584 	.word	0x20000584
 8000ba0:	08004f20 	.word	0x08004f20

08000ba4 <SetTime>:

// Hàm đặt thời gian cho DS1307
void SetTime(struct Time *time)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	@ 0x50
 8000ba8:	af04      	add	r7, sp, #16
 8000baa:	6078      	str	r0, [r7, #4]
    // Ghi dữ liệu thời gian vào DS1307
    // 0xD0: địa chỉ ghi DS1307, 0: địa chỉ register bắt đầu, 7: số byte ghi
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write(&hi2c3, DS1307_I2C_ADDR, 0, 1, (uint8_t *)time, 7, 1000);
 8000bac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	21d0      	movs	r1, #208	@ 0xd0
 8000bc0:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <SetTime+0x64>)
 8000bc2:	f001 fa65 	bl	8002090 <HAL_I2C_Mem_Write>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    if (status != HAL_OK) {
 8000bcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d014      	beq.n	8000bfe <SetTime+0x5a>
        char buf[50];
        sprintf(buf, "DS1307 Write Error: %d\r\n", status);
 8000bd4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	490b      	ldr	r1, [pc, #44]	@ (8000c0c <SetTime+0x68>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fcde 	bl	80045a0 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fb01 	bl	80001f0 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f107 010c 	add.w	r1, r7, #12
 8000bf6:	2364      	movs	r3, #100	@ 0x64
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <SetTime+0x6c>)
 8000bfa:	f003 f916 	bl	8003e2a <HAL_UART_Transmit>
    }
}
 8000bfe:	bf00      	nop
 8000c00:	3740      	adds	r7, #64	@ 0x40
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000490 	.word	0x20000490
 8000c0c:	08004f38 	.word	0x08004f38
 8000c10:	2000053c 	.word	0x2000053c

08000c14 <GetTime>:

// Hàm đọc thời gian từ DS1307
void GetTime(struct Time *time)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	@ 0x50
 8000c18:	af04      	add	r7, sp, #16
 8000c1a:	6078      	str	r0, [r7, #4]
    // Đọc dữ liệu thời gian từ DS1307
    // 0xD1: địa chỉ đọc DS1307, 0: địa chỉ register bắt đầu, 7: số byte đọc
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(&hi2c3, DS1307_I2C_ADDR | 0x01, 0, 1, (uint8_t *)time, 7, 1000);
 8000c1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c20:	9302      	str	r3, [sp, #8]
 8000c22:	2307      	movs	r3, #7
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	21d1      	movs	r1, #209	@ 0xd1
 8000c30:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <GetTime+0x64>)
 8000c32:	f001 fb27 	bl	8002284 <HAL_I2C_Mem_Read>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    if (status != HAL_OK) {
 8000c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d014      	beq.n	8000c6e <GetTime+0x5a>
        char buf[50];
        sprintf(buf, "DS1307 Read Error: %d\r\n", status);
 8000c44:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	490b      	ldr	r1, [pc, #44]	@ (8000c7c <GetTime+0x68>)
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 fca6 	bl	80045a0 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fac9 	bl	80001f0 <strlen>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	f107 010c 	add.w	r1, r7, #12
 8000c66:	2364      	movs	r3, #100	@ 0x64
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <GetTime+0x6c>)
 8000c6a:	f003 f8de 	bl	8003e2a <HAL_UART_Transmit>
    }
}
 8000c6e:	bf00      	nop
 8000c70:	3740      	adds	r7, #64	@ 0x40
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000490 	.word	0x20000490
 8000c7c:	08004f54 	.word	0x08004f54
 8000c80:	2000053c 	.word	0x2000053c

08000c84 <OLED_Check>:

// Hàm kiểm tra trạng thái OLED
uint8_t OLED_Check(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    if (HAL_I2C_IsDeviceReady(&hi2c3, SH1106_I2C_ADDR, 3, 100) == HAL_OK)
 8000c88:	2364      	movs	r3, #100	@ 0x64
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	2178      	movs	r1, #120	@ 0x78
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <OLED_Check+0x20>)
 8000c90:	f001 fd2a 	bl	80026e8 <HAL_I2C_IsDeviceReady>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <OLED_Check+0x1a>
        return 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <OLED_Check+0x1c>
    return 0;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000490 	.word	0x20000490

08000ca8 <DisplayTimeOnSH1106>:

// Hàm hiển thị thời gian lên màn hình SH1106
void DisplayTimeOnSH1106(struct Time *time)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	@ 0x50
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6078      	str	r0, [r7, #4]
    char timeStr[30];
    char dateStr[30];

    // Xóa màn hình trước khi hiển thị
    SH1106_Fill(0);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fd5d 	bl	8000770 <SH1106_Fill>

    // Hiển thị tiêu đề
    SH1106_GotoXY(5, 0);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2005      	movs	r0, #5
 8000cba:	f7ff fdd1 	bl	8000860 <SH1106_GotoXY>
    SH1106_Puts("DS1307 CLOCK", &Font_7x10, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	491e      	ldr	r1, [pc, #120]	@ (8000d3c <DisplayTimeOnSH1106+0x94>)
 8000cc2:	481f      	ldr	r0, [pc, #124]	@ (8000d40 <DisplayTimeOnSH1106+0x98>)
 8000cc4:	f7ff fe60 	bl	8000988 <SH1106_Puts>

    // Hiển thị thời gian
    sprintf(timeStr, "%02x:%02x:%02x", time->hour, time->min, time->sec);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	789b      	ldrb	r3, [r3, #2]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4918      	ldr	r1, [pc, #96]	@ (8000d44 <DisplayTimeOnSH1106+0x9c>)
 8000ce2:	f003 fc5d 	bl	80045a0 <siprintf>
    SH1106_GotoXY(15, 20);
 8000ce6:	2114      	movs	r1, #20
 8000ce8:	200f      	movs	r0, #15
 8000cea:	f7ff fdb9 	bl	8000860 <SH1106_GotoXY>
    SH1106_Puts(timeStr, &Font_11x18, 1);
 8000cee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4914      	ldr	r1, [pc, #80]	@ (8000d48 <DisplayTimeOnSH1106+0xa0>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fe46 	bl	8000988 <SH1106_Puts>

    // Hiển thị ngày tháng
    sprintf(dateStr, "%02x/%02x/20%02x", time->day, time->month, time->year);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	791b      	ldrb	r3, [r3, #4]
 8000d00:	461a      	mov	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	795b      	ldrb	r3, [r3, #5]
 8000d06:	4619      	mov	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	799b      	ldrb	r3, [r3, #6]
 8000d0c:	f107 0008 	add.w	r0, r7, #8
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	460b      	mov	r3, r1
 8000d14:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <DisplayTimeOnSH1106+0xa4>)
 8000d16:	f003 fc43 	bl	80045a0 <siprintf>
    SH1106_GotoXY(15, 45);
 8000d1a:	212d      	movs	r1, #45	@ 0x2d
 8000d1c:	200f      	movs	r0, #15
 8000d1e:	f7ff fd9f 	bl	8000860 <SH1106_GotoXY>
    SH1106_Puts(dateStr, &Font_7x10, 1);
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	2201      	movs	r2, #1
 8000d28:	4904      	ldr	r1, [pc, #16]	@ (8000d3c <DisplayTimeOnSH1106+0x94>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fe2c 	bl	8000988 <SH1106_Puts>

    // Cập nhật màn hình
    SH1106_UpdateScreen();
 8000d30:	f7ff fcf0 	bl	8000714 <SH1106_UpdateScreen>
}
 8000d34:	bf00      	nop
 8000d36:	3748      	adds	r7, #72	@ 0x48
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	08004f6c 	.word	0x08004f6c
 8000d44:	08004f7c 	.word	0x08004f7c
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	08004f8c 	.word	0x08004f8c

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d52:	b0b9      	sub	sp, #228	@ 0xe4
 8000d54:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fc17 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f8dd 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 f9eb 	bl	8001138 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000d62:	f000 f949 	bl	8000ff8 <MX_I2C3_Init>
  MX_SPI4_Init();
 8000d66:	f000 f987 	bl	8001078 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000d6a:	f000 f9bb 	bl	80010e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Gửi thông báo khởi động qua UART
  char uart_buf[50];
  sprintf(uart_buf, "System starting...\r\n");
 8000d6e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d72:	495f      	ldr	r1, [pc, #380]	@ (8000ef0 <main+0x1a0>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fc13 	bl	80045a0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 8000d7a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fa36 	bl	80001f0 <strlen>
 8000d84:	4603      	mov	r3, r0
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8000d8c:	2364      	movs	r3, #100	@ 0x64
 8000d8e:	4859      	ldr	r0, [pc, #356]	@ (8000ef4 <main+0x1a4>)
 8000d90:	f003 f84b 	bl	8003e2a <HAL_UART_Transmit>

  // Quét thiết bị I2C
  I2C_Scan();
 8000d94:	f7ff fea2 	bl	8000adc <I2C_Scan>

  // Kiểm tra màn hình OLED
  if (OLED_Check()) {
 8000d98:	f7ff ff74 	bl	8000c84 <OLED_Check>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d013      	beq.n	8000dca <main+0x7a>
      sprintf(uart_buf, "OLED found. Initializing...\r\n");
 8000da2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000da6:	4954      	ldr	r1, [pc, #336]	@ (8000ef8 <main+0x1a8>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fbf9 	bl	80045a0 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 8000dae:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fa1c 	bl	80001f0 <strlen>
 8000db8:	4603      	mov	r3, r0
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8000dc0:	2364      	movs	r3, #100	@ 0x64
 8000dc2:	484c      	ldr	r0, [pc, #304]	@ (8000ef4 <main+0x1a4>)
 8000dc4:	f003 f831 	bl	8003e2a <HAL_UART_Transmit>
 8000dc8:	e012      	b.n	8000df0 <main+0xa0>
  } else {
      sprintf(uart_buf, "OLED not found!\r\n");
 8000dca:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000dce:	494b      	ldr	r1, [pc, #300]	@ (8000efc <main+0x1ac>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 fbe5 	bl	80045a0 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, strlen(uart_buf), 100);
 8000dd6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fa08 	bl	80001f0 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8000de8:	2364      	movs	r3, #100	@ 0x64
 8000dea:	4842      	ldr	r0, [pc, #264]	@ (8000ef4 <main+0x1a4>)
 8000dec:	f003 f81d 	bl	8003e2a <HAL_UART_Transmit>
  }

  // Khởi tạo màn hình SH1106
  SH1106_Init();
 8000df0:	f7ff fbec 	bl	80005cc <SH1106_Init>

  // Hiển thị màn hình khởi động
  char buf[100];
  sprintf(buf, "%s", "RC522 RFID");
 8000df4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000df8:	4a41      	ldr	r2, [pc, #260]	@ (8000f00 <main+0x1b0>)
 8000dfa:	4942      	ldr	r1, [pc, #264]	@ (8000f04 <main+0x1b4>)
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 fbcf 	bl	80045a0 <siprintf>
  SH1106_GotoXY(12, 10);
 8000e02:	210a      	movs	r1, #10
 8000e04:	200c      	movs	r0, #12
 8000e06:	f7ff fd2b 	bl	8000860 <SH1106_GotoXY>
  SH1106_Puts(buf, &Font_11x18, 1);
 8000e0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e0e:	2201      	movs	r2, #1
 8000e10:	493d      	ldr	r1, [pc, #244]	@ (8000f08 <main+0x1b8>)
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fdb8 	bl	8000988 <SH1106_Puts>
  SH1106_UpdateScreen();
 8000e18:	f7ff fc7c 	bl	8000714 <SH1106_UpdateScreen>
  HAL_Delay(2000);
 8000e1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e20:	f000 fc24 	bl	800166c <HAL_Delay>

  // Thử hiển thị nội dung khác để kiểm tra màn hình
  SH1106_Fill(0);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fca3 	bl	8000770 <SH1106_Fill>
  SH1106_GotoXY(0, 0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fd17 	bl	8000860 <SH1106_GotoXY>
  SH1106_Puts("TESTING OLED", &Font_7x10, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	4935      	ldr	r1, [pc, #212]	@ (8000f0c <main+0x1bc>)
 8000e36:	4836      	ldr	r0, [pc, #216]	@ (8000f10 <main+0x1c0>)
 8000e38:	f7ff fda6 	bl	8000988 <SH1106_Puts>
  SH1106_UpdateScreen();
 8000e3c:	f7ff fc6a 	bl	8000714 <SH1106_UpdateScreen>
  HAL_Delay(1000);
 8000e40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e44:	f000 fc12 	bl	800166c <HAL_Delay>

  // Khởi tạo và thiết lập thời gian ban đầu (chỉ làm 1 lần)
  struct Time timeInit;
  timeInit.sec = 0x00;      // 00 giây (BCD format)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  timeInit.min = 0x00;      // 00 phút
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  timeInit.hour = 0x12;     // 12 giờ
 8000e54:	2312      	movs	r3, #18
 8000e56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  timeInit.day = 0x10;      // Ngày 10
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  timeInit.month = 0x05;    // Tháng 5
 8000e60:	2305      	movs	r3, #5
 8000e62:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  timeInit.year = 0x25;     // Năm 2025
 8000e66:	2325      	movs	r3, #37	@ 0x25
 8000e68:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  timeInit.weekday = 0x06;  // Thứ 6
 8000e6c:	2306      	movs	r3, #6
 8000e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  // Thiết lập thời gian cho DS1307 (chỉ cần thực hiện 1 lần)
  // Bỏ comment dòng dưới nếu muốn đặt lại thời gian
  SetTime(&timeInit);
 8000e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fe94 	bl	8000ba4 <SetTime>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Đọc thời gian hiện tại từ DS1307
    GetTime(&currentTime);
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fec7 	bl	8000c14 <GetTime>

    // Hiển thị thời gian lên màn hình SH1106
    DisplayTimeOnSH1106(&currentTime);
 8000e86:	f107 0320 	add.w	r3, r7, #32
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff0c 	bl	8000ca8 <DisplayTimeOnSH1106>

    // Hiển thị thời gian qua UART (cho mục đích debug)
    char buff[30];
    sprintf(buff, "%02x:%02x:%02x-%02x-%02x/%02x/%02x \r\n",
            currentTime.hour,
 8000e90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
    sprintf(buff, "%02x:%02x:%02x-%02x-%02x/%02x/%02x \r\n",
 8000e94:	461e      	mov	r6, r3
            currentTime.min,
 8000e96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
    sprintf(buff, "%02x:%02x:%02x-%02x-%02x/%02x/%02x \r\n",
 8000e9a:	469c      	mov	ip, r3
            currentTime.sec,
 8000e9c:	f897 3020 	ldrb.w	r3, [r7, #32]
            currentTime.weekday,
 8000ea0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
            currentTime.day,
 8000ea4:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
            currentTime.month,
 8000ea8:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
    sprintf(buff, "%02x:%02x:%02x-%02x-%02x/%02x/%02x \r\n",
 8000eac:	4604      	mov	r4, r0
            currentTime.year);
 8000eae:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
    sprintf(buff, "%02x:%02x:%02x-%02x-%02x/%02x/%02x \r\n",
 8000eb2:	4605      	mov	r5, r0
 8000eb4:	4638      	mov	r0, r7
 8000eb6:	9504      	str	r5, [sp, #16]
 8000eb8:	9403      	str	r4, [sp, #12]
 8000eba:	9102      	str	r1, [sp, #8]
 8000ebc:	9201      	str	r2, [sp, #4]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	4663      	mov	r3, ip
 8000ec2:	4632      	mov	r2, r6
 8000ec4:	4913      	ldr	r1, [pc, #76]	@ (8000f14 <main+0x1c4>)
 8000ec6:	f003 fb6b 	bl	80045a0 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), 1000);
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff f98f 	bl	80001f0 <strlen>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4639      	mov	r1, r7
 8000ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000edc:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <main+0x1a4>)
 8000ede:	f002 ffa4 	bl	8003e2a <HAL_UART_Transmit>

    // Delay 500ms trước khi cập nhật lại
    HAL_Delay(500);
 8000ee2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ee6:	f000 fbc1 	bl	800166c <HAL_Delay>
  {
 8000eea:	bf00      	nop
 8000eec:	e7c6      	b.n	8000e7c <main+0x12c>
 8000eee:	bf00      	nop
 8000ef0:	08004fa0 	.word	0x08004fa0
 8000ef4:	2000053c 	.word	0x2000053c
 8000ef8:	08004fb8 	.word	0x08004fb8
 8000efc:	08004fd8 	.word	0x08004fd8
 8000f00:	08004fec 	.word	0x08004fec
 8000f04:	08004ff8 	.word	0x08004ff8
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	08004ffc 	.word	0x08004ffc
 8000f14:	0800500c 	.word	0x0800500c

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	@ 0x50
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	2230      	movs	r2, #48	@ 0x30
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fb5c 	bl	80045e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <SystemClock_Config+0xd8>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff0 <SystemClock_Config+0xd8>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <SystemClock_Config+0xd8>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ff4 <SystemClock_Config+0xdc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a24      	ldr	r2, [pc, #144]	@ (8000ff4 <SystemClock_Config+0xdc>)
 8000f62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <SystemClock_Config+0xdc>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f80:	2302      	movs	r3, #2
 8000f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f88:	2308      	movs	r3, #8
 8000f8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f8c:	23b4      	movs	r3, #180	@ 0xb4
 8000f8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f94:	2304      	movs	r3, #4
 8000f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 f9d3 	bl	8003348 <HAL_RCC_OscConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fa8:	f000 f924 	bl	80011f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fac:	f002 f97c 	bl	80032a8 <HAL_PWREx_EnableOverDrive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fb6:	f000 f91d 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2105      	movs	r1, #5
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fc2d 	bl	8003838 <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fe4:	f000 f906 	bl	80011f4 <Error_Handler>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3750      	adds	r7, #80	@ 0x50
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <MX_I2C3_Init+0x74>)
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <MX_I2C3_Init+0x78>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <MX_I2C3_Init+0x74>)
 8001004:	4a1b      	ldr	r2, [pc, #108]	@ (8001074 <MX_I2C3_Init+0x7c>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001008:	4b18      	ldr	r3, [pc, #96]	@ (800106c <MX_I2C3_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800100e:	4b17      	ldr	r3, [pc, #92]	@ (800106c <MX_I2C3_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001014:	4b15      	ldr	r3, [pc, #84]	@ (800106c <MX_I2C3_Init+0x74>)
 8001016:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800101a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <MX_I2C3_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <MX_I2C3_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001028:	4b10      	ldr	r3, [pc, #64]	@ (800106c <MX_I2C3_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <MX_I2C3_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001034:	480d      	ldr	r0, [pc, #52]	@ (800106c <MX_I2C3_Init+0x74>)
 8001036:	f000 fde9 	bl	8001c0c <HAL_I2C_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001040:	f000 f8d8 	bl	80011f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	4809      	ldr	r0, [pc, #36]	@ (800106c <MX_I2C3_Init+0x74>)
 8001048:	f002 f8b2 	bl	80031b0 <HAL_I2CEx_ConfigAnalogFilter>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001052:	f000 f8cf 	bl	80011f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	4804      	ldr	r0, [pc, #16]	@ (800106c <MX_I2C3_Init+0x74>)
 800105a:	f002 f8e5 	bl	8003228 <HAL_I2CEx_ConfigDigitalFilter>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 f8c6 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000490 	.word	0x20000490
 8001070:	40005c00 	.word	0x40005c00
 8001074:	000186a0 	.word	0x000186a0

08001078 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_SPI4_Init+0x64>)
 800107e:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <MX_SPI4_Init+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_SPI4_Init+0x64>)
 8001084:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001088:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_SPI4_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_SPI4_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_SPI4_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <MX_SPI4_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <MX_SPI4_Init+0x64>)
 80010a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <MX_SPI4_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <MX_SPI4_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <MX_SPI4_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <MX_SPI4_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <MX_SPI4_Init+0x64>)
 80010c4:	220a      	movs	r2, #10
 80010c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <MX_SPI4_Init+0x64>)
 80010ca:	f002 fdd5 	bl	8003c78 <HAL_SPI_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80010d4:	f000 f88e 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200004e4 	.word	0x200004e4
 80010e0:	40013400 	.word	0x40013400

080010e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <MX_USART1_UART_Init+0x50>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 800111c:	f002 fe35 	bl	8003d8a <HAL_UART_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001126:	f000 f865 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000053c 	.word	0x2000053c
 8001134:	40011000 	.word	0x40011000

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b26      	ldr	r3, [pc, #152]	@ (80011ec <MX_GPIO_Init+0xb4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a25      	ldr	r2, [pc, #148]	@ (80011ec <MX_GPIO_Init+0xb4>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <MX_GPIO_Init+0xb4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <MX_GPIO_Init+0xb4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a1e      	ldr	r2, [pc, #120]	@ (80011ec <MX_GPIO_Init+0xb4>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <MX_GPIO_Init+0xb4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <MX_GPIO_Init+0xb4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a17      	ldr	r2, [pc, #92]	@ (80011ec <MX_GPIO_Init+0xb4>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <MX_GPIO_Init+0xb4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <MX_GPIO_Init+0xb4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <MX_GPIO_Init+0xb4>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <MX_GPIO_Init+0xb4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2110      	movs	r1, #16
 80011c2:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <MX_GPIO_Init+0xb8>)
 80011c4:	f000 fd08 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011c8:	2310      	movs	r3, #16
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <MX_GPIO_Init+0xb8>)
 80011e0:	f000 fb4e 	bl	8001880 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	@ 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40021000 	.word	0x40021000

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <Error_Handler+0x8>

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	4a0f      	ldr	r2, [pc, #60]	@ (800124c <HAL_MspInit+0x4c>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001214:	6453      	str	r3, [r2, #68]	@ 0x44
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <HAL_MspInit+0x4c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a08      	ldr	r2, [pc, #32]	@ (800124c <HAL_MspInit+0x4c>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a29      	ldr	r2, [pc, #164]	@ (8001314 <HAL_I2C_MspInit+0xc4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d14b      	bne.n	800130a <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b28      	ldr	r3, [pc, #160]	@ (8001318 <HAL_I2C_MspInit+0xc8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a27      	ldr	r2, [pc, #156]	@ (8001318 <HAL_I2C_MspInit+0xc8>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <HAL_I2C_MspInit+0xc8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <HAL_I2C_MspInit+0xc8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a20      	ldr	r2, [pc, #128]	@ (8001318 <HAL_I2C_MspInit+0xc8>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <HAL_I2C_MspInit+0xc8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4815      	ldr	r0, [pc, #84]	@ (800131c <HAL_I2C_MspInit+0xcc>)
 80012c8:	f000 fada 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d2:	2312      	movs	r3, #18
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012de:	2304      	movs	r3, #4
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	480d      	ldr	r0, [pc, #52]	@ (8001320 <HAL_I2C_MspInit+0xd0>)
 80012ea:	f000 fac9 	bl	8001880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_I2C_MspInit+0xc8>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <HAL_I2C_MspInit+0xc8>)
 80012f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_I2C_MspInit+0xc8>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40005c00 	.word	0x40005c00
 8001318:	40023800 	.word	0x40023800
 800131c:	40020800 	.word	0x40020800
 8001320:	40020000 	.word	0x40020000

08001324 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a19      	ldr	r2, [pc, #100]	@ (80013a8 <HAL_SPI_MspInit+0x84>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12b      	bne.n	800139e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001350:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001354:	6453      	str	r3, [r2, #68]	@ 0x44
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a10      	ldr	r2, [pc, #64]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800137e:	2364      	movs	r3, #100	@ 0x64
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800138e:	2305      	movs	r3, #5
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <HAL_SPI_MspInit+0x8c>)
 800139a:	f000 fa71 	bl	8001880 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40013400 	.word	0x40013400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	@ (8001438 <HAL_UART_MspInit+0x84>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12c      	bne.n	8001430 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_UART_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800140e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001420:	2307      	movs	r3, #7
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <HAL_UART_MspInit+0x8c>)
 800142c:	f000 fa28 	bl	8001880 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	@ 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40011000 	.word	0x40011000
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <NMI_Handler+0x4>

0800144c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <UsageFault_Handler+0x4>

0800146c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f000 f8c7 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	@ (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f003 f88e 	bl	80045f4 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20030000 	.word	0x20030000
 8001504:	00000400 	.word	0x00000400
 8001508:	20000588 	.word	0x20000588
 800150c:	200006d8 	.word	0x200006d8

08001510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <SystemInit+0x20>)
 8001516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151a:	4a05      	ldr	r2, [pc, #20]	@ (8001530 <SystemInit+0x20>)
 800151c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800156c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001538:	f7ff ffea 	bl	8001510 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001554:	4c0a      	ldr	r4, [pc, #40]	@ (8001580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001562:	f003 f84d 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fbf3 	bl	8000d50 <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800156c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001578:	08006558 	.word	0x08006558
  ldr r2, =_sbss
 800157c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001580:	200006d8 	.word	0x200006d8

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_Init+0x40>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <HAL_Init+0x40>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_Init+0x40>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 f931 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	200f      	movs	r0, #15
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff fe20 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023c00 	.word	0x40023c00

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f93b 	bl	8001866 <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001608:	f000 f911 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000010 	.word	0x20000010
 8001624:	20000018 	.word	0x20000018
 8001628:	20000014 	.word	0x20000014

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000018 	.word	0x20000018
 8001650:	2000058c 	.word	0x2000058c

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	2000058c 	.word	0x2000058c

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000018 	.word	0x20000018

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	@ (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	@ (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff47 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff5c 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff8e 	bl	800176c <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5d 	bl	8001718 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffb0 	bl	80017d4 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e177      	b.n	8001b8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8166 	bne.w	8001b86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d005      	beq.n	80018d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b03      	cmp	r3, #3
 800193e:	d017      	beq.n	8001970 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80c0 	beq.w	8001b86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b66      	ldr	r3, [pc, #408]	@ (8001ba4 <HAL_GPIO_Init+0x324>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4a65      	ldr	r2, [pc, #404]	@ (8001ba4 <HAL_GPIO_Init+0x324>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a16:	4b63      	ldr	r3, [pc, #396]	@ (8001ba4 <HAL_GPIO_Init+0x324>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a22:	4a61      	ldr	r2, [pc, #388]	@ (8001ba8 <HAL_GPIO_Init+0x328>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a58      	ldr	r2, [pc, #352]	@ (8001bac <HAL_GPIO_Init+0x32c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d037      	beq.n	8001abe <HAL_GPIO_Init+0x23e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a57      	ldr	r2, [pc, #348]	@ (8001bb0 <HAL_GPIO_Init+0x330>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d031      	beq.n	8001aba <HAL_GPIO_Init+0x23a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a56      	ldr	r2, [pc, #344]	@ (8001bb4 <HAL_GPIO_Init+0x334>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d02b      	beq.n	8001ab6 <HAL_GPIO_Init+0x236>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a55      	ldr	r2, [pc, #340]	@ (8001bb8 <HAL_GPIO_Init+0x338>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d025      	beq.n	8001ab2 <HAL_GPIO_Init+0x232>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a54      	ldr	r2, [pc, #336]	@ (8001bbc <HAL_GPIO_Init+0x33c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01f      	beq.n	8001aae <HAL_GPIO_Init+0x22e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a53      	ldr	r2, [pc, #332]	@ (8001bc0 <HAL_GPIO_Init+0x340>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x22a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	@ (8001bc4 <HAL_GPIO_Init+0x344>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a51      	ldr	r2, [pc, #324]	@ (8001bc8 <HAL_GPIO_Init+0x348>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x222>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a50      	ldr	r2, [pc, #320]	@ (8001bcc <HAL_GPIO_Init+0x34c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x21e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd0 <HAL_GPIO_Init+0x350>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x21a>
 8001a96:	2309      	movs	r3, #9
 8001a98:	e012      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001a9a:	230a      	movs	r3, #10
 8001a9c:	e010      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	e00e      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	e00c      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	e00a      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001aaa:	2305      	movs	r3, #5
 8001aac:	e008      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e004      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x240>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f002 0203 	and.w	r2, r2, #3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4093      	lsls	r3, r2
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad0:	4935      	ldr	r1, [pc, #212]	@ (8001ba8 <HAL_GPIO_Init+0x328>)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ade:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b02:	4a34      	ldr	r2, [pc, #208]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b08:	4b32      	ldr	r3, [pc, #200]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b2c:	4a29      	ldr	r2, [pc, #164]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b32:	4b28      	ldr	r3, [pc, #160]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b56:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b80:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <HAL_GPIO_Init+0x354>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	f67f ae84 	bls.w	800189c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40021400 	.word	0x40021400
 8001bc4:	40021800 	.word	0x40021800
 8001bc8:	40021c00 	.word	0x40021c00
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40022400 	.word	0x40022400
 8001bd4:	40013c00 	.word	0x40013c00

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	041a      	lsls	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e12b      	b.n	8001e76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fb0c 	bl	8001250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2224      	movs	r2, #36	@ 0x24
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c70:	f001 ffda 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8001c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a81      	ldr	r2, [pc, #516]	@ (8001e80 <HAL_I2C_Init+0x274>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d807      	bhi.n	8001c90 <HAL_I2C_Init+0x84>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4a80      	ldr	r2, [pc, #512]	@ (8001e84 <HAL_I2C_Init+0x278>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	bf94      	ite	ls
 8001c88:	2301      	movls	r3, #1
 8001c8a:	2300      	movhi	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e006      	b.n	8001c9e <HAL_I2C_Init+0x92>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a7d      	ldr	r2, [pc, #500]	@ (8001e88 <HAL_I2C_Init+0x27c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	bf94      	ite	ls
 8001c98:	2301      	movls	r3, #1
 8001c9a:	2300      	movhi	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0e7      	b.n	8001e76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4a78      	ldr	r2, [pc, #480]	@ (8001e8c <HAL_I2C_Init+0x280>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0c9b      	lsrs	r3, r3, #18
 8001cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e80 <HAL_I2C_Init+0x274>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d802      	bhi.n	8001ce0 <HAL_I2C_Init+0xd4>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	e009      	b.n	8001cf4 <HAL_I2C_Init+0xe8>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	4a69      	ldr	r2, [pc, #420]	@ (8001e90 <HAL_I2C_Init+0x284>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	495c      	ldr	r1, [pc, #368]	@ (8001e80 <HAL_I2C_Init+0x274>)
 8001d10:	428b      	cmp	r3, r1
 8001d12:	d819      	bhi.n	8001d48 <HAL_I2C_Init+0x13c>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1e59      	subs	r1, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d22:	1c59      	adds	r1, r3, #1
 8001d24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d28:	400b      	ands	r3, r1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <HAL_I2C_Init+0x138>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1e59      	subs	r1, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d42:	e051      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e04f      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d111      	bne.n	8001d74 <HAL_I2C_Init+0x168>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e58      	subs	r0, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	440b      	add	r3, r1
 8001d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e012      	b.n	8001d9a <HAL_I2C_Init+0x18e>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1e58      	subs	r0, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	0099      	lsls	r1, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf0c      	ite	eq
 8001d94:	2301      	moveq	r3, #1
 8001d96:	2300      	movne	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Init+0x196>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e022      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10e      	bne.n	8001dc8 <HAL_I2C_Init+0x1bc>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e58      	subs	r0, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	440b      	add	r3, r1
 8001db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dc6:	e00f      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1e58      	subs	r0, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	0099      	lsls	r1, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	6809      	ldr	r1, [r1, #0]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6911      	ldr	r1, [r2, #16]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68d2      	ldr	r2, [r2, #12]
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	000186a0 	.word	0x000186a0
 8001e84:	001e847f 	.word	0x001e847f
 8001e88:	003d08ff 	.word	0x003d08ff
 8001e8c:	431bde83 	.word	0x431bde83
 8001e90:	10624dd3 	.word	0x10624dd3

08001e94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	817b      	strh	r3, [r7, #10]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff fbd4 	bl	8001654 <HAL_GetTick>
 8001eac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	f040 80e0 	bne.w	800207c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2319      	movs	r3, #25
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4970      	ldr	r1, [pc, #448]	@ (8002088 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 ff3c 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e0d3      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_I2C_Master_Transmit+0x50>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e0cc      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d007      	beq.n	8001f0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2221      	movs	r2, #33	@ 0x21
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2210      	movs	r2, #16
 8001f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	893a      	ldrh	r2, [r7, #8]
 8001f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a50      	ldr	r2, [pc, #320]	@ (800208c <HAL_I2C_Master_Transmit+0x1f8>)
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f4c:	8979      	ldrh	r1, [r7, #10]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	6a3a      	ldr	r2, [r7, #32]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fcf6 	bl	8002944 <I2C_MasterRequestWrite>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e08d      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f78:	e066      	b.n	8002048 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fffa 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00d      	beq.n	8001fa6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d107      	bne.n	8001fa2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06b      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d11b      	bne.n	800201c <HAL_I2C_Master_Transmit+0x188>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d017      	beq.n	800201c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	6a39      	ldr	r1, [r7, #32]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fff1 	bl	8003008 <I2C_WaitOnBTFFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00d      	beq.n	8002048 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	2b04      	cmp	r3, #4
 8002032:	d107      	bne.n	8002044 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002042:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e01a      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	d194      	bne.n	8001f7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	00100002 	.word	0x00100002
 800208c:	ffff0000 	.word	0xffff0000

08002090 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	461a      	mov	r2, r3
 800209e:	4603      	mov	r3, r0
 80020a0:	817b      	strh	r3, [r7, #10]
 80020a2:	460b      	mov	r3, r1
 80020a4:	813b      	strh	r3, [r7, #8]
 80020a6:	4613      	mov	r3, r2
 80020a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020aa:	f7ff fad3 	bl	8001654 <HAL_GetTick>
 80020ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	f040 80d9 	bne.w	8002270 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2319      	movs	r3, #25
 80020c4:	2201      	movs	r2, #1
 80020c6:	496d      	ldr	r1, [pc, #436]	@ (800227c <HAL_I2C_Mem_Write+0x1ec>)
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fe3b 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
 80020d6:	e0cc      	b.n	8002272 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_I2C_Mem_Write+0x56>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e0c5      	b.n	8002272 <HAL_I2C_Mem_Write+0x1e2>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d007      	beq.n	800210c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800211a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2221      	movs	r2, #33	@ 0x21
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2240      	movs	r2, #64	@ 0x40
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a3a      	ldr	r2, [r7, #32]
 8002136:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800213c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4a4d      	ldr	r2, [pc, #308]	@ (8002280 <HAL_I2C_Mem_Write+0x1f0>)
 800214c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800214e:	88f8      	ldrh	r0, [r7, #6]
 8002150:	893a      	ldrh	r2, [r7, #8]
 8002152:	8979      	ldrh	r1, [r7, #10]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4603      	mov	r3, r0
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fc72 	bl	8002a48 <I2C_RequestMemoryWrite>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d052      	beq.n	8002210 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e081      	b.n	8002272 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 ff00 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00d      	beq.n	800219a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	2b04      	cmp	r3, #4
 8002184:	d107      	bne.n	8002196 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002194:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06b      	b.n	8002272 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	781a      	ldrb	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d11b      	bne.n	8002210 <HAL_I2C_Mem_Write+0x180>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d017      	beq.n	8002210 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1aa      	bne.n	800216e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fef3 	bl	8003008 <I2C_WaitOnBTFFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	2b04      	cmp	r3, #4
 800222e:	d107      	bne.n	8002240 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e016      	b.n	8002272 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e000      	b.n	8002272 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
  }
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	00100002 	.word	0x00100002
 8002280:	ffff0000 	.word	0xffff0000

08002284 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	@ 0x30
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	4608      	mov	r0, r1
 800228e:	4611      	mov	r1, r2
 8002290:	461a      	mov	r2, r3
 8002292:	4603      	mov	r3, r0
 8002294:	817b      	strh	r3, [r7, #10]
 8002296:	460b      	mov	r3, r1
 8002298:	813b      	strh	r3, [r7, #8]
 800229a:	4613      	mov	r3, r2
 800229c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800229e:	f7ff f9d9 	bl	8001654 <HAL_GetTick>
 80022a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	f040 8214 	bne.w	80026da <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2319      	movs	r3, #25
 80022b8:	2201      	movs	r2, #1
 80022ba:	497b      	ldr	r1, [pc, #492]	@ (80024a8 <HAL_I2C_Mem_Read+0x224>)
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 fd41 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022c8:	2302      	movs	r3, #2
 80022ca:	e207      	b.n	80026dc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_I2C_Mem_Read+0x56>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e200      	b.n	80026dc <HAL_I2C_Mem_Read+0x458>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d007      	beq.n	8002300 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800230e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2222      	movs	r2, #34	@ 0x22
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2240      	movs	r2, #64	@ 0x40
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800232a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002330:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a5b      	ldr	r2, [pc, #364]	@ (80024ac <HAL_I2C_Mem_Read+0x228>)
 8002340:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002342:	88f8      	ldrh	r0, [r7, #6]
 8002344:	893a      	ldrh	r2, [r7, #8]
 8002346:	8979      	ldrh	r1, [r7, #10]
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4603      	mov	r3, r0
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fc0e 	bl	8002b74 <I2C_RequestMemoryRead>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1bc      	b.n	80026dc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002366:	2b00      	cmp	r3, #0
 8002368:	d113      	bne.n	8002392 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	e190      	b.n	80026b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002396:	2b01      	cmp	r3, #1
 8002398:	d11b      	bne.n	80023d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e170      	b.n	80026b4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d11b      	bne.n	8002412 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	e150      	b.n	80026b4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002428:	e144      	b.n	80026b4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242e:	2b03      	cmp	r3, #3
 8002430:	f200 80f1 	bhi.w	8002616 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002438:	2b01      	cmp	r3, #1
 800243a:	d123      	bne.n	8002484 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fe29 	bl	8003098 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e145      	b.n	80026dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002482:	e117      	b.n	80026b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002488:	2b02      	cmp	r3, #2
 800248a:	d14e      	bne.n	800252a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002492:	2200      	movs	r2, #0
 8002494:	4906      	ldr	r1, [pc, #24]	@ (80024b0 <HAL_I2C_Mem_Read+0x22c>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fc54 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e11a      	b.n	80026dc <HAL_I2C_Mem_Read+0x458>
 80024a6:	bf00      	nop
 80024a8:	00100002 	.word	0x00100002
 80024ac:	ffff0000 	.word	0xffff0000
 80024b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002528:	e0c4      	b.n	80026b4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002530:	2200      	movs	r2, #0
 8002532:	496c      	ldr	r1, [pc, #432]	@ (80026e4 <HAL_I2C_Mem_Read+0x460>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fc05 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0cb      	b.n	80026dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258c:	2200      	movs	r2, #0
 800258e:	4955      	ldr	r1, [pc, #340]	@ (80026e4 <HAL_I2C_Mem_Read+0x460>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fbd7 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e09d      	b.n	80026dc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002614:	e04e      	b.n	80026b4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002618:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fd3c 	bl	8003098 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e058      	b.n	80026dc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d124      	bne.n	80026b4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266e:	2b03      	cmp	r3, #3
 8002670:	d107      	bne.n	8002682 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002680:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f47f aeb6 	bne.w	800242a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80026da:	2302      	movs	r3, #2
  }
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3728      	adds	r7, #40	@ 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	00010004 	.word	0x00010004

080026e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	@ 0x28
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7fe ffac 	bl	8001654 <HAL_GetTick>
 80026fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	f040 8111 	bne.w	8002932 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2319      	movs	r3, #25
 8002716:	2201      	movs	r2, #1
 8002718:	4988      	ldr	r1, [pc, #544]	@ (800293c <HAL_I2C_IsDeviceReady+0x254>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fb12 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
 8002728:	e104      	b.n	8002934 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_I2C_IsDeviceReady+0x50>
 8002734:	2302      	movs	r3, #2
 8002736:	e0fd      	b.n	8002934 <HAL_I2C_IsDeviceReady+0x24c>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d007      	beq.n	800275e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800276c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2224      	movs	r2, #36	@ 0x24
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a70      	ldr	r2, [pc, #448]	@ (8002940 <HAL_I2C_IsDeviceReady+0x258>)
 8002780:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002790:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2200      	movs	r2, #0
 800279a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fad0 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027b8:	d103      	bne.n	80027c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0b6      	b.n	8002934 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027c6:	897b      	ldrh	r3, [r7, #10]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027d6:	f7fe ff3d 	bl	8001654 <HAL_GetTick>
 80027da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800280a:	e025      	b.n	8002858 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800280c:	f7fe ff22 	bl	8001654 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d302      	bcc.n	8002822 <HAL_I2C_IsDeviceReady+0x13a>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d103      	bne.n	800282a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	22a0      	movs	r2, #160	@ 0xa0
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b02      	cmp	r3, #2
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2ba0      	cmp	r3, #160	@ 0xa0
 8002862:	d005      	beq.n	8002870 <HAL_I2C_IsDeviceReady+0x188>
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d102      	bne.n	8002870 <HAL_I2C_IsDeviceReady+0x188>
 800286a:	7dbb      	ldrb	r3, [r7, #22]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0cd      	beq.n	800280c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d129      	bne.n	80028da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002894:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2319      	movs	r3, #25
 80028b2:	2201      	movs	r2, #1
 80028b4:	4921      	ldr	r1, [pc, #132]	@ (800293c <HAL_I2C_IsDeviceReady+0x254>)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fa44 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e036      	b.n	8002934 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e02c      	b.n	8002934 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2319      	movs	r3, #25
 80028fa:	2201      	movs	r2, #1
 80028fc:	490f      	ldr	r1, [pc, #60]	@ (800293c <HAL_I2C_IsDeviceReady+0x254>)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa20 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e012      	b.n	8002934 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	3301      	adds	r3, #1
 8002912:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	f4ff af32 	bcc.w	8002782 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002932:	2302      	movs	r3, #2
  }
}
 8002934:	4618      	mov	r0, r3
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	00100002 	.word	0x00100002
 8002940:	ffff0000 	.word	0xffff0000

08002944 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	460b      	mov	r3, r1
 8002952:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d006      	beq.n	800296e <I2C_MasterRequestWrite+0x2a>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d003      	beq.n	800296e <I2C_MasterRequestWrite+0x2a>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800296c:	d108      	bne.n	8002980 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e00b      	b.n	8002998 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	2b12      	cmp	r3, #18
 8002986:	d107      	bne.n	8002998 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002996:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f9cd 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00d      	beq.n	80029cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029be:	d103      	bne.n	80029c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e035      	b.n	8002a38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029d4:	d108      	bne.n	80029e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029e4:	611a      	str	r2, [r3, #16]
 80029e6:	e01b      	b.n	8002a20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029e8:	897b      	ldrh	r3, [r7, #10]
 80029ea:	11db      	asrs	r3, r3, #7
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f003 0306 	and.w	r3, r3, #6
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f063 030f 	orn	r3, r3, #15
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	490e      	ldr	r1, [pc, #56]	@ (8002a40 <I2C_MasterRequestWrite+0xfc>)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fa16 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e010      	b.n	8002a38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a16:	897b      	ldrh	r3, [r7, #10]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4907      	ldr	r1, [pc, #28]	@ (8002a44 <I2C_MasterRequestWrite+0x100>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fa06 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	00010008 	.word	0x00010008
 8002a44:	00010002 	.word	0x00010002

08002a48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	4608      	mov	r0, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	817b      	strh	r3, [r7, #10]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	813b      	strh	r3, [r7, #8]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f960 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a98:	d103      	bne.n	8002aa2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e05f      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ab4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	492d      	ldr	r1, [pc, #180]	@ (8002b70 <I2C_RequestMemoryWrite+0x128>)
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f9bb 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e04c      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae4:	6a39      	ldr	r1, [r7, #32]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fa46 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d107      	bne.n	8002b0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e02b      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b14:	893b      	ldrh	r3, [r7, #8]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	611a      	str	r2, [r3, #16]
 8002b1e:	e021      	b.n	8002b64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b20:	893b      	ldrh	r3, [r7, #8]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b30:	6a39      	ldr	r1, [r7, #32]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fa20 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d107      	bne.n	8002b56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e005      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5a:	893b      	ldrh	r3, [r7, #8]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	00010002 	.word	0x00010002

08002b74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4603      	mov	r3, r0
 8002b84:	817b      	strh	r3, [r7, #10]
 8002b86:	460b      	mov	r3, r1
 8002b88:	813b      	strh	r3, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f8c2 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd4:	d103      	bne.n	8002bde <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0aa      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002be2:	897b      	ldrh	r3, [r7, #10]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	4952      	ldr	r1, [pc, #328]	@ (8002d40 <I2C_RequestMemoryRead+0x1cc>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f91d 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e097      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c20:	6a39      	ldr	r1, [r7, #32]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f9a8 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d107      	bne.n	8002c46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e076      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c50:	893b      	ldrh	r3, [r7, #8]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	611a      	str	r2, [r3, #16]
 8002c5a:	e021      	b.n	8002ca0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c5c:	893b      	ldrh	r3, [r7, #8]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c6c:	6a39      	ldr	r1, [r7, #32]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f982 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d107      	bne.n	8002c92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e050      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c96:	893b      	ldrh	r3, [r7, #8]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca2:	6a39      	ldr	r1, [r7, #32]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f967 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d107      	bne.n	8002cc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e035      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f82b 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d02:	d103      	bne.n	8002d0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e013      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d10:	897b      	ldrh	r3, [r7, #10]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	6a3a      	ldr	r2, [r7, #32]
 8002d24:	4906      	ldr	r1, [pc, #24]	@ (8002d40 <I2C_RequestMemoryRead+0x1cc>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f886 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	00010002 	.word	0x00010002

08002d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d54:	e048      	b.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d5c:	d044      	beq.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5e:	f7fe fc79 	bl	8001654 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d139      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	0c1b      	lsrs	r3, r3, #16
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10d      	bne.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	e00c      	b.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	43da      	mvns	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4013      	ands	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d116      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e023      	b.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d10d      	bne.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	e00c      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d093      	beq.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e46:	e071      	b.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e56:	d123      	bne.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e067      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ea6:	d041      	beq.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7fe fbd4 	bl	8001654 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d136      	bne.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10c      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	e00b      	b.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e021      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e00b      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f47f af6d 	bne.w	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e034      	b.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8e3 	bl	8003152 <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e034      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f9c:	d028      	beq.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fb59 	bl	8001654 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11d      	bne.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbe:	2b80      	cmp	r3, #128	@ 0x80
 8002fc0:	d016      	beq.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffa:	2b80      	cmp	r3, #128	@ 0x80
 8002ffc:	d1c3      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003014:	e034      	b.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f89b 	bl	8003152 <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e034      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800302c:	d028      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe fb11 	bl	8001654 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11d      	bne.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b04      	cmp	r3, #4
 8003050:	d016      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e007      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d1c3      	bne.n	8003016 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030a4:	e049      	b.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d119      	bne.n	80030e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0210 	mvn.w	r2, #16
 80030bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e030      	b.n	800314a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e8:	f7fe fab4 	bl	8001654 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d302      	bcc.n	80030fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11d      	bne.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003108:	2b40      	cmp	r3, #64	@ 0x40
 800310a:	d016      	beq.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e007      	b.n	800314a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003144:	2b40      	cmp	r3, #64	@ 0x40
 8003146:	d1ae      	bne.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003168:	d11b      	bne.n	80031a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003172:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	f043 0204 	orr.w	r2, r3, #4
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d129      	bne.n	800321a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2224      	movs	r2, #36	@ 0x24
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0210 	bic.w	r2, r2, #16
 80031ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b20      	cmp	r3, #32
 8003240:	d12a      	bne.n	8003298 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2224      	movs	r2, #36	@ 0x24
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	f023 030f 	bic.w	r3, r3, #15
 8003268:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b29a      	uxth	r2, r3
 800326e:	89fb      	ldrh	r3, [r7, #14]
 8003270:	4313      	orrs	r3, r2
 8003272:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	89fa      	ldrh	r2, [r7, #14]
 800327a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4b20      	ldr	r3, [pc, #128]	@ (8003338 <HAL_PWREx_EnableOverDrive+0x90>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003338 <HAL_PWREx_EnableOverDrive+0x90>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003338 <HAL_PWREx_EnableOverDrive+0x90>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032ce:	4b1b      	ldr	r3, [pc, #108]	@ (800333c <HAL_PWREx_EnableOverDrive+0x94>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d4:	f7fe f9be 	bl	8001654 <HAL_GetTick>
 80032d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032da:	e009      	b.n	80032f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032dc:	f7fe f9ba 	bl	8001654 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032ea:	d901      	bls.n	80032f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e01f      	b.n	8003330 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032f0:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032fc:	d1ee      	bne.n	80032dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032fe:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003304:	f7fe f9a6 	bl	8001654 <HAL_GetTick>
 8003308:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800330a:	e009      	b.n	8003320 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800330c:	f7fe f9a2 	bl	8001654 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800331a:	d901      	bls.n	8003320 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e007      	b.n	8003330 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003320:	4b07      	ldr	r3, [pc, #28]	@ (8003340 <HAL_PWREx_EnableOverDrive+0x98>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800332c:	d1ee      	bne.n	800330c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	420e0040 	.word	0x420e0040
 8003340:	40007000 	.word	0x40007000
 8003344:	420e0044 	.word	0x420e0044

08003348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e267      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d075      	beq.n	8003452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003366:	4b88      	ldr	r3, [pc, #544]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d00c      	beq.n	800338c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003372:	4b85      	ldr	r3, [pc, #532]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800337a:	2b08      	cmp	r3, #8
 800337c:	d112      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b82      	ldr	r3, [pc, #520]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	4b7e      	ldr	r3, [pc, #504]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05b      	beq.n	8003450 <HAL_RCC_OscConfig+0x108>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d157      	bne.n	8003450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e242      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x74>
 80033ae:	4b76      	ldr	r3, [pc, #472]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e01d      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x98>
 80033c6:	4b70      	ldr	r3, [pc, #448]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033e0:	4b69      	ldr	r3, [pc, #420]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a68      	ldr	r2, [pc, #416]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b66      	ldr	r3, [pc, #408]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a65      	ldr	r2, [pc, #404]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe f928 	bl	8001654 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fe f924 	bl	8001654 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	@ 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e207      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b5b      	ldr	r3, [pc, #364]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0xc0>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe f914 	bl	8001654 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe f910 	bl	8001654 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1f3      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	4b51      	ldr	r3, [pc, #324]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0xe8>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d063      	beq.n	8003526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800345e:	4b4a      	ldr	r3, [pc, #296]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346a:	4b47      	ldr	r3, [pc, #284]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003472:	2b08      	cmp	r3, #8
 8003474:	d11c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b44      	ldr	r3, [pc, #272]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d116      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	4b41      	ldr	r3, [pc, #260]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e1c7      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349a:	4b3b      	ldr	r3, [pc, #236]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4937      	ldr	r1, [pc, #220]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	e03a      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d020      	beq.n	80034fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b8:	4b34      	ldr	r3, [pc, #208]	@ (800358c <HAL_RCC_OscConfig+0x244>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe f8c9 	bl	8001654 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fe f8c5 	bl	8001654 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1a8      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b28      	ldr	r3, [pc, #160]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4925      	ldr	r1, [pc, #148]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	600b      	str	r3, [r1, #0]
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fa:	4b24      	ldr	r3, [pc, #144]	@ (800358c <HAL_RCC_OscConfig+0x244>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe f8a8 	bl	8001654 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe f8a4 	bl	8001654 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e187      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d036      	beq.n	80035a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <HAL_RCC_OscConfig+0x248>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fe f888 	bl	8001654 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003548:	f7fe f884 	bl	8001654 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e167      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_RCC_OscConfig+0x240>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x200>
 8003566:	e01b      	b.n	80035a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003568:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <HAL_RCC_OscConfig+0x248>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fe f871 	bl	8001654 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	e00e      	b.n	8003594 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003576:	f7fe f86d 	bl	8001654 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d907      	bls.n	8003594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e150      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
 8003588:	40023800 	.word	0x40023800
 800358c:	42470000 	.word	0x42470000
 8003590:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003594:	4b88      	ldr	r3, [pc, #544]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ea      	bne.n	8003576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8097 	beq.w	80036dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b81      	ldr	r3, [pc, #516]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	4b7d      	ldr	r3, [pc, #500]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	4a7c      	ldr	r2, [pc, #496]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ce:	4b7a      	ldr	r3, [pc, #488]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b77      	ldr	r3, [pc, #476]	@ (80037bc <HAL_RCC_OscConfig+0x474>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ea:	4b74      	ldr	r3, [pc, #464]	@ (80037bc <HAL_RCC_OscConfig+0x474>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a73      	ldr	r2, [pc, #460]	@ (80037bc <HAL_RCC_OscConfig+0x474>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f6:	f7fe f82d 	bl	8001654 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fe:	f7fe f829 	bl	8001654 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e10c      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b6a      	ldr	r3, [pc, #424]	@ (80037bc <HAL_RCC_OscConfig+0x474>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x2ea>
 8003624:	4b64      	ldr	r3, [pc, #400]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003628:	4a63      	ldr	r2, [pc, #396]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003630:	e01c      	b.n	800366c <HAL_RCC_OscConfig+0x324>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b05      	cmp	r3, #5
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x30c>
 800363a:	4b5f      	ldr	r3, [pc, #380]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363e:	4a5e      	ldr	r2, [pc, #376]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	6713      	str	r3, [r2, #112]	@ 0x70
 8003646:	4b5c      	ldr	r3, [pc, #368]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	4a5b      	ldr	r2, [pc, #364]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6713      	str	r3, [r2, #112]	@ 0x70
 8003652:	e00b      	b.n	800366c <HAL_RCC_OscConfig+0x324>
 8003654:	4b58      	ldr	r3, [pc, #352]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003658:	4a57      	ldr	r2, [pc, #348]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003660:	4b55      	ldr	r3, [pc, #340]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003664:	4a54      	ldr	r2, [pc, #336]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003666:	f023 0304 	bic.w	r3, r3, #4
 800366a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d015      	beq.n	80036a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7fd ffee 	bl	8001654 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367a:	e00a      	b.n	8003692 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7fd ffea 	bl	8001654 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e0cb      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	4b49      	ldr	r3, [pc, #292]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0ee      	beq.n	800367c <HAL_RCC_OscConfig+0x334>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a0:	f7fd ffd8 	bl	8001654 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fd ffd4 	bl	8001654 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0b5      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036be:	4b3e      	ldr	r3, [pc, #248]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ee      	bne.n	80036a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d105      	bne.n	80036dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d0:	4b39      	ldr	r3, [pc, #228]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	4a38      	ldr	r2, [pc, #224]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80a1 	beq.w	8003828 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e6:	4b34      	ldr	r3, [pc, #208]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d05c      	beq.n	80037ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d141      	bne.n	800377e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fd ffa8 	bl	8001654 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fd ffa4 	bl	8001654 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e087      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b27      	ldr	r3, [pc, #156]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	019b      	lsls	r3, r3, #6
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	491b      	ldr	r1, [pc, #108]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003750:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fd ff7d 	bl	8001654 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7fd ff79 	bl	8001654 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e05c      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003770:	4b11      	ldr	r3, [pc, #68]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x416>
 800377c:	e054      	b.n	8003828 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <HAL_RCC_OscConfig+0x478>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fd ff66 	bl	8001654 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fd ff62 	bl	8001654 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e045      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_RCC_OscConfig+0x470>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x444>
 80037aa:	e03d      	b.n	8003828 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e038      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40007000 	.word	0x40007000
 80037c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003834 <HAL_RCC_OscConfig+0x4ec>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d028      	beq.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d121      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d11a      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	3b01      	subs	r3, #1
 800380e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800

08003838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0cc      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b68      	ldr	r3, [pc, #416]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d90c      	bls.n	8003874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b65      	ldr	r3, [pc, #404]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b63      	ldr	r3, [pc, #396]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0b8      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800388c:	4b59      	ldr	r3, [pc, #356]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a58      	ldr	r2, [pc, #352]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003896:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a4:	4b53      	ldr	r3, [pc, #332]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a52      	ldr	r2, [pc, #328]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b50      	ldr	r3, [pc, #320]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	494d      	ldr	r1, [pc, #308]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d044      	beq.n	8003958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	4b47      	ldr	r3, [pc, #284]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d119      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e07f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b3f      	ldr	r3, [pc, #252]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3b      	ldr	r3, [pc, #236]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e067      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b37      	ldr	r3, [pc, #220]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4934      	ldr	r1, [pc, #208]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd fe94 	bl	8001654 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd fe90 	bl	8001654 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e04f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2b      	ldr	r3, [pc, #172]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b25      	ldr	r3, [pc, #148]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d20c      	bcs.n	8003980 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b22      	ldr	r3, [pc, #136]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b20      	ldr	r3, [pc, #128]	@ (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e032      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4916      	ldr	r1, [pc, #88]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039aa:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	490e      	ldr	r1, [pc, #56]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039be:	f000 f821 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	490a      	ldr	r1, [pc, #40]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	5ccb      	ldrb	r3, [r1, r3]
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	4a09      	ldr	r2, [pc, #36]	@ (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039da:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd fdf4 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023c00 	.word	0x40023c00
 80039f4:	40023800 	.word	0x40023800
 80039f8:	080064fc 	.word	0x080064fc
 80039fc:	20000010 	.word	0x20000010
 8003a00:	20000014 	.word	0x20000014

08003a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a08:	b094      	sub	sp, #80	@ 0x50
 8003a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a1c:	4b79      	ldr	r3, [pc, #484]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d00d      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x40>
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	f200 80e1 	bhi.w	8003bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x34>
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a36:	e0db      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b73      	ldr	r3, [pc, #460]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a3c:	e0db      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3e:	4b73      	ldr	r3, [pc, #460]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a42:	e0d8      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a44:	4b6f      	ldr	r3, [pc, #444]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d063      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	2200      	movs	r2, #0
 8003a62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a6e:	2300      	movs	r3, #0
 8003a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a76:	4622      	mov	r2, r4
 8003a78:	462b      	mov	r3, r5
 8003a7a:	f04f 0000 	mov.w	r0, #0
 8003a7e:	f04f 0100 	mov.w	r1, #0
 8003a82:	0159      	lsls	r1, r3, #5
 8003a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a88:	0150      	lsls	r0, r2, #5
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4621      	mov	r1, r4
 8003a90:	1a51      	subs	r1, r2, r1
 8003a92:	6139      	str	r1, [r7, #16]
 8003a94:	4629      	mov	r1, r5
 8003a96:	eb63 0301 	sbc.w	r3, r3, r1
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	018b      	lsls	r3, r1, #6
 8003aac:	4651      	mov	r1, sl
 8003aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	018a      	lsls	r2, r1, #6
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	ebb2 0801 	subs.w	r8, r2, r1
 8003abc:	4659      	mov	r1, fp
 8003abe:	eb63 0901 	sbc.w	r9, r3, r1
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ad6:	4690      	mov	r8, r2
 8003ad8:	4699      	mov	r9, r3
 8003ada:	4623      	mov	r3, r4
 8003adc:	eb18 0303 	adds.w	r3, r8, r3
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	462b      	mov	r3, r5
 8003ae4:	eb49 0303 	adc.w	r3, r9, r3
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003af6:	4629      	mov	r1, r5
 8003af8:	024b      	lsls	r3, r1, #9
 8003afa:	4621      	mov	r1, r4
 8003afc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b00:	4621      	mov	r1, r4
 8003b02:	024a      	lsls	r2, r1, #9
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b14:	f7fc fbc4 	bl	80002a0 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b20:	e058      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b22:	4b38      	ldr	r3, [pc, #224]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	2200      	movs	r2, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b32:	623b      	str	r3, [r7, #32]
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	f04f 0000 	mov.w	r0, #0
 8003b44:	f04f 0100 	mov.w	r1, #0
 8003b48:	0159      	lsls	r1, r3, #5
 8003b4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b4e:	0150      	lsls	r0, r2, #5
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4641      	mov	r1, r8
 8003b56:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b74:	ebb2 040a 	subs.w	r4, r2, sl
 8003b78:	eb63 050b 	sbc.w	r5, r3, fp
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	00eb      	lsls	r3, r5, #3
 8003b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b8a:	00e2      	lsls	r2, r4, #3
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	461d      	mov	r5, r3
 8003b90:	4643      	mov	r3, r8
 8003b92:	18e3      	adds	r3, r4, r3
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	464b      	mov	r3, r9
 8003b98:	eb45 0303 	adc.w	r3, r5, r3
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003baa:	4629      	mov	r1, r5
 8003bac:	028b      	lsls	r3, r1, #10
 8003bae:	4621      	mov	r1, r4
 8003bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	028a      	lsls	r2, r1, #10
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	61fa      	str	r2, [r7, #28]
 8003bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc8:	f7fc fb6a 	bl	80002a0 <__aeabi_uldivmod>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	3301      	adds	r3, #1
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003be4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bee:	e002      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3750      	adds	r7, #80	@ 0x50
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	00f42400 	.word	0x00f42400
 8003c0c:	007a1200 	.word	0x007a1200

08003c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c14:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000010 	.word	0x20000010

08003c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c2c:	f7ff fff0 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0a9b      	lsrs	r3, r3, #10
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4903      	ldr	r1, [pc, #12]	@ (8003c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	0800650c 	.word	0x0800650c

08003c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c54:	f7ff ffdc 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0b5b      	lsrs	r3, r3, #13
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	@ (8003c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	0800650c 	.word	0x0800650c

08003c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e07b      	b.n	8003d82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d108      	bne.n	8003ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c9a:	d009      	beq.n	8003cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	61da      	str	r2, [r3, #28]
 8003ca2:	e005      	b.n	8003cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd fb2a 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ce6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d34:	ea42 0103 	orr.w	r1, r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	f003 0104 	and.w	r1, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	f003 0210 	and.w	r2, r3, #16
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e042      	b.n	8003e22 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d106      	bne.n	8003db6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7fd faff 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2224      	movs	r2, #36	@ 0x24
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f972 	bl	80040b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003de2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003df2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b08a      	sub	sp, #40	@ 0x28
 8003e2e:	af02      	add	r7, sp, #8
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d175      	bne.n	8003f36 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_UART_Transmit+0x2c>
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e06e      	b.n	8003f38 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2221      	movs	r2, #33	@ 0x21
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e68:	f7fd fbf4 	bl	8001654 <HAL_GetTick>
 8003e6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e82:	d108      	bne.n	8003e96 <HAL_UART_Transmit+0x6c>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	e003      	b.n	8003e9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e9e:	e02e      	b.n	8003efe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2180      	movs	r1, #128	@ 0x80
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f848 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e03a      	b.n	8003f38 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	3302      	adds	r3, #2
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	e007      	b.n	8003ef0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	781a      	ldrb	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3301      	adds	r3, #1
 8003eee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1cb      	bne.n	8003ea0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2140      	movs	r1, #64	@ 0x40
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f814 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e006      	b.n	8003f38 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f50:	e03b      	b.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f58:	d037      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7fd fb7b 	bl	8001654 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e03a      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d023      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b80      	cmp	r3, #128	@ 0x80
 8003f86:	d020      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b40      	cmp	r3, #64	@ 0x40
 8003f8c:	d01d      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d116      	bne.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f81d 	bl	8003ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2208      	movs	r2, #8
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e00f      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d0b4      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b095      	sub	sp, #84	@ 0x54
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004010:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800401a:	643a      	str	r2, [r7, #64]	@ 0x40
 800401c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004020:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3314      	adds	r3, #20
 8004034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	61fb      	str	r3, [r7, #28]
   return(result);
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3314      	adds	r3, #20
 800404c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800404e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004050:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e5      	bne.n	800402e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	2b01      	cmp	r3, #1
 8004068:	d119      	bne.n	800409e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	60bb      	str	r3, [r7, #8]
   return(result);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f023 0310 	bic.w	r3, r3, #16
 8004080:	647b      	str	r3, [r7, #68]	@ 0x44
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800408a:	61ba      	str	r2, [r7, #24]
 800408c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6979      	ldr	r1, [r7, #20]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	613b      	str	r3, [r7, #16]
   return(result);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040ac:	bf00      	nop
 80040ae:	3754      	adds	r7, #84	@ 0x54
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040bc:	b0c0      	sub	sp, #256	@ 0x100
 80040be:	af00      	add	r7, sp, #0
 80040c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	68d9      	ldr	r1, [r3, #12]
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	ea40 0301 	orr.w	r3, r0, r1
 80040e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004110:	f021 010c 	bic.w	r1, r1, #12
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800411e:	430b      	orrs	r3, r1
 8004120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004132:	6999      	ldr	r1, [r3, #24]
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	ea40 0301 	orr.w	r3, r0, r1
 800413e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b8f      	ldr	r3, [pc, #572]	@ (8004384 <UART_SetConfig+0x2cc>)
 8004148:	429a      	cmp	r2, r3
 800414a:	d005      	beq.n	8004158 <UART_SetConfig+0xa0>
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b8d      	ldr	r3, [pc, #564]	@ (8004388 <UART_SetConfig+0x2d0>)
 8004154:	429a      	cmp	r2, r3
 8004156:	d104      	bne.n	8004162 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7ff fd7a 	bl	8003c50 <HAL_RCC_GetPCLK2Freq>
 800415c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004160:	e003      	b.n	800416a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004162:	f7ff fd61 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8004166:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004174:	f040 810c 	bne.w	8004390 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800417c:	2200      	movs	r2, #0
 800417e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004182:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004186:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	1891      	adds	r1, r2, r2
 8004190:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004192:	415b      	adcs	r3, r3
 8004194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004196:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800419a:	4621      	mov	r1, r4
 800419c:	eb12 0801 	adds.w	r8, r2, r1
 80041a0:	4629      	mov	r1, r5
 80041a2:	eb43 0901 	adc.w	r9, r3, r1
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ba:	4690      	mov	r8, r2
 80041bc:	4699      	mov	r9, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	eb18 0303 	adds.w	r3, r8, r3
 80041c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041c8:	462b      	mov	r3, r5
 80041ca:	eb49 0303 	adc.w	r3, r9, r3
 80041ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041e6:	460b      	mov	r3, r1
 80041e8:	18db      	adds	r3, r3, r3
 80041ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80041ec:	4613      	mov	r3, r2
 80041ee:	eb42 0303 	adc.w	r3, r2, r3
 80041f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80041f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041fc:	f7fc f850 	bl	80002a0 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4b61      	ldr	r3, [pc, #388]	@ (800438c <UART_SetConfig+0x2d4>)
 8004206:	fba3 2302 	umull	r2, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	011c      	lsls	r4, r3, #4
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004218:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800421c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004228:	415b      	adcs	r3, r3
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004230:	4641      	mov	r1, r8
 8004232:	eb12 0a01 	adds.w	sl, r2, r1
 8004236:	4649      	mov	r1, r9
 8004238:	eb43 0b01 	adc.w	fp, r3, r1
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004248:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800424c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004250:	4692      	mov	sl, r2
 8004252:	469b      	mov	fp, r3
 8004254:	4643      	mov	r3, r8
 8004256:	eb1a 0303 	adds.w	r3, sl, r3
 800425a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800425e:	464b      	mov	r3, r9
 8004260:	eb4b 0303 	adc.w	r3, fp, r3
 8004264:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004274:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004278:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800427c:	460b      	mov	r3, r1
 800427e:	18db      	adds	r3, r3, r3
 8004280:	643b      	str	r3, [r7, #64]	@ 0x40
 8004282:	4613      	mov	r3, r2
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	647b      	str	r3, [r7, #68]	@ 0x44
 800428a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800428e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004292:	f7fc f805 	bl	80002a0 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4611      	mov	r1, r2
 800429c:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <UART_SetConfig+0x2d4>)
 800429e:	fba3 2301 	umull	r2, r3, r3, r1
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2264      	movs	r2, #100	@ 0x64
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	1acb      	subs	r3, r1, r3
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042b2:	4b36      	ldr	r3, [pc, #216]	@ (800438c <UART_SetConfig+0x2d4>)
 80042b4:	fba3 2302 	umull	r2, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042c0:	441c      	add	r4, r3
 80042c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	1891      	adds	r1, r2, r2
 80042da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042dc:	415b      	adcs	r3, r3
 80042de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042e4:	4641      	mov	r1, r8
 80042e6:	1851      	adds	r1, r2, r1
 80042e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80042ea:	4649      	mov	r1, r9
 80042ec:	414b      	adcs	r3, r1
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042fc:	4659      	mov	r1, fp
 80042fe:	00cb      	lsls	r3, r1, #3
 8004300:	4651      	mov	r1, sl
 8004302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004306:	4651      	mov	r1, sl
 8004308:	00ca      	lsls	r2, r1, #3
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	4603      	mov	r3, r0
 8004310:	4642      	mov	r2, r8
 8004312:	189b      	adds	r3, r3, r2
 8004314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004318:	464b      	mov	r3, r9
 800431a:	460a      	mov	r2, r1
 800431c:	eb42 0303 	adc.w	r3, r2, r3
 8004320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004330:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004338:	460b      	mov	r3, r1
 800433a:	18db      	adds	r3, r3, r3
 800433c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800433e:	4613      	mov	r3, r2
 8004340:	eb42 0303 	adc.w	r3, r2, r3
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800434a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800434e:	f7fb ffa7 	bl	80002a0 <__aeabi_uldivmod>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <UART_SetConfig+0x2d4>)
 8004358:	fba3 1302 	umull	r1, r3, r3, r2
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	2164      	movs	r1, #100	@ 0x64
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	3332      	adds	r3, #50	@ 0x32
 800436a:	4a08      	ldr	r2, [pc, #32]	@ (800438c <UART_SetConfig+0x2d4>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	f003 0207 	and.w	r2, r3, #7
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4422      	add	r2, r4
 800437e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004380:	e106      	b.n	8004590 <UART_SetConfig+0x4d8>
 8004382:	bf00      	nop
 8004384:	40011000 	.word	0x40011000
 8004388:	40011400 	.word	0x40011400
 800438c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800439a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800439e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043a2:	4642      	mov	r2, r8
 80043a4:	464b      	mov	r3, r9
 80043a6:	1891      	adds	r1, r2, r2
 80043a8:	6239      	str	r1, [r7, #32]
 80043aa:	415b      	adcs	r3, r3
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043b2:	4641      	mov	r1, r8
 80043b4:	1854      	adds	r4, r2, r1
 80043b6:	4649      	mov	r1, r9
 80043b8:	eb43 0501 	adc.w	r5, r3, r1
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	00eb      	lsls	r3, r5, #3
 80043c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ca:	00e2      	lsls	r2, r4, #3
 80043cc:	4614      	mov	r4, r2
 80043ce:	461d      	mov	r5, r3
 80043d0:	4643      	mov	r3, r8
 80043d2:	18e3      	adds	r3, r4, r3
 80043d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043d8:	464b      	mov	r3, r9
 80043da:	eb45 0303 	adc.w	r3, r5, r3
 80043de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043fe:	4629      	mov	r1, r5
 8004400:	008b      	lsls	r3, r1, #2
 8004402:	4621      	mov	r1, r4
 8004404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004408:	4621      	mov	r1, r4
 800440a:	008a      	lsls	r2, r1, #2
 800440c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004410:	f7fb ff46 	bl	80002a0 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4b60      	ldr	r3, [pc, #384]	@ (800459c <UART_SetConfig+0x4e4>)
 800441a:	fba3 2302 	umull	r2, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	011c      	lsls	r4, r3, #4
 8004422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004426:	2200      	movs	r2, #0
 8004428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800442c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004430:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	1891      	adds	r1, r2, r2
 800443a:	61b9      	str	r1, [r7, #24]
 800443c:	415b      	adcs	r3, r3
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004444:	4641      	mov	r1, r8
 8004446:	1851      	adds	r1, r2, r1
 8004448:	6139      	str	r1, [r7, #16]
 800444a:	4649      	mov	r1, r9
 800444c:	414b      	adcs	r3, r1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800445c:	4659      	mov	r1, fp
 800445e:	00cb      	lsls	r3, r1, #3
 8004460:	4651      	mov	r1, sl
 8004462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004466:	4651      	mov	r1, sl
 8004468:	00ca      	lsls	r2, r1, #3
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	4603      	mov	r3, r0
 8004470:	4642      	mov	r2, r8
 8004472:	189b      	adds	r3, r3, r2
 8004474:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004478:	464b      	mov	r3, r9
 800447a:	460a      	mov	r2, r1
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800448e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800449c:	4649      	mov	r1, r9
 800449e:	008b      	lsls	r3, r1, #2
 80044a0:	4641      	mov	r1, r8
 80044a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a6:	4641      	mov	r1, r8
 80044a8:	008a      	lsls	r2, r1, #2
 80044aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044ae:	f7fb fef7 	bl	80002a0 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	4b38      	ldr	r3, [pc, #224]	@ (800459c <UART_SetConfig+0x4e4>)
 80044ba:	fba3 2301 	umull	r2, r3, r3, r1
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2264      	movs	r2, #100	@ 0x64
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	1acb      	subs	r3, r1, r3
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	3332      	adds	r3, #50	@ 0x32
 80044cc:	4a33      	ldr	r2, [pc, #204]	@ (800459c <UART_SetConfig+0x4e4>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044d8:	441c      	add	r4, r3
 80044da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044de:	2200      	movs	r2, #0
 80044e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80044e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80044e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	415b      	adcs	r3, r3
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f8:	4641      	mov	r1, r8
 80044fa:	1851      	adds	r1, r2, r1
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	4649      	mov	r1, r9
 8004500:	414b      	adcs	r3, r1
 8004502:	607b      	str	r3, [r7, #4]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004510:	4659      	mov	r1, fp
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451a:	4651      	mov	r1, sl
 800451c:	00ca      	lsls	r2, r1, #3
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	4603      	mov	r3, r0
 8004524:	4642      	mov	r2, r8
 8004526:	189b      	adds	r3, r3, r2
 8004528:	66bb      	str	r3, [r7, #104]	@ 0x68
 800452a:	464b      	mov	r3, r9
 800452c:	460a      	mov	r2, r1
 800452e:	eb42 0303 	adc.w	r3, r2, r3
 8004532:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	663b      	str	r3, [r7, #96]	@ 0x60
 800453e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800454c:	4649      	mov	r1, r9
 800454e:	008b      	lsls	r3, r1, #2
 8004550:	4641      	mov	r1, r8
 8004552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004556:	4641      	mov	r1, r8
 8004558:	008a      	lsls	r2, r1, #2
 800455a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800455e:	f7fb fe9f 	bl	80002a0 <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <UART_SetConfig+0x4e4>)
 8004568:	fba3 1302 	umull	r1, r3, r3, r2
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	2164      	movs	r1, #100	@ 0x64
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	3332      	adds	r3, #50	@ 0x32
 800457a:	4a08      	ldr	r2, [pc, #32]	@ (800459c <UART_SetConfig+0x4e4>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	f003 020f 	and.w	r2, r3, #15
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4422      	add	r2, r4
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	bf00      	nop
 8004592:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004596:	46bd      	mov	sp, r7
 8004598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800459c:	51eb851f 	.word	0x51eb851f

080045a0 <siprintf>:
 80045a0:	b40e      	push	{r1, r2, r3}
 80045a2:	b510      	push	{r4, lr}
 80045a4:	b09d      	sub	sp, #116	@ 0x74
 80045a6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80045a8:	9002      	str	r0, [sp, #8]
 80045aa:	9006      	str	r0, [sp, #24]
 80045ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045b0:	480a      	ldr	r0, [pc, #40]	@ (80045dc <siprintf+0x3c>)
 80045b2:	9107      	str	r1, [sp, #28]
 80045b4:	9104      	str	r1, [sp, #16]
 80045b6:	490a      	ldr	r1, [pc, #40]	@ (80045e0 <siprintf+0x40>)
 80045b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80045bc:	9105      	str	r1, [sp, #20]
 80045be:	2400      	movs	r4, #0
 80045c0:	a902      	add	r1, sp, #8
 80045c2:	6800      	ldr	r0, [r0, #0]
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80045c8:	f000 f89c 	bl	8004704 <_svfiprintf_r>
 80045cc:	9b02      	ldr	r3, [sp, #8]
 80045ce:	701c      	strb	r4, [r3, #0]
 80045d0:	b01d      	add	sp, #116	@ 0x74
 80045d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d6:	b003      	add	sp, #12
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	2000001c 	.word	0x2000001c
 80045e0:	ffff0208 	.word	0xffff0208

080045e4 <memset>:
 80045e4:	4402      	add	r2, r0
 80045e6:	4603      	mov	r3, r0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d100      	bne.n	80045ee <memset+0xa>
 80045ec:	4770      	bx	lr
 80045ee:	f803 1b01 	strb.w	r1, [r3], #1
 80045f2:	e7f9      	b.n	80045e8 <memset+0x4>

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	@ (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	2000001c 	.word	0x2000001c

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4d0d      	ldr	r5, [pc, #52]	@ (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	@ (800463c <__libc_init_array+0x3c>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2600      	movs	r6, #0
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4d0b      	ldr	r5, [pc, #44]	@ (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	@ (8004644 <__libc_init_array+0x44>)
 8004614:	f000 fc64 	bl	8004ee0 <_init>
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2600      	movs	r6, #0
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08006550 	.word	0x08006550
 800463c:	08006550 	.word	0x08006550
 8004640:	08006550 	.word	0x08006550
 8004644:	08006554 	.word	0x08006554

08004648 <__retarget_lock_acquire_recursive>:
 8004648:	4770      	bx	lr

0800464a <__retarget_lock_release_recursive>:
 800464a:	4770      	bx	lr

0800464c <__ssputs_r>:
 800464c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004650:	688e      	ldr	r6, [r1, #8]
 8004652:	461f      	mov	r7, r3
 8004654:	42be      	cmp	r6, r7
 8004656:	680b      	ldr	r3, [r1, #0]
 8004658:	4682      	mov	sl, r0
 800465a:	460c      	mov	r4, r1
 800465c:	4690      	mov	r8, r2
 800465e:	d82d      	bhi.n	80046bc <__ssputs_r+0x70>
 8004660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004664:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004668:	d026      	beq.n	80046b8 <__ssputs_r+0x6c>
 800466a:	6965      	ldr	r5, [r4, #20]
 800466c:	6909      	ldr	r1, [r1, #16]
 800466e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004672:	eba3 0901 	sub.w	r9, r3, r1
 8004676:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800467a:	1c7b      	adds	r3, r7, #1
 800467c:	444b      	add	r3, r9
 800467e:	106d      	asrs	r5, r5, #1
 8004680:	429d      	cmp	r5, r3
 8004682:	bf38      	it	cc
 8004684:	461d      	movcc	r5, r3
 8004686:	0553      	lsls	r3, r2, #21
 8004688:	d527      	bpl.n	80046da <__ssputs_r+0x8e>
 800468a:	4629      	mov	r1, r5
 800468c:	f000 f958 	bl	8004940 <_malloc_r>
 8004690:	4606      	mov	r6, r0
 8004692:	b360      	cbz	r0, 80046ee <__ssputs_r+0xa2>
 8004694:	6921      	ldr	r1, [r4, #16]
 8004696:	464a      	mov	r2, r9
 8004698:	f000 fbc2 	bl	8004e20 <memcpy>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046a6:	81a3      	strh	r3, [r4, #12]
 80046a8:	6126      	str	r6, [r4, #16]
 80046aa:	6165      	str	r5, [r4, #20]
 80046ac:	444e      	add	r6, r9
 80046ae:	eba5 0509 	sub.w	r5, r5, r9
 80046b2:	6026      	str	r6, [r4, #0]
 80046b4:	60a5      	str	r5, [r4, #8]
 80046b6:	463e      	mov	r6, r7
 80046b8:	42be      	cmp	r6, r7
 80046ba:	d900      	bls.n	80046be <__ssputs_r+0x72>
 80046bc:	463e      	mov	r6, r7
 80046be:	6820      	ldr	r0, [r4, #0]
 80046c0:	4632      	mov	r2, r6
 80046c2:	4641      	mov	r1, r8
 80046c4:	f000 fb82 	bl	8004dcc <memmove>
 80046c8:	68a3      	ldr	r3, [r4, #8]
 80046ca:	1b9b      	subs	r3, r3, r6
 80046cc:	60a3      	str	r3, [r4, #8]
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	4433      	add	r3, r6
 80046d2:	6023      	str	r3, [r4, #0]
 80046d4:	2000      	movs	r0, #0
 80046d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046da:	462a      	mov	r2, r5
 80046dc:	f000 fb48 	bl	8004d70 <_realloc_r>
 80046e0:	4606      	mov	r6, r0
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d1e0      	bne.n	80046a8 <__ssputs_r+0x5c>
 80046e6:	6921      	ldr	r1, [r4, #16]
 80046e8:	4650      	mov	r0, sl
 80046ea:	f000 fba7 	bl	8004e3c <_free_r>
 80046ee:	230c      	movs	r3, #12
 80046f0:	f8ca 3000 	str.w	r3, [sl]
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004700:	e7e9      	b.n	80046d6 <__ssputs_r+0x8a>
	...

08004704 <_svfiprintf_r>:
 8004704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004708:	4698      	mov	r8, r3
 800470a:	898b      	ldrh	r3, [r1, #12]
 800470c:	061b      	lsls	r3, r3, #24
 800470e:	b09d      	sub	sp, #116	@ 0x74
 8004710:	4607      	mov	r7, r0
 8004712:	460d      	mov	r5, r1
 8004714:	4614      	mov	r4, r2
 8004716:	d510      	bpl.n	800473a <_svfiprintf_r+0x36>
 8004718:	690b      	ldr	r3, [r1, #16]
 800471a:	b973      	cbnz	r3, 800473a <_svfiprintf_r+0x36>
 800471c:	2140      	movs	r1, #64	@ 0x40
 800471e:	f000 f90f 	bl	8004940 <_malloc_r>
 8004722:	6028      	str	r0, [r5, #0]
 8004724:	6128      	str	r0, [r5, #16]
 8004726:	b930      	cbnz	r0, 8004736 <_svfiprintf_r+0x32>
 8004728:	230c      	movs	r3, #12
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004730:	b01d      	add	sp, #116	@ 0x74
 8004732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004736:	2340      	movs	r3, #64	@ 0x40
 8004738:	616b      	str	r3, [r5, #20]
 800473a:	2300      	movs	r3, #0
 800473c:	9309      	str	r3, [sp, #36]	@ 0x24
 800473e:	2320      	movs	r3, #32
 8004740:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004744:	f8cd 800c 	str.w	r8, [sp, #12]
 8004748:	2330      	movs	r3, #48	@ 0x30
 800474a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80048e8 <_svfiprintf_r+0x1e4>
 800474e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004752:	f04f 0901 	mov.w	r9, #1
 8004756:	4623      	mov	r3, r4
 8004758:	469a      	mov	sl, r3
 800475a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800475e:	b10a      	cbz	r2, 8004764 <_svfiprintf_r+0x60>
 8004760:	2a25      	cmp	r2, #37	@ 0x25
 8004762:	d1f9      	bne.n	8004758 <_svfiprintf_r+0x54>
 8004764:	ebba 0b04 	subs.w	fp, sl, r4
 8004768:	d00b      	beq.n	8004782 <_svfiprintf_r+0x7e>
 800476a:	465b      	mov	r3, fp
 800476c:	4622      	mov	r2, r4
 800476e:	4629      	mov	r1, r5
 8004770:	4638      	mov	r0, r7
 8004772:	f7ff ff6b 	bl	800464c <__ssputs_r>
 8004776:	3001      	adds	r0, #1
 8004778:	f000 80a7 	beq.w	80048ca <_svfiprintf_r+0x1c6>
 800477c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800477e:	445a      	add	r2, fp
 8004780:	9209      	str	r2, [sp, #36]	@ 0x24
 8004782:	f89a 3000 	ldrb.w	r3, [sl]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 809f 	beq.w	80048ca <_svfiprintf_r+0x1c6>
 800478c:	2300      	movs	r3, #0
 800478e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004796:	f10a 0a01 	add.w	sl, sl, #1
 800479a:	9304      	str	r3, [sp, #16]
 800479c:	9307      	str	r3, [sp, #28]
 800479e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80047a4:	4654      	mov	r4, sl
 80047a6:	2205      	movs	r2, #5
 80047a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ac:	484e      	ldr	r0, [pc, #312]	@ (80048e8 <_svfiprintf_r+0x1e4>)
 80047ae:	f7fb fd27 	bl	8000200 <memchr>
 80047b2:	9a04      	ldr	r2, [sp, #16]
 80047b4:	b9d8      	cbnz	r0, 80047ee <_svfiprintf_r+0xea>
 80047b6:	06d0      	lsls	r0, r2, #27
 80047b8:	bf44      	itt	mi
 80047ba:	2320      	movmi	r3, #32
 80047bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047c0:	0711      	lsls	r1, r2, #28
 80047c2:	bf44      	itt	mi
 80047c4:	232b      	movmi	r3, #43	@ 0x2b
 80047c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047ca:	f89a 3000 	ldrb.w	r3, [sl]
 80047ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80047d0:	d015      	beq.n	80047fe <_svfiprintf_r+0xfa>
 80047d2:	9a07      	ldr	r2, [sp, #28]
 80047d4:	4654      	mov	r4, sl
 80047d6:	2000      	movs	r0, #0
 80047d8:	f04f 0c0a 	mov.w	ip, #10
 80047dc:	4621      	mov	r1, r4
 80047de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047e2:	3b30      	subs	r3, #48	@ 0x30
 80047e4:	2b09      	cmp	r3, #9
 80047e6:	d94b      	bls.n	8004880 <_svfiprintf_r+0x17c>
 80047e8:	b1b0      	cbz	r0, 8004818 <_svfiprintf_r+0x114>
 80047ea:	9207      	str	r2, [sp, #28]
 80047ec:	e014      	b.n	8004818 <_svfiprintf_r+0x114>
 80047ee:	eba0 0308 	sub.w	r3, r0, r8
 80047f2:	fa09 f303 	lsl.w	r3, r9, r3
 80047f6:	4313      	orrs	r3, r2
 80047f8:	9304      	str	r3, [sp, #16]
 80047fa:	46a2      	mov	sl, r4
 80047fc:	e7d2      	b.n	80047a4 <_svfiprintf_r+0xa0>
 80047fe:	9b03      	ldr	r3, [sp, #12]
 8004800:	1d19      	adds	r1, r3, #4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	9103      	str	r1, [sp, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	bfbb      	ittet	lt
 800480a:	425b      	neglt	r3, r3
 800480c:	f042 0202 	orrlt.w	r2, r2, #2
 8004810:	9307      	strge	r3, [sp, #28]
 8004812:	9307      	strlt	r3, [sp, #28]
 8004814:	bfb8      	it	lt
 8004816:	9204      	strlt	r2, [sp, #16]
 8004818:	7823      	ldrb	r3, [r4, #0]
 800481a:	2b2e      	cmp	r3, #46	@ 0x2e
 800481c:	d10a      	bne.n	8004834 <_svfiprintf_r+0x130>
 800481e:	7863      	ldrb	r3, [r4, #1]
 8004820:	2b2a      	cmp	r3, #42	@ 0x2a
 8004822:	d132      	bne.n	800488a <_svfiprintf_r+0x186>
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	1d1a      	adds	r2, r3, #4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	9203      	str	r2, [sp, #12]
 800482c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004830:	3402      	adds	r4, #2
 8004832:	9305      	str	r3, [sp, #20]
 8004834:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048f8 <_svfiprintf_r+0x1f4>
 8004838:	7821      	ldrb	r1, [r4, #0]
 800483a:	2203      	movs	r2, #3
 800483c:	4650      	mov	r0, sl
 800483e:	f7fb fcdf 	bl	8000200 <memchr>
 8004842:	b138      	cbz	r0, 8004854 <_svfiprintf_r+0x150>
 8004844:	9b04      	ldr	r3, [sp, #16]
 8004846:	eba0 000a 	sub.w	r0, r0, sl
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	4082      	lsls	r2, r0
 800484e:	4313      	orrs	r3, r2
 8004850:	3401      	adds	r4, #1
 8004852:	9304      	str	r3, [sp, #16]
 8004854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004858:	4824      	ldr	r0, [pc, #144]	@ (80048ec <_svfiprintf_r+0x1e8>)
 800485a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800485e:	2206      	movs	r2, #6
 8004860:	f7fb fcce 	bl	8000200 <memchr>
 8004864:	2800      	cmp	r0, #0
 8004866:	d036      	beq.n	80048d6 <_svfiprintf_r+0x1d2>
 8004868:	4b21      	ldr	r3, [pc, #132]	@ (80048f0 <_svfiprintf_r+0x1ec>)
 800486a:	bb1b      	cbnz	r3, 80048b4 <_svfiprintf_r+0x1b0>
 800486c:	9b03      	ldr	r3, [sp, #12]
 800486e:	3307      	adds	r3, #7
 8004870:	f023 0307 	bic.w	r3, r3, #7
 8004874:	3308      	adds	r3, #8
 8004876:	9303      	str	r3, [sp, #12]
 8004878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800487a:	4433      	add	r3, r6
 800487c:	9309      	str	r3, [sp, #36]	@ 0x24
 800487e:	e76a      	b.n	8004756 <_svfiprintf_r+0x52>
 8004880:	fb0c 3202 	mla	r2, ip, r2, r3
 8004884:	460c      	mov	r4, r1
 8004886:	2001      	movs	r0, #1
 8004888:	e7a8      	b.n	80047dc <_svfiprintf_r+0xd8>
 800488a:	2300      	movs	r3, #0
 800488c:	3401      	adds	r4, #1
 800488e:	9305      	str	r3, [sp, #20]
 8004890:	4619      	mov	r1, r3
 8004892:	f04f 0c0a 	mov.w	ip, #10
 8004896:	4620      	mov	r0, r4
 8004898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800489c:	3a30      	subs	r2, #48	@ 0x30
 800489e:	2a09      	cmp	r2, #9
 80048a0:	d903      	bls.n	80048aa <_svfiprintf_r+0x1a6>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0c6      	beq.n	8004834 <_svfiprintf_r+0x130>
 80048a6:	9105      	str	r1, [sp, #20]
 80048a8:	e7c4      	b.n	8004834 <_svfiprintf_r+0x130>
 80048aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ae:	4604      	mov	r4, r0
 80048b0:	2301      	movs	r3, #1
 80048b2:	e7f0      	b.n	8004896 <_svfiprintf_r+0x192>
 80048b4:	ab03      	add	r3, sp, #12
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	462a      	mov	r2, r5
 80048ba:	4b0e      	ldr	r3, [pc, #56]	@ (80048f4 <_svfiprintf_r+0x1f0>)
 80048bc:	a904      	add	r1, sp, #16
 80048be:	4638      	mov	r0, r7
 80048c0:	f3af 8000 	nop.w
 80048c4:	1c42      	adds	r2, r0, #1
 80048c6:	4606      	mov	r6, r0
 80048c8:	d1d6      	bne.n	8004878 <_svfiprintf_r+0x174>
 80048ca:	89ab      	ldrh	r3, [r5, #12]
 80048cc:	065b      	lsls	r3, r3, #25
 80048ce:	f53f af2d 	bmi.w	800472c <_svfiprintf_r+0x28>
 80048d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048d4:	e72c      	b.n	8004730 <_svfiprintf_r+0x2c>
 80048d6:	ab03      	add	r3, sp, #12
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	462a      	mov	r2, r5
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <_svfiprintf_r+0x1f0>)
 80048de:	a904      	add	r1, sp, #16
 80048e0:	4638      	mov	r0, r7
 80048e2:	f000 f91b 	bl	8004b1c <_printf_i>
 80048e6:	e7ed      	b.n	80048c4 <_svfiprintf_r+0x1c0>
 80048e8:	08006514 	.word	0x08006514
 80048ec:	0800651e 	.word	0x0800651e
 80048f0:	00000000 	.word	0x00000000
 80048f4:	0800464d 	.word	0x0800464d
 80048f8:	0800651a 	.word	0x0800651a

080048fc <sbrk_aligned>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	4e0f      	ldr	r6, [pc, #60]	@ (800493c <sbrk_aligned+0x40>)
 8004900:	460c      	mov	r4, r1
 8004902:	6831      	ldr	r1, [r6, #0]
 8004904:	4605      	mov	r5, r0
 8004906:	b911      	cbnz	r1, 800490e <sbrk_aligned+0x12>
 8004908:	f000 fa7a 	bl	8004e00 <_sbrk_r>
 800490c:	6030      	str	r0, [r6, #0]
 800490e:	4621      	mov	r1, r4
 8004910:	4628      	mov	r0, r5
 8004912:	f000 fa75 	bl	8004e00 <_sbrk_r>
 8004916:	1c43      	adds	r3, r0, #1
 8004918:	d103      	bne.n	8004922 <sbrk_aligned+0x26>
 800491a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800491e:	4620      	mov	r0, r4
 8004920:	bd70      	pop	{r4, r5, r6, pc}
 8004922:	1cc4      	adds	r4, r0, #3
 8004924:	f024 0403 	bic.w	r4, r4, #3
 8004928:	42a0      	cmp	r0, r4
 800492a:	d0f8      	beq.n	800491e <sbrk_aligned+0x22>
 800492c:	1a21      	subs	r1, r4, r0
 800492e:	4628      	mov	r0, r5
 8004930:	f000 fa66 	bl	8004e00 <_sbrk_r>
 8004934:	3001      	adds	r0, #1
 8004936:	d1f2      	bne.n	800491e <sbrk_aligned+0x22>
 8004938:	e7ef      	b.n	800491a <sbrk_aligned+0x1e>
 800493a:	bf00      	nop
 800493c:	200006cc 	.word	0x200006cc

08004940 <_malloc_r>:
 8004940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004944:	1ccd      	adds	r5, r1, #3
 8004946:	f025 0503 	bic.w	r5, r5, #3
 800494a:	3508      	adds	r5, #8
 800494c:	2d0c      	cmp	r5, #12
 800494e:	bf38      	it	cc
 8004950:	250c      	movcc	r5, #12
 8004952:	2d00      	cmp	r5, #0
 8004954:	4606      	mov	r6, r0
 8004956:	db01      	blt.n	800495c <_malloc_r+0x1c>
 8004958:	42a9      	cmp	r1, r5
 800495a:	d904      	bls.n	8004966 <_malloc_r+0x26>
 800495c:	230c      	movs	r3, #12
 800495e:	6033      	str	r3, [r6, #0]
 8004960:	2000      	movs	r0, #0
 8004962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a3c <_malloc_r+0xfc>
 800496a:	f000 f9f5 	bl	8004d58 <__malloc_lock>
 800496e:	f8d8 3000 	ldr.w	r3, [r8]
 8004972:	461c      	mov	r4, r3
 8004974:	bb44      	cbnz	r4, 80049c8 <_malloc_r+0x88>
 8004976:	4629      	mov	r1, r5
 8004978:	4630      	mov	r0, r6
 800497a:	f7ff ffbf 	bl	80048fc <sbrk_aligned>
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	4604      	mov	r4, r0
 8004982:	d158      	bne.n	8004a36 <_malloc_r+0xf6>
 8004984:	f8d8 4000 	ldr.w	r4, [r8]
 8004988:	4627      	mov	r7, r4
 800498a:	2f00      	cmp	r7, #0
 800498c:	d143      	bne.n	8004a16 <_malloc_r+0xd6>
 800498e:	2c00      	cmp	r4, #0
 8004990:	d04b      	beq.n	8004a2a <_malloc_r+0xea>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	4639      	mov	r1, r7
 8004996:	4630      	mov	r0, r6
 8004998:	eb04 0903 	add.w	r9, r4, r3
 800499c:	f000 fa30 	bl	8004e00 <_sbrk_r>
 80049a0:	4581      	cmp	r9, r0
 80049a2:	d142      	bne.n	8004a2a <_malloc_r+0xea>
 80049a4:	6821      	ldr	r1, [r4, #0]
 80049a6:	1a6d      	subs	r5, r5, r1
 80049a8:	4629      	mov	r1, r5
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7ff ffa6 	bl	80048fc <sbrk_aligned>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d03a      	beq.n	8004a2a <_malloc_r+0xea>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	442b      	add	r3, r5
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	f8d8 3000 	ldr.w	r3, [r8]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	bb62      	cbnz	r2, 8004a1c <_malloc_r+0xdc>
 80049c2:	f8c8 7000 	str.w	r7, [r8]
 80049c6:	e00f      	b.n	80049e8 <_malloc_r+0xa8>
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	1b52      	subs	r2, r2, r5
 80049cc:	d420      	bmi.n	8004a10 <_malloc_r+0xd0>
 80049ce:	2a0b      	cmp	r2, #11
 80049d0:	d917      	bls.n	8004a02 <_malloc_r+0xc2>
 80049d2:	1961      	adds	r1, r4, r5
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	6025      	str	r5, [r4, #0]
 80049d8:	bf18      	it	ne
 80049da:	6059      	strne	r1, [r3, #4]
 80049dc:	6863      	ldr	r3, [r4, #4]
 80049de:	bf08      	it	eq
 80049e0:	f8c8 1000 	streq.w	r1, [r8]
 80049e4:	5162      	str	r2, [r4, r5]
 80049e6:	604b      	str	r3, [r1, #4]
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 f9bb 	bl	8004d64 <__malloc_unlock>
 80049ee:	f104 000b 	add.w	r0, r4, #11
 80049f2:	1d23      	adds	r3, r4, #4
 80049f4:	f020 0007 	bic.w	r0, r0, #7
 80049f8:	1ac2      	subs	r2, r0, r3
 80049fa:	bf1c      	itt	ne
 80049fc:	1a1b      	subne	r3, r3, r0
 80049fe:	50a3      	strne	r3, [r4, r2]
 8004a00:	e7af      	b.n	8004962 <_malloc_r+0x22>
 8004a02:	6862      	ldr	r2, [r4, #4]
 8004a04:	42a3      	cmp	r3, r4
 8004a06:	bf0c      	ite	eq
 8004a08:	f8c8 2000 	streq.w	r2, [r8]
 8004a0c:	605a      	strne	r2, [r3, #4]
 8004a0e:	e7eb      	b.n	80049e8 <_malloc_r+0xa8>
 8004a10:	4623      	mov	r3, r4
 8004a12:	6864      	ldr	r4, [r4, #4]
 8004a14:	e7ae      	b.n	8004974 <_malloc_r+0x34>
 8004a16:	463c      	mov	r4, r7
 8004a18:	687f      	ldr	r7, [r7, #4]
 8004a1a:	e7b6      	b.n	800498a <_malloc_r+0x4a>
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	d1fb      	bne.n	8004a1c <_malloc_r+0xdc>
 8004a24:	2300      	movs	r3, #0
 8004a26:	6053      	str	r3, [r2, #4]
 8004a28:	e7de      	b.n	80049e8 <_malloc_r+0xa8>
 8004a2a:	230c      	movs	r3, #12
 8004a2c:	6033      	str	r3, [r6, #0]
 8004a2e:	4630      	mov	r0, r6
 8004a30:	f000 f998 	bl	8004d64 <__malloc_unlock>
 8004a34:	e794      	b.n	8004960 <_malloc_r+0x20>
 8004a36:	6005      	str	r5, [r0, #0]
 8004a38:	e7d6      	b.n	80049e8 <_malloc_r+0xa8>
 8004a3a:	bf00      	nop
 8004a3c:	200006d0 	.word	0x200006d0

08004a40 <_printf_common>:
 8004a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	4616      	mov	r6, r2
 8004a46:	4698      	mov	r8, r3
 8004a48:	688a      	ldr	r2, [r1, #8]
 8004a4a:	690b      	ldr	r3, [r1, #16]
 8004a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	bfb8      	it	lt
 8004a54:	4613      	movlt	r3, r2
 8004a56:	6033      	str	r3, [r6, #0]
 8004a58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a5c:	4607      	mov	r7, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	b10a      	cbz	r2, 8004a66 <_printf_common+0x26>
 8004a62:	3301      	adds	r3, #1
 8004a64:	6033      	str	r3, [r6, #0]
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	0699      	lsls	r1, r3, #26
 8004a6a:	bf42      	ittt	mi
 8004a6c:	6833      	ldrmi	r3, [r6, #0]
 8004a6e:	3302      	addmi	r3, #2
 8004a70:	6033      	strmi	r3, [r6, #0]
 8004a72:	6825      	ldr	r5, [r4, #0]
 8004a74:	f015 0506 	ands.w	r5, r5, #6
 8004a78:	d106      	bne.n	8004a88 <_printf_common+0x48>
 8004a7a:	f104 0a19 	add.w	sl, r4, #25
 8004a7e:	68e3      	ldr	r3, [r4, #12]
 8004a80:	6832      	ldr	r2, [r6, #0]
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	42ab      	cmp	r3, r5
 8004a86:	dc26      	bgt.n	8004ad6 <_printf_common+0x96>
 8004a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a8c:	6822      	ldr	r2, [r4, #0]
 8004a8e:	3b00      	subs	r3, #0
 8004a90:	bf18      	it	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	0692      	lsls	r2, r2, #26
 8004a96:	d42b      	bmi.n	8004af0 <_printf_common+0xb0>
 8004a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	47c8      	blx	r9
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d01e      	beq.n	8004ae4 <_printf_common+0xa4>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	6922      	ldr	r2, [r4, #16]
 8004aaa:	f003 0306 	and.w	r3, r3, #6
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	bf02      	ittt	eq
 8004ab2:	68e5      	ldreq	r5, [r4, #12]
 8004ab4:	6833      	ldreq	r3, [r6, #0]
 8004ab6:	1aed      	subeq	r5, r5, r3
 8004ab8:	68a3      	ldr	r3, [r4, #8]
 8004aba:	bf0c      	ite	eq
 8004abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac0:	2500      	movne	r5, #0
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	bfc4      	itt	gt
 8004ac6:	1a9b      	subgt	r3, r3, r2
 8004ac8:	18ed      	addgt	r5, r5, r3
 8004aca:	2600      	movs	r6, #0
 8004acc:	341a      	adds	r4, #26
 8004ace:	42b5      	cmp	r5, r6
 8004ad0:	d11a      	bne.n	8004b08 <_printf_common+0xc8>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	e008      	b.n	8004ae8 <_printf_common+0xa8>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4652      	mov	r2, sl
 8004ada:	4641      	mov	r1, r8
 8004adc:	4638      	mov	r0, r7
 8004ade:	47c8      	blx	r9
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d103      	bne.n	8004aec <_printf_common+0xac>
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aec:	3501      	adds	r5, #1
 8004aee:	e7c6      	b.n	8004a7e <_printf_common+0x3e>
 8004af0:	18e1      	adds	r1, r4, r3
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	2030      	movs	r0, #48	@ 0x30
 8004af6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004afa:	4422      	add	r2, r4
 8004afc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b04:	3302      	adds	r3, #2
 8004b06:	e7c7      	b.n	8004a98 <_printf_common+0x58>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	4638      	mov	r0, r7
 8004b10:	47c8      	blx	r9
 8004b12:	3001      	adds	r0, #1
 8004b14:	d0e6      	beq.n	8004ae4 <_printf_common+0xa4>
 8004b16:	3601      	adds	r6, #1
 8004b18:	e7d9      	b.n	8004ace <_printf_common+0x8e>
	...

08004b1c <_printf_i>:
 8004b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b20:	7e0f      	ldrb	r7, [r1, #24]
 8004b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b24:	2f78      	cmp	r7, #120	@ 0x78
 8004b26:	4691      	mov	r9, r2
 8004b28:	4680      	mov	r8, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	469a      	mov	sl, r3
 8004b2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b32:	d807      	bhi.n	8004b44 <_printf_i+0x28>
 8004b34:	2f62      	cmp	r7, #98	@ 0x62
 8004b36:	d80a      	bhi.n	8004b4e <_printf_i+0x32>
 8004b38:	2f00      	cmp	r7, #0
 8004b3a:	f000 80d1 	beq.w	8004ce0 <_printf_i+0x1c4>
 8004b3e:	2f58      	cmp	r7, #88	@ 0x58
 8004b40:	f000 80b8 	beq.w	8004cb4 <_printf_i+0x198>
 8004b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b4c:	e03a      	b.n	8004bc4 <_printf_i+0xa8>
 8004b4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b52:	2b15      	cmp	r3, #21
 8004b54:	d8f6      	bhi.n	8004b44 <_printf_i+0x28>
 8004b56:	a101      	add	r1, pc, #4	@ (adr r1, 8004b5c <_printf_i+0x40>)
 8004b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b5c:	08004bb5 	.word	0x08004bb5
 8004b60:	08004bc9 	.word	0x08004bc9
 8004b64:	08004b45 	.word	0x08004b45
 8004b68:	08004b45 	.word	0x08004b45
 8004b6c:	08004b45 	.word	0x08004b45
 8004b70:	08004b45 	.word	0x08004b45
 8004b74:	08004bc9 	.word	0x08004bc9
 8004b78:	08004b45 	.word	0x08004b45
 8004b7c:	08004b45 	.word	0x08004b45
 8004b80:	08004b45 	.word	0x08004b45
 8004b84:	08004b45 	.word	0x08004b45
 8004b88:	08004cc7 	.word	0x08004cc7
 8004b8c:	08004bf3 	.word	0x08004bf3
 8004b90:	08004c81 	.word	0x08004c81
 8004b94:	08004b45 	.word	0x08004b45
 8004b98:	08004b45 	.word	0x08004b45
 8004b9c:	08004ce9 	.word	0x08004ce9
 8004ba0:	08004b45 	.word	0x08004b45
 8004ba4:	08004bf3 	.word	0x08004bf3
 8004ba8:	08004b45 	.word	0x08004b45
 8004bac:	08004b45 	.word	0x08004b45
 8004bb0:	08004c89 	.word	0x08004c89
 8004bb4:	6833      	ldr	r3, [r6, #0]
 8004bb6:	1d1a      	adds	r2, r3, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6032      	str	r2, [r6, #0]
 8004bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e09c      	b.n	8004d02 <_printf_i+0x1e6>
 8004bc8:	6833      	ldr	r3, [r6, #0]
 8004bca:	6820      	ldr	r0, [r4, #0]
 8004bcc:	1d19      	adds	r1, r3, #4
 8004bce:	6031      	str	r1, [r6, #0]
 8004bd0:	0606      	lsls	r6, r0, #24
 8004bd2:	d501      	bpl.n	8004bd8 <_printf_i+0xbc>
 8004bd4:	681d      	ldr	r5, [r3, #0]
 8004bd6:	e003      	b.n	8004be0 <_printf_i+0xc4>
 8004bd8:	0645      	lsls	r5, r0, #25
 8004bda:	d5fb      	bpl.n	8004bd4 <_printf_i+0xb8>
 8004bdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004be0:	2d00      	cmp	r5, #0
 8004be2:	da03      	bge.n	8004bec <_printf_i+0xd0>
 8004be4:	232d      	movs	r3, #45	@ 0x2d
 8004be6:	426d      	negs	r5, r5
 8004be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bec:	4858      	ldr	r0, [pc, #352]	@ (8004d50 <_printf_i+0x234>)
 8004bee:	230a      	movs	r3, #10
 8004bf0:	e011      	b.n	8004c16 <_printf_i+0xfa>
 8004bf2:	6821      	ldr	r1, [r4, #0]
 8004bf4:	6833      	ldr	r3, [r6, #0]
 8004bf6:	0608      	lsls	r0, r1, #24
 8004bf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bfc:	d402      	bmi.n	8004c04 <_printf_i+0xe8>
 8004bfe:	0649      	lsls	r1, r1, #25
 8004c00:	bf48      	it	mi
 8004c02:	b2ad      	uxthmi	r5, r5
 8004c04:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c06:	4852      	ldr	r0, [pc, #328]	@ (8004d50 <_printf_i+0x234>)
 8004c08:	6033      	str	r3, [r6, #0]
 8004c0a:	bf14      	ite	ne
 8004c0c:	230a      	movne	r3, #10
 8004c0e:	2308      	moveq	r3, #8
 8004c10:	2100      	movs	r1, #0
 8004c12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c16:	6866      	ldr	r6, [r4, #4]
 8004c18:	60a6      	str	r6, [r4, #8]
 8004c1a:	2e00      	cmp	r6, #0
 8004c1c:	db05      	blt.n	8004c2a <_printf_i+0x10e>
 8004c1e:	6821      	ldr	r1, [r4, #0]
 8004c20:	432e      	orrs	r6, r5
 8004c22:	f021 0104 	bic.w	r1, r1, #4
 8004c26:	6021      	str	r1, [r4, #0]
 8004c28:	d04b      	beq.n	8004cc2 <_printf_i+0x1a6>
 8004c2a:	4616      	mov	r6, r2
 8004c2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c30:	fb03 5711 	mls	r7, r3, r1, r5
 8004c34:	5dc7      	ldrb	r7, [r0, r7]
 8004c36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c3a:	462f      	mov	r7, r5
 8004c3c:	42bb      	cmp	r3, r7
 8004c3e:	460d      	mov	r5, r1
 8004c40:	d9f4      	bls.n	8004c2c <_printf_i+0x110>
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d10b      	bne.n	8004c5e <_printf_i+0x142>
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	07df      	lsls	r7, r3, #31
 8004c4a:	d508      	bpl.n	8004c5e <_printf_i+0x142>
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	6861      	ldr	r1, [r4, #4]
 8004c50:	4299      	cmp	r1, r3
 8004c52:	bfde      	ittt	le
 8004c54:	2330      	movle	r3, #48	@ 0x30
 8004c56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c5a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004c5e:	1b92      	subs	r2, r2, r6
 8004c60:	6122      	str	r2, [r4, #16]
 8004c62:	f8cd a000 	str.w	sl, [sp]
 8004c66:	464b      	mov	r3, r9
 8004c68:	aa03      	add	r2, sp, #12
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	f7ff fee7 	bl	8004a40 <_printf_common>
 8004c72:	3001      	adds	r0, #1
 8004c74:	d14a      	bne.n	8004d0c <_printf_i+0x1f0>
 8004c76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c7a:	b004      	add	sp, #16
 8004c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	f043 0320 	orr.w	r3, r3, #32
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	4832      	ldr	r0, [pc, #200]	@ (8004d54 <_printf_i+0x238>)
 8004c8a:	2778      	movs	r7, #120	@ 0x78
 8004c8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	6831      	ldr	r1, [r6, #0]
 8004c94:	061f      	lsls	r7, r3, #24
 8004c96:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c9a:	d402      	bmi.n	8004ca2 <_printf_i+0x186>
 8004c9c:	065f      	lsls	r7, r3, #25
 8004c9e:	bf48      	it	mi
 8004ca0:	b2ad      	uxthmi	r5, r5
 8004ca2:	6031      	str	r1, [r6, #0]
 8004ca4:	07d9      	lsls	r1, r3, #31
 8004ca6:	bf44      	itt	mi
 8004ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8004cac:	6023      	strmi	r3, [r4, #0]
 8004cae:	b11d      	cbz	r5, 8004cb8 <_printf_i+0x19c>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	e7ad      	b.n	8004c10 <_printf_i+0xf4>
 8004cb4:	4826      	ldr	r0, [pc, #152]	@ (8004d50 <_printf_i+0x234>)
 8004cb6:	e7e9      	b.n	8004c8c <_printf_i+0x170>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	f023 0320 	bic.w	r3, r3, #32
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	e7f6      	b.n	8004cb0 <_printf_i+0x194>
 8004cc2:	4616      	mov	r6, r2
 8004cc4:	e7bd      	b.n	8004c42 <_printf_i+0x126>
 8004cc6:	6833      	ldr	r3, [r6, #0]
 8004cc8:	6825      	ldr	r5, [r4, #0]
 8004cca:	6961      	ldr	r1, [r4, #20]
 8004ccc:	1d18      	adds	r0, r3, #4
 8004cce:	6030      	str	r0, [r6, #0]
 8004cd0:	062e      	lsls	r6, r5, #24
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	d501      	bpl.n	8004cda <_printf_i+0x1be>
 8004cd6:	6019      	str	r1, [r3, #0]
 8004cd8:	e002      	b.n	8004ce0 <_printf_i+0x1c4>
 8004cda:	0668      	lsls	r0, r5, #25
 8004cdc:	d5fb      	bpl.n	8004cd6 <_printf_i+0x1ba>
 8004cde:	8019      	strh	r1, [r3, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	6123      	str	r3, [r4, #16]
 8004ce4:	4616      	mov	r6, r2
 8004ce6:	e7bc      	b.n	8004c62 <_printf_i+0x146>
 8004ce8:	6833      	ldr	r3, [r6, #0]
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	6032      	str	r2, [r6, #0]
 8004cee:	681e      	ldr	r6, [r3, #0]
 8004cf0:	6862      	ldr	r2, [r4, #4]
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f7fb fa83 	bl	8000200 <memchr>
 8004cfa:	b108      	cbz	r0, 8004d00 <_printf_i+0x1e4>
 8004cfc:	1b80      	subs	r0, r0, r6
 8004cfe:	6060      	str	r0, [r4, #4]
 8004d00:	6863      	ldr	r3, [r4, #4]
 8004d02:	6123      	str	r3, [r4, #16]
 8004d04:	2300      	movs	r3, #0
 8004d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d0a:	e7aa      	b.n	8004c62 <_printf_i+0x146>
 8004d0c:	6923      	ldr	r3, [r4, #16]
 8004d0e:	4632      	mov	r2, r6
 8004d10:	4649      	mov	r1, r9
 8004d12:	4640      	mov	r0, r8
 8004d14:	47d0      	blx	sl
 8004d16:	3001      	adds	r0, #1
 8004d18:	d0ad      	beq.n	8004c76 <_printf_i+0x15a>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	079b      	lsls	r3, r3, #30
 8004d1e:	d413      	bmi.n	8004d48 <_printf_i+0x22c>
 8004d20:	68e0      	ldr	r0, [r4, #12]
 8004d22:	9b03      	ldr	r3, [sp, #12]
 8004d24:	4298      	cmp	r0, r3
 8004d26:	bfb8      	it	lt
 8004d28:	4618      	movlt	r0, r3
 8004d2a:	e7a6      	b.n	8004c7a <_printf_i+0x15e>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4632      	mov	r2, r6
 8004d30:	4649      	mov	r1, r9
 8004d32:	4640      	mov	r0, r8
 8004d34:	47d0      	blx	sl
 8004d36:	3001      	adds	r0, #1
 8004d38:	d09d      	beq.n	8004c76 <_printf_i+0x15a>
 8004d3a:	3501      	adds	r5, #1
 8004d3c:	68e3      	ldr	r3, [r4, #12]
 8004d3e:	9903      	ldr	r1, [sp, #12]
 8004d40:	1a5b      	subs	r3, r3, r1
 8004d42:	42ab      	cmp	r3, r5
 8004d44:	dcf2      	bgt.n	8004d2c <_printf_i+0x210>
 8004d46:	e7eb      	b.n	8004d20 <_printf_i+0x204>
 8004d48:	2500      	movs	r5, #0
 8004d4a:	f104 0619 	add.w	r6, r4, #25
 8004d4e:	e7f5      	b.n	8004d3c <_printf_i+0x220>
 8004d50:	08006525 	.word	0x08006525
 8004d54:	08006536 	.word	0x08006536

08004d58 <__malloc_lock>:
 8004d58:	4801      	ldr	r0, [pc, #4]	@ (8004d60 <__malloc_lock+0x8>)
 8004d5a:	f7ff bc75 	b.w	8004648 <__retarget_lock_acquire_recursive>
 8004d5e:	bf00      	nop
 8004d60:	200006c8 	.word	0x200006c8

08004d64 <__malloc_unlock>:
 8004d64:	4801      	ldr	r0, [pc, #4]	@ (8004d6c <__malloc_unlock+0x8>)
 8004d66:	f7ff bc70 	b.w	800464a <__retarget_lock_release_recursive>
 8004d6a:	bf00      	nop
 8004d6c:	200006c8 	.word	0x200006c8

08004d70 <_realloc_r>:
 8004d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d74:	4607      	mov	r7, r0
 8004d76:	4614      	mov	r4, r2
 8004d78:	460d      	mov	r5, r1
 8004d7a:	b921      	cbnz	r1, 8004d86 <_realloc_r+0x16>
 8004d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d80:	4611      	mov	r1, r2
 8004d82:	f7ff bddd 	b.w	8004940 <_malloc_r>
 8004d86:	b92a      	cbnz	r2, 8004d94 <_realloc_r+0x24>
 8004d88:	f000 f858 	bl	8004e3c <_free_r>
 8004d8c:	4625      	mov	r5, r4
 8004d8e:	4628      	mov	r0, r5
 8004d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d94:	f000 f89c 	bl	8004ed0 <_malloc_usable_size_r>
 8004d98:	4284      	cmp	r4, r0
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	d802      	bhi.n	8004da4 <_realloc_r+0x34>
 8004d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004da2:	d8f4      	bhi.n	8004d8e <_realloc_r+0x1e>
 8004da4:	4621      	mov	r1, r4
 8004da6:	4638      	mov	r0, r7
 8004da8:	f7ff fdca 	bl	8004940 <_malloc_r>
 8004dac:	4680      	mov	r8, r0
 8004dae:	b908      	cbnz	r0, 8004db4 <_realloc_r+0x44>
 8004db0:	4645      	mov	r5, r8
 8004db2:	e7ec      	b.n	8004d8e <_realloc_r+0x1e>
 8004db4:	42b4      	cmp	r4, r6
 8004db6:	4622      	mov	r2, r4
 8004db8:	4629      	mov	r1, r5
 8004dba:	bf28      	it	cs
 8004dbc:	4632      	movcs	r2, r6
 8004dbe:	f000 f82f 	bl	8004e20 <memcpy>
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	f000 f839 	bl	8004e3c <_free_r>
 8004dca:	e7f1      	b.n	8004db0 <_realloc_r+0x40>

08004dcc <memmove>:
 8004dcc:	4288      	cmp	r0, r1
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	eb01 0402 	add.w	r4, r1, r2
 8004dd4:	d902      	bls.n	8004ddc <memmove+0x10>
 8004dd6:	4284      	cmp	r4, r0
 8004dd8:	4623      	mov	r3, r4
 8004dda:	d807      	bhi.n	8004dec <memmove+0x20>
 8004ddc:	1e43      	subs	r3, r0, #1
 8004dde:	42a1      	cmp	r1, r4
 8004de0:	d008      	beq.n	8004df4 <memmove+0x28>
 8004de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dea:	e7f8      	b.n	8004dde <memmove+0x12>
 8004dec:	4402      	add	r2, r0
 8004dee:	4601      	mov	r1, r0
 8004df0:	428a      	cmp	r2, r1
 8004df2:	d100      	bne.n	8004df6 <memmove+0x2a>
 8004df4:	bd10      	pop	{r4, pc}
 8004df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dfe:	e7f7      	b.n	8004df0 <memmove+0x24>

08004e00 <_sbrk_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d06      	ldr	r5, [pc, #24]	@ (8004e1c <_sbrk_r+0x1c>)
 8004e04:	2300      	movs	r3, #0
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	f7fc fb4a 	bl	80014a4 <_sbrk>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_sbrk_r+0x1a>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_sbrk_r+0x1a>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	200006d4 	.word	0x200006d4

08004e20 <memcpy>:
 8004e20:	440a      	add	r2, r1
 8004e22:	4291      	cmp	r1, r2
 8004e24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004e28:	d100      	bne.n	8004e2c <memcpy+0xc>
 8004e2a:	4770      	bx	lr
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e36:	4291      	cmp	r1, r2
 8004e38:	d1f9      	bne.n	8004e2e <memcpy+0xe>
 8004e3a:	bd10      	pop	{r4, pc}

08004e3c <_free_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4605      	mov	r5, r0
 8004e40:	2900      	cmp	r1, #0
 8004e42:	d041      	beq.n	8004ec8 <_free_r+0x8c>
 8004e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e48:	1f0c      	subs	r4, r1, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bfb8      	it	lt
 8004e4e:	18e4      	addlt	r4, r4, r3
 8004e50:	f7ff ff82 	bl	8004d58 <__malloc_lock>
 8004e54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ecc <_free_r+0x90>)
 8004e56:	6813      	ldr	r3, [r2, #0]
 8004e58:	b933      	cbnz	r3, 8004e68 <_free_r+0x2c>
 8004e5a:	6063      	str	r3, [r4, #4]
 8004e5c:	6014      	str	r4, [r2, #0]
 8004e5e:	4628      	mov	r0, r5
 8004e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e64:	f7ff bf7e 	b.w	8004d64 <__malloc_unlock>
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	d908      	bls.n	8004e7e <_free_r+0x42>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	1821      	adds	r1, r4, r0
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf01      	itttt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	1809      	addeq	r1, r1, r0
 8004e7a:	6021      	streq	r1, [r4, #0]
 8004e7c:	e7ed      	b.n	8004e5a <_free_r+0x1e>
 8004e7e:	461a      	mov	r2, r3
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	b10b      	cbz	r3, 8004e88 <_free_r+0x4c>
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d9fa      	bls.n	8004e7e <_free_r+0x42>
 8004e88:	6811      	ldr	r1, [r2, #0]
 8004e8a:	1850      	adds	r0, r2, r1
 8004e8c:	42a0      	cmp	r0, r4
 8004e8e:	d10b      	bne.n	8004ea8 <_free_r+0x6c>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	4401      	add	r1, r0
 8004e94:	1850      	adds	r0, r2, r1
 8004e96:	4283      	cmp	r3, r0
 8004e98:	6011      	str	r1, [r2, #0]
 8004e9a:	d1e0      	bne.n	8004e5e <_free_r+0x22>
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	6053      	str	r3, [r2, #4]
 8004ea2:	4408      	add	r0, r1
 8004ea4:	6010      	str	r0, [r2, #0]
 8004ea6:	e7da      	b.n	8004e5e <_free_r+0x22>
 8004ea8:	d902      	bls.n	8004eb0 <_free_r+0x74>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	602b      	str	r3, [r5, #0]
 8004eae:	e7d6      	b.n	8004e5e <_free_r+0x22>
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	1821      	adds	r1, r4, r0
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	bf04      	itt	eq
 8004eb8:	6819      	ldreq	r1, [r3, #0]
 8004eba:	685b      	ldreq	r3, [r3, #4]
 8004ebc:	6063      	str	r3, [r4, #4]
 8004ebe:	bf04      	itt	eq
 8004ec0:	1809      	addeq	r1, r1, r0
 8004ec2:	6021      	streq	r1, [r4, #0]
 8004ec4:	6054      	str	r4, [r2, #4]
 8004ec6:	e7ca      	b.n	8004e5e <_free_r+0x22>
 8004ec8:	bd38      	pop	{r3, r4, r5, pc}
 8004eca:	bf00      	nop
 8004ecc:	200006d0 	.word	0x200006d0

08004ed0 <_malloc_usable_size_r>:
 8004ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ed4:	1f18      	subs	r0, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	bfbc      	itt	lt
 8004eda:	580b      	ldrlt	r3, [r1, r0]
 8004edc:	18c0      	addlt	r0, r0, r3
 8004ede:	4770      	bx	lr

08004ee0 <_init>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	bf00      	nop
 8004ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee6:	bc08      	pop	{r3}
 8004ee8:	469e      	mov	lr, r3
 8004eea:	4770      	bx	lr

08004eec <_fini>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	bf00      	nop
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr
