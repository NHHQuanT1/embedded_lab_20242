
lab2_3.6_3.7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001584  08004f90  08004f90  00005f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006514  08006514  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006514  08006514  00007514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800651c  0800651c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800651c  0800651c  0000751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006520  08006520  00007520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006524  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          00000668  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006d4  200006d4  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dab8  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fee  00000000  00000000  00015b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00017b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d5  00000000  00000000  000187e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f35  00000000  00000000  000191b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103f7  00000000  00000000  0003d0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6dcc  00000000  00000000  0004d4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001242ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003950  00000000  00000000  001242f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00127c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f78 	.word	0x08004f78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08004f78 	.word	0x08004f78

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t SH1106_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SH1106_I2C, SH1106_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005d2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80005d6:	2201      	movs	r2, #1
 80005d8:	2178      	movs	r1, #120	@ 0x78
 80005da:	484c      	ldr	r0, [pc, #304]	@ (800070c <SH1106_Init+0x140>)
 80005dc:	f002 f8d0 	bl	8002780 <HAL_I2C_IsDeviceReady>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SH1106_Init+0x1e>
		/* Return false */
		return 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e08b      	b.n	8000702 <SH1106_Init+0x136>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005ea:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80005ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005f0:	e002      	b.n	80005f8 <SH1106_Init+0x2c>
		p--;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f9      	bne.n	80005f2 <SH1106_Init+0x26>
	
	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
 80005fe:	22ae      	movs	r2, #174	@ 0xae
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	@ 0x78
 8000604:	f000 fa4c 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
 8000608:	22b0      	movs	r2, #176	@ 0xb0
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	@ 0x78
 800060e:	f000 fa47 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
 8000612:	2281      	movs	r2, #129	@ 0x81
 8000614:	2100      	movs	r1, #0
 8000616:	2078      	movs	r0, #120	@ 0x78
 8000618:	f000 fa42 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
 800061c:	22ff      	movs	r2, #255	@ 0xff
 800061e:	2100      	movs	r1, #0
 8000620:	2078      	movs	r0, #120	@ 0x78
 8000622:	f000 fa3d 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000626:	22a1      	movs	r2, #161	@ 0xa1
 8000628:	2100      	movs	r1, #0
 800062a:	2078      	movs	r0, #120	@ 0x78
 800062c:	f000 fa38 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
 8000630:	22a6      	movs	r2, #166	@ 0xa6
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	@ 0x78
 8000636:	f000 fa33 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800063a:	22a8      	movs	r2, #168	@ 0xa8
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	@ 0x78
 8000640:	f000 fa2e 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
 8000644:	223f      	movs	r2, #63	@ 0x3f
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	@ 0x78
 800064a:	f000 fa29 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
 800064e:	22ad      	movs	r2, #173	@ 0xad
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	@ 0x78
 8000654:	f000 fa24 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
 8000658:	228b      	movs	r2, #139	@ 0x8b
 800065a:	2100      	movs	r1, #0
 800065c:	2078      	movs	r0, #120	@ 0x78
 800065e:	f000 fa1f 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
 8000662:	2232      	movs	r2, #50	@ 0x32
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	@ 0x78
 8000668:	f000 fa1a 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800066c:	22c8      	movs	r2, #200	@ 0xc8
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	@ 0x78
 8000672:	f000 fa15 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
 8000676:	22d3      	movs	r2, #211	@ 0xd3
 8000678:	2100      	movs	r1, #0
 800067a:	2078      	movs	r0, #120	@ 0x78
 800067c:	f000 fa10 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2078      	movs	r0, #120	@ 0x78
 8000686:	f000 fa0b 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800068a:	22d5      	movs	r2, #213	@ 0xd5
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	@ 0x78
 8000690:	f000 fa06 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
 8000694:	2280      	movs	r2, #128	@ 0x80
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	@ 0x78
 800069a:	f000 fa01 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
 800069e:	22d9      	movs	r2, #217	@ 0xd9
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	@ 0x78
 80006a4:	f000 f9fc 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
 80006a8:	221f      	movs	r2, #31
 80006aa:	2100      	movs	r1, #0
 80006ac:	2078      	movs	r0, #120	@ 0x78
 80006ae:	f000 f9f7 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006b2:	22da      	movs	r2, #218	@ 0xda
 80006b4:	2100      	movs	r1, #0
 80006b6:	2078      	movs	r0, #120	@ 0x78
 80006b8:	f000 f9f2 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
 80006bc:	2212      	movs	r2, #18
 80006be:	2100      	movs	r1, #0
 80006c0:	2078      	movs	r0, #120	@ 0x78
 80006c2:	f000 f9ed 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
 80006c6:	22db      	movs	r2, #219	@ 0xdb
 80006c8:	2100      	movs	r1, #0
 80006ca:	2078      	movs	r0, #120	@ 0x78
 80006cc:	f000 f9e8 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
 80006d0:	2240      	movs	r2, #64	@ 0x40
 80006d2:	2100      	movs	r1, #0
 80006d4:	2078      	movs	r0, #120	@ 0x78
 80006d6:	f000 f9e3 	bl	8000aa0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
 80006da:	22af      	movs	r2, #175	@ 0xaf
 80006dc:	2100      	movs	r1, #0
 80006de:	2078      	movs	r0, #120	@ 0x78
 80006e0:	f000 f9de 	bl	8000aa0 <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 f843 	bl	8000770 <SH1106_Fill>
	
	/* Update screen */
	SH1106_UpdateScreen();
 80006ea:	f000 f813 	bl	8000714 <SH1106_UpdateScreen>
	
	/* Set default values */
	SH1106.CurrentX = 0;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <SH1106_Init+0x144>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <SH1106_Init+0x144>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SH1106.Initialized = 1;
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <SH1106_Init+0x144>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000700:	2301      	movs	r3, #1
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000490 	.word	0x20000490
 8000710:	20000488 	.word	0x20000488

08000714 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
 800071e:	e01d      	b.n	800075c <SH1106_UpdateScreen+0x48>
		SH1106_WRITECOMMAND(0xB0 + m);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	3b50      	subs	r3, #80	@ 0x50
 8000724:	b2db      	uxtb	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	2078      	movs	r0, #120	@ 0x78
 800072c:	f000 f9b8 	bl	8000aa0 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2078      	movs	r0, #120	@ 0x78
 8000736:	f000 f9b3 	bl	8000aa0 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 800073a:	2210      	movs	r2, #16
 800073c:	2100      	movs	r1, #0
 800073e:	2078      	movs	r0, #120	@ 0x78
 8000740:	f000 f9ae 	bl	8000aa0 <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	01db      	lsls	r3, r3, #7
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <SH1106_UpdateScreen+0x58>)
 800074a:	441a      	add	r2, r3
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	2140      	movs	r1, #64	@ 0x40
 8000750:	2078      	movs	r0, #120	@ 0x78
 8000752:	f000 f93f 	bl	80009d4 <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	3301      	adds	r3, #1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9de      	bls.n	8000720 <SH1106_UpdateScreen+0xc>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000088 	.word	0x20000088

08000770 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <SH1106_Fill+0x14>
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <SH1106_Fill+0x16>
 8000784:	23ff      	movs	r3, #255	@ 0xff
 8000786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800078a:	4619      	mov	r1, r3
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <SH1106_Fill+0x2c>)
 800078e:	f003 ff75 	bl	800467c <memset>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000088 	.word	0x20000088

080007a0 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]
 80007aa:	460b      	mov	r3, r1
 80007ac:	80bb      	strh	r3, [r7, #4]
 80007ae:	4613      	mov	r3, r2
 80007b0:	70fb      	strb	r3, [r7, #3]
	if (
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007b6:	d848      	bhi.n	800084a <SH1106_DrawPixel+0xaa>
		x >= SH1106_WIDTH ||
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80007bc:	d845      	bhi.n	800084a <SH1106_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <SH1106_DrawPixel+0xb8>)
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf0c      	ite	eq
 80007cc:	2301      	moveq	r3, #1
 80007ce:	2300      	movne	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d11a      	bne.n	8000810 <SH1106_DrawPixel+0x70>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 80007da:	88fa      	ldrh	r2, [r7, #6]
 80007dc:	88bb      	ldrh	r3, [r7, #4]
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	b298      	uxth	r0, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	01db      	lsls	r3, r3, #7
 80007e6:	4413      	add	r3, r2
 80007e8:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <SH1106_DrawPixel+0xbc>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	f003 0307 	and.w	r3, r3, #7
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b259      	sxtb	r1, r3
 8000800:	88fa      	ldrh	r2, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	01db      	lsls	r3, r3, #7
 8000806:	4413      	add	r3, r2
 8000808:	b2c9      	uxtb	r1, r1
 800080a:	4a14      	ldr	r2, [pc, #80]	@ (800085c <SH1106_DrawPixel+0xbc>)
 800080c:	54d1      	strb	r1, [r2, r3]
 800080e:	e01d      	b.n	800084c <SH1106_DrawPixel+0xac>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 8000810:	88fa      	ldrh	r2, [r7, #6]
 8000812:	88bb      	ldrh	r3, [r7, #4]
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	b298      	uxth	r0, r3
 8000818:	4603      	mov	r3, r0
 800081a:	01db      	lsls	r3, r3, #7
 800081c:	4413      	add	r3, r2
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <SH1106_DrawPixel+0xbc>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	b25a      	sxtb	r2, r3
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	b25b      	sxtb	r3, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4013      	ands	r3, r2
 8000838:	b259      	sxtb	r1, r3
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	4603      	mov	r3, r0
 800083e:	01db      	lsls	r3, r3, #7
 8000840:	4413      	add	r3, r2
 8000842:	b2c9      	uxtb	r1, r1
 8000844:	4a05      	ldr	r2, [pc, #20]	@ (800085c <SH1106_DrawPixel+0xbc>)
 8000846:	54d1      	strb	r1, [r2, r3]
 8000848:	e000      	b.n	800084c <SH1106_DrawPixel+0xac>
		return;
 800084a:	bf00      	nop
	}
}
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000488 	.word	0x20000488
 800085c:	20000088 	.word	0x20000088

08000860 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	80fb      	strh	r3, [r7, #6]
 800086c:	4613      	mov	r3, r2
 800086e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 8000870:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <SH1106_GotoXY+0x28>)
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <SH1106_GotoXY+0x28>)
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	8053      	strh	r3, [r2, #2]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	20000488 	.word	0x20000488

0800088c <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 800089c:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <SH1106_Putc+0xf8>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
	if (
 80008a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008aa:	dc07      	bgt.n	80008bc <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 80008ac:	4b35      	ldr	r3, [pc, #212]	@ (8000984 <SH1106_Putc+0xf8>)
 80008ae:	885b      	ldrh	r3, [r3, #2]
 80008b0:	461a      	mov	r2, r3
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 80008b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ba:	dd01      	ble.n	80008c0 <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	e05d      	b.n	800097c <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e04b      	b.n	800095e <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b20      	subs	r3, #32
 80008ce:	6839      	ldr	r1, [r7, #0]
 80008d0:	7849      	ldrb	r1, [r1, #1]
 80008d2:	fb01 f303 	mul.w	r3, r1, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	440b      	add	r3, r1
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	e030      	b.n	800094c <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d010      	beq.n	800091c <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <SH1106_Putc+0xf8>)
 80008fc:	881a      	ldrh	r2, [r3, #0]
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	b29b      	uxth	r3, r3
 8000902:	4413      	add	r3, r2
 8000904:	b298      	uxth	r0, r3
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <SH1106_Putc+0xf8>)
 8000908:	885a      	ldrh	r2, [r3, #2]
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	b29b      	uxth	r3, r3
 800090e:	4413      	add	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	4619      	mov	r1, r3
 8000916:	f7ff ff43 	bl	80007a0 <SH1106_DrawPixel>
 800091a:	e014      	b.n	8000946 <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <SH1106_Putc+0xf8>)
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	b29b      	uxth	r3, r3
 8000924:	4413      	add	r3, r2
 8000926:	b298      	uxth	r0, r3
 8000928:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <SH1106_Putc+0xf8>)
 800092a:	885a      	ldrh	r2, [r3, #2]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	b29b      	uxth	r3, r3
 8000930:	4413      	add	r3, r2
 8000932:	b299      	uxth	r1, r3
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf0c      	ite	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	2300      	movne	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	461a      	mov	r2, r3
 8000942:	f7ff ff2d 	bl	80007a0 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	3301      	adds	r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4293      	cmp	r3, r2
 8000956:	d3c8      	bcc.n	80008ea <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3301      	adds	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	785b      	ldrb	r3, [r3, #1]
 8000962:	461a      	mov	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	4293      	cmp	r3, r2
 8000968:	d3ad      	bcc.n	80008c6 <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <SH1106_Putc+0xf8>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	4413      	add	r3, r2
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <SH1106_Putc+0xf8>)
 8000978:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800097a:	79fb      	ldrb	r3, [r7, #7]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000488 	.word	0x20000488

08000988 <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	4613      	mov	r3, r2
 8000994:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000996:	e012      	b.n	80009be <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	68b9      	ldr	r1, [r7, #8]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff73 	bl	800088c <SH1106_Putc>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d002      	beq.n	80009b8 <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	e008      	b.n	80009ca <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1e8      	bne.n	8000998 <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	781b      	ldrb	r3, [r3, #0]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x8D);
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b0c7      	sub	sp, #284	@ 0x11c
 80009d8:	af02      	add	r7, sp, #8
 80009da:	4604      	mov	r4, r0
 80009dc:	4608      	mov	r0, r1
 80009de:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80009e2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80009e6:	600a      	str	r2, [r1, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009ee:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80009f2:	4622      	mov	r2, r4
 80009f4:	701a      	strb	r2, [r3, #0]
 80009f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009fa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80009fe:	4602      	mov	r2, r0
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a0a:	460a      	mov	r2, r1
 8000a0c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a16:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a1a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000a1e:	7812      	ldrb	r2, [r2, #0]
 8000a20:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a28:	e015      	b.n	8000a56 <SH1106_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a2a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a2e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a32:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	441a      	add	r2, r3
 8000a3a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a3e:	3301      	adds	r3, #1
 8000a40:	7811      	ldrb	r1, [r2, #0]
 8000a42:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a46:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a4a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a4c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a50:	3301      	adds	r3, #1
 8000a52:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a56:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a60:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a64:	8812      	ldrh	r2, [r2, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d8df      	bhi.n	8000a2a <SH1106_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 8000a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a6e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b299      	uxth	r1, r3
 8000a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	f107 020c 	add.w	r2, r7, #12
 8000a88:	200a      	movs	r0, #10
 8000a8a:	9000      	str	r0, [sp, #0]
 8000a8c:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <SH1106_I2C_WriteMulti+0xc8>)
 8000a8e:	f001 fa4d 	bl	8001f2c <HAL_I2C_Master_Transmit>
}
 8000a92:	bf00      	nop
 8000a94:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	20000490 	.word	0x20000490

08000aa0 <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	71bb      	strb	r3, [r7, #6]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ab6:	797b      	ldrb	r3, [r7, #5]
 8000ab8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	b299      	uxth	r1, r3
 8000abe:	f107 020c 	add.w	r2, r7, #12
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <SH1106_I2C_Write+0x38>)
 8000aca:	f001 fa2f 	bl	8001f2c <HAL_I2C_Master_Transmit>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000490 	.word	0x20000490

08000adc <SetTime>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef SetTime(struct Time *time)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af04      	add	r7, sp, #16
 8000ae2:	6078      	str	r0, [r7, #4]
    // Convert time struct to BCD format as required by DS1307
    uint8_t timeData[7];

    // DS1307 expects data in BCD format
    timeData[0] = ((time->sec / 10) << 4) | (time->sec % 10);         // Second
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4a5c      	ldr	r2, [pc, #368]	@ (8000c5c <SetTime+0x180>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	b258      	sxtb	r0, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	4b57      	ldr	r3, [pc, #348]	@ (8000c5c <SetTime+0x180>)
 8000afe:	fba3 1302 	umull	r1, r3, r3, r2
 8000b02:	08d9      	lsrs	r1, r3, #3
 8000b04:	460b      	mov	r3, r1
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	4303      	orrs	r3, r0
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	723b      	strb	r3, [r7, #8]
    timeData[1] = ((time->min / 10) << 4) | (time->min % 10);         // Minute
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	785b      	ldrb	r3, [r3, #1]
 8000b1e:	4a4f      	ldr	r2, [pc, #316]	@ (8000c5c <SetTime+0x180>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	b258      	sxtb	r0, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	785a      	ldrb	r2, [r3, #1]
 8000b32:	4b4a      	ldr	r3, [pc, #296]	@ (8000c5c <SetTime+0x180>)
 8000b34:	fba3 1302 	umull	r1, r3, r3, r2
 8000b38:	08d9      	lsrs	r1, r3, #3
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	440b      	add	r3, r1
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	4303      	orrs	r3, r0
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	727b      	strb	r3, [r7, #9]
    timeData[2] = ((time->hour / 10) << 4) | (time->hour % 10);       // Hour
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	4a41      	ldr	r2, [pc, #260]	@ (8000c5c <SetTime+0x180>)
 8000b56:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5a:	08db      	lsrs	r3, r3, #3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	b258      	sxtb	r0, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	789a      	ldrb	r2, [r3, #2]
 8000b68:	4b3c      	ldr	r3, [pc, #240]	@ (8000c5c <SetTime+0x180>)
 8000b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b6e:	08d9      	lsrs	r1, r3, #3
 8000b70:	460b      	mov	r3, r1
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	4303      	orrs	r3, r0
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	72bb      	strb	r3, [r7, #10]
    timeData[3] = time->weekday & 0x07;                              // Weekday (1-7)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	78db      	ldrb	r3, [r3, #3]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	72fb      	strb	r3, [r7, #11]
    timeData[4] = ((time->day / 10) << 4) | (time->day % 10);         // Day
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	791b      	ldrb	r3, [r3, #4]
 8000b96:	4a31      	ldr	r2, [pc, #196]	@ (8000c5c <SetTime+0x180>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	b258      	sxtb	r0, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	791a      	ldrb	r2, [r3, #4]
 8000baa:	4b2c      	ldr	r3, [pc, #176]	@ (8000c5c <SetTime+0x180>)
 8000bac:	fba3 1302 	umull	r1, r3, r3, r2
 8000bb0:	08d9      	lsrs	r1, r3, #3
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	4303      	orrs	r3, r0
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	733b      	strb	r3, [r7, #12]
    timeData[5] = ((time->month / 10) << 4) | (time->month % 10);     // Month
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	795b      	ldrb	r3, [r3, #5]
 8000bcc:	4a23      	ldr	r2, [pc, #140]	@ (8000c5c <SetTime+0x180>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	b258      	sxtb	r0, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	795a      	ldrb	r2, [r3, #5]
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <SetTime+0x180>)
 8000be2:	fba3 1302 	umull	r1, r3, r3, r2
 8000be6:	08d9      	lsrs	r1, r3, #3
 8000be8:	460b      	mov	r3, r1
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	4303      	orrs	r3, r0
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	737b      	strb	r3, [r7, #13]
    timeData[6] = ((time->year / 10) << 4) | (time->year % 10);       // Year (0-99)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	799b      	ldrb	r3, [r3, #6]
 8000c02:	4a16      	ldr	r2, [pc, #88]	@ (8000c5c <SetTime+0x180>)
 8000c04:	fba2 2303 	umull	r2, r3, r2, r3
 8000c08:	08db      	lsrs	r3, r3, #3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	011b      	lsls	r3, r3, #4
 8000c10:	b258      	sxtb	r0, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	799a      	ldrb	r2, [r3, #6]
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <SetTime+0x180>)
 8000c18:	fba3 1302 	umull	r1, r3, r3, r2
 8000c1c:	08d9      	lsrs	r1, r3, #3
 8000c1e:	460b      	mov	r3, r1
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	440b      	add	r3, r1
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	4303      	orrs	r3, r0
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	73bb      	strb	r3, [r7, #14]

    // Write time to DS1307 (address 0xD0, register 0x00)
    return HAL_I2C_Mem_Write(&hi2c3, 0xD0, 0x00, 1, timeData, 7, 1000);
 8000c34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c38:	9302      	str	r3, [sp, #8]
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2301      	movs	r3, #1
 8000c46:	2200      	movs	r2, #0
 8000c48:	21d0      	movs	r1, #208	@ 0xd0
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <SetTime+0x184>)
 8000c4c:	f001 fa6c 	bl	8002128 <HAL_I2C_Mem_Write>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	cccccccd 	.word	0xcccccccd
 8000c60:	20000490 	.word	0x20000490

08000c64 <GetTime>:

HAL_StatusTypeDef GetTime(struct Time *time)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af04      	add	r7, sp, #16
 8000c6a:	6078      	str	r0, [r7, #4]
    uint8_t timeData[7];

    // Read time from DS1307 (address 0xD0, register 0x00)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c3, 0xD1, 0x00, 1, timeData, 7, 1000);
 8000c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	2307      	movs	r3, #7
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	21d1      	movs	r1, #209	@ 0xd1
 8000c82:	4841      	ldr	r0, [pc, #260]	@ (8000d88 <GetTime+0x124>)
 8000c84:	f001 fb4a 	bl	800231c <HAL_I2C_Mem_Read>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d174      	bne.n	8000d7c <GetTime+0x118>
    {
        // Convert from BCD to decimal
        time->sec = ((timeData[0] & 0x70) >> 4) * 10 + (timeData[0] & 0x0F);
 8000c92:	7a3b      	ldrb	r3, [r7, #8]
 8000c94:	111b      	asrs	r3, r3, #4
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	0092      	lsls	r2, r2, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	7a3b      	ldrb	r3, [r7, #8]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	701a      	strb	r2, [r3, #0]
        time->min = ((timeData[1] & 0x70) >> 4) * 10 + (timeData[1] & 0x0F);
 8000cb8:	7a7b      	ldrb	r3, [r7, #9]
 8000cba:	111b      	asrs	r3, r3, #4
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	7a7b      	ldrb	r3, [r7, #9]
 8000cd0:	f003 030f 	and.w	r3, r3, #15
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	705a      	strb	r2, [r3, #1]
        time->hour = ((timeData[2] & 0x30) >> 4) * 10 + (timeData[2] & 0x0F);
 8000cde:	7abb      	ldrb	r3, [r7, #10]
 8000ce0:	111b      	asrs	r3, r3, #4
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	7abb      	ldrb	r3, [r7, #10]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	709a      	strb	r2, [r3, #2]
        time->weekday = timeData[3] & 0x07;
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	70da      	strb	r2, [r3, #3]
        time->day = ((timeData[4] & 0x30) >> 4) * 10 + (timeData[4] & 0x0F);
 8000d10:	7b3b      	ldrb	r3, [r7, #12]
 8000d12:	111b      	asrs	r3, r3, #4
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	0092      	lsls	r2, r2, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	7b3b      	ldrb	r3, [r7, #12]
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	711a      	strb	r2, [r3, #4]
        time->month = ((timeData[5] & 0x10) >> 4) * 10 + (timeData[5] & 0x0F);
 8000d36:	7b7b      	ldrb	r3, [r7, #13]
 8000d38:	111b      	asrs	r3, r3, #4
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	461a      	mov	r2, r3
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	7b7b      	ldrb	r3, [r7, #13]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4413      	add	r3, r2
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	715a      	strb	r2, [r3, #5]
        time->year = ((timeData[6] & 0xF0) >> 4) * 10 + (timeData[6] & 0x0F);
 8000d5c:	7bbb      	ldrb	r3, [r7, #14]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	461a      	mov	r2, r3
 8000d64:	0092      	lsls	r2, r2, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	719a      	strb	r2, [r3, #6]
    }

    return status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000490 	.word	0x20000490

08000d8c <PrintTime>:

void PrintTime(struct Time *time)
{
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	b091      	sub	sp, #68	@ 0x44
 8000d90:	af06      	add	r7, sp, #24
 8000d92:	6078      	str	r0, [r7, #4]
    char buff[30];
    sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d\r\n",
            time->hour,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	789b      	ldrb	r3, [r3, #2]
    sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d\r\n",
 8000d98:	461e      	mov	r6, r3
            time->min,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	785b      	ldrb	r3, [r3, #1]
    sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d\r\n",
 8000d9e:	469c      	mov	ip, r3
            time->sec,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	781b      	ldrb	r3, [r3, #0]
    sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d\r\n",
 8000da4:	461a      	mov	r2, r3
            time->weekday,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	78db      	ldrb	r3, [r3, #3]
    sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d\r\n",
 8000daa:	4619      	mov	r1, r3
            time->day,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	791b      	ldrb	r3, [r3, #4]
    sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d\r\n",
 8000db0:	461c      	mov	r4, r3
            time->month,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	795b      	ldrb	r3, [r3, #5]
    sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d\r\n",
 8000db6:	461d      	mov	r5, r3
            time->year);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	799b      	ldrb	r3, [r3, #6]
    sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d\r\n",
 8000dbc:	f107 0008 	add.w	r0, r7, #8
 8000dc0:	9304      	str	r3, [sp, #16]
 8000dc2:	9503      	str	r5, [sp, #12]
 8000dc4:	9402      	str	r4, [sp, #8]
 8000dc6:	9101      	str	r1, [sp, #4]
 8000dc8:	9200      	str	r2, [sp, #0]
 8000dca:	4663      	mov	r3, ip
 8000dcc:	4632      	mov	r2, r6
 8000dce:	490a      	ldr	r1, [pc, #40]	@ (8000df8 <PrintTime+0x6c>)
 8000dd0:	f003 fc32 	bl	8004638 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff), 1000);
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fa09 	bl	80001f0 <strlen>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	f107 0108 	add.w	r1, r7, #8
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	4804      	ldr	r0, [pc, #16]	@ (8000dfc <PrintTime+0x70>)
 8000dec:	f003 f869 	bl	8003ec2 <HAL_UART_Transmit>
}
 8000df0:	bf00      	nop
 8000df2:	372c      	adds	r7, #44	@ 0x2c
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df8:	08004f90 	.word	0x08004f90
 8000dfc:	2000053c 	.word	0x2000053c

08000e00 <DisplayTimeOnOLED>:

void DisplayTimeOnOLED(struct Time *time)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	@ 0x38
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
    char timeStr[20];
    char dateStr[20];

    // Clear the screen
    SH1106_Fill(0);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fcb1 	bl	8000770 <SH1106_Fill>

    // Display title
    SH1106_GotoXY(10, 0);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	200a      	movs	r0, #10
 8000e12:	f7ff fd25 	bl	8000860 <SH1106_GotoXY>
    SH1106_Puts("RTC CLOCK", &Font_7x10, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	491e      	ldr	r1, [pc, #120]	@ (8000e94 <DisplayTimeOnOLED+0x94>)
 8000e1a:	481f      	ldr	r0, [pc, #124]	@ (8000e98 <DisplayTimeOnOLED+0x98>)
 8000e1c:	f7ff fdb4 	bl	8000988 <SH1106_Puts>

    // Display time in HH:MM:SS format
    sprintf(timeStr, "%02d:%02d:%02d", time->hour, time->min, time->sec);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	789b      	ldrb	r3, [r3, #2]
 8000e24:	461a      	mov	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	785b      	ldrb	r3, [r3, #1]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f107 001c 	add.w	r0, r7, #28
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	460b      	mov	r3, r1
 8000e38:	4918      	ldr	r1, [pc, #96]	@ (8000e9c <DisplayTimeOnOLED+0x9c>)
 8000e3a:	f003 fbfd 	bl	8004638 <siprintf>
    SH1106_GotoXY(15, 20);
 8000e3e:	2114      	movs	r1, #20
 8000e40:	200f      	movs	r0, #15
 8000e42:	f7ff fd0d 	bl	8000860 <SH1106_GotoXY>
    SH1106_Puts(timeStr, &Font_11x18, 1);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4914      	ldr	r1, [pc, #80]	@ (8000ea0 <DisplayTimeOnOLED+0xa0>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fd9a 	bl	8000988 <SH1106_Puts>

    // Display date in DD/MM/YY format
    sprintf(dateStr, "%02d/%02d/20%02d", time->day, time->month, time->year);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	791b      	ldrb	r3, [r3, #4]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	795b      	ldrb	r3, [r3, #5]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	799b      	ldrb	r3, [r3, #6]
 8000e64:	f107 0008 	add.w	r0, r7, #8
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	490d      	ldr	r1, [pc, #52]	@ (8000ea4 <DisplayTimeOnOLED+0xa4>)
 8000e6e:	f003 fbe3 	bl	8004638 <siprintf>
    SH1106_GotoXY(15, 40);
 8000e72:	2128      	movs	r1, #40	@ 0x28
 8000e74:	200f      	movs	r0, #15
 8000e76:	f7ff fcf3 	bl	8000860 <SH1106_GotoXY>
    SH1106_Puts(dateStr, &Font_7x10, 1);
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4904      	ldr	r1, [pc, #16]	@ (8000e94 <DisplayTimeOnOLED+0x94>)
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fd80 	bl	8000988 <SH1106_Puts>

    // Update the display
    SH1106_UpdateScreen();
 8000e88:	f7ff fc44 	bl	8000714 <SH1106_UpdateScreen>
}
 8000e8c:	bf00      	nop
 8000e8e:	3730      	adds	r7, #48	@ 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	08004fb8 	.word	0x08004fb8
 8000e9c:	08004fc4 	.word	0x08004fc4
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	08004fd4 	.word	0x08004fd4

08000ea8 <ProcessMain>:

void ProcessMain(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
    struct Time current_time;

    // Display startup message
    SH1106_GotoXY(12, 10);
 8000eae:	210a      	movs	r1, #10
 8000eb0:	200c      	movs	r0, #12
 8000eb2:	f7ff fcd5 	bl	8000860 <SH1106_GotoXY>
    SH1106_Puts("RTC Clock", &Font_11x18, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	491c      	ldr	r1, [pc, #112]	@ (8000f2c <ProcessMain+0x84>)
 8000eba:	481d      	ldr	r0, [pc, #116]	@ (8000f30 <ProcessMain+0x88>)
 8000ebc:	f7ff fd64 	bl	8000988 <SH1106_Puts>
    SH1106_GotoXY(20, 40);
 8000ec0:	2128      	movs	r1, #40	@ 0x28
 8000ec2:	2014      	movs	r0, #20
 8000ec4:	f7ff fccc 	bl	8000860 <SH1106_GotoXY>
    SH1106_Puts("Starting...", &Font_7x10, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	491a      	ldr	r1, [pc, #104]	@ (8000f34 <ProcessMain+0x8c>)
 8000ecc:	481a      	ldr	r0, [pc, #104]	@ (8000f38 <ProcessMain+0x90>)
 8000ece:	f7ff fd5b 	bl	8000988 <SH1106_Puts>
    SH1106_UpdateScreen();
 8000ed2:	f7ff fc1f 	bl	8000714 <SH1106_UpdateScreen>
    HAL_Delay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eda:	f000 fc13 	bl	8001704 <HAL_Delay>

    // Set time only once, or when needed
    // Example: Set time to current time - 17th April 2025, 7:30:10
    current_time.sec = 10;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	703b      	strb	r3, [r7, #0]
    current_time.min = 30;
 8000ee2:	231e      	movs	r3, #30
 8000ee4:	707b      	strb	r3, [r7, #1]
    current_time.hour = 7;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	70bb      	strb	r3, [r7, #2]
    current_time.day = 17;
 8000eea:	2311      	movs	r3, #17
 8000eec:	713b      	strb	r3, [r7, #4]
    current_time.month = 4;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	717b      	strb	r3, [r7, #5]
    current_time.year = 25;
 8000ef2:	2319      	movs	r3, #25
 8000ef4:	71bb      	strb	r3, [r7, #6]
    current_time.weekday = 4; // Thursday (1-7, where 1=Monday)
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	70fb      	strb	r3, [r7, #3]

    // Set the time (uncomment this line when needed to update the time)
     SetTime(&current_time);
 8000efa:	463b      	mov	r3, r7
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fded 	bl	8000adc <SetTime>

    // Main loop
    while (1) {
        // Get current time from DS1307
        if (GetTime(&current_time) == HAL_OK) {
 8000f02:	463b      	mov	r3, r7
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fead 	bl	8000c64 <GetTime>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d107      	bne.n	8000f20 <ProcessMain+0x78>
            // Display time on OLED
            DisplayTimeOnOLED(&current_time);
 8000f10:	463b      	mov	r3, r7
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff74 	bl	8000e00 <DisplayTimeOnOLED>

            // Also print to UART for debugging
            PrintTime(&current_time);
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff36 	bl	8000d8c <PrintTime>
        }

        // Update every second
        HAL_Delay(1000);
 8000f20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f24:	f000 fbee 	bl	8001704 <HAL_Delay>
        if (GetTime(&current_time) == HAL_OK) {
 8000f28:	e7eb      	b.n	8000f02 <ProcessMain+0x5a>
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	08004fe8 	.word	0x08004fe8
 8000f34:	20000000 	.word	0x20000000
 8000f38:	08004ff4 	.word	0x08004ff4

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f000 fb6e 	bl	8001620 <HAL_Init>

  /* USER CODE BEGIN Init */
  SH1106_Init();
 8000f44:	f7ff fb42 	bl	80005cc <SH1106_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f80c 	bl	8000f64 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 f91a 	bl	8001184 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000f50:	f000 f878 	bl	8001044 <MX_I2C3_Init>
  MX_SPI4_Init();
 8000f54:	f000 f8b6 	bl	80010c4 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000f58:	f000 f8ea 	bl	8001130 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ProcessMain();
 8000f5c:	f7ff ffa4 	bl	8000ea8 <ProcessMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <main+0x24>

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2230      	movs	r2, #48	@ 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 fb82 	bl	800467c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800103c <SystemClock_Config+0xd8>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a2a      	ldr	r2, [pc, #168]	@ (800103c <SystemClock_Config+0xd8>)
 8000f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f98:	4b28      	ldr	r3, [pc, #160]	@ (800103c <SystemClock_Config+0xd8>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <SystemClock_Config+0xdc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <SystemClock_Config+0xdc>)
 8000fae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <SystemClock_Config+0xdc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fd8:	23b4      	movs	r3, #180	@ 0xb4
 8000fda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 f9f9 	bl	80033e0 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff4:	f000 f94a 	bl	800128c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ff8:	f002 f9a2 	bl	8003340 <HAL_PWREx_EnableOverDrive>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001002:	f000 f943 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	230f      	movs	r3, #15
 8001008:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100a:	2302      	movs	r3, #2
 800100c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001012:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001016:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001018:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800101c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2105      	movs	r1, #5
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fc53 	bl	80038d0 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001030:	f000 f92c 	bl	800128c <Error_Handler>
  }
}
 8001034:	bf00      	nop
 8001036:	3750      	adds	r7, #80	@ 0x50
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40007000 	.word	0x40007000

08001044 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <MX_I2C3_Init+0x74>)
 800104a:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <MX_I2C3_Init+0x78>)
 800104c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800104e:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <MX_I2C3_Init+0x74>)
 8001050:	4a1b      	ldr	r2, [pc, #108]	@ (80010c0 <MX_I2C3_Init+0x7c>)
 8001052:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <MX_I2C3_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <MX_I2C3_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <MX_I2C3_Init+0x74>)
 8001062:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001066:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <MX_I2C3_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <MX_I2C3_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001074:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <MX_I2C3_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_I2C3_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001080:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <MX_I2C3_Init+0x74>)
 8001082:	f000 fe0f 	bl	8001ca4 <HAL_I2C_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800108c:	f000 f8fe 	bl	800128c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001090:	2100      	movs	r1, #0
 8001092:	4809      	ldr	r0, [pc, #36]	@ (80010b8 <MX_I2C3_Init+0x74>)
 8001094:	f002 f8d8 	bl	8003248 <HAL_I2CEx_ConfigAnalogFilter>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800109e:	f000 f8f5 	bl	800128c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <MX_I2C3_Init+0x74>)
 80010a6:	f002 f90b 	bl	80032c0 <HAL_I2CEx_ConfigDigitalFilter>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80010b0:	f000 f8ec 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000490 	.word	0x20000490
 80010bc:	40005c00 	.word	0x40005c00
 80010c0:	00061a80 	.word	0x00061a80

080010c4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_SPI4_Init+0x64>)
 80010ca:	4a18      	ldr	r2, [pc, #96]	@ (800112c <MX_SPI4_Init+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <MX_SPI4_Init+0x64>)
 80010d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_SPI4_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_SPI4_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_SPI4_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <MX_SPI4_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_SPI4_Init+0x64>)
 80010f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <MX_SPI4_Init+0x64>)
 80010f8:	2218      	movs	r2, #24
 80010fa:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <MX_SPI4_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <MX_SPI4_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <MX_SPI4_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <MX_SPI4_Init+0x64>)
 8001110:	220a      	movs	r2, #10
 8001112:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <MX_SPI4_Init+0x64>)
 8001116:	f002 fdfb 	bl	8003d10 <HAL_SPI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001120:	f000 f8b4 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200004e4 	.word	0x200004e4
 800112c:	40013400 	.word	0x40013400

08001130 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_USART1_UART_Init+0x4c>)
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <MX_USART1_UART_Init+0x50>)
 8001138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <MX_USART1_UART_Init+0x4c>)
 800113c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_USART1_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_USART1_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_USART1_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_USART1_UART_Init+0x4c>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <MX_USART1_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_USART1_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_USART1_UART_Init+0x4c>)
 8001168:	f002 fe5b 	bl	8003e22 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001172:	f000 f88b 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000053c 	.word	0x2000053c
 8001180:	40011000 	.word	0x40011000

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a37      	ldr	r2, [pc, #220]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011a4:	f043 0310 	orr.w	r3, r3, #16
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a30      	ldr	r2, [pc, #192]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a29      	ldr	r2, [pc, #164]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a22      	ldr	r2, [pc, #136]	@ (8001280 <MX_GPIO_Init+0xfc>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <MX_GPIO_Init+0xfc>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_GPIO_Init+0xfc>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <MX_GPIO_Init+0xfc>)
 8001214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_GPIO_Init+0xfc>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2110      	movs	r1, #16
 800122a:	4816      	ldr	r0, [pc, #88]	@ (8001284 <MX_GPIO_Init+0x100>)
 800122c:	f000 fd20 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001236:	4814      	ldr	r0, [pc, #80]	@ (8001288 <MX_GPIO_Init+0x104>)
 8001238:	f000 fd1a 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123c:	2310      	movs	r3, #16
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	480c      	ldr	r0, [pc, #48]	@ (8001284 <MX_GPIO_Init+0x100>)
 8001254:	f000 fb60 	bl	8001918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001258:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_GPIO_Init+0x104>)
 8001272:	f000 fb51 	bl	8001918 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40021000 	.word	0x40021000
 8001288:	40021800 	.word	0x40021800

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <Error_Handler+0x8>

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	@ 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a29      	ldr	r2, [pc, #164]	@ (80013ac <HAL_I2C_MspInit+0xc4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d14b      	bne.n	80013a2 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <HAL_I2C_MspInit+0xc8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a27      	ldr	r2, [pc, #156]	@ (80013b0 <HAL_I2C_MspInit+0xc8>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <HAL_I2C_MspInit+0xc8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <HAL_I2C_MspInit+0xc8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a20      	ldr	r2, [pc, #128]	@ (80013b0 <HAL_I2C_MspInit+0xc8>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <HAL_I2C_MspInit+0xc8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001342:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001348:	2312      	movs	r3, #18
 800134a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001354:	2304      	movs	r3, #4
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4815      	ldr	r0, [pc, #84]	@ (80013b4 <HAL_I2C_MspInit+0xcc>)
 8001360:	f000 fada 	bl	8001918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001364:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136a:	2312      	movs	r3, #18
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001376:	2304      	movs	r3, #4
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	480d      	ldr	r0, [pc, #52]	@ (80013b8 <HAL_I2C_MspInit+0xd0>)
 8001382:	f000 fac9 	bl	8001918 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <HAL_I2C_MspInit+0xc8>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <HAL_I2C_MspInit+0xc8>)
 8001390:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001394:	6413      	str	r3, [r2, #64]	@ 0x40
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_I2C_MspInit+0xc8>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	@ 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40005c00 	.word	0x40005c00
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020000 	.word	0x40020000

080013bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <HAL_SPI_MspInit+0x84>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d12b      	bne.n	8001436 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <HAL_SPI_MspInit+0x88>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4a17      	ldr	r2, [pc, #92]	@ (8001444 <HAL_SPI_MspInit+0x88>)
 80013e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_SPI_MspInit+0x88>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <HAL_SPI_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a10      	ldr	r2, [pc, #64]	@ (8001444 <HAL_SPI_MspInit+0x88>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <HAL_SPI_MspInit+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001416:	2364      	movs	r3, #100	@ 0x64
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001426:	2305      	movs	r3, #5
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	@ (8001448 <HAL_SPI_MspInit+0x8c>)
 8001432:	f000 fa71 	bl	8001918 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	@ 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40013400 	.word	0x40013400
 8001444:	40023800 	.word	0x40023800
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <HAL_UART_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12c      	bne.n	80014c8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a17      	ldr	r2, [pc, #92]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_UART_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b8:	2307      	movs	r3, #7
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_UART_MspInit+0x8c>)
 80014c4:	f000 fa28 	bl	8001918 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40011000 	.word	0x40011000
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <MemManage_Handler+0x4>

080014f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <UsageFault_Handler+0x4>

08001504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f000 f8c7 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f003 f88e 	bl	800468c <__errno>
 8001570:	4603      	mov	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <_sbrk+0x64>)
 800158c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20030000 	.word	0x20030000
 800159c:	00000400 	.word	0x00000400
 80015a0:	20000584 	.word	0x20000584
 80015a4:	200006d8 	.word	0x200006d8

080015a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <SystemInit+0x20>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b2:	4a05      	ldr	r2, [pc, #20]	@ (80015c8 <SystemInit+0x20>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001604 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015d0:	f7ff ffea 	bl	80015a8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d4:	480c      	ldr	r0, [pc, #48]	@ (8001608 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d6:	490d      	ldr	r1, [pc, #52]	@ (800160c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001618 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f003 f84d 	bl	8004698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7ff fc9d 	bl	8000f3c <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001604:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001610:	08006524 	.word	0x08006524
  ldr r2, =_sbss
 8001614:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001618:	200006d4 	.word	0x200006d4

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <HAL_Init+0x40>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800162e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001630:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <HAL_Init+0x40>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800163a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	@ (8001660 <HAL_Init+0x40>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f931 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fe20 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f93b 	bl	80018fe <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f911 	bl	80018c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	@ (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000010 	.word	0x20000010
 80016bc:	20000018 	.word	0x20000018
 80016c0:	20000014 	.word	0x20000014

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000018 	.word	0x20000018
 80016e8:	20000588 	.word	0x20000588

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000588 	.word	0x20000588

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000018 	.word	0x20000018

0800174c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	@ (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	@ (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	@ (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	@ 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	@ 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800187c:	d301      	bcc.n	8001882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187e:	2301      	movs	r3, #1
 8001880:	e00f      	b.n	80018a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001882:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <SysTick_Config+0x40>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188a:	210f      	movs	r1, #15
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f7ff ff8e 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <SysTick_Config+0x40>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189a:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <SysTick_Config+0x40>)
 800189c:	2207      	movs	r2, #7
 800189e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	e000e010 	.word	0xe000e010

080018b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff47 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d8:	f7ff ff5c 	bl	8001794 <__NVIC_GetPriorityGrouping>
 80018dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff ff8e 	bl	8001804 <NVIC_EncodePriority>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff5d 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffb0 	bl	800186c <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	@ 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e177      	b.n	8001c24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 8166 	bne.w	8001c1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d005      	beq.n	800196a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001966:	2b02      	cmp	r3, #2
 8001968:	d130      	bne.n	80019cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0201 	and.w	r2, r3, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d017      	beq.n	8001a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d123      	bne.n	8001a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	69b9      	ldr	r1, [r7, #24]
 8001a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80c0 	beq.w	8001c1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b66      	ldr	r3, [pc, #408]	@ (8001c3c <HAL_GPIO_Init+0x324>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	4a65      	ldr	r2, [pc, #404]	@ (8001c3c <HAL_GPIO_Init+0x324>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aae:	4b63      	ldr	r3, [pc, #396]	@ (8001c3c <HAL_GPIO_Init+0x324>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aba:	4a61      	ldr	r2, [pc, #388]	@ (8001c40 <HAL_GPIO_Init+0x328>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	@ (8001c44 <HAL_GPIO_Init+0x32c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d037      	beq.n	8001b56 <HAL_GPIO_Init+0x23e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a57      	ldr	r2, [pc, #348]	@ (8001c48 <HAL_GPIO_Init+0x330>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d031      	beq.n	8001b52 <HAL_GPIO_Init+0x23a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a56      	ldr	r2, [pc, #344]	@ (8001c4c <HAL_GPIO_Init+0x334>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d02b      	beq.n	8001b4e <HAL_GPIO_Init+0x236>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a55      	ldr	r2, [pc, #340]	@ (8001c50 <HAL_GPIO_Init+0x338>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d025      	beq.n	8001b4a <HAL_GPIO_Init+0x232>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a54      	ldr	r2, [pc, #336]	@ (8001c54 <HAL_GPIO_Init+0x33c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01f      	beq.n	8001b46 <HAL_GPIO_Init+0x22e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a53      	ldr	r2, [pc, #332]	@ (8001c58 <HAL_GPIO_Init+0x340>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x22a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a52      	ldr	r2, [pc, #328]	@ (8001c5c <HAL_GPIO_Init+0x344>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x226>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a51      	ldr	r2, [pc, #324]	@ (8001c60 <HAL_GPIO_Init+0x348>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x222>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a50      	ldr	r2, [pc, #320]	@ (8001c64 <HAL_GPIO_Init+0x34c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x21e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4f      	ldr	r2, [pc, #316]	@ (8001c68 <HAL_GPIO_Init+0x350>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x21a>
 8001b2e:	2309      	movs	r3, #9
 8001b30:	e012      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b32:	230a      	movs	r3, #10
 8001b34:	e010      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b36:	2308      	movs	r3, #8
 8001b38:	e00e      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00c      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b3e:	2306      	movs	r3, #6
 8001b40:	e00a      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x240>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	@ (8001c40 <HAL_GPIO_Init+0x328>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b76:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9a:	4a34      	ldr	r2, [pc, #208]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba0:	4b32      	ldr	r3, [pc, #200]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc4:	4a29      	ldr	r2, [pc, #164]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bca:	4b28      	ldr	r3, [pc, #160]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bee:	4a1f      	ldr	r2, [pc, #124]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c18:	4a14      	ldr	r2, [pc, #80]	@ (8001c6c <HAL_GPIO_Init+0x354>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f ae84 	bls.w	8001934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	@ 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40021400 	.word	0x40021400
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	40021c00 	.word	0x40021c00
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40022400 	.word	0x40022400
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	041a      	lsls	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	619a      	str	r2, [r3, #24]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e12b      	b.n	8001f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fb0c 	bl	80012e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	@ 0x24
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d08:	f001 ffda 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 8001d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a81      	ldr	r2, [pc, #516]	@ (8001f18 <HAL_I2C_Init+0x274>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d807      	bhi.n	8001d28 <HAL_I2C_Init+0x84>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a80      	ldr	r2, [pc, #512]	@ (8001f1c <HAL_I2C_Init+0x278>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf94      	ite	ls
 8001d20:	2301      	movls	r3, #1
 8001d22:	2300      	movhi	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e006      	b.n	8001d36 <HAL_I2C_Init+0x92>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a7d      	ldr	r2, [pc, #500]	@ (8001f20 <HAL_I2C_Init+0x27c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	bf94      	ite	ls
 8001d30:	2301      	movls	r3, #1
 8001d32:	2300      	movhi	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0e7      	b.n	8001f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4a78      	ldr	r2, [pc, #480]	@ (8001f24 <HAL_I2C_Init+0x280>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0c9b      	lsrs	r3, r3, #18
 8001d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f18 <HAL_I2C_Init+0x274>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d802      	bhi.n	8001d78 <HAL_I2C_Init+0xd4>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3301      	adds	r3, #1
 8001d76:	e009      	b.n	8001d8c <HAL_I2C_Init+0xe8>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	4a69      	ldr	r2, [pc, #420]	@ (8001f28 <HAL_I2C_Init+0x284>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	495c      	ldr	r1, [pc, #368]	@ (8001f18 <HAL_I2C_Init+0x274>)
 8001da8:	428b      	cmp	r3, r1
 8001daa:	d819      	bhi.n	8001de0 <HAL_I2C_Init+0x13c>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e59      	subs	r1, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dba:	1c59      	adds	r1, r3, #1
 8001dbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_I2C_Init+0x138>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e59      	subs	r1, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dda:	e051      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e04f      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d111      	bne.n	8001e0c <HAL_I2C_Init+0x168>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e012      	b.n	8001e32 <HAL_I2C_Init+0x18e>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e58      	subs	r0, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	0099      	lsls	r1, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Init+0x196>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e022      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10e      	bne.n	8001e60 <HAL_I2C_Init+0x1bc>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e58      	subs	r0, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	440b      	add	r3, r1
 8001e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e5e:	e00f      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e58      	subs	r0, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	0099      	lsls	r1, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	6809      	ldr	r1, [r1, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001eae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6911      	ldr	r1, [r2, #16]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68d2      	ldr	r2, [r2, #12]
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	000186a0 	.word	0x000186a0
 8001f1c:	001e847f 	.word	0x001e847f
 8001f20:	003d08ff 	.word	0x003d08ff
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	10624dd3 	.word	0x10624dd3

08001f2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff fbd4 	bl	80016ec <HAL_GetTick>
 8001f44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	f040 80e0 	bne.w	8002114 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2319      	movs	r3, #25
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4970      	ldr	r1, [pc, #448]	@ (8002120 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 ff3c 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e0d3      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_I2C_Master_Transmit+0x50>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e0cc      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d007      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2221      	movs	r2, #33	@ 0x21
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	893a      	ldrh	r2, [r7, #8]
 8001fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	@ (8002124 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fe4:	8979      	ldrh	r1, [r7, #10]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	6a3a      	ldr	r2, [r7, #32]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fcf6 	bl	80029dc <I2C_MasterRequestWrite>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e08d      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002010:	e066      	b.n	80020e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	6a39      	ldr	r1, [r7, #32]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fffa 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00d      	beq.n	800203e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	2b04      	cmp	r3, #4
 8002028:	d107      	bne.n	800203a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002038:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06b      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d11b      	bne.n	80020b4 <HAL_I2C_Master_Transmit+0x188>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d017      	beq.n	80020b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	6a39      	ldr	r1, [r7, #32]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fff1 	bl	80030a0 <I2C_WaitOnBTFFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d107      	bne.n	80020dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e01a      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d194      	bne.n	8002012 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	00100002 	.word	0x00100002
 8002124:	ffff0000 	.word	0xffff0000

08002128 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	4603      	mov	r3, r0
 8002138:	817b      	strh	r3, [r7, #10]
 800213a:	460b      	mov	r3, r1
 800213c:	813b      	strh	r3, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002142:	f7ff fad3 	bl	80016ec <HAL_GetTick>
 8002146:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b20      	cmp	r3, #32
 8002152:	f040 80d9 	bne.w	8002308 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2319      	movs	r3, #25
 800215c:	2201      	movs	r2, #1
 800215e:	496d      	ldr	r1, [pc, #436]	@ (8002314 <HAL_I2C_Mem_Write+0x1ec>)
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fe3b 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
 800216e:	e0cc      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_I2C_Mem_Write+0x56>
 800217a:	2302      	movs	r3, #2
 800217c:	e0c5      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d007      	beq.n	80021a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2221      	movs	r2, #33	@ 0x21
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2240      	movs	r2, #64	@ 0x40
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a3a      	ldr	r2, [r7, #32]
 80021ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002318 <HAL_I2C_Mem_Write+0x1f0>)
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e6:	88f8      	ldrh	r0, [r7, #6]
 80021e8:	893a      	ldrh	r2, [r7, #8]
 80021ea:	8979      	ldrh	r1, [r7, #10]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4603      	mov	r3, r0
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fc72 	bl	8002ae0 <I2C_RequestMemoryWrite>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d052      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e081      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 ff00 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00d      	beq.n	8002232 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	2b04      	cmp	r3, #4
 800221c:	d107      	bne.n	800222e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800222c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e06b      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b04      	cmp	r3, #4
 800226e:	d11b      	bne.n	80022a8 <HAL_I2C_Mem_Write+0x180>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	d017      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1aa      	bne.n	8002206 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fef3 	bl	80030a0 <I2C_WaitOnBTFFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00d      	beq.n	80022dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d107      	bne.n	80022d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e016      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	e000      	b.n	800230a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002308:	2302      	movs	r3, #2
  }
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	00100002 	.word	0x00100002
 8002318:	ffff0000 	.word	0xffff0000

0800231c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	@ 0x30
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	4608      	mov	r0, r1
 8002326:	4611      	mov	r1, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4603      	mov	r3, r0
 800232c:	817b      	strh	r3, [r7, #10]
 800232e:	460b      	mov	r3, r1
 8002330:	813b      	strh	r3, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002336:	f7ff f9d9 	bl	80016ec <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b20      	cmp	r3, #32
 8002346:	f040 8214 	bne.w	8002772 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	2319      	movs	r3, #25
 8002350:	2201      	movs	r2, #1
 8002352:	497b      	ldr	r1, [pc, #492]	@ (8002540 <HAL_I2C_Mem_Read+0x224>)
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fd41 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
 8002362:	e207      	b.n	8002774 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_I2C_Mem_Read+0x56>
 800236e:	2302      	movs	r3, #2
 8002370:	e200      	b.n	8002774 <HAL_I2C_Mem_Read+0x458>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d007      	beq.n	8002398 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2222      	movs	r2, #34	@ 0x22
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2240      	movs	r2, #64	@ 0x40
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80023c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002544 <HAL_I2C_Mem_Read+0x228>)
 80023d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023da:	88f8      	ldrh	r0, [r7, #6]
 80023dc:	893a      	ldrh	r2, [r7, #8]
 80023de:	8979      	ldrh	r1, [r7, #10]
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	9301      	str	r3, [sp, #4]
 80023e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4603      	mov	r3, r0
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fc0e 	bl	8002c0c <I2C_RequestMemoryRead>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e1bc      	b.n	8002774 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d113      	bne.n	800242a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	623b      	str	r3, [r7, #32]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e190      	b.n	800274c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242e:	2b01      	cmp	r3, #1
 8002430:	d11b      	bne.n	800246a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002440:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e170      	b.n	800274c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	2b02      	cmp	r3, #2
 8002470:	d11b      	bne.n	80024aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002480:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002490:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	e150      	b.n	800274c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024c0:	e144      	b.n	800274c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	f200 80f1 	bhi.w	80026ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d123      	bne.n	800251c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fe29 	bl	8003130 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e145      	b.n	8002774 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800251a:	e117      	b.n	800274c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002520:	2b02      	cmp	r3, #2
 8002522:	d14e      	bne.n	80025c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252a:	2200      	movs	r2, #0
 800252c:	4906      	ldr	r1, [pc, #24]	@ (8002548 <HAL_I2C_Mem_Read+0x22c>)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fc54 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e11a      	b.n	8002774 <HAL_I2C_Mem_Read+0x458>
 800253e:	bf00      	nop
 8002540:	00100002 	.word	0x00100002
 8002544:	ffff0000 	.word	0xffff0000
 8002548:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025c0:	e0c4      	b.n	800274c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c8:	2200      	movs	r2, #0
 80025ca:	496c      	ldr	r1, [pc, #432]	@ (800277c <HAL_I2C_Mem_Read+0x460>)
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fc05 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0cb      	b.n	8002774 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002624:	2200      	movs	r2, #0
 8002626:	4955      	ldr	r1, [pc, #340]	@ (800277c <HAL_I2C_Mem_Read+0x460>)
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fbd7 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e09d      	b.n	8002774 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026ac:	e04e      	b.n	800274c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fd3c 	bl	8003130 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e058      	b.n	8002774 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d124      	bne.n	800274c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	2b03      	cmp	r3, #3
 8002708:	d107      	bne.n	800271a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002718:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f aeb6 	bne.w	80024c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
  }
}
 8002774:	4618      	mov	r0, r3
 8002776:	3728      	adds	r7, #40	@ 0x28
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	00010004 	.word	0x00010004

08002780 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	@ 0x28
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	460b      	mov	r3, r1
 800278e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7fe ffac 	bl	80016ec <HAL_GetTick>
 8002794:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	f040 8111 	bne.w	80029ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	4988      	ldr	r1, [pc, #544]	@ (80029d4 <HAL_I2C_IsDeviceReady+0x254>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fb12 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
 80027c0:	e104      	b.n	80029cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2C_IsDeviceReady+0x50>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0fd      	b.n	80029cc <HAL_I2C_IsDeviceReady+0x24c>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d007      	beq.n	80027f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002804:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2224      	movs	r2, #36	@ 0x24
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4a70      	ldr	r2, [pc, #448]	@ (80029d8 <HAL_I2C_IsDeviceReady+0x258>)
 8002818:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002828:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fad0 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002850:	d103      	bne.n	800285a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002858:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e0b6      	b.n	80029cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800285e:	897b      	ldrh	r3, [r7, #10]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800286c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800286e:	f7fe ff3d 	bl	80016ec <HAL_GetTick>
 8002872:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	bf0c      	ite	eq
 8002882:	2301      	moveq	r3, #1
 8002884:	2300      	movne	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028a2:	e025      	b.n	80028f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028a4:	f7fe ff22 	bl	80016ec <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d302      	bcc.n	80028ba <HAL_I2C_IsDeviceReady+0x13a>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	22a0      	movs	r2, #160	@ 0xa0
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80028fa:	d005      	beq.n	8002908 <HAL_I2C_IsDeviceReady+0x188>
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_I2C_IsDeviceReady+0x188>
 8002902:	7dbb      	ldrb	r3, [r7, #22]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0cd      	beq.n	80028a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d129      	bne.n	8002972 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2319      	movs	r3, #25
 800294a:	2201      	movs	r2, #1
 800294c:	4921      	ldr	r1, [pc, #132]	@ (80029d4 <HAL_I2C_IsDeviceReady+0x254>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa44 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e036      	b.n	80029cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e02c      	b.n	80029cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002980:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800298a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2319      	movs	r3, #25
 8002992:	2201      	movs	r2, #1
 8002994:	490f      	ldr	r1, [pc, #60]	@ (80029d4 <HAL_I2C_IsDeviceReady+0x254>)
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa20 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e012      	b.n	80029cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	3301      	adds	r3, #1
 80029aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f4ff af32 	bcc.w	800281a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
  }
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	00100002 	.word	0x00100002
 80029d8:	ffff0000 	.word	0xffff0000

080029dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	460b      	mov	r3, r1
 80029ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d006      	beq.n	8002a06 <I2C_MasterRequestWrite+0x2a>
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d003      	beq.n	8002a06 <I2C_MasterRequestWrite+0x2a>
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a04:	d108      	bne.n	8002a18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e00b      	b.n	8002a30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1c:	2b12      	cmp	r3, #18
 8002a1e:	d107      	bne.n	8002a30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f9cd 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00d      	beq.n	8002a64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a56:	d103      	bne.n	8002a60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e035      	b.n	8002ad0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a6c:	d108      	bne.n	8002a80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a6e:	897b      	ldrh	r3, [r7, #10]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a7c:	611a      	str	r2, [r3, #16]
 8002a7e:	e01b      	b.n	8002ab8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a80:	897b      	ldrh	r3, [r7, #10]
 8002a82:	11db      	asrs	r3, r3, #7
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f003 0306 	and.w	r3, r3, #6
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f063 030f 	orn	r3, r3, #15
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	490e      	ldr	r1, [pc, #56]	@ (8002ad8 <I2C_MasterRequestWrite+0xfc>)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fa16 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e010      	b.n	8002ad0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aae:	897b      	ldrh	r3, [r7, #10]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4907      	ldr	r1, [pc, #28]	@ (8002adc <I2C_MasterRequestWrite+0x100>)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fa06 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	00010008 	.word	0x00010008
 8002adc:	00010002 	.word	0x00010002

08002ae0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	4608      	mov	r0, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	461a      	mov	r2, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	817b      	strh	r3, [r7, #10]
 8002af2:	460b      	mov	r3, r1
 8002af4:	813b      	strh	r3, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f960 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b30:	d103      	bne.n	8002b3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e05f      	b.n	8002bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	492d      	ldr	r1, [pc, #180]	@ (8002c08 <I2C_RequestMemoryWrite+0x128>)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f9bb 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e04c      	b.n	8002bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fa46 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d107      	bne.n	8002ba2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e02b      	b.n	8002bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bac:	893b      	ldrh	r3, [r7, #8]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	e021      	b.n	8002bfc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb8:	893b      	ldrh	r3, [r7, #8]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc8:	6a39      	ldr	r1, [r7, #32]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fa20 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00d      	beq.n	8002bf2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d107      	bne.n	8002bee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e005      	b.n	8002bfe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf2:	893b      	ldrh	r3, [r7, #8]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	00010002 	.word	0x00010002

08002c0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	813b      	strh	r3, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8c2 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c6c:	d103      	bne.n	8002c76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e0aa      	b.n	8002dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c7a:	897b      	ldrh	r3, [r7, #10]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	4952      	ldr	r1, [pc, #328]	@ (8002dd8 <I2C_RequestMemoryRead+0x1cc>)
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f91d 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e097      	b.n	8002dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb8:	6a39      	ldr	r1, [r7, #32]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f9a8 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d107      	bne.n	8002cde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e076      	b.n	8002dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce8:	893b      	ldrh	r3, [r7, #8]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	611a      	str	r2, [r3, #16]
 8002cf2:	e021      	b.n	8002d38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cf4:	893b      	ldrh	r3, [r7, #8]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d04:	6a39      	ldr	r1, [r7, #32]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f982 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d107      	bne.n	8002d2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e050      	b.n	8002dd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2e:	893b      	ldrh	r3, [r7, #8]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3a:	6a39      	ldr	r1, [r7, #32]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f967 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d107      	bne.n	8002d60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e035      	b.n	8002dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f82b 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d9a:	d103      	bne.n	8002da4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e013      	b.n	8002dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002da8:	897b      	ldrh	r3, [r7, #10]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	6a3a      	ldr	r2, [r7, #32]
 8002dbc:	4906      	ldr	r1, [pc, #24]	@ (8002dd8 <I2C_RequestMemoryRead+0x1cc>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f886 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	00010002 	.word	0x00010002

08002ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dec:	e048      	b.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d044      	beq.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe fc79 	bl	80016ec <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d139      	bne.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0c1b      	lsrs	r3, r3, #16
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d10d      	bne.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4013      	ands	r3, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	e00c      	b.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d116      	bne.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e023      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10d      	bne.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	e00c      	b.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	43da      	mvns	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d093      	beq.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ede:	e071      	b.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eee:	d123      	bne.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	f043 0204 	orr.w	r2, r3, #4
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e067      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d041      	beq.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f40:	f7fe fbd4 	bl	80016ec <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d302      	bcc.n	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d136      	bne.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10c      	bne.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	e00b      	b.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e021      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10c      	bne.n	8002fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e00b      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f af6d 	bne.w	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800301c:	e034      	b.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f8e3 	bl	80031ea <I2C_IsAcknowledgeFailed>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e034      	b.n	8003098 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d028      	beq.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe fb59 	bl	80016ec <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d11d      	bne.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	2b80      	cmp	r3, #128	@ 0x80
 8003058:	d016      	beq.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e007      	b.n	8003098 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003092:	2b80      	cmp	r3, #128	@ 0x80
 8003094:	d1c3      	bne.n	800301e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ac:	e034      	b.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f89b 	bl	80031ea <I2C_IsAcknowledgeFailed>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e034      	b.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d028      	beq.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c6:	f7fe fb11 	bl	80016ec <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11d      	bne.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d016      	beq.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e007      	b.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d1c3      	bne.n	80030ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800313c:	e049      	b.n	80031d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b10      	cmp	r3, #16
 800314a:	d119      	bne.n	8003180 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0210 	mvn.w	r2, #16
 8003154:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e030      	b.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003180:	f7fe fab4 	bl	80016ec <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	429a      	cmp	r2, r3
 800318e:	d302      	bcc.n	8003196 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11d      	bne.n	80031d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d016      	beq.n	80031d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e007      	b.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031dc:	2b40      	cmp	r3, #64	@ 0x40
 80031de:	d1ae      	bne.n	800313e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003200:	d11b      	bne.n	800323a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800320a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	d129      	bne.n	80032b2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2224      	movs	r2, #36	@ 0x24
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0201 	bic.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0210 	bic.w	r2, r2, #16
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e000      	b.n	80032b4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80032b2:	2302      	movs	r3, #2
  }
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d12a      	bne.n	8003330 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2224      	movs	r2, #36	@ 0x24
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80032fa:	89fb      	ldrh	r3, [r7, #14]
 80032fc:	f023 030f 	bic.w	r3, r3, #15
 8003300:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	b29a      	uxth	r2, r3
 8003306:	89fb      	ldrh	r3, [r7, #14]
 8003308:	4313      	orrs	r3, r2
 800330a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	89fa      	ldrh	r2, [r7, #14]
 8003312:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4b20      	ldr	r3, [pc, #128]	@ (80033d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	4a1f      	ldr	r2, [pc, #124]	@ (80033d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	@ 0x40
 800335a:	4b1d      	ldr	r3, [pc, #116]	@ (80033d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003366:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800336c:	f7fe f9be 	bl	80016ec <HAL_GetTick>
 8003370:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003372:	e009      	b.n	8003388 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003374:	f7fe f9ba 	bl	80016ec <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003382:	d901      	bls.n	8003388 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e01f      	b.n	80033c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003388:	4b13      	ldr	r3, [pc, #76]	@ (80033d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003394:	d1ee      	bne.n	8003374 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003396:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800339c:	f7fe f9a6 	bl	80016ec <HAL_GetTick>
 80033a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033a2:	e009      	b.n	80033b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033a4:	f7fe f9a2 	bl	80016ec <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033b2:	d901      	bls.n	80033b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e007      	b.n	80033c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033b8:	4b07      	ldr	r3, [pc, #28]	@ (80033d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033c4:	d1ee      	bne.n	80033a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40023800 	.word	0x40023800
 80033d4:	420e0040 	.word	0x420e0040
 80033d8:	40007000 	.word	0x40007000
 80033dc:	420e0044 	.word	0x420e0044

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e267      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d075      	beq.n	80034ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033fe:	4b88      	ldr	r3, [pc, #544]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b04      	cmp	r3, #4
 8003408:	d00c      	beq.n	8003424 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340a:	4b85      	ldr	r3, [pc, #532]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003412:	2b08      	cmp	r3, #8
 8003414:	d112      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003416:	4b82      	ldr	r3, [pc, #520]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003422:	d10b      	bne.n	800343c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	4b7e      	ldr	r3, [pc, #504]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d05b      	beq.n	80034e8 <HAL_RCC_OscConfig+0x108>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d157      	bne.n	80034e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e242      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003444:	d106      	bne.n	8003454 <HAL_RCC_OscConfig+0x74>
 8003446:	4b76      	ldr	r3, [pc, #472]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a75      	ldr	r2, [pc, #468]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e01d      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x98>
 800345e:	4b70      	ldr	r3, [pc, #448]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6f      	ldr	r2, [pc, #444]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b6d      	ldr	r3, [pc, #436]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a6c      	ldr	r2, [pc, #432]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e00b      	b.n	8003490 <HAL_RCC_OscConfig+0xb0>
 8003478:	4b69      	ldr	r3, [pc, #420]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a68      	ldr	r2, [pc, #416]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800347e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b66      	ldr	r3, [pc, #408]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a65      	ldr	r2, [pc, #404]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800348a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800348e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d013      	beq.n	80034c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe f928 	bl	80016ec <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe f924 	bl	80016ec <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	@ 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e207      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0xc0>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe f914 	bl	80016ec <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fe f910 	bl	80016ec <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	@ 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1f3      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	4b51      	ldr	r3, [pc, #324]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0xe8>
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d063      	beq.n	80035be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003502:	4b47      	ldr	r3, [pc, #284]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800350a:	2b08      	cmp	r3, #8
 800350c:	d11c      	bne.n	8003548 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350e:	4b44      	ldr	r3, [pc, #272]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d116      	bne.n	8003548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	4b41      	ldr	r3, [pc, #260]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_RCC_OscConfig+0x152>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d001      	beq.n	8003532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e1c7      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b3b      	ldr	r3, [pc, #236]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4937      	ldr	r1, [pc, #220]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003546:	e03a      	b.n	80035be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d020      	beq.n	8003592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003550:	4b34      	ldr	r3, [pc, #208]	@ (8003624 <HAL_RCC_OscConfig+0x244>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fe f8c9 	bl	80016ec <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355e:	f7fe f8c5 	bl	80016ec <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e1a8      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	4b2b      	ldr	r3, [pc, #172]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	4b28      	ldr	r3, [pc, #160]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4925      	ldr	r1, [pc, #148]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 800358c:	4313      	orrs	r3, r2
 800358e:	600b      	str	r3, [r1, #0]
 8003590:	e015      	b.n	80035be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003592:	4b24      	ldr	r3, [pc, #144]	@ (8003624 <HAL_RCC_OscConfig+0x244>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe f8a8 	bl	80016ec <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fe f8a4 	bl	80016ec <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e187      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d036      	beq.n	8003638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <HAL_RCC_OscConfig+0x248>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fe f888 	bl	80016ec <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e0:	f7fe f884 	bl	80016ec <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e167      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <HAL_RCC_OscConfig+0x240>)
 80035f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x200>
 80035fe:	e01b      	b.n	8003638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003600:	4b09      	ldr	r3, [pc, #36]	@ (8003628 <HAL_RCC_OscConfig+0x248>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003606:	f7fe f871 	bl	80016ec <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360c:	e00e      	b.n	800362c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800360e:	f7fe f86d 	bl	80016ec <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d907      	bls.n	800362c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e150      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
 8003620:	40023800 	.word	0x40023800
 8003624:	42470000 	.word	0x42470000
 8003628:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	4b88      	ldr	r3, [pc, #544]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800362e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ea      	bne.n	800360e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8097 	beq.w	8003774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364a:	4b81      	ldr	r3, [pc, #516]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	4b7d      	ldr	r3, [pc, #500]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	4a7c      	ldr	r2, [pc, #496]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003664:	6413      	str	r3, [r2, #64]	@ 0x40
 8003666:	4b7a      	ldr	r3, [pc, #488]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003676:	4b77      	ldr	r3, [pc, #476]	@ (8003854 <HAL_RCC_OscConfig+0x474>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d118      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003682:	4b74      	ldr	r3, [pc, #464]	@ (8003854 <HAL_RCC_OscConfig+0x474>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a73      	ldr	r2, [pc, #460]	@ (8003854 <HAL_RCC_OscConfig+0x474>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800368c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368e:	f7fe f82d 	bl	80016ec <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003696:	f7fe f829 	bl	80016ec <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e10c      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003854 <HAL_RCC_OscConfig+0x474>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x2ea>
 80036bc:	4b64      	ldr	r3, [pc, #400]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c0:	4a63      	ldr	r2, [pc, #396]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c8:	e01c      	b.n	8003704 <HAL_RCC_OscConfig+0x324>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x30c>
 80036d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036d8:	f043 0304 	orr.w	r3, r3, #4
 80036dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036de:	4b5c      	ldr	r3, [pc, #368]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0x324>
 80036ec:	4b58      	ldr	r3, [pc, #352]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f0:	4a57      	ldr	r2, [pc, #348]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f8:	4b55      	ldr	r3, [pc, #340]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fc:	4a54      	ldr	r2, [pc, #336]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80036fe:	f023 0304 	bic.w	r3, r3, #4
 8003702:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d015      	beq.n	8003738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fd ffee 	bl	80016ec <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003712:	e00a      	b.n	800372a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003714:	f7fd ffea 	bl	80016ec <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e0cb      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372a:	4b49      	ldr	r3, [pc, #292]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ee      	beq.n	8003714 <HAL_RCC_OscConfig+0x334>
 8003736:	e014      	b.n	8003762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003738:	f7fd ffd8 	bl	80016ec <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373e:	e00a      	b.n	8003756 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003740:	f7fd ffd4 	bl	80016ec <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e0b5      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003756:	4b3e      	ldr	r3, [pc, #248]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 8003758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1ee      	bne.n	8003740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003762:	7dfb      	ldrb	r3, [r7, #23]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003768:	4b39      	ldr	r3, [pc, #228]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	4a38      	ldr	r2, [pc, #224]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003772:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a1 	beq.w	80038c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800377e:	4b34      	ldr	r3, [pc, #208]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b08      	cmp	r3, #8
 8003788:	d05c      	beq.n	8003844 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d141      	bne.n	8003816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b31      	ldr	r3, [pc, #196]	@ (8003858 <HAL_RCC_OscConfig+0x478>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fd ffa8 	bl	80016ec <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fd ffa4 	bl	80016ec <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e087      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	4b27      	ldr	r3, [pc, #156]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	3b01      	subs	r3, #1
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	491b      	ldr	r1, [pc, #108]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <HAL_RCC_OscConfig+0x478>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7fd ff7d 	bl	80016ec <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fd ff79 	bl	80016ec <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e05c      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003808:	4b11      	ldr	r3, [pc, #68]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x416>
 8003814:	e054      	b.n	80038c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <HAL_RCC_OscConfig+0x478>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fd ff66 	bl	80016ec <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003824:	f7fd ff62 	bl	80016ec <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e045      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_RCC_OscConfig+0x470>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x444>
 8003842:	e03d      	b.n	80038c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e038      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
 8003850:	40023800 	.word	0x40023800
 8003854:	40007000 	.word	0x40007000
 8003858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800385c:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <HAL_RCC_OscConfig+0x4ec>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d028      	beq.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d121      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d11a      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800388c:	4013      	ands	r3, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003894:	4293      	cmp	r3, r2
 8003896:	d111      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	3b01      	subs	r3, #1
 80038a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800

080038d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0cc      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e4:	4b68      	ldr	r3, [pc, #416]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d90c      	bls.n	800390c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b65      	ldr	r3, [pc, #404]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b63      	ldr	r3, [pc, #396]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0b8      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003924:	4b59      	ldr	r3, [pc, #356]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4a58      	ldr	r2, [pc, #352]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800392e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800393c:	4b53      	ldr	r3, [pc, #332]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a52      	ldr	r2, [pc, #328]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003948:	4b50      	ldr	r3, [pc, #320]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	494d      	ldr	r1, [pc, #308]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d044      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d107      	bne.n	800397e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	4b47      	ldr	r3, [pc, #284]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d119      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e07f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d003      	beq.n	800398e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398a:	2b03      	cmp	r3, #3
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e06f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e067      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ae:	4b37      	ldr	r3, [pc, #220]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f023 0203 	bic.w	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4934      	ldr	r1, [pc, #208]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c0:	f7fd fe94 	bl	80016ec <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	e00a      	b.n	80039de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c8:	f7fd fe90 	bl	80016ec <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e04f      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039de:	4b2b      	ldr	r3, [pc, #172]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 020c 	and.w	r2, r3, #12
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1eb      	bne.n	80039c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f0:	4b25      	ldr	r3, [pc, #148]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d20c      	bcs.n	8003a18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b22      	ldr	r3, [pc, #136]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b20      	ldr	r3, [pc, #128]	@ (8003a88 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e032      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a24:	4b19      	ldr	r3, [pc, #100]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4916      	ldr	r1, [pc, #88]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a42:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	490e      	ldr	r1, [pc, #56]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a56:	f000 f821 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	490a      	ldr	r1, [pc, #40]	@ (8003a90 <HAL_RCC_ClockConfig+0x1c0>)
 8003a68:	5ccb      	ldrb	r3, [r1, r3]
 8003a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6e:	4a09      	ldr	r2, [pc, #36]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a72:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd fdf4 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40023c00 	.word	0x40023c00
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	080064c8 	.word	0x080064c8
 8003a94:	20000010 	.word	0x20000010
 8003a98:	20000014 	.word	0x20000014

08003a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa0:	b094      	sub	sp, #80	@ 0x50
 8003aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab4:	4b79      	ldr	r3, [pc, #484]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d00d      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x40>
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	f200 80e1 	bhi.w	8003c88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ace:	e0db      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b73      	ldr	r3, [pc, #460]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ad4:	e0db      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ad6:	4b73      	ldr	r3, [pc, #460]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ada:	e0d8      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003adc:	4b6f      	ldr	r3, [pc, #444]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ae4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d063      	beq.n	8003bba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	2200      	movs	r2, #0
 8003afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003afc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b06:	2300      	movs	r3, #0
 8003b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b0e:	4622      	mov	r2, r4
 8003b10:	462b      	mov	r3, r5
 8003b12:	f04f 0000 	mov.w	r0, #0
 8003b16:	f04f 0100 	mov.w	r1, #0
 8003b1a:	0159      	lsls	r1, r3, #5
 8003b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b20:	0150      	lsls	r0, r2, #5
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4621      	mov	r1, r4
 8003b28:	1a51      	subs	r1, r2, r1
 8003b2a:	6139      	str	r1, [r7, #16]
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b40:	4659      	mov	r1, fp
 8003b42:	018b      	lsls	r3, r1, #6
 8003b44:	4651      	mov	r1, sl
 8003b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	018a      	lsls	r2, r1, #6
 8003b4e:	4651      	mov	r1, sl
 8003b50:	ebb2 0801 	subs.w	r8, r2, r1
 8003b54:	4659      	mov	r1, fp
 8003b56:	eb63 0901 	sbc.w	r9, r3, r1
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b6e:	4690      	mov	r8, r2
 8003b70:	4699      	mov	r9, r3
 8003b72:	4623      	mov	r3, r4
 8003b74:	eb18 0303 	adds.w	r3, r8, r3
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	462b      	mov	r3, r5
 8003b7c:	eb49 0303 	adc.w	r3, r9, r3
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b8e:	4629      	mov	r1, r5
 8003b90:	024b      	lsls	r3, r1, #9
 8003b92:	4621      	mov	r1, r4
 8003b94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b98:	4621      	mov	r1, r4
 8003b9a:	024a      	lsls	r2, r1, #9
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bac:	f7fc fb78 	bl	80002a0 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb8:	e058      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bba:	4b38      	ldr	r3, [pc, #224]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	464b      	mov	r3, r9
 8003bd8:	f04f 0000 	mov.w	r0, #0
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	0159      	lsls	r1, r3, #5
 8003be2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003be6:	0150      	lsls	r0, r2, #5
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4641      	mov	r1, r8
 8003bee:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c10:	eb63 050b 	sbc.w	r5, r3, fp
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	00eb      	lsls	r3, r5, #3
 8003c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c22:	00e2      	lsls	r2, r4, #3
 8003c24:	4614      	mov	r4, r2
 8003c26:	461d      	mov	r5, r3
 8003c28:	4643      	mov	r3, r8
 8003c2a:	18e3      	adds	r3, r4, r3
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	464b      	mov	r3, r9
 8003c30:	eb45 0303 	adc.w	r3, r5, r3
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c42:	4629      	mov	r1, r5
 8003c44:	028b      	lsls	r3, r1, #10
 8003c46:	4621      	mov	r1, r4
 8003c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	028a      	lsls	r2, r1, #10
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c56:	2200      	movs	r2, #0
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	61fa      	str	r2, [r7, #28]
 8003c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c60:	f7fc fb1e 	bl	80002a0 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4613      	mov	r3, r2
 8003c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	3301      	adds	r3, #1
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3750      	adds	r7, #80	@ 0x50
 8003c94:	46bd      	mov	sp, r7
 8003c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b03      	ldr	r3, [pc, #12]	@ (8003cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000010 	.word	0x20000010

08003cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc4:	f7ff fff0 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0a9b      	lsrs	r3, r3, #10
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	@ (8003ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	080064d8 	.word	0x080064d8

08003ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cec:	f7ff ffdc 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	4b05      	ldr	r3, [pc, #20]	@ (8003d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	0b5b      	lsrs	r3, r3, #13
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	4903      	ldr	r1, [pc, #12]	@ (8003d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfe:	5ccb      	ldrb	r3, [r1, r3]
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	080064d8 	.word	0x080064d8

08003d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e07b      	b.n	8003e1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d108      	bne.n	8003d3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d32:	d009      	beq.n	8003d48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	61da      	str	r2, [r3, #28]
 8003d3a:	e005      	b.n	8003d48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd fb2a 	bl	80013bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dcc:	ea42 0103 	orr.w	r1, r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	0c1b      	lsrs	r3, r3, #16
 8003de6:	f003 0104 	and.w	r1, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	f003 0210 	and.w	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e042      	b.n	8003eba <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fd faff 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2224      	movs	r2, #36	@ 0x24
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f972 	bl	8004150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08a      	sub	sp, #40	@ 0x28
 8003ec6:	af02      	add	r7, sp, #8
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d175      	bne.n	8003fce <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_UART_Transmit+0x2c>
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e06e      	b.n	8003fd0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2221      	movs	r2, #33	@ 0x21
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f00:	f7fd fbf4 	bl	80016ec <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1a:	d108      	bne.n	8003f2e <HAL_UART_Transmit+0x6c>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d104      	bne.n	8003f2e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	e003      	b.n	8003f36 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f36:	e02e      	b.n	8003f96 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2180      	movs	r1, #128	@ 0x80
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f848 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e03a      	b.n	8003fd0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f6e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	3302      	adds	r3, #2
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e007      	b.n	8003f88 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	781a      	ldrb	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3301      	adds	r3, #1
 8003f86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1cb      	bne.n	8003f38 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2140      	movs	r1, #64	@ 0x40
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f814 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e006      	b.n	8003fd0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e000      	b.n	8003fd0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
  }
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe8:	e03b      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d037      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fd fb7b 	bl	80016ec <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	6a3a      	ldr	r2, [r7, #32]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <UART_WaitOnFlagUntilTimeout+0x30>
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e03a      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d023      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b80      	cmp	r3, #128	@ 0x80
 800401e:	d020      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b40      	cmp	r3, #64	@ 0x40
 8004024:	d01d      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b08      	cmp	r3, #8
 8004032:	d116      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f81d 	bl	800408a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2208      	movs	r2, #8
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e00f      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d0b4      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800408a:	b480      	push	{r7}
 800408c:	b095      	sub	sp, #84	@ 0x54
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80040b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e5      	bne.n	8004092 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e5      	bne.n	80040c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d119      	bne.n	8004136 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	60bb      	str	r3, [r7, #8]
   return(result);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f023 0310 	bic.w	r3, r3, #16
 8004118:	647b      	str	r3, [r7, #68]	@ 0x44
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004122:	61ba      	str	r2, [r7, #24]
 8004124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6979      	ldr	r1, [r7, #20]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	613b      	str	r3, [r7, #16]
   return(result);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004144:	bf00      	nop
 8004146:	3754      	adds	r7, #84	@ 0x54
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004154:	b0c0      	sub	sp, #256	@ 0x100
 8004156:	af00      	add	r7, sp, #0
 8004158:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416c:	68d9      	ldr	r1, [r3, #12]
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	ea40 0301 	orr.w	r3, r0, r1
 8004178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	431a      	orrs	r2, r3
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	431a      	orrs	r2, r3
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041a8:	f021 010c 	bic.w	r1, r1, #12
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041b6:	430b      	orrs	r3, r1
 80041b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ca:	6999      	ldr	r1, [r3, #24]
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	ea40 0301 	orr.w	r3, r0, r1
 80041d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b8f      	ldr	r3, [pc, #572]	@ (800441c <UART_SetConfig+0x2cc>)
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d005      	beq.n	80041f0 <UART_SetConfig+0xa0>
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004420 <UART_SetConfig+0x2d0>)
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d104      	bne.n	80041fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041f0:	f7ff fd7a 	bl	8003ce8 <HAL_RCC_GetPCLK2Freq>
 80041f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041f8:	e003      	b.n	8004202 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041fa:	f7ff fd61 	bl	8003cc0 <HAL_RCC_GetPCLK1Freq>
 80041fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800420c:	f040 810c 	bne.w	8004428 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004214:	2200      	movs	r2, #0
 8004216:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800421a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800421e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004222:	4622      	mov	r2, r4
 8004224:	462b      	mov	r3, r5
 8004226:	1891      	adds	r1, r2, r2
 8004228:	65b9      	str	r1, [r7, #88]	@ 0x58
 800422a:	415b      	adcs	r3, r3
 800422c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800422e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004232:	4621      	mov	r1, r4
 8004234:	eb12 0801 	adds.w	r8, r2, r1
 8004238:	4629      	mov	r1, r5
 800423a:	eb43 0901 	adc.w	r9, r3, r1
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800424a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800424e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004252:	4690      	mov	r8, r2
 8004254:	4699      	mov	r9, r3
 8004256:	4623      	mov	r3, r4
 8004258:	eb18 0303 	adds.w	r3, r8, r3
 800425c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004260:	462b      	mov	r3, r5
 8004262:	eb49 0303 	adc.w	r3, r9, r3
 8004266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004276:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800427a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800427e:	460b      	mov	r3, r1
 8004280:	18db      	adds	r3, r3, r3
 8004282:	653b      	str	r3, [r7, #80]	@ 0x50
 8004284:	4613      	mov	r3, r2
 8004286:	eb42 0303 	adc.w	r3, r2, r3
 800428a:	657b      	str	r3, [r7, #84]	@ 0x54
 800428c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004294:	f7fc f804 	bl	80002a0 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4b61      	ldr	r3, [pc, #388]	@ (8004424 <UART_SetConfig+0x2d4>)
 800429e:	fba3 2302 	umull	r2, r3, r3, r2
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	011c      	lsls	r4, r3, #4
 80042a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042c0:	415b      	adcs	r3, r3
 80042c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042c8:	4641      	mov	r1, r8
 80042ca:	eb12 0a01 	adds.w	sl, r2, r1
 80042ce:	4649      	mov	r1, r9
 80042d0:	eb43 0b01 	adc.w	fp, r3, r1
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e8:	4692      	mov	sl, r2
 80042ea:	469b      	mov	fp, r3
 80042ec:	4643      	mov	r3, r8
 80042ee:	eb1a 0303 	adds.w	r3, sl, r3
 80042f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042f6:	464b      	mov	r3, r9
 80042f8:	eb4b 0303 	adc.w	r3, fp, r3
 80042fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800430c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004310:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004314:	460b      	mov	r3, r1
 8004316:	18db      	adds	r3, r3, r3
 8004318:	643b      	str	r3, [r7, #64]	@ 0x40
 800431a:	4613      	mov	r3, r2
 800431c:	eb42 0303 	adc.w	r3, r2, r3
 8004320:	647b      	str	r3, [r7, #68]	@ 0x44
 8004322:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800432a:	f7fb ffb9 	bl	80002a0 <__aeabi_uldivmod>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4611      	mov	r1, r2
 8004334:	4b3b      	ldr	r3, [pc, #236]	@ (8004424 <UART_SetConfig+0x2d4>)
 8004336:	fba3 2301 	umull	r2, r3, r3, r1
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2264      	movs	r2, #100	@ 0x64
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	1acb      	subs	r3, r1, r3
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800434a:	4b36      	ldr	r3, [pc, #216]	@ (8004424 <UART_SetConfig+0x2d4>)
 800434c:	fba3 2302 	umull	r2, r3, r3, r2
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004358:	441c      	add	r4, r3
 800435a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800435e:	2200      	movs	r2, #0
 8004360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004364:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004368:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	1891      	adds	r1, r2, r2
 8004372:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004374:	415b      	adcs	r3, r3
 8004376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800437c:	4641      	mov	r1, r8
 800437e:	1851      	adds	r1, r2, r1
 8004380:	6339      	str	r1, [r7, #48]	@ 0x30
 8004382:	4649      	mov	r1, r9
 8004384:	414b      	adcs	r3, r1
 8004386:	637b      	str	r3, [r7, #52]	@ 0x34
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004394:	4659      	mov	r1, fp
 8004396:	00cb      	lsls	r3, r1, #3
 8004398:	4651      	mov	r1, sl
 800439a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439e:	4651      	mov	r1, sl
 80043a0:	00ca      	lsls	r2, r1, #3
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	4642      	mov	r2, r8
 80043aa:	189b      	adds	r3, r3, r2
 80043ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043b0:	464b      	mov	r3, r9
 80043b2:	460a      	mov	r2, r1
 80043b4:	eb42 0303 	adc.w	r3, r2, r3
 80043b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043d0:	460b      	mov	r3, r1
 80043d2:	18db      	adds	r3, r3, r3
 80043d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043d6:	4613      	mov	r3, r2
 80043d8:	eb42 0303 	adc.w	r3, r2, r3
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043e6:	f7fb ff5b 	bl	80002a0 <__aeabi_uldivmod>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <UART_SetConfig+0x2d4>)
 80043f0:	fba3 1302 	umull	r1, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	2164      	movs	r1, #100	@ 0x64
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	3332      	adds	r3, #50	@ 0x32
 8004402:	4a08      	ldr	r2, [pc, #32]	@ (8004424 <UART_SetConfig+0x2d4>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	f003 0207 	and.w	r2, r3, #7
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4422      	add	r2, r4
 8004416:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004418:	e106      	b.n	8004628 <UART_SetConfig+0x4d8>
 800441a:	bf00      	nop
 800441c:	40011000 	.word	0x40011000
 8004420:	40011400 	.word	0x40011400
 8004424:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800442c:	2200      	movs	r2, #0
 800442e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004432:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004436:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800443a:	4642      	mov	r2, r8
 800443c:	464b      	mov	r3, r9
 800443e:	1891      	adds	r1, r2, r2
 8004440:	6239      	str	r1, [r7, #32]
 8004442:	415b      	adcs	r3, r3
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
 8004446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800444a:	4641      	mov	r1, r8
 800444c:	1854      	adds	r4, r2, r1
 800444e:	4649      	mov	r1, r9
 8004450:	eb43 0501 	adc.w	r5, r3, r1
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	00eb      	lsls	r3, r5, #3
 800445e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004462:	00e2      	lsls	r2, r4, #3
 8004464:	4614      	mov	r4, r2
 8004466:	461d      	mov	r5, r3
 8004468:	4643      	mov	r3, r8
 800446a:	18e3      	adds	r3, r4, r3
 800446c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004470:	464b      	mov	r3, r9
 8004472:	eb45 0303 	adc.w	r3, r5, r3
 8004476:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004486:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004496:	4629      	mov	r1, r5
 8004498:	008b      	lsls	r3, r1, #2
 800449a:	4621      	mov	r1, r4
 800449c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a0:	4621      	mov	r1, r4
 80044a2:	008a      	lsls	r2, r1, #2
 80044a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044a8:	f7fb fefa 	bl	80002a0 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4b60      	ldr	r3, [pc, #384]	@ (8004634 <UART_SetConfig+0x4e4>)
 80044b2:	fba3 2302 	umull	r2, r3, r3, r2
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	011c      	lsls	r4, r3, #4
 80044ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044cc:	4642      	mov	r2, r8
 80044ce:	464b      	mov	r3, r9
 80044d0:	1891      	adds	r1, r2, r2
 80044d2:	61b9      	str	r1, [r7, #24]
 80044d4:	415b      	adcs	r3, r3
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044dc:	4641      	mov	r1, r8
 80044de:	1851      	adds	r1, r2, r1
 80044e0:	6139      	str	r1, [r7, #16]
 80044e2:	4649      	mov	r1, r9
 80044e4:	414b      	adcs	r3, r1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f4:	4659      	mov	r1, fp
 80044f6:	00cb      	lsls	r3, r1, #3
 80044f8:	4651      	mov	r1, sl
 80044fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fe:	4651      	mov	r1, sl
 8004500:	00ca      	lsls	r2, r1, #3
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	4603      	mov	r3, r0
 8004508:	4642      	mov	r2, r8
 800450a:	189b      	adds	r3, r3, r2
 800450c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004510:	464b      	mov	r3, r9
 8004512:	460a      	mov	r2, r1
 8004514:	eb42 0303 	adc.w	r3, r2, r3
 8004518:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004526:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004534:	4649      	mov	r1, r9
 8004536:	008b      	lsls	r3, r1, #2
 8004538:	4641      	mov	r1, r8
 800453a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800453e:	4641      	mov	r1, r8
 8004540:	008a      	lsls	r2, r1, #2
 8004542:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004546:	f7fb feab 	bl	80002a0 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4611      	mov	r1, r2
 8004550:	4b38      	ldr	r3, [pc, #224]	@ (8004634 <UART_SetConfig+0x4e4>)
 8004552:	fba3 2301 	umull	r2, r3, r3, r1
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2264      	movs	r2, #100	@ 0x64
 800455a:	fb02 f303 	mul.w	r3, r2, r3
 800455e:	1acb      	subs	r3, r1, r3
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	3332      	adds	r3, #50	@ 0x32
 8004564:	4a33      	ldr	r2, [pc, #204]	@ (8004634 <UART_SetConfig+0x4e4>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004570:	441c      	add	r4, r3
 8004572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004576:	2200      	movs	r2, #0
 8004578:	673b      	str	r3, [r7, #112]	@ 0x70
 800457a:	677a      	str	r2, [r7, #116]	@ 0x74
 800457c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004580:	4642      	mov	r2, r8
 8004582:	464b      	mov	r3, r9
 8004584:	1891      	adds	r1, r2, r2
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	415b      	adcs	r3, r3
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004590:	4641      	mov	r1, r8
 8004592:	1851      	adds	r1, r2, r1
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	4649      	mov	r1, r9
 8004598:	414b      	adcs	r3, r1
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045a8:	4659      	mov	r1, fp
 80045aa:	00cb      	lsls	r3, r1, #3
 80045ac:	4651      	mov	r1, sl
 80045ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b2:	4651      	mov	r1, sl
 80045b4:	00ca      	lsls	r2, r1, #3
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	4642      	mov	r2, r8
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045c2:	464b      	mov	r3, r9
 80045c4:	460a      	mov	r2, r1
 80045c6:	eb42 0303 	adc.w	r3, r2, r3
 80045ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80045d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045e4:	4649      	mov	r1, r9
 80045e6:	008b      	lsls	r3, r1, #2
 80045e8:	4641      	mov	r1, r8
 80045ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ee:	4641      	mov	r1, r8
 80045f0:	008a      	lsls	r2, r1, #2
 80045f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045f6:	f7fb fe53 	bl	80002a0 <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004634 <UART_SetConfig+0x4e4>)
 8004600:	fba3 1302 	umull	r1, r3, r3, r2
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	2164      	movs	r1, #100	@ 0x64
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	3332      	adds	r3, #50	@ 0x32
 8004612:	4a08      	ldr	r2, [pc, #32]	@ (8004634 <UART_SetConfig+0x4e4>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4422      	add	r2, r4
 8004626:	609a      	str	r2, [r3, #8]
}
 8004628:	bf00      	nop
 800462a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800462e:	46bd      	mov	sp, r7
 8004630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004634:	51eb851f 	.word	0x51eb851f

08004638 <siprintf>:
 8004638:	b40e      	push	{r1, r2, r3}
 800463a:	b510      	push	{r4, lr}
 800463c:	b09d      	sub	sp, #116	@ 0x74
 800463e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	9006      	str	r0, [sp, #24]
 8004644:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004648:	480a      	ldr	r0, [pc, #40]	@ (8004674 <siprintf+0x3c>)
 800464a:	9107      	str	r1, [sp, #28]
 800464c:	9104      	str	r1, [sp, #16]
 800464e:	490a      	ldr	r1, [pc, #40]	@ (8004678 <siprintf+0x40>)
 8004650:	f853 2b04 	ldr.w	r2, [r3], #4
 8004654:	9105      	str	r1, [sp, #20]
 8004656:	2400      	movs	r4, #0
 8004658:	a902      	add	r1, sp, #8
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004660:	f000 f994 	bl	800498c <_svfiprintf_r>
 8004664:	9b02      	ldr	r3, [sp, #8]
 8004666:	701c      	strb	r4, [r3, #0]
 8004668:	b01d      	add	sp, #116	@ 0x74
 800466a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800466e:	b003      	add	sp, #12
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000001c 	.word	0x2000001c
 8004678:	ffff0208 	.word	0xffff0208

0800467c <memset>:
 800467c:	4402      	add	r2, r0
 800467e:	4603      	mov	r3, r0
 8004680:	4293      	cmp	r3, r2
 8004682:	d100      	bne.n	8004686 <memset+0xa>
 8004684:	4770      	bx	lr
 8004686:	f803 1b01 	strb.w	r1, [r3], #1
 800468a:	e7f9      	b.n	8004680 <memset+0x4>

0800468c <__errno>:
 800468c:	4b01      	ldr	r3, [pc, #4]	@ (8004694 <__errno+0x8>)
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	2000001c 	.word	0x2000001c

08004698 <__libc_init_array>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	4d0d      	ldr	r5, [pc, #52]	@ (80046d0 <__libc_init_array+0x38>)
 800469c:	4c0d      	ldr	r4, [pc, #52]	@ (80046d4 <__libc_init_array+0x3c>)
 800469e:	1b64      	subs	r4, r4, r5
 80046a0:	10a4      	asrs	r4, r4, #2
 80046a2:	2600      	movs	r6, #0
 80046a4:	42a6      	cmp	r6, r4
 80046a6:	d109      	bne.n	80046bc <__libc_init_array+0x24>
 80046a8:	4d0b      	ldr	r5, [pc, #44]	@ (80046d8 <__libc_init_array+0x40>)
 80046aa:	4c0c      	ldr	r4, [pc, #48]	@ (80046dc <__libc_init_array+0x44>)
 80046ac:	f000 fc64 	bl	8004f78 <_init>
 80046b0:	1b64      	subs	r4, r4, r5
 80046b2:	10a4      	asrs	r4, r4, #2
 80046b4:	2600      	movs	r6, #0
 80046b6:	42a6      	cmp	r6, r4
 80046b8:	d105      	bne.n	80046c6 <__libc_init_array+0x2e>
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c0:	4798      	blx	r3
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7ee      	b.n	80046a4 <__libc_init_array+0xc>
 80046c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ca:	4798      	blx	r3
 80046cc:	3601      	adds	r6, #1
 80046ce:	e7f2      	b.n	80046b6 <__libc_init_array+0x1e>
 80046d0:	0800651c 	.word	0x0800651c
 80046d4:	0800651c 	.word	0x0800651c
 80046d8:	0800651c 	.word	0x0800651c
 80046dc:	08006520 	.word	0x08006520

080046e0 <__retarget_lock_acquire_recursive>:
 80046e0:	4770      	bx	lr

080046e2 <__retarget_lock_release_recursive>:
 80046e2:	4770      	bx	lr

080046e4 <_free_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4605      	mov	r5, r0
 80046e8:	2900      	cmp	r1, #0
 80046ea:	d041      	beq.n	8004770 <_free_r+0x8c>
 80046ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f0:	1f0c      	subs	r4, r1, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bfb8      	it	lt
 80046f6:	18e4      	addlt	r4, r4, r3
 80046f8:	f000 f8e0 	bl	80048bc <__malloc_lock>
 80046fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004774 <_free_r+0x90>)
 80046fe:	6813      	ldr	r3, [r2, #0]
 8004700:	b933      	cbnz	r3, 8004710 <_free_r+0x2c>
 8004702:	6063      	str	r3, [r4, #4]
 8004704:	6014      	str	r4, [r2, #0]
 8004706:	4628      	mov	r0, r5
 8004708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800470c:	f000 b8dc 	b.w	80048c8 <__malloc_unlock>
 8004710:	42a3      	cmp	r3, r4
 8004712:	d908      	bls.n	8004726 <_free_r+0x42>
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	1821      	adds	r1, r4, r0
 8004718:	428b      	cmp	r3, r1
 800471a:	bf01      	itttt	eq
 800471c:	6819      	ldreq	r1, [r3, #0]
 800471e:	685b      	ldreq	r3, [r3, #4]
 8004720:	1809      	addeq	r1, r1, r0
 8004722:	6021      	streq	r1, [r4, #0]
 8004724:	e7ed      	b.n	8004702 <_free_r+0x1e>
 8004726:	461a      	mov	r2, r3
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	b10b      	cbz	r3, 8004730 <_free_r+0x4c>
 800472c:	42a3      	cmp	r3, r4
 800472e:	d9fa      	bls.n	8004726 <_free_r+0x42>
 8004730:	6811      	ldr	r1, [r2, #0]
 8004732:	1850      	adds	r0, r2, r1
 8004734:	42a0      	cmp	r0, r4
 8004736:	d10b      	bne.n	8004750 <_free_r+0x6c>
 8004738:	6820      	ldr	r0, [r4, #0]
 800473a:	4401      	add	r1, r0
 800473c:	1850      	adds	r0, r2, r1
 800473e:	4283      	cmp	r3, r0
 8004740:	6011      	str	r1, [r2, #0]
 8004742:	d1e0      	bne.n	8004706 <_free_r+0x22>
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	6053      	str	r3, [r2, #4]
 800474a:	4408      	add	r0, r1
 800474c:	6010      	str	r0, [r2, #0]
 800474e:	e7da      	b.n	8004706 <_free_r+0x22>
 8004750:	d902      	bls.n	8004758 <_free_r+0x74>
 8004752:	230c      	movs	r3, #12
 8004754:	602b      	str	r3, [r5, #0]
 8004756:	e7d6      	b.n	8004706 <_free_r+0x22>
 8004758:	6820      	ldr	r0, [r4, #0]
 800475a:	1821      	adds	r1, r4, r0
 800475c:	428b      	cmp	r3, r1
 800475e:	bf04      	itt	eq
 8004760:	6819      	ldreq	r1, [r3, #0]
 8004762:	685b      	ldreq	r3, [r3, #4]
 8004764:	6063      	str	r3, [r4, #4]
 8004766:	bf04      	itt	eq
 8004768:	1809      	addeq	r1, r1, r0
 800476a:	6021      	streq	r1, [r4, #0]
 800476c:	6054      	str	r4, [r2, #4]
 800476e:	e7ca      	b.n	8004706 <_free_r+0x22>
 8004770:	bd38      	pop	{r3, r4, r5, pc}
 8004772:	bf00      	nop
 8004774:	200006d0 	.word	0x200006d0

08004778 <sbrk_aligned>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4e0f      	ldr	r6, [pc, #60]	@ (80047b8 <sbrk_aligned+0x40>)
 800477c:	460c      	mov	r4, r1
 800477e:	6831      	ldr	r1, [r6, #0]
 8004780:	4605      	mov	r5, r0
 8004782:	b911      	cbnz	r1, 800478a <sbrk_aligned+0x12>
 8004784:	f000 fba4 	bl	8004ed0 <_sbrk_r>
 8004788:	6030      	str	r0, [r6, #0]
 800478a:	4621      	mov	r1, r4
 800478c:	4628      	mov	r0, r5
 800478e:	f000 fb9f 	bl	8004ed0 <_sbrk_r>
 8004792:	1c43      	adds	r3, r0, #1
 8004794:	d103      	bne.n	800479e <sbrk_aligned+0x26>
 8004796:	f04f 34ff 	mov.w	r4, #4294967295
 800479a:	4620      	mov	r0, r4
 800479c:	bd70      	pop	{r4, r5, r6, pc}
 800479e:	1cc4      	adds	r4, r0, #3
 80047a0:	f024 0403 	bic.w	r4, r4, #3
 80047a4:	42a0      	cmp	r0, r4
 80047a6:	d0f8      	beq.n	800479a <sbrk_aligned+0x22>
 80047a8:	1a21      	subs	r1, r4, r0
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 fb90 	bl	8004ed0 <_sbrk_r>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d1f2      	bne.n	800479a <sbrk_aligned+0x22>
 80047b4:	e7ef      	b.n	8004796 <sbrk_aligned+0x1e>
 80047b6:	bf00      	nop
 80047b8:	200006cc 	.word	0x200006cc

080047bc <_malloc_r>:
 80047bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c0:	1ccd      	adds	r5, r1, #3
 80047c2:	f025 0503 	bic.w	r5, r5, #3
 80047c6:	3508      	adds	r5, #8
 80047c8:	2d0c      	cmp	r5, #12
 80047ca:	bf38      	it	cc
 80047cc:	250c      	movcc	r5, #12
 80047ce:	2d00      	cmp	r5, #0
 80047d0:	4606      	mov	r6, r0
 80047d2:	db01      	blt.n	80047d8 <_malloc_r+0x1c>
 80047d4:	42a9      	cmp	r1, r5
 80047d6:	d904      	bls.n	80047e2 <_malloc_r+0x26>
 80047d8:	230c      	movs	r3, #12
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	2000      	movs	r0, #0
 80047de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048b8 <_malloc_r+0xfc>
 80047e6:	f000 f869 	bl	80048bc <__malloc_lock>
 80047ea:	f8d8 3000 	ldr.w	r3, [r8]
 80047ee:	461c      	mov	r4, r3
 80047f0:	bb44      	cbnz	r4, 8004844 <_malloc_r+0x88>
 80047f2:	4629      	mov	r1, r5
 80047f4:	4630      	mov	r0, r6
 80047f6:	f7ff ffbf 	bl	8004778 <sbrk_aligned>
 80047fa:	1c43      	adds	r3, r0, #1
 80047fc:	4604      	mov	r4, r0
 80047fe:	d158      	bne.n	80048b2 <_malloc_r+0xf6>
 8004800:	f8d8 4000 	ldr.w	r4, [r8]
 8004804:	4627      	mov	r7, r4
 8004806:	2f00      	cmp	r7, #0
 8004808:	d143      	bne.n	8004892 <_malloc_r+0xd6>
 800480a:	2c00      	cmp	r4, #0
 800480c:	d04b      	beq.n	80048a6 <_malloc_r+0xea>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	4639      	mov	r1, r7
 8004812:	4630      	mov	r0, r6
 8004814:	eb04 0903 	add.w	r9, r4, r3
 8004818:	f000 fb5a 	bl	8004ed0 <_sbrk_r>
 800481c:	4581      	cmp	r9, r0
 800481e:	d142      	bne.n	80048a6 <_malloc_r+0xea>
 8004820:	6821      	ldr	r1, [r4, #0]
 8004822:	1a6d      	subs	r5, r5, r1
 8004824:	4629      	mov	r1, r5
 8004826:	4630      	mov	r0, r6
 8004828:	f7ff ffa6 	bl	8004778 <sbrk_aligned>
 800482c:	3001      	adds	r0, #1
 800482e:	d03a      	beq.n	80048a6 <_malloc_r+0xea>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	442b      	add	r3, r5
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	f8d8 3000 	ldr.w	r3, [r8]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	bb62      	cbnz	r2, 8004898 <_malloc_r+0xdc>
 800483e:	f8c8 7000 	str.w	r7, [r8]
 8004842:	e00f      	b.n	8004864 <_malloc_r+0xa8>
 8004844:	6822      	ldr	r2, [r4, #0]
 8004846:	1b52      	subs	r2, r2, r5
 8004848:	d420      	bmi.n	800488c <_malloc_r+0xd0>
 800484a:	2a0b      	cmp	r2, #11
 800484c:	d917      	bls.n	800487e <_malloc_r+0xc2>
 800484e:	1961      	adds	r1, r4, r5
 8004850:	42a3      	cmp	r3, r4
 8004852:	6025      	str	r5, [r4, #0]
 8004854:	bf18      	it	ne
 8004856:	6059      	strne	r1, [r3, #4]
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	bf08      	it	eq
 800485c:	f8c8 1000 	streq.w	r1, [r8]
 8004860:	5162      	str	r2, [r4, r5]
 8004862:	604b      	str	r3, [r1, #4]
 8004864:	4630      	mov	r0, r6
 8004866:	f000 f82f 	bl	80048c8 <__malloc_unlock>
 800486a:	f104 000b 	add.w	r0, r4, #11
 800486e:	1d23      	adds	r3, r4, #4
 8004870:	f020 0007 	bic.w	r0, r0, #7
 8004874:	1ac2      	subs	r2, r0, r3
 8004876:	bf1c      	itt	ne
 8004878:	1a1b      	subne	r3, r3, r0
 800487a:	50a3      	strne	r3, [r4, r2]
 800487c:	e7af      	b.n	80047de <_malloc_r+0x22>
 800487e:	6862      	ldr	r2, [r4, #4]
 8004880:	42a3      	cmp	r3, r4
 8004882:	bf0c      	ite	eq
 8004884:	f8c8 2000 	streq.w	r2, [r8]
 8004888:	605a      	strne	r2, [r3, #4]
 800488a:	e7eb      	b.n	8004864 <_malloc_r+0xa8>
 800488c:	4623      	mov	r3, r4
 800488e:	6864      	ldr	r4, [r4, #4]
 8004890:	e7ae      	b.n	80047f0 <_malloc_r+0x34>
 8004892:	463c      	mov	r4, r7
 8004894:	687f      	ldr	r7, [r7, #4]
 8004896:	e7b6      	b.n	8004806 <_malloc_r+0x4a>
 8004898:	461a      	mov	r2, r3
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	42a3      	cmp	r3, r4
 800489e:	d1fb      	bne.n	8004898 <_malloc_r+0xdc>
 80048a0:	2300      	movs	r3, #0
 80048a2:	6053      	str	r3, [r2, #4]
 80048a4:	e7de      	b.n	8004864 <_malloc_r+0xa8>
 80048a6:	230c      	movs	r3, #12
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	4630      	mov	r0, r6
 80048ac:	f000 f80c 	bl	80048c8 <__malloc_unlock>
 80048b0:	e794      	b.n	80047dc <_malloc_r+0x20>
 80048b2:	6005      	str	r5, [r0, #0]
 80048b4:	e7d6      	b.n	8004864 <_malloc_r+0xa8>
 80048b6:	bf00      	nop
 80048b8:	200006d0 	.word	0x200006d0

080048bc <__malloc_lock>:
 80048bc:	4801      	ldr	r0, [pc, #4]	@ (80048c4 <__malloc_lock+0x8>)
 80048be:	f7ff bf0f 	b.w	80046e0 <__retarget_lock_acquire_recursive>
 80048c2:	bf00      	nop
 80048c4:	200006c8 	.word	0x200006c8

080048c8 <__malloc_unlock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	@ (80048d0 <__malloc_unlock+0x8>)
 80048ca:	f7ff bf0a 	b.w	80046e2 <__retarget_lock_release_recursive>
 80048ce:	bf00      	nop
 80048d0:	200006c8 	.word	0x200006c8

080048d4 <__ssputs_r>:
 80048d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d8:	688e      	ldr	r6, [r1, #8]
 80048da:	461f      	mov	r7, r3
 80048dc:	42be      	cmp	r6, r7
 80048de:	680b      	ldr	r3, [r1, #0]
 80048e0:	4682      	mov	sl, r0
 80048e2:	460c      	mov	r4, r1
 80048e4:	4690      	mov	r8, r2
 80048e6:	d82d      	bhi.n	8004944 <__ssputs_r+0x70>
 80048e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048f0:	d026      	beq.n	8004940 <__ssputs_r+0x6c>
 80048f2:	6965      	ldr	r5, [r4, #20]
 80048f4:	6909      	ldr	r1, [r1, #16]
 80048f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048fa:	eba3 0901 	sub.w	r9, r3, r1
 80048fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004902:	1c7b      	adds	r3, r7, #1
 8004904:	444b      	add	r3, r9
 8004906:	106d      	asrs	r5, r5, #1
 8004908:	429d      	cmp	r5, r3
 800490a:	bf38      	it	cc
 800490c:	461d      	movcc	r5, r3
 800490e:	0553      	lsls	r3, r2, #21
 8004910:	d527      	bpl.n	8004962 <__ssputs_r+0x8e>
 8004912:	4629      	mov	r1, r5
 8004914:	f7ff ff52 	bl	80047bc <_malloc_r>
 8004918:	4606      	mov	r6, r0
 800491a:	b360      	cbz	r0, 8004976 <__ssputs_r+0xa2>
 800491c:	6921      	ldr	r1, [r4, #16]
 800491e:	464a      	mov	r2, r9
 8004920:	f000 fae6 	bl	8004ef0 <memcpy>
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800492a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	6126      	str	r6, [r4, #16]
 8004932:	6165      	str	r5, [r4, #20]
 8004934:	444e      	add	r6, r9
 8004936:	eba5 0509 	sub.w	r5, r5, r9
 800493a:	6026      	str	r6, [r4, #0]
 800493c:	60a5      	str	r5, [r4, #8]
 800493e:	463e      	mov	r6, r7
 8004940:	42be      	cmp	r6, r7
 8004942:	d900      	bls.n	8004946 <__ssputs_r+0x72>
 8004944:	463e      	mov	r6, r7
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	4632      	mov	r2, r6
 800494a:	4641      	mov	r1, r8
 800494c:	f000 faa6 	bl	8004e9c <memmove>
 8004950:	68a3      	ldr	r3, [r4, #8]
 8004952:	1b9b      	subs	r3, r3, r6
 8004954:	60a3      	str	r3, [r4, #8]
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	4433      	add	r3, r6
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	2000      	movs	r0, #0
 800495e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004962:	462a      	mov	r2, r5
 8004964:	f000 fad2 	bl	8004f0c <_realloc_r>
 8004968:	4606      	mov	r6, r0
 800496a:	2800      	cmp	r0, #0
 800496c:	d1e0      	bne.n	8004930 <__ssputs_r+0x5c>
 800496e:	6921      	ldr	r1, [r4, #16]
 8004970:	4650      	mov	r0, sl
 8004972:	f7ff feb7 	bl	80046e4 <_free_r>
 8004976:	230c      	movs	r3, #12
 8004978:	f8ca 3000 	str.w	r3, [sl]
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004982:	81a3      	strh	r3, [r4, #12]
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	e7e9      	b.n	800495e <__ssputs_r+0x8a>
	...

0800498c <_svfiprintf_r>:
 800498c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004990:	4698      	mov	r8, r3
 8004992:	898b      	ldrh	r3, [r1, #12]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	b09d      	sub	sp, #116	@ 0x74
 8004998:	4607      	mov	r7, r0
 800499a:	460d      	mov	r5, r1
 800499c:	4614      	mov	r4, r2
 800499e:	d510      	bpl.n	80049c2 <_svfiprintf_r+0x36>
 80049a0:	690b      	ldr	r3, [r1, #16]
 80049a2:	b973      	cbnz	r3, 80049c2 <_svfiprintf_r+0x36>
 80049a4:	2140      	movs	r1, #64	@ 0x40
 80049a6:	f7ff ff09 	bl	80047bc <_malloc_r>
 80049aa:	6028      	str	r0, [r5, #0]
 80049ac:	6128      	str	r0, [r5, #16]
 80049ae:	b930      	cbnz	r0, 80049be <_svfiprintf_r+0x32>
 80049b0:	230c      	movs	r3, #12
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	b01d      	add	sp, #116	@ 0x74
 80049ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049be:	2340      	movs	r3, #64	@ 0x40
 80049c0:	616b      	str	r3, [r5, #20]
 80049c2:	2300      	movs	r3, #0
 80049c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049c6:	2320      	movs	r3, #32
 80049c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80049d0:	2330      	movs	r3, #48	@ 0x30
 80049d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b70 <_svfiprintf_r+0x1e4>
 80049d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049da:	f04f 0901 	mov.w	r9, #1
 80049de:	4623      	mov	r3, r4
 80049e0:	469a      	mov	sl, r3
 80049e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049e6:	b10a      	cbz	r2, 80049ec <_svfiprintf_r+0x60>
 80049e8:	2a25      	cmp	r2, #37	@ 0x25
 80049ea:	d1f9      	bne.n	80049e0 <_svfiprintf_r+0x54>
 80049ec:	ebba 0b04 	subs.w	fp, sl, r4
 80049f0:	d00b      	beq.n	8004a0a <_svfiprintf_r+0x7e>
 80049f2:	465b      	mov	r3, fp
 80049f4:	4622      	mov	r2, r4
 80049f6:	4629      	mov	r1, r5
 80049f8:	4638      	mov	r0, r7
 80049fa:	f7ff ff6b 	bl	80048d4 <__ssputs_r>
 80049fe:	3001      	adds	r0, #1
 8004a00:	f000 80a7 	beq.w	8004b52 <_svfiprintf_r+0x1c6>
 8004a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a06:	445a      	add	r2, fp
 8004a08:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 809f 	beq.w	8004b52 <_svfiprintf_r+0x1c6>
 8004a14:	2300      	movs	r3, #0
 8004a16:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a1e:	f10a 0a01 	add.w	sl, sl, #1
 8004a22:	9304      	str	r3, [sp, #16]
 8004a24:	9307      	str	r3, [sp, #28]
 8004a26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a2c:	4654      	mov	r4, sl
 8004a2e:	2205      	movs	r2, #5
 8004a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a34:	484e      	ldr	r0, [pc, #312]	@ (8004b70 <_svfiprintf_r+0x1e4>)
 8004a36:	f7fb fbe3 	bl	8000200 <memchr>
 8004a3a:	9a04      	ldr	r2, [sp, #16]
 8004a3c:	b9d8      	cbnz	r0, 8004a76 <_svfiprintf_r+0xea>
 8004a3e:	06d0      	lsls	r0, r2, #27
 8004a40:	bf44      	itt	mi
 8004a42:	2320      	movmi	r3, #32
 8004a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a48:	0711      	lsls	r1, r2, #28
 8004a4a:	bf44      	itt	mi
 8004a4c:	232b      	movmi	r3, #43	@ 0x2b
 8004a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a52:	f89a 3000 	ldrb.w	r3, [sl]
 8004a56:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a58:	d015      	beq.n	8004a86 <_svfiprintf_r+0xfa>
 8004a5a:	9a07      	ldr	r2, [sp, #28]
 8004a5c:	4654      	mov	r4, sl
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f04f 0c0a 	mov.w	ip, #10
 8004a64:	4621      	mov	r1, r4
 8004a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a6a:	3b30      	subs	r3, #48	@ 0x30
 8004a6c:	2b09      	cmp	r3, #9
 8004a6e:	d94b      	bls.n	8004b08 <_svfiprintf_r+0x17c>
 8004a70:	b1b0      	cbz	r0, 8004aa0 <_svfiprintf_r+0x114>
 8004a72:	9207      	str	r2, [sp, #28]
 8004a74:	e014      	b.n	8004aa0 <_svfiprintf_r+0x114>
 8004a76:	eba0 0308 	sub.w	r3, r0, r8
 8004a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	9304      	str	r3, [sp, #16]
 8004a82:	46a2      	mov	sl, r4
 8004a84:	e7d2      	b.n	8004a2c <_svfiprintf_r+0xa0>
 8004a86:	9b03      	ldr	r3, [sp, #12]
 8004a88:	1d19      	adds	r1, r3, #4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	9103      	str	r1, [sp, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bfbb      	ittet	lt
 8004a92:	425b      	neglt	r3, r3
 8004a94:	f042 0202 	orrlt.w	r2, r2, #2
 8004a98:	9307      	strge	r3, [sp, #28]
 8004a9a:	9307      	strlt	r3, [sp, #28]
 8004a9c:	bfb8      	it	lt
 8004a9e:	9204      	strlt	r2, [sp, #16]
 8004aa0:	7823      	ldrb	r3, [r4, #0]
 8004aa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004aa4:	d10a      	bne.n	8004abc <_svfiprintf_r+0x130>
 8004aa6:	7863      	ldrb	r3, [r4, #1]
 8004aa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aaa:	d132      	bne.n	8004b12 <_svfiprintf_r+0x186>
 8004aac:	9b03      	ldr	r3, [sp, #12]
 8004aae:	1d1a      	adds	r2, r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	9203      	str	r2, [sp, #12]
 8004ab4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ab8:	3402      	adds	r4, #2
 8004aba:	9305      	str	r3, [sp, #20]
 8004abc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b80 <_svfiprintf_r+0x1f4>
 8004ac0:	7821      	ldrb	r1, [r4, #0]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	4650      	mov	r0, sl
 8004ac6:	f7fb fb9b 	bl	8000200 <memchr>
 8004aca:	b138      	cbz	r0, 8004adc <_svfiprintf_r+0x150>
 8004acc:	9b04      	ldr	r3, [sp, #16]
 8004ace:	eba0 000a 	sub.w	r0, r0, sl
 8004ad2:	2240      	movs	r2, #64	@ 0x40
 8004ad4:	4082      	lsls	r2, r0
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	3401      	adds	r4, #1
 8004ada:	9304      	str	r3, [sp, #16]
 8004adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae0:	4824      	ldr	r0, [pc, #144]	@ (8004b74 <_svfiprintf_r+0x1e8>)
 8004ae2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ae6:	2206      	movs	r2, #6
 8004ae8:	f7fb fb8a 	bl	8000200 <memchr>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d036      	beq.n	8004b5e <_svfiprintf_r+0x1d2>
 8004af0:	4b21      	ldr	r3, [pc, #132]	@ (8004b78 <_svfiprintf_r+0x1ec>)
 8004af2:	bb1b      	cbnz	r3, 8004b3c <_svfiprintf_r+0x1b0>
 8004af4:	9b03      	ldr	r3, [sp, #12]
 8004af6:	3307      	adds	r3, #7
 8004af8:	f023 0307 	bic.w	r3, r3, #7
 8004afc:	3308      	adds	r3, #8
 8004afe:	9303      	str	r3, [sp, #12]
 8004b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b02:	4433      	add	r3, r6
 8004b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b06:	e76a      	b.n	80049de <_svfiprintf_r+0x52>
 8004b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	2001      	movs	r0, #1
 8004b10:	e7a8      	b.n	8004a64 <_svfiprintf_r+0xd8>
 8004b12:	2300      	movs	r3, #0
 8004b14:	3401      	adds	r4, #1
 8004b16:	9305      	str	r3, [sp, #20]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f04f 0c0a 	mov.w	ip, #10
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b24:	3a30      	subs	r2, #48	@ 0x30
 8004b26:	2a09      	cmp	r2, #9
 8004b28:	d903      	bls.n	8004b32 <_svfiprintf_r+0x1a6>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0c6      	beq.n	8004abc <_svfiprintf_r+0x130>
 8004b2e:	9105      	str	r1, [sp, #20]
 8004b30:	e7c4      	b.n	8004abc <_svfiprintf_r+0x130>
 8004b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b36:	4604      	mov	r4, r0
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e7f0      	b.n	8004b1e <_svfiprintf_r+0x192>
 8004b3c:	ab03      	add	r3, sp, #12
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	462a      	mov	r2, r5
 8004b42:	4b0e      	ldr	r3, [pc, #56]	@ (8004b7c <_svfiprintf_r+0x1f0>)
 8004b44:	a904      	add	r1, sp, #16
 8004b46:	4638      	mov	r0, r7
 8004b48:	f3af 8000 	nop.w
 8004b4c:	1c42      	adds	r2, r0, #1
 8004b4e:	4606      	mov	r6, r0
 8004b50:	d1d6      	bne.n	8004b00 <_svfiprintf_r+0x174>
 8004b52:	89ab      	ldrh	r3, [r5, #12]
 8004b54:	065b      	lsls	r3, r3, #25
 8004b56:	f53f af2d 	bmi.w	80049b4 <_svfiprintf_r+0x28>
 8004b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b5c:	e72c      	b.n	80049b8 <_svfiprintf_r+0x2c>
 8004b5e:	ab03      	add	r3, sp, #12
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	462a      	mov	r2, r5
 8004b64:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <_svfiprintf_r+0x1f0>)
 8004b66:	a904      	add	r1, sp, #16
 8004b68:	4638      	mov	r0, r7
 8004b6a:	f000 f879 	bl	8004c60 <_printf_i>
 8004b6e:	e7ed      	b.n	8004b4c <_svfiprintf_r+0x1c0>
 8004b70:	080064e0 	.word	0x080064e0
 8004b74:	080064ea 	.word	0x080064ea
 8004b78:	00000000 	.word	0x00000000
 8004b7c:	080048d5 	.word	0x080048d5
 8004b80:	080064e6 	.word	0x080064e6

08004b84 <_printf_common>:
 8004b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b88:	4616      	mov	r6, r2
 8004b8a:	4698      	mov	r8, r3
 8004b8c:	688a      	ldr	r2, [r1, #8]
 8004b8e:	690b      	ldr	r3, [r1, #16]
 8004b90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b94:	4293      	cmp	r3, r2
 8004b96:	bfb8      	it	lt
 8004b98:	4613      	movlt	r3, r2
 8004b9a:	6033      	str	r3, [r6, #0]
 8004b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ba0:	4607      	mov	r7, r0
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	b10a      	cbz	r2, 8004baa <_printf_common+0x26>
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	6033      	str	r3, [r6, #0]
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	0699      	lsls	r1, r3, #26
 8004bae:	bf42      	ittt	mi
 8004bb0:	6833      	ldrmi	r3, [r6, #0]
 8004bb2:	3302      	addmi	r3, #2
 8004bb4:	6033      	strmi	r3, [r6, #0]
 8004bb6:	6825      	ldr	r5, [r4, #0]
 8004bb8:	f015 0506 	ands.w	r5, r5, #6
 8004bbc:	d106      	bne.n	8004bcc <_printf_common+0x48>
 8004bbe:	f104 0a19 	add.w	sl, r4, #25
 8004bc2:	68e3      	ldr	r3, [r4, #12]
 8004bc4:	6832      	ldr	r2, [r6, #0]
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	dc26      	bgt.n	8004c1a <_printf_common+0x96>
 8004bcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bd0:	6822      	ldr	r2, [r4, #0]
 8004bd2:	3b00      	subs	r3, #0
 8004bd4:	bf18      	it	ne
 8004bd6:	2301      	movne	r3, #1
 8004bd8:	0692      	lsls	r2, r2, #26
 8004bda:	d42b      	bmi.n	8004c34 <_printf_common+0xb0>
 8004bdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004be0:	4641      	mov	r1, r8
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c8      	blx	r9
 8004be6:	3001      	adds	r0, #1
 8004be8:	d01e      	beq.n	8004c28 <_printf_common+0xa4>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	6922      	ldr	r2, [r4, #16]
 8004bee:	f003 0306 	and.w	r3, r3, #6
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	bf02      	ittt	eq
 8004bf6:	68e5      	ldreq	r5, [r4, #12]
 8004bf8:	6833      	ldreq	r3, [r6, #0]
 8004bfa:	1aed      	subeq	r5, r5, r3
 8004bfc:	68a3      	ldr	r3, [r4, #8]
 8004bfe:	bf0c      	ite	eq
 8004c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c04:	2500      	movne	r5, #0
 8004c06:	4293      	cmp	r3, r2
 8004c08:	bfc4      	itt	gt
 8004c0a:	1a9b      	subgt	r3, r3, r2
 8004c0c:	18ed      	addgt	r5, r5, r3
 8004c0e:	2600      	movs	r6, #0
 8004c10:	341a      	adds	r4, #26
 8004c12:	42b5      	cmp	r5, r6
 8004c14:	d11a      	bne.n	8004c4c <_printf_common+0xc8>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e008      	b.n	8004c2c <_printf_common+0xa8>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	4652      	mov	r2, sl
 8004c1e:	4641      	mov	r1, r8
 8004c20:	4638      	mov	r0, r7
 8004c22:	47c8      	blx	r9
 8004c24:	3001      	adds	r0, #1
 8004c26:	d103      	bne.n	8004c30 <_printf_common+0xac>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c30:	3501      	adds	r5, #1
 8004c32:	e7c6      	b.n	8004bc2 <_printf_common+0x3e>
 8004c34:	18e1      	adds	r1, r4, r3
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	2030      	movs	r0, #48	@ 0x30
 8004c3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c3e:	4422      	add	r2, r4
 8004c40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c48:	3302      	adds	r3, #2
 8004c4a:	e7c7      	b.n	8004bdc <_printf_common+0x58>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4622      	mov	r2, r4
 8004c50:	4641      	mov	r1, r8
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c8      	blx	r9
 8004c56:	3001      	adds	r0, #1
 8004c58:	d0e6      	beq.n	8004c28 <_printf_common+0xa4>
 8004c5a:	3601      	adds	r6, #1
 8004c5c:	e7d9      	b.n	8004c12 <_printf_common+0x8e>
	...

08004c60 <_printf_i>:
 8004c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	7e0f      	ldrb	r7, [r1, #24]
 8004c66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c68:	2f78      	cmp	r7, #120	@ 0x78
 8004c6a:	4691      	mov	r9, r2
 8004c6c:	4680      	mov	r8, r0
 8004c6e:	460c      	mov	r4, r1
 8004c70:	469a      	mov	sl, r3
 8004c72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c76:	d807      	bhi.n	8004c88 <_printf_i+0x28>
 8004c78:	2f62      	cmp	r7, #98	@ 0x62
 8004c7a:	d80a      	bhi.n	8004c92 <_printf_i+0x32>
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	f000 80d1 	beq.w	8004e24 <_printf_i+0x1c4>
 8004c82:	2f58      	cmp	r7, #88	@ 0x58
 8004c84:	f000 80b8 	beq.w	8004df8 <_printf_i+0x198>
 8004c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c90:	e03a      	b.n	8004d08 <_printf_i+0xa8>
 8004c92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c96:	2b15      	cmp	r3, #21
 8004c98:	d8f6      	bhi.n	8004c88 <_printf_i+0x28>
 8004c9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004ca0 <_printf_i+0x40>)
 8004c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004c89 	.word	0x08004c89
 8004cac:	08004c89 	.word	0x08004c89
 8004cb0:	08004c89 	.word	0x08004c89
 8004cb4:	08004c89 	.word	0x08004c89
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004c89 	.word	0x08004c89
 8004cc0:	08004c89 	.word	0x08004c89
 8004cc4:	08004c89 	.word	0x08004c89
 8004cc8:	08004c89 	.word	0x08004c89
 8004ccc:	08004e0b 	.word	0x08004e0b
 8004cd0:	08004d37 	.word	0x08004d37
 8004cd4:	08004dc5 	.word	0x08004dc5
 8004cd8:	08004c89 	.word	0x08004c89
 8004cdc:	08004c89 	.word	0x08004c89
 8004ce0:	08004e2d 	.word	0x08004e2d
 8004ce4:	08004c89 	.word	0x08004c89
 8004ce8:	08004d37 	.word	0x08004d37
 8004cec:	08004c89 	.word	0x08004c89
 8004cf0:	08004c89 	.word	0x08004c89
 8004cf4:	08004dcd 	.word	0x08004dcd
 8004cf8:	6833      	ldr	r3, [r6, #0]
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6032      	str	r2, [r6, #0]
 8004d00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e09c      	b.n	8004e46 <_printf_i+0x1e6>
 8004d0c:	6833      	ldr	r3, [r6, #0]
 8004d0e:	6820      	ldr	r0, [r4, #0]
 8004d10:	1d19      	adds	r1, r3, #4
 8004d12:	6031      	str	r1, [r6, #0]
 8004d14:	0606      	lsls	r6, r0, #24
 8004d16:	d501      	bpl.n	8004d1c <_printf_i+0xbc>
 8004d18:	681d      	ldr	r5, [r3, #0]
 8004d1a:	e003      	b.n	8004d24 <_printf_i+0xc4>
 8004d1c:	0645      	lsls	r5, r0, #25
 8004d1e:	d5fb      	bpl.n	8004d18 <_printf_i+0xb8>
 8004d20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d24:	2d00      	cmp	r5, #0
 8004d26:	da03      	bge.n	8004d30 <_printf_i+0xd0>
 8004d28:	232d      	movs	r3, #45	@ 0x2d
 8004d2a:	426d      	negs	r5, r5
 8004d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d30:	4858      	ldr	r0, [pc, #352]	@ (8004e94 <_printf_i+0x234>)
 8004d32:	230a      	movs	r3, #10
 8004d34:	e011      	b.n	8004d5a <_printf_i+0xfa>
 8004d36:	6821      	ldr	r1, [r4, #0]
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	0608      	lsls	r0, r1, #24
 8004d3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d40:	d402      	bmi.n	8004d48 <_printf_i+0xe8>
 8004d42:	0649      	lsls	r1, r1, #25
 8004d44:	bf48      	it	mi
 8004d46:	b2ad      	uxthmi	r5, r5
 8004d48:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d4a:	4852      	ldr	r0, [pc, #328]	@ (8004e94 <_printf_i+0x234>)
 8004d4c:	6033      	str	r3, [r6, #0]
 8004d4e:	bf14      	ite	ne
 8004d50:	230a      	movne	r3, #10
 8004d52:	2308      	moveq	r3, #8
 8004d54:	2100      	movs	r1, #0
 8004d56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d5a:	6866      	ldr	r6, [r4, #4]
 8004d5c:	60a6      	str	r6, [r4, #8]
 8004d5e:	2e00      	cmp	r6, #0
 8004d60:	db05      	blt.n	8004d6e <_printf_i+0x10e>
 8004d62:	6821      	ldr	r1, [r4, #0]
 8004d64:	432e      	orrs	r6, r5
 8004d66:	f021 0104 	bic.w	r1, r1, #4
 8004d6a:	6021      	str	r1, [r4, #0]
 8004d6c:	d04b      	beq.n	8004e06 <_printf_i+0x1a6>
 8004d6e:	4616      	mov	r6, r2
 8004d70:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d74:	fb03 5711 	mls	r7, r3, r1, r5
 8004d78:	5dc7      	ldrb	r7, [r0, r7]
 8004d7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d7e:	462f      	mov	r7, r5
 8004d80:	42bb      	cmp	r3, r7
 8004d82:	460d      	mov	r5, r1
 8004d84:	d9f4      	bls.n	8004d70 <_printf_i+0x110>
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d10b      	bne.n	8004da2 <_printf_i+0x142>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	07df      	lsls	r7, r3, #31
 8004d8e:	d508      	bpl.n	8004da2 <_printf_i+0x142>
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	6861      	ldr	r1, [r4, #4]
 8004d94:	4299      	cmp	r1, r3
 8004d96:	bfde      	ittt	le
 8004d98:	2330      	movle	r3, #48	@ 0x30
 8004d9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004da2:	1b92      	subs	r2, r2, r6
 8004da4:	6122      	str	r2, [r4, #16]
 8004da6:	f8cd a000 	str.w	sl, [sp]
 8004daa:	464b      	mov	r3, r9
 8004dac:	aa03      	add	r2, sp, #12
 8004dae:	4621      	mov	r1, r4
 8004db0:	4640      	mov	r0, r8
 8004db2:	f7ff fee7 	bl	8004b84 <_printf_common>
 8004db6:	3001      	adds	r0, #1
 8004db8:	d14a      	bne.n	8004e50 <_printf_i+0x1f0>
 8004dba:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbe:	b004      	add	sp, #16
 8004dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	f043 0320 	orr.w	r3, r3, #32
 8004dca:	6023      	str	r3, [r4, #0]
 8004dcc:	4832      	ldr	r0, [pc, #200]	@ (8004e98 <_printf_i+0x238>)
 8004dce:	2778      	movs	r7, #120	@ 0x78
 8004dd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	6831      	ldr	r1, [r6, #0]
 8004dd8:	061f      	lsls	r7, r3, #24
 8004dda:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dde:	d402      	bmi.n	8004de6 <_printf_i+0x186>
 8004de0:	065f      	lsls	r7, r3, #25
 8004de2:	bf48      	it	mi
 8004de4:	b2ad      	uxthmi	r5, r5
 8004de6:	6031      	str	r1, [r6, #0]
 8004de8:	07d9      	lsls	r1, r3, #31
 8004dea:	bf44      	itt	mi
 8004dec:	f043 0320 	orrmi.w	r3, r3, #32
 8004df0:	6023      	strmi	r3, [r4, #0]
 8004df2:	b11d      	cbz	r5, 8004dfc <_printf_i+0x19c>
 8004df4:	2310      	movs	r3, #16
 8004df6:	e7ad      	b.n	8004d54 <_printf_i+0xf4>
 8004df8:	4826      	ldr	r0, [pc, #152]	@ (8004e94 <_printf_i+0x234>)
 8004dfa:	e7e9      	b.n	8004dd0 <_printf_i+0x170>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	f023 0320 	bic.w	r3, r3, #32
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	e7f6      	b.n	8004df4 <_printf_i+0x194>
 8004e06:	4616      	mov	r6, r2
 8004e08:	e7bd      	b.n	8004d86 <_printf_i+0x126>
 8004e0a:	6833      	ldr	r3, [r6, #0]
 8004e0c:	6825      	ldr	r5, [r4, #0]
 8004e0e:	6961      	ldr	r1, [r4, #20]
 8004e10:	1d18      	adds	r0, r3, #4
 8004e12:	6030      	str	r0, [r6, #0]
 8004e14:	062e      	lsls	r6, r5, #24
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	d501      	bpl.n	8004e1e <_printf_i+0x1be>
 8004e1a:	6019      	str	r1, [r3, #0]
 8004e1c:	e002      	b.n	8004e24 <_printf_i+0x1c4>
 8004e1e:	0668      	lsls	r0, r5, #25
 8004e20:	d5fb      	bpl.n	8004e1a <_printf_i+0x1ba>
 8004e22:	8019      	strh	r1, [r3, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	6123      	str	r3, [r4, #16]
 8004e28:	4616      	mov	r6, r2
 8004e2a:	e7bc      	b.n	8004da6 <_printf_i+0x146>
 8004e2c:	6833      	ldr	r3, [r6, #0]
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	6032      	str	r2, [r6, #0]
 8004e32:	681e      	ldr	r6, [r3, #0]
 8004e34:	6862      	ldr	r2, [r4, #4]
 8004e36:	2100      	movs	r1, #0
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f7fb f9e1 	bl	8000200 <memchr>
 8004e3e:	b108      	cbz	r0, 8004e44 <_printf_i+0x1e4>
 8004e40:	1b80      	subs	r0, r0, r6
 8004e42:	6060      	str	r0, [r4, #4]
 8004e44:	6863      	ldr	r3, [r4, #4]
 8004e46:	6123      	str	r3, [r4, #16]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e4e:	e7aa      	b.n	8004da6 <_printf_i+0x146>
 8004e50:	6923      	ldr	r3, [r4, #16]
 8004e52:	4632      	mov	r2, r6
 8004e54:	4649      	mov	r1, r9
 8004e56:	4640      	mov	r0, r8
 8004e58:	47d0      	blx	sl
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d0ad      	beq.n	8004dba <_printf_i+0x15a>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	079b      	lsls	r3, r3, #30
 8004e62:	d413      	bmi.n	8004e8c <_printf_i+0x22c>
 8004e64:	68e0      	ldr	r0, [r4, #12]
 8004e66:	9b03      	ldr	r3, [sp, #12]
 8004e68:	4298      	cmp	r0, r3
 8004e6a:	bfb8      	it	lt
 8004e6c:	4618      	movlt	r0, r3
 8004e6e:	e7a6      	b.n	8004dbe <_printf_i+0x15e>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4632      	mov	r2, r6
 8004e74:	4649      	mov	r1, r9
 8004e76:	4640      	mov	r0, r8
 8004e78:	47d0      	blx	sl
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d09d      	beq.n	8004dba <_printf_i+0x15a>
 8004e7e:	3501      	adds	r5, #1
 8004e80:	68e3      	ldr	r3, [r4, #12]
 8004e82:	9903      	ldr	r1, [sp, #12]
 8004e84:	1a5b      	subs	r3, r3, r1
 8004e86:	42ab      	cmp	r3, r5
 8004e88:	dcf2      	bgt.n	8004e70 <_printf_i+0x210>
 8004e8a:	e7eb      	b.n	8004e64 <_printf_i+0x204>
 8004e8c:	2500      	movs	r5, #0
 8004e8e:	f104 0619 	add.w	r6, r4, #25
 8004e92:	e7f5      	b.n	8004e80 <_printf_i+0x220>
 8004e94:	080064f1 	.word	0x080064f1
 8004e98:	08006502 	.word	0x08006502

08004e9c <memmove>:
 8004e9c:	4288      	cmp	r0, r1
 8004e9e:	b510      	push	{r4, lr}
 8004ea0:	eb01 0402 	add.w	r4, r1, r2
 8004ea4:	d902      	bls.n	8004eac <memmove+0x10>
 8004ea6:	4284      	cmp	r4, r0
 8004ea8:	4623      	mov	r3, r4
 8004eaa:	d807      	bhi.n	8004ebc <memmove+0x20>
 8004eac:	1e43      	subs	r3, r0, #1
 8004eae:	42a1      	cmp	r1, r4
 8004eb0:	d008      	beq.n	8004ec4 <memmove+0x28>
 8004eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eba:	e7f8      	b.n	8004eae <memmove+0x12>
 8004ebc:	4402      	add	r2, r0
 8004ebe:	4601      	mov	r1, r0
 8004ec0:	428a      	cmp	r2, r1
 8004ec2:	d100      	bne.n	8004ec6 <memmove+0x2a>
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ece:	e7f7      	b.n	8004ec0 <memmove+0x24>

08004ed0 <_sbrk_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4d06      	ldr	r5, [pc, #24]	@ (8004eec <_sbrk_r+0x1c>)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f7fc fb2e 	bl	800153c <_sbrk>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_sbrk_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_sbrk_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	200006c4 	.word	0x200006c4

08004ef0 <memcpy>:
 8004ef0:	440a      	add	r2, r1
 8004ef2:	4291      	cmp	r1, r2
 8004ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ef8:	d100      	bne.n	8004efc <memcpy+0xc>
 8004efa:	4770      	bx	lr
 8004efc:	b510      	push	{r4, lr}
 8004efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f06:	4291      	cmp	r1, r2
 8004f08:	d1f9      	bne.n	8004efe <memcpy+0xe>
 8004f0a:	bd10      	pop	{r4, pc}

08004f0c <_realloc_r>:
 8004f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f10:	4607      	mov	r7, r0
 8004f12:	4614      	mov	r4, r2
 8004f14:	460d      	mov	r5, r1
 8004f16:	b921      	cbnz	r1, 8004f22 <_realloc_r+0x16>
 8004f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	f7ff bc4d 	b.w	80047bc <_malloc_r>
 8004f22:	b92a      	cbnz	r2, 8004f30 <_realloc_r+0x24>
 8004f24:	f7ff fbde 	bl	80046e4 <_free_r>
 8004f28:	4625      	mov	r5, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f30:	f000 f81a 	bl	8004f68 <_malloc_usable_size_r>
 8004f34:	4284      	cmp	r4, r0
 8004f36:	4606      	mov	r6, r0
 8004f38:	d802      	bhi.n	8004f40 <_realloc_r+0x34>
 8004f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f3e:	d8f4      	bhi.n	8004f2a <_realloc_r+0x1e>
 8004f40:	4621      	mov	r1, r4
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7ff fc3a 	bl	80047bc <_malloc_r>
 8004f48:	4680      	mov	r8, r0
 8004f4a:	b908      	cbnz	r0, 8004f50 <_realloc_r+0x44>
 8004f4c:	4645      	mov	r5, r8
 8004f4e:	e7ec      	b.n	8004f2a <_realloc_r+0x1e>
 8004f50:	42b4      	cmp	r4, r6
 8004f52:	4622      	mov	r2, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	bf28      	it	cs
 8004f58:	4632      	movcs	r2, r6
 8004f5a:	f7ff ffc9 	bl	8004ef0 <memcpy>
 8004f5e:	4629      	mov	r1, r5
 8004f60:	4638      	mov	r0, r7
 8004f62:	f7ff fbbf 	bl	80046e4 <_free_r>
 8004f66:	e7f1      	b.n	8004f4c <_realloc_r+0x40>

08004f68 <_malloc_usable_size_r>:
 8004f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6c:	1f18      	subs	r0, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfbc      	itt	lt
 8004f72:	580b      	ldrlt	r3, [r1, r0]
 8004f74:	18c0      	addlt	r0, r0, r3
 8004f76:	4770      	bx	lr

08004f78 <_init>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr

08004f84 <_fini>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	bf00      	nop
 8004f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8a:	bc08      	pop	{r3}
 8004f8c:	469e      	mov	lr, r3
 8004f8e:	4770      	bx	lr
