
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f14  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e74  080060c4  080060c4  000070c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f38  08006f38  0000809c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f38  08006f38  00007f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f40  08006f40  0000809c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f40  08006f40  00007f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f44  08006f44  00007f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08006f48  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000809c  2**0
                  CONTENTS
 10 .bss          00000f04  2000009c  2000009c  0000809c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000fa0  20000fa0  0000809c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e9e1  00000000  00000000  000080cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002301  00000000  00000000  00016aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00018db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a66  00000000  00000000  00019b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024388  00000000  00000000  0001a56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011185  00000000  00000000  0003e8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d70d9  00000000  00000000  0004fa7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126b54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c5c  00000000  00000000  00126b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0012a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080060ac 	.word	0x080060ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	080060ac 	.word	0x080060ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t SH1106_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SH1106_I2C, SH1106_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005d2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80005d6:	2201      	movs	r2, #1
 80005d8:	2178      	movs	r1, #120	@ 0x78
 80005da:	484c      	ldr	r0, [pc, #304]	@ (800070c <SH1106_Init+0x140>)
 80005dc:	f002 fc12 	bl	8002e04 <HAL_I2C_IsDeviceReady>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SH1106_Init+0x1e>
		/* Return false */
		return 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e08b      	b.n	8000702 <SH1106_Init+0x136>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80005ea:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80005ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005f0:	e002      	b.n	80005f8 <SH1106_Init+0x2c>
		p--;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f9      	bne.n	80005f2 <SH1106_Init+0x26>
	
	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
 80005fe:	22ae      	movs	r2, #174	@ 0xae
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	@ 0x78
 8000604:	f000 fa54 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
 8000608:	22b0      	movs	r2, #176	@ 0xb0
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	@ 0x78
 800060e:	f000 fa4f 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
 8000612:	2281      	movs	r2, #129	@ 0x81
 8000614:	2100      	movs	r1, #0
 8000616:	2078      	movs	r0, #120	@ 0x78
 8000618:	f000 fa4a 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
 800061c:	22ff      	movs	r2, #255	@ 0xff
 800061e:	2100      	movs	r1, #0
 8000620:	2078      	movs	r0, #120	@ 0x78
 8000622:	f000 fa45 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000626:	22a1      	movs	r2, #161	@ 0xa1
 8000628:	2100      	movs	r1, #0
 800062a:	2078      	movs	r0, #120	@ 0x78
 800062c:	f000 fa40 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
 8000630:	22a6      	movs	r2, #166	@ 0xa6
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	@ 0x78
 8000636:	f000 fa3b 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800063a:	22a8      	movs	r2, #168	@ 0xa8
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	@ 0x78
 8000640:	f000 fa36 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
 8000644:	223f      	movs	r2, #63	@ 0x3f
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	@ 0x78
 800064a:	f000 fa31 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
 800064e:	22ad      	movs	r2, #173	@ 0xad
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	@ 0x78
 8000654:	f000 fa2c 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
 8000658:	228b      	movs	r2, #139	@ 0x8b
 800065a:	2100      	movs	r1, #0
 800065c:	2078      	movs	r0, #120	@ 0x78
 800065e:	f000 fa27 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
 8000662:	2232      	movs	r2, #50	@ 0x32
 8000664:	2100      	movs	r1, #0
 8000666:	2078      	movs	r0, #120	@ 0x78
 8000668:	f000 fa22 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800066c:	22c8      	movs	r2, #200	@ 0xc8
 800066e:	2100      	movs	r1, #0
 8000670:	2078      	movs	r0, #120	@ 0x78
 8000672:	f000 fa1d 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
 8000676:	22d3      	movs	r2, #211	@ 0xd3
 8000678:	2100      	movs	r1, #0
 800067a:	2078      	movs	r0, #120	@ 0x78
 800067c:	f000 fa18 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2078      	movs	r0, #120	@ 0x78
 8000686:	f000 fa13 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800068a:	22d5      	movs	r2, #213	@ 0xd5
 800068c:	2100      	movs	r1, #0
 800068e:	2078      	movs	r0, #120	@ 0x78
 8000690:	f000 fa0e 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
 8000694:	2280      	movs	r2, #128	@ 0x80
 8000696:	2100      	movs	r1, #0
 8000698:	2078      	movs	r0, #120	@ 0x78
 800069a:	f000 fa09 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
 800069e:	22d9      	movs	r2, #217	@ 0xd9
 80006a0:	2100      	movs	r1, #0
 80006a2:	2078      	movs	r0, #120	@ 0x78
 80006a4:	f000 fa04 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
 80006a8:	221f      	movs	r2, #31
 80006aa:	2100      	movs	r1, #0
 80006ac:	2078      	movs	r0, #120	@ 0x78
 80006ae:	f000 f9ff 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006b2:	22da      	movs	r2, #218	@ 0xda
 80006b4:	2100      	movs	r1, #0
 80006b6:	2078      	movs	r0, #120	@ 0x78
 80006b8:	f000 f9fa 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
 80006bc:	2212      	movs	r2, #18
 80006be:	2100      	movs	r1, #0
 80006c0:	2078      	movs	r0, #120	@ 0x78
 80006c2:	f000 f9f5 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
 80006c6:	22db      	movs	r2, #219	@ 0xdb
 80006c8:	2100      	movs	r1, #0
 80006ca:	2078      	movs	r0, #120	@ 0x78
 80006cc:	f000 f9f0 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
 80006d0:	2240      	movs	r2, #64	@ 0x40
 80006d2:	2100      	movs	r1, #0
 80006d4:	2078      	movs	r0, #120	@ 0x78
 80006d6:	f000 f9eb 	bl	8000ab0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
 80006da:	22af      	movs	r2, #175	@ 0xaf
 80006dc:	2100      	movs	r1, #0
 80006de:	2078      	movs	r0, #120	@ 0x78
 80006e0:	f000 f9e6 	bl	8000ab0 <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 f843 	bl	8000770 <SH1106_Fill>
	
	/* Update screen */
	SH1106_UpdateScreen();
 80006ea:	f000 f813 	bl	8000714 <SH1106_UpdateScreen>
	
	/* Set default values */
	SH1106.CurrentX = 0;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <SH1106_Init+0x144>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <SH1106_Init+0x144>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SH1106.Initialized = 1;
 80006fa:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <SH1106_Init+0x144>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000700:	2301      	movs	r3, #1
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200004c0 	.word	0x200004c0
 8000710:	200004b8 	.word	0x200004b8

08000714 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
 800071e:	e01d      	b.n	800075c <SH1106_UpdateScreen+0x48>
		SH1106_WRITECOMMAND(0xB0 + m);
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	3b50      	subs	r3, #80	@ 0x50
 8000724:	b2db      	uxtb	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	2078      	movs	r0, #120	@ 0x78
 800072c:	f000 f9c0 	bl	8000ab0 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2078      	movs	r0, #120	@ 0x78
 8000736:	f000 f9bb 	bl	8000ab0 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 800073a:	2210      	movs	r2, #16
 800073c:	2100      	movs	r1, #0
 800073e:	2078      	movs	r0, #120	@ 0x78
 8000740:	f000 f9b6 	bl	8000ab0 <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	01db      	lsls	r3, r3, #7
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <SH1106_UpdateScreen+0x58>)
 800074a:	441a      	add	r2, r3
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	2140      	movs	r1, #64	@ 0x40
 8000750:	2078      	movs	r0, #120	@ 0x78
 8000752:	f000 f947 	bl	80009e4 <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	3301      	adds	r3, #1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9de      	bls.n	8000720 <SH1106_UpdateScreen+0xc>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000b8 	.word	0x200000b8

08000770 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <SH1106_Fill+0x14>
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <SH1106_Fill+0x16>
 8000784:	23ff      	movs	r3, #255	@ 0xff
 8000786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800078a:	4619      	mov	r1, r3
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <SH1106_Fill+0x2c>)
 800078e:	f005 f80f 	bl	80057b0 <memset>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000b8 	.word	0x200000b8

080007a0 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]
 80007aa:	460b      	mov	r3, r1
 80007ac:	80bb      	strh	r3, [r7, #4]
 80007ae:	4613      	mov	r3, r2
 80007b0:	70fb      	strb	r3, [r7, #3]
	if (
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007b6:	d848      	bhi.n	800084a <SH1106_DrawPixel+0xaa>
		x >= SH1106_WIDTH ||
 80007b8:	88bb      	ldrh	r3, [r7, #4]
 80007ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80007bc:	d845      	bhi.n	800084a <SH1106_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 80007be:	4b26      	ldr	r3, [pc, #152]	@ (8000858 <SH1106_DrawPixel+0xb8>)
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf0c      	ite	eq
 80007cc:	2301      	moveq	r3, #1
 80007ce:	2300      	movne	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d11a      	bne.n	8000810 <SH1106_DrawPixel+0x70>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 80007da:	88fa      	ldrh	r2, [r7, #6]
 80007dc:	88bb      	ldrh	r3, [r7, #4]
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	b298      	uxth	r0, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	01db      	lsls	r3, r3, #7
 80007e6:	4413      	add	r3, r2
 80007e8:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <SH1106_DrawPixel+0xbc>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	f003 0307 	and.w	r3, r3, #7
 80007f4:	2101      	movs	r1, #1
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b259      	sxtb	r1, r3
 8000800:	88fa      	ldrh	r2, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	01db      	lsls	r3, r3, #7
 8000806:	4413      	add	r3, r2
 8000808:	b2c9      	uxtb	r1, r1
 800080a:	4a14      	ldr	r2, [pc, #80]	@ (800085c <SH1106_DrawPixel+0xbc>)
 800080c:	54d1      	strb	r1, [r2, r3]
 800080e:	e01d      	b.n	800084c <SH1106_DrawPixel+0xac>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 8000810:	88fa      	ldrh	r2, [r7, #6]
 8000812:	88bb      	ldrh	r3, [r7, #4]
 8000814:	08db      	lsrs	r3, r3, #3
 8000816:	b298      	uxth	r0, r3
 8000818:	4603      	mov	r3, r0
 800081a:	01db      	lsls	r3, r3, #7
 800081c:	4413      	add	r3, r2
 800081e:	4a0f      	ldr	r2, [pc, #60]	@ (800085c <SH1106_DrawPixel+0xbc>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	b25a      	sxtb	r2, r3
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	b25b      	sxtb	r3, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	b25b      	sxtb	r3, r3
 8000836:	4013      	ands	r3, r2
 8000838:	b259      	sxtb	r1, r3
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	4603      	mov	r3, r0
 800083e:	01db      	lsls	r3, r3, #7
 8000840:	4413      	add	r3, r2
 8000842:	b2c9      	uxtb	r1, r1
 8000844:	4a05      	ldr	r2, [pc, #20]	@ (800085c <SH1106_DrawPixel+0xbc>)
 8000846:	54d1      	strb	r1, [r2, r3]
 8000848:	e000      	b.n	800084c <SH1106_DrawPixel+0xac>
		return;
 800084a:	bf00      	nop
	}
}
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	200004b8 	.word	0x200004b8
 800085c:	200000b8 	.word	0x200000b8

08000860 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	80fb      	strh	r3, [r7, #6]
 800086c:	4613      	mov	r3, r2
 800086e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 8000870:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <SH1106_GotoXY+0x28>)
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <SH1106_GotoXY+0x28>)
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	8053      	strh	r3, [r2, #2]
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	200004b8 	.word	0x200004b8

0800088c <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 800089c:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <SH1106_Putc+0xf8>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
	if (
 80008a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008aa:	dc07      	bgt.n	80008bc <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 80008ac:	4b35      	ldr	r3, [pc, #212]	@ (8000984 <SH1106_Putc+0xf8>)
 80008ae:	885b      	ldrh	r3, [r3, #2]
 80008b0:	461a      	mov	r2, r3
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 80008b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ba:	dd01      	ble.n	80008c0 <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	e05d      	b.n	800097c <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	e04b      	b.n	800095e <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b20      	subs	r3, #32
 80008ce:	6839      	ldr	r1, [r7, #0]
 80008d0:	7849      	ldrb	r1, [r1, #1]
 80008d2:	fb01 f303 	mul.w	r3, r1, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	440b      	add	r3, r1
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	e030      	b.n	800094c <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d010      	beq.n	800091c <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <SH1106_Putc+0xf8>)
 80008fc:	881a      	ldrh	r2, [r3, #0]
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	b29b      	uxth	r3, r3
 8000902:	4413      	add	r3, r2
 8000904:	b298      	uxth	r0, r3
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <SH1106_Putc+0xf8>)
 8000908:	885a      	ldrh	r2, [r3, #2]
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	b29b      	uxth	r3, r3
 800090e:	4413      	add	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	4619      	mov	r1, r3
 8000916:	f7ff ff43 	bl	80007a0 <SH1106_DrawPixel>
 800091a:	e014      	b.n	8000946 <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <SH1106_Putc+0xf8>)
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	b29b      	uxth	r3, r3
 8000924:	4413      	add	r3, r2
 8000926:	b298      	uxth	r0, r3
 8000928:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <SH1106_Putc+0xf8>)
 800092a:	885a      	ldrh	r2, [r3, #2]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	b29b      	uxth	r3, r3
 8000930:	4413      	add	r3, r2
 8000932:	b299      	uxth	r1, r3
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf0c      	ite	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	2300      	movne	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	461a      	mov	r2, r3
 8000942:	f7ff ff2d 	bl	80007a0 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	3301      	adds	r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4293      	cmp	r3, r2
 8000956:	d3c8      	bcc.n	80008ea <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3301      	adds	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	785b      	ldrb	r3, [r3, #1]
 8000962:	461a      	mov	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	4293      	cmp	r3, r2
 8000968:	d3ad      	bcc.n	80008c6 <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <SH1106_Putc+0xf8>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	4413      	add	r3, r2
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <SH1106_Putc+0xf8>)
 8000978:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800097a:	79fb      	ldrb	r3, [r7, #7]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200004b8 	.word	0x200004b8

08000988 <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	4613      	mov	r3, r2
 8000994:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000996:	e012      	b.n	80009be <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	68b9      	ldr	r1, [r7, #8]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff73 	bl	800088c <SH1106_Putc>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d002      	beq.n	80009b8 <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	e008      	b.n	80009ca <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1e8      	bne.n	8000998 <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	781b      	ldrb	r3, [r3, #0]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <SH1106_Clear>:
}
 


void SH1106_Clear (void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
	SH1106_Fill (0);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff feca 	bl	8000770 <SH1106_Fill>
    SH1106_UpdateScreen();
 80009dc:	f7ff fe9a 	bl	8000714 <SH1106_UpdateScreen>
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x8D);
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b0c7      	sub	sp, #284	@ 0x11c
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	4604      	mov	r4, r0
 80009ec:	4608      	mov	r0, r1
 80009ee:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80009f2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80009f6:	600a      	str	r2, [r1, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009fe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a02:	4622      	mov	r2, r4
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a0a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000a0e:	4602      	mov	r2, r0
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a1a:	460a      	mov	r2, r1
 8000a1c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a26:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a2a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000a2e:	7812      	ldrb	r2, [r2, #0]
 8000a30:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a38:	e015      	b.n	8000a66 <SH1106_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a3a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a3e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a42:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	441a      	add	r2, r3
 8000a4a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a4e:	3301      	adds	r3, #1
 8000a50:	7811      	ldrb	r1, [r2, #0]
 8000a52:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a56:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a5a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a5c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a60:	3301      	adds	r3, #1
 8000a62:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a66:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a70:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a74:	8812      	ldrh	r2, [r2, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d8df      	bhi.n	8000a3a <SH1106_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 8000a7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a7e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b299      	uxth	r1, r3
 8000a86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	f107 020c 	add.w	r2, r7, #12
 8000a98:	200a      	movs	r0, #10
 8000a9a:	9000      	str	r0, [sp, #0]
 8000a9c:	4803      	ldr	r0, [pc, #12]	@ (8000aac <SH1106_I2C_WriteMulti+0xc8>)
 8000a9e:	f001 fe81 	bl	80027a4 <HAL_I2C_Master_Transmit>
}
 8000aa2:	bf00      	nop
 8000aa4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	200004c0 	.word	0x200004c0

08000ab0 <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
 8000aba:	460b      	mov	r3, r1
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ac6:	797b      	ldrb	r3, [r7, #5]
 8000ac8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	b299      	uxth	r1, r3
 8000ace:	f107 020c 	add.w	r2, r7, #12
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	4803      	ldr	r0, [pc, #12]	@ (8000ae8 <SH1106_I2C_Write+0x38>)
 8000ada:	f001 fe63 	bl	80027a4 <HAL_I2C_Master_Transmit>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200004c0 	.word	0x200004c0

08000aec <GetTime>:
	Set_time.weekday = 16;
	//write time to DS1307
	HAL_I2C_Mem_Write(&hi2c3, 0xD0, 0, 1, (uint8_t*) &Set_time, 7, 1000);
}

struct Time GetTime() {
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	b093      	sub	sp, #76	@ 0x4c
 8000af0:	af06      	add	r7, sp, #24
 8000af2:	6078      	str	r0, [r7, #4]
	char buff[30];
	struct Time Get_Time;
	//read time back
	HAL_I2C_Mem_Read(&hi2c3, 0xD1, 0, 1, (uint8_t*) &Get_Time, 7, 1000);
 8000af4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	2307      	movs	r3, #7
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2301      	movs	r3, #1
 8000b06:	2200      	movs	r2, #0
 8000b08:	21d1      	movs	r1, #209	@ 0xd1
 8000b0a:	4814      	ldr	r0, [pc, #80]	@ (8000b5c <GetTime+0x70>)
 8000b0c:	f001 ff48 	bl	80029a0 <HAL_I2C_Mem_Read>
	sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d \n", Get_Time.hour,
 8000b10:	7abb      	ldrb	r3, [r7, #10]
 8000b12:	461e      	mov	r6, r3
			Get_Time.min, Get_Time.sec, Get_Time.weekday, Get_Time.day,
 8000b14:	7a7b      	ldrb	r3, [r7, #9]
	sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d \n", Get_Time.hour,
 8000b16:	469c      	mov	ip, r3
			Get_Time.min, Get_Time.sec, Get_Time.weekday, Get_Time.day,
 8000b18:	7a3b      	ldrb	r3, [r7, #8]
 8000b1a:	7afa      	ldrb	r2, [r7, #11]
 8000b1c:	7b39      	ldrb	r1, [r7, #12]
			Get_Time.month, Get_Time.year);
 8000b1e:	7b78      	ldrb	r0, [r7, #13]
	sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d \n", Get_Time.hour,
 8000b20:	4604      	mov	r4, r0
			Get_Time.month, Get_Time.year);
 8000b22:	7bb8      	ldrb	r0, [r7, #14]
	sprintf(buff, "%02d:%02d:%02d-%02d-%02d/%02d/%02d \n", Get_Time.hour,
 8000b24:	4605      	mov	r5, r0
 8000b26:	f107 0010 	add.w	r0, r7, #16
 8000b2a:	9504      	str	r5, [sp, #16]
 8000b2c:	9403      	str	r4, [sp, #12]
 8000b2e:	9102      	str	r1, [sp, #8]
 8000b30:	9201      	str	r2, [sp, #4]
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	4663      	mov	r3, ip
 8000b36:	4632      	mov	r2, r6
 8000b38:	4909      	ldr	r1, [pc, #36]	@ (8000b60 <GetTime+0x74>)
 8000b3a:	f004 fe17 	bl	800576c <siprintf>
//	HAL_UART_Transmit(&huart1, buff, strlen(buff), 1000);
	return Get_Time;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	461a      	mov	r2, r3
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	6010      	str	r0, [r2, #0]
 8000b4a:	8899      	ldrh	r1, [r3, #4]
 8000b4c:	799b      	ldrb	r3, [r3, #6]
 8000b4e:	8091      	strh	r1, [r2, #4]
 8000b50:	7193      	strb	r3, [r2, #6]
}
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	3734      	adds	r7, #52	@ 0x34
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200004c0 	.word	0x200004c0
 8000b60:	080060c4 	.word	0x080060c4

08000b64 <checkValidCard>:

int checkValidCard(uint8_t CardID[]) {
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	int card_valid = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < sizeof(cards) / sizeof(cards[0]); i++) {
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	e025      	b.n	8000bc2 <checkValidCard+0x5e>
		int match = 1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < 5; j++) {
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	e014      	b.n	8000baa <checkValidCard+0x46>
			if (CardID[j] != cards[i][j]) {
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	7819      	ldrb	r1, [r3, #0]
 8000b88:	4813      	ldr	r0, [pc, #76]	@ (8000bd8 <checkValidCard+0x74>)
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	18c2      	adds	r2, r0, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4413      	add	r3, r2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	d002      	beq.n	8000ba4 <checkValidCard+0x40>
				match = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
				break;
 8000ba2:	e005      	b.n	8000bb0 <checkValidCard+0x4c>
		for (int j = 0; j < 5; j++) {
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	dde7      	ble.n	8000b80 <checkValidCard+0x1c>
			}
		}
		if (match) {
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <checkValidCard+0x58>
			card_valid = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
			break;
 8000bba:	e005      	b.n	8000bc8 <checkValidCard+0x64>
	for (int i = 0; i < sizeof(cards) / sizeof(cards[0]); i++) {
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2b09      	cmp	r3, #9
 8000bc6:	d9d6      	bls.n	8000b76 <checkValidCard+0x12>
		}
	}
	return card_valid;
 8000bc8:	697b      	ldr	r3, [r7, #20]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008

08000bdc <addCard>:

void addCard() {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	SH1106_Clear();
 8000be2:	f7ff fef6 	bl	80009d2 <SH1106_Clear>
	SH1106_GotoXY(12, 10);
 8000be6:	210a      	movs	r1, #10
 8000be8:	200c      	movs	r0, #12
 8000bea:	f7ff fe39 	bl	8000860 <SH1106_GotoXY>
	SH1106_Puts("Add card", &Font_11x18, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	492d      	ldr	r1, [pc, #180]	@ (8000ca8 <addCard+0xcc>)
 8000bf2:	482e      	ldr	r0, [pc, #184]	@ (8000cac <addCard+0xd0>)
 8000bf4:	f7ff fec8 	bl	8000988 <SH1106_Puts>
	SH1106_UpdateScreen();
 8000bf8:	f7ff fd8c 	bl	8000714 <SH1106_UpdateScreen>
	uint8_t CardID[5];
	while (1) {
		HAL_Delay(100);
 8000bfc:	2064      	movs	r0, #100	@ 0x64
 8000bfe:	f001 f9bd 	bl	8001f7c <HAL_Delay>
		if (TM_MFRC522_Check(CardID) == MI_OK) {
 8000c02:	463b      	mov	r3, r7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fe7f 	bl	8001908 <TM_MFRC522_Check>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f5      	bne.n	8000bfc <addCard+0x20>
			if (!checkValidCard(CardID)) {
 8000c10:	463b      	mov	r3, r7
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffa6 	bl	8000b64 <checkValidCard>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d140      	bne.n	8000ca0 <addCard+0xc4>
				cardCount++;
 8000c1e:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <addCard+0xd4>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <addCard+0xd4>)
 8000c28:	701a      	strb	r2, [r3, #0]
				cards[cardCount][0] = CardID[0];
 8000c2a:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <addCard+0xd4>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	7838      	ldrb	r0, [r7, #0]
 8000c32:	4a20      	ldr	r2, [pc, #128]	@ (8000cb4 <addCard+0xd8>)
 8000c34:	460b      	mov	r3, r1
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	440b      	add	r3, r1
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	701a      	strb	r2, [r3, #0]
				cards[cardCount][1] = CardID[1];
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <addCard+0xd4>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	7878      	ldrb	r0, [r7, #1]
 8000c48:	4a1a      	ldr	r2, [pc, #104]	@ (8000cb4 <addCard+0xd8>)
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	4413      	add	r3, r2
 8000c52:	3301      	adds	r3, #1
 8000c54:	4602      	mov	r2, r0
 8000c56:	701a      	strb	r2, [r3, #0]
				cards[cardCount][2] = CardID[2];
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <addCard+0xd4>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	78b8      	ldrb	r0, [r7, #2]
 8000c60:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <addCard+0xd8>)
 8000c62:	460b      	mov	r3, r1
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	440b      	add	r3, r1
 8000c68:	4413      	add	r3, r2
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	701a      	strb	r2, [r3, #0]
				cards[cardCount][3] = CardID[3];
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <addCard+0xd4>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	78f8      	ldrb	r0, [r7, #3]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb4 <addCard+0xd8>)
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	4413      	add	r3, r2
 8000c82:	3303      	adds	r3, #3
 8000c84:	4602      	mov	r2, r0
 8000c86:	701a      	strb	r2, [r3, #0]
				cards[cardCount][4] = CardID[4];
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <addCard+0xd4>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	7938      	ldrb	r0, [r7, #4]
 8000c90:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <addCard+0xd8>)
 8000c92:	460b      	mov	r3, r1
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	440b      	add	r3, r1
 8000c98:	4413      	add	r3, r2
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	701a      	strb	r2, [r3, #0]
			}
			return;
 8000ca0:	bf00      	nop
		}
	}
}
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	080060ec 	.word	0x080060ec
 8000cb0:	2000003a 	.word	0x2000003a
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <viewLogs>:

void viewLogs() {
 8000cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cbc:	b09d      	sub	sp, #116	@ 0x74
 8000cbe:	af0c      	add	r7, sp, #48	@ 0x30
 8000cc0:	466b      	mov	r3, sp
 8000cc2:	607b      	str	r3, [r7, #4]
	char buf[logCount][100];
 8000cc4:	4b92      	ldr	r3, [pc, #584]	@ (8000f10 <viewLogs+0x258>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	1e53      	subs	r3, r2, #1
 8000cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000cd8:	1896      	adds	r6, r2, r2
 8000cda:	623e      	str	r6, [r7, #32]
 8000cdc:	415b      	adcs	r3, r3
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ce4:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8000ce6:	1994      	adds	r4, r2, r6
 8000ce8:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8000cea:	eb43 0506 	adc.w	r5, r3, r6
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	f04f 0300 	mov.w	r3, #0
 8000cf6:	00eb      	lsls	r3, r5, #3
 8000cf8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cfc:	00e2      	lsls	r2, r4, #3
 8000cfe:	4614      	mov	r4, r2
 8000d00:	461d      	mov	r5, r3
 8000d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d04:	18e3      	adds	r3, r4, r3
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d0a:	eb45 0303 	adc.w	r3, r5, r3
 8000d0e:	61fb      	str	r3, [r7, #28]
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8000d1c:	4634      	mov	r4, r6
 8000d1e:	0163      	lsls	r3, r4, #5
 8000d20:	462c      	mov	r4, r5
 8000d22:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000d26:	462c      	mov	r4, r5
 8000d28:	0162      	lsls	r2, r4, #5
 8000d2a:	68fd      	ldr	r5, [r7, #12]
 8000d2c:	462a      	mov	r2, r5
 8000d2e:	2300      	movs	r3, #0
 8000d30:	4690      	mov	r8, r2
 8000d32:	4699      	mov	r9, r3
 8000d34:	4642      	mov	r2, r8
 8000d36:	464b      	mov	r3, r9
 8000d38:	1894      	adds	r4, r2, r2
 8000d3a:	613c      	str	r4, [r7, #16]
 8000d3c:	415b      	adcs	r3, r3
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d44:	eb12 0008 	adds.w	r0, r2, r8
 8000d48:	eb43 0109 	adc.w	r1, r3, r9
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	00cb      	lsls	r3, r1, #3
 8000d56:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d5a:	00c2      	lsls	r2, r0, #3
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	eb10 0a08 	adds.w	sl, r0, r8
 8000d64:	eb41 0b09 	adc.w	fp, r1, r9
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000d74:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000d78:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000d7c:	462a      	mov	r2, r5
 8000d7e:	2364      	movs	r3, #100	@ 0x64
 8000d80:	fb02 f303 	mul.w	r3, r2, r3
 8000d84:	3307      	adds	r3, #7
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000d8e:	ab0c      	add	r3, sp, #48	@ 0x30
 8000d90:	3300      	adds	r3, #0
 8000d92:	637b      	str	r3, [r7, #52]	@ 0x34
	for (int i = 0; i < logCount; i++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d98:	e0ac      	b.n	8000ef4 <viewLogs+0x23c>
		sprintf(buf[i],
 8000d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d9c:	2264      	movs	r2, #100	@ 0x64
 8000d9e:	fb02 f303 	mul.w	r3, r2, r3
 8000da2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000da4:	18d0      	adds	r0, r2, r3
				"%02d:%02d:%02d-%02d-%02d/%02d/%02d CardID:%02X%02X%02X%02X%02X Status:%s\n",
				Logs[i].time.hour, Logs[i].time.min, Logs[i].time.sec,
 8000da6:	4a5b      	ldr	r2, [pc, #364]	@ (8000f14 <viewLogs+0x25c>)
 8000da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000daa:	2116      	movs	r1, #22
 8000dac:	fb01 f303 	mul.w	r3, r1, r3
 8000db0:	4413      	add	r3, r2
 8000db2:	3302      	adds	r3, #2
 8000db4:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000db6:	469c      	mov	ip, r3
				Logs[i].time.hour, Logs[i].time.min, Logs[i].time.sec,
 8000db8:	4a56      	ldr	r2, [pc, #344]	@ (8000f14 <viewLogs+0x25c>)
 8000dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dbc:	2116      	movs	r1, #22
 8000dbe:	fb01 f303 	mul.w	r3, r1, r3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000dc8:	469e      	mov	lr, r3
				Logs[i].time.hour, Logs[i].time.min, Logs[i].time.sec,
 8000dca:	4a52      	ldr	r2, [pc, #328]	@ (8000f14 <viewLogs+0x25c>)
 8000dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dce:	2116      	movs	r1, #22
 8000dd0:	fb01 f303 	mul.w	r3, r1, r3
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000dd8:	461e      	mov	r6, r3
				Logs[i].time.weekday, Logs[i].time.day, Logs[i].time.month,
 8000dda:	4a4e      	ldr	r2, [pc, #312]	@ (8000f14 <viewLogs+0x25c>)
 8000ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dde:	2116      	movs	r1, #22
 8000de0:	fb01 f303 	mul.w	r3, r1, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	3303      	adds	r3, #3
 8000de8:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
				Logs[i].time.weekday, Logs[i].time.day, Logs[i].time.month,
 8000dec:	4a49      	ldr	r2, [pc, #292]	@ (8000f14 <viewLogs+0x25c>)
 8000dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000df0:	2116      	movs	r1, #22
 8000df2:	fb01 f303 	mul.w	r3, r1, r3
 8000df6:	4413      	add	r3, r2
 8000df8:	3304      	adds	r3, #4
 8000dfa:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000dfc:	623b      	str	r3, [r7, #32]
				Logs[i].time.weekday, Logs[i].time.day, Logs[i].time.month,
 8000dfe:	4a45      	ldr	r2, [pc, #276]	@ (8000f14 <viewLogs+0x25c>)
 8000e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e02:	2116      	movs	r1, #22
 8000e04:	fb01 f303 	mul.w	r3, r1, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	3305      	adds	r3, #5
 8000e0c:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000e0e:	61bb      	str	r3, [r7, #24]
				Logs[i].time.year, Logs[i].CardID[0], Logs[i].CardID[1],
 8000e10:	4a40      	ldr	r2, [pc, #256]	@ (8000f14 <viewLogs+0x25c>)
 8000e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e14:	2116      	movs	r1, #22
 8000e16:	fb01 f303 	mul.w	r3, r1, r3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3306      	adds	r3, #6
 8000e1e:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000e20:	613b      	str	r3, [r7, #16]
				Logs[i].time.year, Logs[i].CardID[0], Logs[i].CardID[1],
 8000e22:	4a3c      	ldr	r2, [pc, #240]	@ (8000f14 <viewLogs+0x25c>)
 8000e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e26:	2116      	movs	r1, #22
 8000e28:	fb01 f303 	mul.w	r3, r1, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3307      	adds	r3, #7
 8000e30:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000e32:	60fb      	str	r3, [r7, #12]
				Logs[i].time.year, Logs[i].CardID[0], Logs[i].CardID[1],
 8000e34:	4a37      	ldr	r2, [pc, #220]	@ (8000f14 <viewLogs+0x25c>)
 8000e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e38:	2116      	movs	r1, #22
 8000e3a:	fb01 f303 	mul.w	r3, r1, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	3308      	adds	r3, #8
 8000e42:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000e44:	60bb      	str	r3, [r7, #8]
				Logs[i].CardID[2], Logs[i].CardID[3], Logs[i].CardID[4],
 8000e46:	4a33      	ldr	r2, [pc, #204]	@ (8000f14 <viewLogs+0x25c>)
 8000e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e4a:	2116      	movs	r1, #22
 8000e4c:	fb01 f303 	mul.w	r3, r1, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	3309      	adds	r3, #9
 8000e54:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000e56:	461d      	mov	r5, r3
				Logs[i].CardID[2], Logs[i].CardID[3], Logs[i].CardID[4],
 8000e58:	492e      	ldr	r1, [pc, #184]	@ (8000f14 <viewLogs+0x25c>)
 8000e5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e5c:	2316      	movs	r3, #22
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	440b      	add	r3, r1
 8000e64:	330a      	adds	r3, #10
 8000e66:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000e68:	461c      	mov	r4, r3
				Logs[i].CardID[2], Logs[i].CardID[3], Logs[i].CardID[4],
 8000e6a:	492a      	ldr	r1, [pc, #168]	@ (8000f14 <viewLogs+0x25c>)
 8000e6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e6e:	2316      	movs	r3, #22
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	440b      	add	r3, r1
 8000e76:	330b      	adds	r3, #11
 8000e78:	781b      	ldrb	r3, [r3, #0]
		sprintf(buf[i],
 8000e7a:	4619      	mov	r1, r3
				Logs[i].status);
 8000e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e7e:	2316      	movs	r3, #22
 8000e80:	fb02 f303 	mul.w	r3, r2, r3
 8000e84:	f103 0208 	add.w	r2, r3, #8
 8000e88:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <viewLogs+0x25c>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3304      	adds	r3, #4
		sprintf(buf[i],
 8000e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8000e90:	9109      	str	r1, [sp, #36]	@ 0x24
 8000e92:	9408      	str	r4, [sp, #32]
 8000e94:	9507      	str	r5, [sp, #28]
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	9206      	str	r2, [sp, #24]
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	9205      	str	r2, [sp, #20]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	9204      	str	r2, [sp, #16]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	9203      	str	r2, [sp, #12]
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	9202      	str	r2, [sp, #8]
 8000eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	9600      	str	r6, [sp, #0]
 8000eb0:	4673      	mov	r3, lr
 8000eb2:	4662      	mov	r2, ip
 8000eb4:	4918      	ldr	r1, [pc, #96]	@ (8000f18 <viewLogs+0x260>)
 8000eb6:	f004 fc59 	bl	800576c <siprintf>
		HAL_UART_Transmit(&huart1, buf[i], strlen(buf[i]), 1000);
 8000eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ebc:	2264      	movs	r2, #100	@ 0x64
 8000ebe:	fb02 f303 	mul.w	r3, r2, r3
 8000ec2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ec4:	18d4      	adds	r4, r2, r3
 8000ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ec8:	2264      	movs	r2, #100	@ 0x64
 8000eca:	fb02 f303 	mul.w	r3, r2, r3
 8000ece:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f98c 	bl	80001f0 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <viewLogs+0x264>)
 8000ee4:	f003 fff0 	bl	8004ec8 <HAL_UART_Transmit>
		HAL_Delay(50);
 8000ee8:	2032      	movs	r0, #50	@ 0x32
 8000eea:	f001 f847 	bl	8001f7c <HAL_Delay>
	for (int i = 0; i < logCount; i++) {
 8000eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <viewLogs+0x258>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000efa:	429a      	cmp	r2, r3
 8000efc:	f6ff af4d 	blt.w	8000d9a <viewLogs+0xe2>
 8000f00:	f8d7 d004 	ldr.w	sp, [r7, #4]
	}
}
 8000f04:	bf00      	nop
 8000f06:	3744      	adds	r7, #68	@ 0x44
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000e4c 	.word	0x20000e4c
 8000f14:	200005b4 	.word	0x200005b4
 8000f18:	080060f8 	.word	0x080060f8
 8000f1c:	2000056c 	.word	0x2000056c

08000f20 <readCmd>:

void readCmd() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	@ 0x38
 8000f24:	af00      	add	r7, sp, #0
	uint8_t rxBuffer[1];
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, rxBuffer, 1, 100);
 8000f26:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000f2a:	2364      	movs	r3, #100	@ 0x64
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4818      	ldr	r0, [pc, #96]	@ (8000f90 <readCmd+0x70>)
 8000f30:	f004 f855 	bl	8004fde <HAL_UART_Receive>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (status == HAL_OK) {
 8000f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d121      	bne.n	8000f86 <readCmd+0x66>
		switch (rxBuffer[0]) {
 8000f42:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d002      	beq.n	8000f50 <readCmd+0x30>
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d003      	beq.n	8000f56 <readCmd+0x36>
 8000f4e:	e005      	b.n	8000f5c <readCmd+0x3c>
		case 0x01:
			addCard();
 8000f50:	f7ff fe44 	bl	8000bdc <addCard>
			break;
 8000f54:	e017      	b.n	8000f86 <readCmd+0x66>
		case 0x02:
			viewLogs();
 8000f56:	f7ff feaf 	bl	8000cb8 <viewLogs>
			break;
 8000f5a:	e014      	b.n	8000f86 <readCmd+0x66>
		default: {
			char buf[50];
			sprintf(buf, "Unknown command: 0x%02X\n", rxBuffer[0]);
 8000f5c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000f60:	461a      	mov	r2, r3
 8000f62:	463b      	mov	r3, r7
 8000f64:	490b      	ldr	r1, [pc, #44]	@ (8000f94 <readCmd+0x74>)
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 fc00 	bl	800576c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff f93e 	bl	80001f0 <strlen>
 8000f74:	4603      	mov	r3, r0
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4639      	mov	r1, r7
 8000f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7e:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <readCmd+0x70>)
 8000f80:	f003 ffa2 	bl	8004ec8 <HAL_UART_Transmit>
			break;
 8000f84:	bf00      	nop
		}
		}
	}
}
 8000f86:	bf00      	nop
 8000f88:	3738      	adds	r7, #56	@ 0x38
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000056c 	.word	0x2000056c
 8000f94:	08006144 	.word	0x08006144

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b09f      	sub	sp, #124	@ 0x7c
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f000 ff7b 	bl	8001e98 <HAL_Init>

  /* USER CODE BEGIN Init */
  SH1106_Init();
 8000fa2:	f7ff fb13 	bl	80005cc <SH1106_Init>
  TM_MFRC522_Init();
 8000fa6:	f000 fc89 	bl	80018bc <TM_MFRC522_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f953 	bl	8001254 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f000 fa61 	bl	8001474 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000fb2:	f000 f9bf 	bl	8001334 <MX_I2C3_Init>
  MX_SPI4_Init();
 8000fb6:	f000 f9fd 	bl	80013b4 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000fba:	f000 fa31 	bl	8001420 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	 readCmd();
 8000fbe:	f7ff ffaf 	bl	8000f20 <readCmd>

	uint8_t CardID[5];
	HAL_Delay(100);
 8000fc2:	2064      	movs	r0, #100	@ 0x64
 8000fc4:	f000 ffda 	bl	8001f7c <HAL_Delay>
	if (TM_MFRC522_Check(CardID) == MI_OK) {
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fc9b 	bl	8001908 <TM_MFRC522_Check>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f040 8104 	bne.w	80011e2 <main+0x24a>
		if (newCard) {
 8000fda:	4b94      	ldr	r3, [pc, #592]	@ (800122c <main+0x294>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80f8 	beq.w	80011d4 <main+0x23c>
			newCard = 0;
 8000fe4:	4b91      	ldr	r3, [pc, #580]	@ (800122c <main+0x294>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
			if (checkValidCard(CardID)) {
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fdb8 	bl	8000b64 <checkValidCard>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d076      	beq.n	80010e8 <main+0x150>
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001000:	488b      	ldr	r0, [pc, #556]	@ (8001230 <main+0x298>)
 8001002:	f001 fa71 	bl	80024e8 <HAL_GPIO_WritePin>
				SH1106_Clear();
 8001006:	f7ff fce4 	bl	80009d2 <SH1106_Clear>
				SH1106_GotoXY(12, 10);
 800100a:	210a      	movs	r1, #10
 800100c:	200c      	movs	r0, #12
 800100e:	f7ff fc27 	bl	8000860 <SH1106_GotoXY>
				SH1106_Puts("Welcome", &Font_11x18, 1);
 8001012:	2201      	movs	r2, #1
 8001014:	4987      	ldr	r1, [pc, #540]	@ (8001234 <main+0x29c>)
 8001016:	4888      	ldr	r0, [pc, #544]	@ (8001238 <main+0x2a0>)
 8001018:	f7ff fcb6 	bl	8000988 <SH1106_Puts>
				SH1106_UpdateScreen();
 800101c:	f7ff fb7a 	bl	8000714 <SH1106_UpdateScreen>

				Logs[logCount].time = GetTime();
 8001020:	4b86      	ldr	r3, [pc, #536]	@ (800123c <main+0x2a4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a86      	ldr	r2, [pc, #536]	@ (8001240 <main+0x2a8>)
 8001026:	2116      	movs	r1, #22
 8001028:	fb01 f303 	mul.w	r3, r1, r3
 800102c:	18d4      	adds	r4, r2, r3
 800102e:	463b      	mov	r3, r7
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fd5b 	bl	8000aec <GetTime>
 8001036:	4622      	mov	r2, r4
 8001038:	463b      	mov	r3, r7
 800103a:	6819      	ldr	r1, [r3, #0]
 800103c:	6011      	str	r1, [r2, #0]
 800103e:	8899      	ldrh	r1, [r3, #4]
 8001040:	799b      	ldrb	r3, [r3, #6]
 8001042:	8091      	strh	r1, [r2, #4]
 8001044:	7193      	strb	r3, [r2, #6]
				Logs[logCount].CardID[0] = CardID[0];
 8001046:	4b7d      	ldr	r3, [pc, #500]	@ (800123c <main+0x2a4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	7b38      	ldrb	r0, [r7, #12]
 800104c:	4a7c      	ldr	r2, [pc, #496]	@ (8001240 <main+0x2a8>)
 800104e:	2116      	movs	r1, #22
 8001050:	fb01 f303 	mul.w	r3, r1, r3
 8001054:	4413      	add	r3, r2
 8001056:	3307      	adds	r3, #7
 8001058:	4602      	mov	r2, r0
 800105a:	701a      	strb	r2, [r3, #0]
				Logs[logCount].CardID[1] = CardID[1];
 800105c:	4b77      	ldr	r3, [pc, #476]	@ (800123c <main+0x2a4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	7b78      	ldrb	r0, [r7, #13]
 8001062:	4a77      	ldr	r2, [pc, #476]	@ (8001240 <main+0x2a8>)
 8001064:	2116      	movs	r1, #22
 8001066:	fb01 f303 	mul.w	r3, r1, r3
 800106a:	4413      	add	r3, r2
 800106c:	3308      	adds	r3, #8
 800106e:	4602      	mov	r2, r0
 8001070:	701a      	strb	r2, [r3, #0]
				Logs[logCount].CardID[2] = CardID[2];
 8001072:	4b72      	ldr	r3, [pc, #456]	@ (800123c <main+0x2a4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	7bb8      	ldrb	r0, [r7, #14]
 8001078:	4a71      	ldr	r2, [pc, #452]	@ (8001240 <main+0x2a8>)
 800107a:	2116      	movs	r1, #22
 800107c:	fb01 f303 	mul.w	r3, r1, r3
 8001080:	4413      	add	r3, r2
 8001082:	3309      	adds	r3, #9
 8001084:	4602      	mov	r2, r0
 8001086:	701a      	strb	r2, [r3, #0]
				Logs[logCount].CardID[3] = CardID[3];
 8001088:	4b6c      	ldr	r3, [pc, #432]	@ (800123c <main+0x2a4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	7bf8      	ldrb	r0, [r7, #15]
 800108e:	4a6c      	ldr	r2, [pc, #432]	@ (8001240 <main+0x2a8>)
 8001090:	2116      	movs	r1, #22
 8001092:	fb01 f303 	mul.w	r3, r1, r3
 8001096:	4413      	add	r3, r2
 8001098:	330a      	adds	r3, #10
 800109a:	4602      	mov	r2, r0
 800109c:	701a      	strb	r2, [r3, #0]
				Logs[logCount].CardID[4] = CardID[4];
 800109e:	4b67      	ldr	r3, [pc, #412]	@ (800123c <main+0x2a4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	7c38      	ldrb	r0, [r7, #16]
 80010a4:	4a66      	ldr	r2, [pc, #408]	@ (8001240 <main+0x2a8>)
 80010a6:	2116      	movs	r1, #22
 80010a8:	fb01 f303 	mul.w	r3, r1, r3
 80010ac:	4413      	add	r3, r2
 80010ae:	330b      	adds	r3, #11
 80010b0:	4602      	mov	r2, r0
 80010b2:	701a      	strb	r2, [r3, #0]
				strcpy(Logs[logCount].status, "Accepted");
 80010b4:	4b61      	ldr	r3, [pc, #388]	@ (800123c <main+0x2a4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2216      	movs	r2, #22
 80010ba:	fb02 f303 	mul.w	r3, r2, r3
 80010be:	3308      	adds	r3, #8
 80010c0:	4a5f      	ldr	r2, [pc, #380]	@ (8001240 <main+0x2a8>)
 80010c2:	4413      	add	r3, r2
 80010c4:	3304      	adds	r3, #4
 80010c6:	495f      	ldr	r1, [pc, #380]	@ (8001244 <main+0x2ac>)
 80010c8:	461a      	mov	r2, r3
 80010ca:	460b      	mov	r3, r1
 80010cc:	cb03      	ldmia	r3!, {r0, r1}
 80010ce:	6010      	str	r0, [r2, #0]
 80010d0:	6051      	str	r1, [r2, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	7213      	strb	r3, [r2, #8]
				logCount++;
 80010d6:	4b59      	ldr	r3, [pc, #356]	@ (800123c <main+0x2a4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	4a57      	ldr	r2, [pc, #348]	@ (800123c <main+0x2a4>)
 80010de:	6013      	str	r3, [r2, #0]
				newCard = 0;
 80010e0:	4b52      	ldr	r3, [pc, #328]	@ (800122c <main+0x294>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e075      	b.n	80011d4 <main+0x23c>
			} else {

				Logs[logCount].time = GetTime();
 80010e8:	4b54      	ldr	r3, [pc, #336]	@ (800123c <main+0x2a4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a54      	ldr	r2, [pc, #336]	@ (8001240 <main+0x2a8>)
 80010ee:	2116      	movs	r1, #22
 80010f0:	fb01 f303 	mul.w	r3, r1, r3
 80010f4:	18d4      	adds	r4, r2, r3
 80010f6:	463b      	mov	r3, r7
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fcf7 	bl	8000aec <GetTime>
 80010fe:	4622      	mov	r2, r4
 8001100:	463b      	mov	r3, r7
 8001102:	6819      	ldr	r1, [r3, #0]
 8001104:	6011      	str	r1, [r2, #0]
 8001106:	8899      	ldrh	r1, [r3, #4]
 8001108:	799b      	ldrb	r3, [r3, #6]
 800110a:	8091      	strh	r1, [r2, #4]
 800110c:	7193      	strb	r3, [r2, #6]
				Logs[logCount].CardID[0] = CardID[0];
 800110e:	4b4b      	ldr	r3, [pc, #300]	@ (800123c <main+0x2a4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	7b38      	ldrb	r0, [r7, #12]
 8001114:	4a4a      	ldr	r2, [pc, #296]	@ (8001240 <main+0x2a8>)
 8001116:	2116      	movs	r1, #22
 8001118:	fb01 f303 	mul.w	r3, r1, r3
 800111c:	4413      	add	r3, r2
 800111e:	3307      	adds	r3, #7
 8001120:	4602      	mov	r2, r0
 8001122:	701a      	strb	r2, [r3, #0]
				Logs[logCount].CardID[1] = CardID[1];
 8001124:	4b45      	ldr	r3, [pc, #276]	@ (800123c <main+0x2a4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	7b78      	ldrb	r0, [r7, #13]
 800112a:	4a45      	ldr	r2, [pc, #276]	@ (8001240 <main+0x2a8>)
 800112c:	2116      	movs	r1, #22
 800112e:	fb01 f303 	mul.w	r3, r1, r3
 8001132:	4413      	add	r3, r2
 8001134:	3308      	adds	r3, #8
 8001136:	4602      	mov	r2, r0
 8001138:	701a      	strb	r2, [r3, #0]
				Logs[logCount].CardID[2] = CardID[2];
 800113a:	4b40      	ldr	r3, [pc, #256]	@ (800123c <main+0x2a4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	7bb8      	ldrb	r0, [r7, #14]
 8001140:	4a3f      	ldr	r2, [pc, #252]	@ (8001240 <main+0x2a8>)
 8001142:	2116      	movs	r1, #22
 8001144:	fb01 f303 	mul.w	r3, r1, r3
 8001148:	4413      	add	r3, r2
 800114a:	3309      	adds	r3, #9
 800114c:	4602      	mov	r2, r0
 800114e:	701a      	strb	r2, [r3, #0]
				Logs[logCount].CardID[3] = CardID[3];
 8001150:	4b3a      	ldr	r3, [pc, #232]	@ (800123c <main+0x2a4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	7bf8      	ldrb	r0, [r7, #15]
 8001156:	4a3a      	ldr	r2, [pc, #232]	@ (8001240 <main+0x2a8>)
 8001158:	2116      	movs	r1, #22
 800115a:	fb01 f303 	mul.w	r3, r1, r3
 800115e:	4413      	add	r3, r2
 8001160:	330a      	adds	r3, #10
 8001162:	4602      	mov	r2, r0
 8001164:	701a      	strb	r2, [r3, #0]
				Logs[logCount].CardID[4] = CardID[4];
 8001166:	4b35      	ldr	r3, [pc, #212]	@ (800123c <main+0x2a4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	7c38      	ldrb	r0, [r7, #16]
 800116c:	4a34      	ldr	r2, [pc, #208]	@ (8001240 <main+0x2a8>)
 800116e:	2116      	movs	r1, #22
 8001170:	fb01 f303 	mul.w	r3, r1, r3
 8001174:	4413      	add	r3, r2
 8001176:	330b      	adds	r3, #11
 8001178:	4602      	mov	r2, r0
 800117a:	701a      	strb	r2, [r3, #0]
				strcpy(Logs[logCount].status, "Rejected");
 800117c:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <main+0x2a4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2216      	movs	r2, #22
 8001182:	fb02 f303 	mul.w	r3, r2, r3
 8001186:	3308      	adds	r3, #8
 8001188:	4a2d      	ldr	r2, [pc, #180]	@ (8001240 <main+0x2a8>)
 800118a:	4413      	add	r3, r2
 800118c:	3304      	adds	r3, #4
 800118e:	492e      	ldr	r1, [pc, #184]	@ (8001248 <main+0x2b0>)
 8001190:	461a      	mov	r2, r3
 8001192:	460b      	mov	r3, r1
 8001194:	cb03      	ldmia	r3!, {r0, r1}
 8001196:	6010      	str	r0, [r2, #0]
 8001198:	6051      	str	r1, [r2, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	7213      	strb	r3, [r2, #8]
				logCount++;
 800119e:	4b27      	ldr	r3, [pc, #156]	@ (800123c <main+0x2a4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a25      	ldr	r2, [pc, #148]	@ (800123c <main+0x2a4>)
 80011a6:	6013      	str	r3, [r2, #0]
				newCard = 0;
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <main+0x294>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]

				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011b4:	481e      	ldr	r0, [pc, #120]	@ (8001230 <main+0x298>)
 80011b6:	f001 f997 	bl	80024e8 <HAL_GPIO_WritePin>
				SH1106_Clear();
 80011ba:	f7ff fc0a 	bl	80009d2 <SH1106_Clear>
				SH1106_GotoXY(12, 10);
 80011be:	210a      	movs	r1, #10
 80011c0:	200c      	movs	r0, #12
 80011c2:	f7ff fb4d 	bl	8000860 <SH1106_GotoXY>
				SH1106_Puts("Rejected", &Font_11x18, 1);
 80011c6:	2201      	movs	r2, #1
 80011c8:	491a      	ldr	r1, [pc, #104]	@ (8001234 <main+0x29c>)
 80011ca:	481f      	ldr	r0, [pc, #124]	@ (8001248 <main+0x2b0>)
 80011cc:	f7ff fbdc 	bl	8000988 <SH1106_Puts>
				SH1106_UpdateScreen();
 80011d0:	f7ff faa0 	bl	8000714 <SH1106_UpdateScreen>
			}
		}
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011da:	4815      	ldr	r0, [pc, #84]	@ (8001230 <main+0x298>)
 80011dc:	f001 f984 	bl	80024e8 <HAL_GPIO_WritePin>
 80011e0:	e6ed      	b.n	8000fbe <main+0x26>
	}
	else {
		newCard = 1;
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <main+0x294>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

		sprintf(buf, "%s", "----------");
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4a17      	ldr	r2, [pc, #92]	@ (800124c <main+0x2b4>)
 80011ee:	4918      	ldr	r1, [pc, #96]	@ (8001250 <main+0x2b8>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 fabb 	bl	800576c <siprintf>
		SH1106_GotoXY(12, 10);
 80011f6:	210a      	movs	r1, #10
 80011f8:	200c      	movs	r0, #12
 80011fa:	f7ff fb31 	bl	8000860 <SH1106_GotoXY>
		SH1106_Puts(buf, &Font_11x18, 1);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2201      	movs	r2, #1
 8001204:	490b      	ldr	r1, [pc, #44]	@ (8001234 <main+0x29c>)
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fbbe 	bl	8000988 <SH1106_Puts>
		SH1106_UpdateScreen(); // update screen
 800120c:	f7ff fa82 	bl	8000714 <SH1106_UpdateScreen>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <main+0x298>)
 8001218:	f001 f966 	bl	80024e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001222:	4803      	ldr	r0, [pc, #12]	@ (8001230 <main+0x298>)
 8001224:	f001 f960 	bl	80024e8 <HAL_GPIO_WritePin>
  {
 8001228:	e6c9      	b.n	8000fbe <main+0x26>
 800122a:	bf00      	nop
 800122c:	2000003c 	.word	0x2000003c
 8001230:	40021800 	.word	0x40021800
 8001234:	20000000 	.word	0x20000000
 8001238:	08006160 	.word	0x08006160
 800123c:	20000e4c 	.word	0x20000e4c
 8001240:	200005b4 	.word	0x200005b4
 8001244:	08006168 	.word	0x08006168
 8001248:	08006174 	.word	0x08006174
 800124c:	08006180 	.word	0x08006180
 8001250:	0800618c 	.word	0x0800618c

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b094      	sub	sp, #80	@ 0x50
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2230      	movs	r2, #48	@ 0x30
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f004 faa4 	bl	80057b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <SystemClock_Config+0xd8>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	4a2a      	ldr	r2, [pc, #168]	@ (800132c <SystemClock_Config+0xd8>)
 8001282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	@ 0x40
 8001288:	4b28      	ldr	r3, [pc, #160]	@ (800132c <SystemClock_Config+0xd8>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <SystemClock_Config+0xdc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a24      	ldr	r2, [pc, #144]	@ (8001330 <SystemClock_Config+0xdc>)
 800129e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <SystemClock_Config+0xdc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2302      	movs	r3, #2
 80012bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012c4:	2304      	movs	r3, #4
 80012c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012c8:	23b4      	movs	r3, #180	@ 0xb4
 80012ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012d0:	2304      	movs	r3, #4
 80012d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 fb2d 	bl	8003938 <HAL_RCC_OscConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e4:	f000 f94a 	bl	800157c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012e8:	f002 fad6 	bl	8003898 <HAL_PWREx_EnableOverDrive>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80012f2:	f000 f943 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f6:	230f      	movs	r3, #15
 80012f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fa:	2302      	movs	r3, #2
 80012fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001302:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001306:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001308:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800130c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2105      	movs	r1, #5
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fd87 	bl	8003e28 <HAL_RCC_ClockConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001320:	f000 f92c 	bl	800157c <Error_Handler>
  }
}
 8001324:	bf00      	nop
 8001326:	3750      	adds	r7, #80	@ 0x50
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000

08001334 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <MX_I2C3_Init+0x74>)
 800133a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ac <MX_I2C3_Init+0x78>)
 800133c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_I2C3_Init+0x74>)
 8001340:	4a1b      	ldr	r2, [pc, #108]	@ (80013b0 <MX_I2C3_Init+0x7c>)
 8001342:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001344:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <MX_I2C3_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800134a:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <MX_I2C3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <MX_I2C3_Init+0x74>)
 8001352:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001356:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001358:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_I2C3_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800135e:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <MX_I2C3_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001364:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_I2C3_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_I2C3_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001370:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_I2C3_Init+0x74>)
 8001372:	f001 f8d3 	bl	800251c <HAL_I2C_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800137c:	f000 f8fe 	bl	800157c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001380:	2100      	movs	r1, #0
 8001382:	4809      	ldr	r0, [pc, #36]	@ (80013a8 <MX_I2C3_Init+0x74>)
 8001384:	f002 fa0c 	bl	80037a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800138e:	f000 f8f5 	bl	800157c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001392:	2100      	movs	r1, #0
 8001394:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <MX_I2C3_Init+0x74>)
 8001396:	f002 fa3f 	bl	8003818 <HAL_I2CEx_ConfigDigitalFilter>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80013a0:	f000 f8ec 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200004c0 	.word	0x200004c0
 80013ac:	40005c00 	.word	0x40005c00
 80013b0:	00061a80 	.word	0x00061a80

080013b4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80013b8:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013ba:	4a18      	ldr	r2, [pc, #96]	@ (800141c <MX_SPI4_Init+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80013be:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013c4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80013c6:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013e8:	2218      	movs	r2, #24
 80013ea:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <MX_SPI4_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_SPI4_Init+0x64>)
 8001400:	220a      	movs	r2, #10
 8001402:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	@ (8001418 <MX_SPI4_Init+0x64>)
 8001406:	f002 ff2f 	bl	8004268 <HAL_SPI_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001410:	f000 f8b4 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000514 	.word	0x20000514
 800141c:	40013400 	.word	0x40013400

08001420 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_USART1_UART_Init+0x4c>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <MX_USART1_UART_Init+0x50>)
 8001428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <MX_USART1_UART_Init+0x4c>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_USART1_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_USART1_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <MX_USART1_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_USART1_UART_Init+0x4c>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <MX_USART1_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_USART1_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_USART1_UART_Init+0x4c>)
 8001458:	f003 fce6 	bl	8004e28 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001462:	f000 f88b 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000056c 	.word	0x2000056c
 8001470:	40011000 	.word	0x40011000

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <MX_GPIO_Init+0xfc>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a37      	ldr	r2, [pc, #220]	@ (8001570 <MX_GPIO_Init+0xfc>)
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b35      	ldr	r3, [pc, #212]	@ (8001570 <MX_GPIO_Init+0xfc>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b31      	ldr	r3, [pc, #196]	@ (8001570 <MX_GPIO_Init+0xfc>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a30      	ldr	r2, [pc, #192]	@ (8001570 <MX_GPIO_Init+0xfc>)
 80014b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001570 <MX_GPIO_Init+0xfc>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001570 <MX_GPIO_Init+0xfc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a29      	ldr	r2, [pc, #164]	@ (8001570 <MX_GPIO_Init+0xfc>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <MX_GPIO_Init+0xfc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <MX_GPIO_Init+0xfc>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a22      	ldr	r2, [pc, #136]	@ (8001570 <MX_GPIO_Init+0xfc>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <MX_GPIO_Init+0xfc>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <MX_GPIO_Init+0xfc>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a1b      	ldr	r2, [pc, #108]	@ (8001570 <MX_GPIO_Init+0xfc>)
 8001504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <MX_GPIO_Init+0xfc>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2110      	movs	r1, #16
 800151a:	4816      	ldr	r0, [pc, #88]	@ (8001574 <MX_GPIO_Init+0x100>)
 800151c:	f000 ffe4 	bl	80024e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001526:	4814      	ldr	r0, [pc, #80]	@ (8001578 <MX_GPIO_Init+0x104>)
 8001528:	f000 ffde 	bl	80024e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800152c:	2310      	movs	r3, #16
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	480c      	ldr	r0, [pc, #48]	@ (8001574 <MX_GPIO_Init+0x100>)
 8001544:	f000 fe24 	bl	8002190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001548:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_GPIO_Init+0x104>)
 8001562:	f000 fe15 	bl	8002190 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	@ 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40021000 	.word	0x40021000
 8001578:	40021800 	.word	0x40021800

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <Error_Handler+0x8>

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a29      	ldr	r2, [pc, #164]	@ (800169c <HAL_I2C_MspInit+0xc4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d14b      	bne.n	8001692 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a27      	ldr	r2, [pc, #156]	@ (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <HAL_I2C_MspInit+0xc8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <HAL_I2C_MspInit+0xc8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a20      	ldr	r2, [pc, #128]	@ (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001638:	2312      	movs	r3, #18
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001644:	2304      	movs	r3, #4
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4815      	ldr	r0, [pc, #84]	@ (80016a4 <HAL_I2C_MspInit+0xcc>)
 8001650:	f000 fd9e 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001654:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165a:	2312      	movs	r3, #18
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001666:	2304      	movs	r3, #4
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <HAL_I2C_MspInit+0xd0>)
 8001672:	f000 fd8d 	bl	8002190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <HAL_I2C_MspInit+0xc8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	@ (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001680:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	@ 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40005c00 	.word	0x40005c00
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020000 	.word	0x40020000

080016ac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	@ 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	@ (8001730 <HAL_SPI_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12b      	bne.n	8001726 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <HAL_SPI_MspInit+0x88>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	4a17      	ldr	r2, [pc, #92]	@ (8001734 <HAL_SPI_MspInit+0x88>)
 80016d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_SPI_MspInit+0x88>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_SPI_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	@ (8001734 <HAL_SPI_MspInit+0x88>)
 80016f4:	f043 0310 	orr.w	r3, r3, #16
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_SPI_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001706:	2364      	movs	r3, #100	@ 0x64
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001716:	2305      	movs	r3, #5
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <HAL_SPI_MspInit+0x8c>)
 8001722:	f000 fd35 	bl	8002190 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40013400 	.word	0x40013400
 8001734:	40023800 	.word	0x40023800
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <HAL_UART_MspInit+0x84>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d12c      	bne.n	80017b8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <HAL_UART_MspInit+0x88>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <HAL_UART_MspInit+0x88>)
 8001768:	f043 0310 	orr.w	r3, r3, #16
 800176c:	6453      	str	r3, [r2, #68]	@ 0x44
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HAL_UART_MspInit+0x88>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_UART_MspInit+0x88>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a10      	ldr	r2, [pc, #64]	@ (80017c4 <HAL_UART_MspInit+0x88>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <HAL_UART_MspInit+0x88>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001796:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017a8:	2307      	movs	r3, #7
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <HAL_UART_MspInit+0x8c>)
 80017b4:	f000 fcec 	bl	8002190 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	@ 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40011000 	.word	0x40011000
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <NMI_Handler+0x4>

080017d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <MemManage_Handler+0x4>

080017e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001822:	f000 fb8b 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f003 ffb0 	bl	80057c0 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20030000 	.word	0x20030000
 800188c:	00000400 	.word	0x00000400
 8001890:	20000e50 	.word	0x20000e50
 8001894:	20000fa0 	.word	0x20000fa0

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 80018c0:	f000 f83c 	bl	800193c <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 80018c4:	f000 f921 	bl	8001b0a <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80018c8:	218d      	movs	r1, #141	@ 0x8d
 80018ca:	202a      	movs	r0, #42	@ 0x2a
 80018cc:	f000 f842 	bl	8001954 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80018d0:	213e      	movs	r1, #62	@ 0x3e
 80018d2:	202b      	movs	r0, #43	@ 0x2b
 80018d4:	f000 f83e 	bl	8001954 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 80018d8:	211e      	movs	r1, #30
 80018da:	202d      	movs	r0, #45	@ 0x2d
 80018dc:	f000 f83a 	bl	8001954 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80018e0:	2100      	movs	r1, #0
 80018e2:	202c      	movs	r0, #44	@ 0x2c
 80018e4:	f000 f836 	bl	8001954 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 80018e8:	2170      	movs	r1, #112	@ 0x70
 80018ea:	2026      	movs	r0, #38	@ 0x26
 80018ec:	f000 f832 	bl	8001954 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80018f0:	2140      	movs	r1, #64	@ 0x40
 80018f2:	2015      	movs	r0, #21
 80018f4:	f000 f82e 	bl	8001954 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80018f8:	213d      	movs	r1, #61	@ 0x3d
 80018fa:	2011      	movs	r0, #17
 80018fc:	f000 f82a 	bl	8001954 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8001900:	f000 f8ee 	bl	8001ae0 <TM_MFRC522_AntennaOn>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	2026      	movs	r0, #38	@ 0x26
 8001914:	f000 f901 	bl	8001b1a <TM_MFRC522_Request>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d104      	bne.n	800192c <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f9ed 	bl	8001d02 <TM_MFRC522_Anticoll>
 8001928:	4603      	mov	r3, r0
 800192a:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 800192c:	f000 fa6f 	bl	8001e0e <TM_MFRC522_Halt>

	return status;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 8001940:	2201      	movs	r2, #1
 8001942:	2110      	movs	r1, #16
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <TM_MFRC522_InitPins+0x14>)
 8001946:	f000 fdcf 	bl	80024e8 <HAL_GPIO_WritePin>
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000

08001954 <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8001964:	2200      	movs	r2, #0
 8001966:	2110      	movs	r1, #16
 8001968:	481a      	ldr	r0, [pc, #104]	@ (80019d4 <TM_MFRC522_WriteRegister+0x80>)
 800196a:	f000 fdbd 	bl	80024e8 <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001978:	b2db      	uxtb	r3, r3
 800197a:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8001980:	f107 010e 	add.w	r1, r7, #14
 8001984:	230a      	movs	r3, #10
 8001986:	2201      	movs	r2, #1
 8001988:	4813      	ldr	r0, [pc, #76]	@ (80019d8 <TM_MFRC522_WriteRegister+0x84>)
 800198a:	f002 fcf6 	bl	800437a <HAL_SPI_Transmit>
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001992:	bf00      	nop
 8001994:	4810      	ldr	r0, [pc, #64]	@ (80019d8 <TM_MFRC522_WriteRegister+0x84>)
 8001996:	f003 f8f6 	bl	8004b86 <HAL_SPI_GetState>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d0f7      	beq.n	8001994 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 80019a4:	1db9      	adds	r1, r7, #6
 80019a6:	230a      	movs	r3, #10
 80019a8:	2201      	movs	r2, #1
 80019aa:	480b      	ldr	r0, [pc, #44]	@ (80019d8 <TM_MFRC522_WriteRegister+0x84>)
 80019ac:	f002 fce5 	bl	800437a <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80019b0:	bf00      	nop
 80019b2:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <TM_MFRC522_WriteRegister+0x84>)
 80019b4:	f003 f8e7 	bl	8004b86 <HAL_SPI_GetState>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d0f7      	beq.n	80019b2 <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 80019c2:	2201      	movs	r2, #1
 80019c4:	2110      	movs	r1, #16
 80019c6:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <TM_MFRC522_WriteRegister+0x80>)
 80019c8:	f000 fd8e 	bl	80024e8 <HAL_GPIO_WritePin>
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	20000514 	.word	0x20000514

080019dc <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 80019e6:	2200      	movs	r2, #0
 80019e8:	2110      	movs	r1, #16
 80019ea:	481f      	ldr	r0, [pc, #124]	@ (8001a68 <TM_MFRC522_ReadRegister+0x8c>)
 80019ec:	f000 fd7c 	bl	80024e8 <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8001a0c:	f107 010d 	add.w	r1, r7, #13
 8001a10:	230a      	movs	r3, #10
 8001a12:	2201      	movs	r2, #1
 8001a14:	4815      	ldr	r0, [pc, #84]	@ (8001a6c <TM_MFRC522_ReadRegister+0x90>)
 8001a16:	f002 fcb0 	bl	800437a <HAL_SPI_Transmit>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001a1e:	bf00      	nop
 8001a20:	4812      	ldr	r0, [pc, #72]	@ (8001a6c <TM_MFRC522_ReadRegister+0x90>)
 8001a22:	f003 f8b0 	bl	8004b86 <HAL_SPI_GetState>
 8001a26:	4603      	mov	r3, r0
 8001a28:	73fb      	strb	r3, [r7, #15]
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d0f7      	beq.n	8001a20 <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 8001a30:	f107 010e 	add.w	r1, r7, #14
 8001a34:	230a      	movs	r3, #10
 8001a36:	2201      	movs	r2, #1
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <TM_MFRC522_ReadRegister+0x90>)
 8001a3a:	f002 fde2 	bl	8004602 <HAL_SPI_Receive>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001a42:	bf00      	nop
 8001a44:	4809      	ldr	r0, [pc, #36]	@ (8001a6c <TM_MFRC522_ReadRegister+0x90>)
 8001a46:	f003 f89e 	bl	8004b86 <HAL_SPI_GetState>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d0f7      	beq.n	8001a44 <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 8001a54:	2201      	movs	r2, #1
 8001a56:	2110      	movs	r1, #16
 8001a58:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <TM_MFRC522_ReadRegister+0x8c>)
 8001a5a:	f000 fd45 	bl	80024e8 <HAL_GPIO_WritePin>

	return val;	
 8001a5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	20000514 	.word	0x20000514

08001a70 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ffaa 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff5c 	bl	8001954 <TM_MFRC522_WriteRegister>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460a      	mov	r2, r1
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff90 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b25a      	sxtb	r2, r3
 8001ac0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff3e 	bl	8001954 <TM_MFRC522_WriteRegister>
} 
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001ae6:	2014      	movs	r0, #20
 8001ae8:	f7ff ff78 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001afa:	2103      	movs	r1, #3
 8001afc:	2014      	movs	r0, #20
 8001afe:	f7ff ffb7 	bl	8001a70 <TM_MFRC522_SetBitMask>
	}
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001b0e:	210f      	movs	r1, #15
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7ff ff1f 	bl	8001954 <TM_MFRC522_WriteRegister>
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	4603      	mov	r3, r0
 8001b22:	6039      	str	r1, [r7, #0]
 8001b24:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001b26:	2107      	movs	r1, #7
 8001b28:	200d      	movs	r0, #13
 8001b2a:	f7ff ff13 	bl	8001954 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	79fa      	ldrb	r2, [r7, #7]
 8001b32:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	6839      	ldr	r1, [r7, #0]
 8001b40:	200c      	movs	r0, #12
 8001b42:	f000 f80f 	bl	8001b64 <TM_MFRC522_ToCard>
 8001b46:	4603      	mov	r3, r0
 8001b48:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <TM_MFRC522_Request+0x3c>
 8001b50:	89bb      	ldrh	r3, [r7, #12]
 8001b52:	2b10      	cmp	r3, #16
 8001b54:	d001      	beq.n	8001b5a <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8001b56:	2302      	movs	r3, #2
 8001b58:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	4613      	mov	r3, r2
 8001b74:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8001b76:	2302      	movs	r3, #2
 8001b78:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d006      	beq.n	8001b96 <TM_MFRC522_ToCard+0x32>
 8001b88:	2b0e      	cmp	r3, #14
 8001b8a:	d109      	bne.n	8001ba0 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001b8c:	2312      	movs	r3, #18
 8001b8e:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001b90:	2310      	movs	r3, #16
 8001b92:	757b      	strb	r3, [r7, #21]
			break;
 8001b94:	e005      	b.n	8001ba2 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001b96:	2377      	movs	r3, #119	@ 0x77
 8001b98:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001b9a:	2330      	movs	r3, #48	@ 0x30
 8001b9c:	757b      	strb	r3, [r7, #21]
			break;
 8001b9e:	e000      	b.n	8001ba2 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001ba0:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001ba2:	7dbb      	ldrb	r3, [r7, #22]
 8001ba4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4619      	mov	r1, r3
 8001bac:	2002      	movs	r0, #2
 8001bae:	f7ff fed1 	bl	8001954 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001bb2:	2180      	movs	r1, #128	@ 0x80
 8001bb4:	2004      	movs	r0, #4
 8001bb6:	f7ff ff75 	bl	8001aa4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001bba:	2180      	movs	r1, #128	@ 0x80
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	f7ff ff57 	bl	8001a70 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff fec5 	bl	8001954 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8001bca:	2300      	movs	r3, #0
 8001bcc:	827b      	strh	r3, [r7, #18]
 8001bce:	e00a      	b.n	8001be6 <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8001bd0:	8a7b      	ldrh	r3, [r7, #18]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	2009      	movs	r0, #9
 8001bdc:	f7ff feba 	bl	8001954 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8001be0:	8a7b      	ldrh	r3, [r7, #18]
 8001be2:	3301      	adds	r3, #1
 8001be4:	827b      	strh	r3, [r7, #18]
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	8a7a      	ldrh	r2, [r7, #18]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d3ef      	bcc.n	8001bd0 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f7ff fead 	bl	8001954 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	d103      	bne.n	8001c08 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8001c00:	2180      	movs	r1, #128	@ 0x80
 8001c02:	200d      	movs	r0, #13
 8001c04:	f7ff ff34 	bl	8001a70 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8001c08:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c0c:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001c0e:	2004      	movs	r0, #4
 8001c10:	f7ff fee4 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001c14:	4603      	mov	r3, r0
 8001c16:	753b      	strb	r3, [r7, #20]
		i--;
 8001c18:	8a7b      	ldrh	r3, [r7, #18]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001c1e:	8a7b      	ldrh	r3, [r7, #18]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00a      	beq.n	8001c3a <TM_MFRC522_ToCard+0xd6>
 8001c24:	7d3b      	ldrb	r3, [r7, #20]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d105      	bne.n	8001c3a <TM_MFRC522_ToCard+0xd6>
 8001c2e:	7d3a      	ldrb	r2, [r7, #20]
 8001c30:	7d7b      	ldrb	r3, [r7, #21]
 8001c32:	4013      	ands	r3, r2
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0e9      	beq.n	8001c0e <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8001c3a:	2180      	movs	r1, #128	@ 0x80
 8001c3c:	200d      	movs	r0, #13
 8001c3e:	f7ff ff31 	bl	8001aa4 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8001c42:	8a7b      	ldrh	r3, [r7, #18]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d057      	beq.n	8001cf8 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001c48:	2006      	movs	r0, #6
 8001c4a:	f7ff fec7 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f003 031b 	and.w	r3, r3, #27
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d14d      	bne.n	8001cf4 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8001c5c:	7d3a      	ldrb	r2, [r7, #20]
 8001c5e:	7dbb      	ldrb	r3, [r7, #22]
 8001c60:	4013      	ands	r3, r2
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d140      	bne.n	8001cf8 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001c76:	200a      	movs	r0, #10
 8001c78:	f7ff feb0 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001c80:	200c      	movs	r0, #12
 8001c82:	f7ff feab 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8001c8e:	7c7b      	ldrb	r3, [r7, #17]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00b      	beq.n	8001cac <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8001c94:	7d3b      	ldrb	r3, [r7, #20]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	7c7b      	ldrb	r3, [r7, #17]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca8:	801a      	strh	r2, [r3, #0]
 8001caa:	e005      	b.n	8001cb8 <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8001cac:	7d3b      	ldrb	r3, [r7, #20]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb6:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8001cb8:	7d3b      	ldrb	r3, [r7, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8001cc2:	7d3b      	ldrb	r3, [r7, #20]
 8001cc4:	2b10      	cmp	r3, #16
 8001cc6:	d901      	bls.n	8001ccc <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8001cc8:	2310      	movs	r3, #16
 8001cca:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8001ccc:	2300      	movs	r3, #0
 8001cce:	827b      	strh	r3, [r7, #18]
 8001cd0:	e00a      	b.n	8001ce8 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8001cd2:	8a7b      	ldrh	r3, [r7, #18]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	18d4      	adds	r4, r2, r3
 8001cd8:	2009      	movs	r0, #9
 8001cda:	f7ff fe7f 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8001ce2:	8a7b      	ldrh	r3, [r7, #18]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	827b      	strh	r3, [r7, #18]
 8001ce8:	7d3b      	ldrb	r3, [r7, #20]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	8a7a      	ldrh	r2, [r7, #18]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d3ef      	bcc.n	8001cd2 <TM_MFRC522_ToCard+0x16e>
 8001cf2:	e001      	b.n	8001cf8 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	371c      	adds	r7, #28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}

08001d02 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af02      	add	r7, sp, #8
 8001d08:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001d0e:	2100      	movs	r1, #0
 8001d10:	200d      	movs	r0, #13
 8001d12:	f7ff fe1f 	bl	8001954 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2293      	movs	r2, #147	@ 0x93
 8001d1a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	2220      	movs	r2, #32
 8001d22:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001d24:	f107 030a 	add.w	r3, r7, #10
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	200c      	movs	r0, #12
 8001d32:	f7ff ff17 	bl	8001b64 <TM_MFRC522_ToCard>
 8001d36:	4603      	mov	r3, r0
 8001d38:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d118      	bne.n	8001d72 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8001d40:	2300      	movs	r3, #0
 8001d42:	73bb      	strb	r3, [r7, #14]
 8001d44:	e009      	b.n	8001d5a <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8001d46:	7bbb      	ldrb	r3, [r7, #14]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	7b7b      	ldrb	r3, [r7, #13]
 8001d50:	4053      	eors	r3, r2
 8001d52:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	3301      	adds	r3, #1
 8001d58:	73bb      	strb	r3, [r7, #14]
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d9f2      	bls.n	8001d46 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8001d60:	7bbb      	ldrb	r3, [r7, #14]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	7b7a      	ldrb	r2, [r7, #13]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8001d6e:	2302      	movs	r3, #2
 8001d70:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	460b      	mov	r3, r1
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	2005      	movs	r0, #5
 8001d8e:	f7ff fe89 	bl	8001aa4 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8001d92:	2180      	movs	r1, #128	@ 0x80
 8001d94:	200a      	movs	r0, #10
 8001d96:	f7ff fe6b 	bl	8001a70 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
 8001d9e:	e00a      	b.n	8001db6 <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	2009      	movs	r0, #9
 8001dac:	f7ff fdd2 	bl	8001954 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	3301      	adds	r3, #1
 8001db4:	75fb      	strb	r3, [r7, #23]
 8001db6:	7dfa      	ldrb	r2, [r7, #23]
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d3f0      	bcc.n	8001da0 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001dbe:	2103      	movs	r1, #3
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f7ff fdc7 	bl	8001954 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8001dc6:	23ff      	movs	r3, #255	@ 0xff
 8001dc8:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001dca:	2005      	movs	r0, #5
 8001dcc:	f7ff fe06 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	75bb      	strb	r3, [r7, #22]
		i--;
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <TM_MFRC522_CalculateCRC+0x6e>
 8001de0:	7dbb      	ldrb	r3, [r7, #22]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0ef      	beq.n	8001dca <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001dea:	2022      	movs	r0, #34	@ 0x22
 8001dec:	f7ff fdf6 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1c5c      	adds	r4, r3, #1
 8001dfc:	2021      	movs	r0, #33	@ 0x21
 8001dfe:	f7ff fded 	bl	80019dc <TM_MFRC522_ReadRegister>
 8001e02:	4603      	mov	r3, r0
 8001e04:	7023      	strb	r3, [r4, #0]
}
 8001e06:	bf00      	nop
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}

08001e0e <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001e14:	2350      	movs	r3, #80	@ 0x50
 8001e16:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	1c9a      	adds	r2, r3, #2
 8001e20:	463b      	mov	r3, r7
 8001e22:	2102      	movs	r1, #2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ffa9 	bl	8001d7c <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001e2a:	463a      	mov	r2, r7
 8001e2c:	4639      	mov	r1, r7
 8001e2e:	1dbb      	adds	r3, r7, #6
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	4613      	mov	r3, r2
 8001e34:	2204      	movs	r2, #4
 8001e36:	200c      	movs	r0, #12
 8001e38:	f7ff fe94 	bl	8001b64 <TM_MFRC522_ToCard>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e48:	f7ff fd26 	bl	8001898 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e4c:	480c      	ldr	r0, [pc, #48]	@ (8001e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e4e:	490d      	ldr	r1, [pc, #52]	@ (8001e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e50:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e64:	4c0a      	ldr	r4, [pc, #40]	@ (8001e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e72:	f003 fcab 	bl	80057cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e76:	f7ff f88f 	bl	8000f98 <main>
  bx  lr    
 8001e7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001e88:	08006f48 	.word	0x08006f48
  ldr r2, =_sbss
 8001e8c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001e90:	20000fa0 	.word	0x20000fa0

08001e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC_IRQHandler>
	...

08001e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed8 <HAL_Init+0x40>)
 8001ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <HAL_Init+0x40>)
 8001eae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb4:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <HAL_Init+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	@ (8001ed8 <HAL_Init+0x40>)
 8001eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f000 f931 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec6:	200f      	movs	r0, #15
 8001ec8:	f000 f808 	bl	8001edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ecc:	f7ff fb5c 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023c00 	.word	0x40023c00

08001edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <HAL_InitTick+0x54>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b12      	ldr	r3, [pc, #72]	@ (8001f34 <HAL_InitTick+0x58>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f93b 	bl	8002176 <HAL_SYSTICK_Config>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00e      	b.n	8001f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b0f      	cmp	r3, #15
 8001f0e:	d80a      	bhi.n	8001f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f10:	2200      	movs	r2, #0
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f000 f911 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f1c:	4a06      	ldr	r2, [pc, #24]	@ (8001f38 <HAL_InitTick+0x5c>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e000      	b.n	8001f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000040 	.word	0x20000040
 8001f34:	20000048 	.word	0x20000048
 8001f38:	20000044 	.word	0x20000044

08001f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000048 	.word	0x20000048
 8001f60:	20000e54 	.word	0x20000e54

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000e54 	.word	0x20000e54

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000048 	.word	0x20000048

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	@ (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	@ (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	@ 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	@ 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff47 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff5c 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff8e 	bl	800207c <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffb0 	bl	80020e4 <SysTick_Config>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	@ 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	e177      	b.n	800249c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ac:	2201      	movs	r2, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	f040 8166 	bne.w	8002496 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d005      	beq.n	80021e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d130      	bne.n	8002244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d017      	beq.n	8002280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d123      	bne.n	80022d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80c0 	beq.w	8002496 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b66      	ldr	r3, [pc, #408]	@ (80024b4 <HAL_GPIO_Init+0x324>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	4a65      	ldr	r2, [pc, #404]	@ (80024b4 <HAL_GPIO_Init+0x324>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002324:	6453      	str	r3, [r2, #68]	@ 0x44
 8002326:	4b63      	ldr	r3, [pc, #396]	@ (80024b4 <HAL_GPIO_Init+0x324>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002332:	4a61      	ldr	r2, [pc, #388]	@ (80024b8 <HAL_GPIO_Init+0x328>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a58      	ldr	r2, [pc, #352]	@ (80024bc <HAL_GPIO_Init+0x32c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d037      	beq.n	80023ce <HAL_GPIO_Init+0x23e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a57      	ldr	r2, [pc, #348]	@ (80024c0 <HAL_GPIO_Init+0x330>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d031      	beq.n	80023ca <HAL_GPIO_Init+0x23a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a56      	ldr	r2, [pc, #344]	@ (80024c4 <HAL_GPIO_Init+0x334>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x236>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a55      	ldr	r2, [pc, #340]	@ (80024c8 <HAL_GPIO_Init+0x338>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x232>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a54      	ldr	r2, [pc, #336]	@ (80024cc <HAL_GPIO_Init+0x33c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x22e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a53      	ldr	r2, [pc, #332]	@ (80024d0 <HAL_GPIO_Init+0x340>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x22a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a52      	ldr	r2, [pc, #328]	@ (80024d4 <HAL_GPIO_Init+0x344>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x226>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a51      	ldr	r2, [pc, #324]	@ (80024d8 <HAL_GPIO_Init+0x348>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x222>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a50      	ldr	r2, [pc, #320]	@ (80024dc <HAL_GPIO_Init+0x34c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x21e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4f      	ldr	r2, [pc, #316]	@ (80024e0 <HAL_GPIO_Init+0x350>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x21a>
 80023a6:	2309      	movs	r3, #9
 80023a8:	e012      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023aa:	230a      	movs	r3, #10
 80023ac:	e010      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023ae:	2308      	movs	r3, #8
 80023b0:	e00e      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023b2:	2307      	movs	r3, #7
 80023b4:	e00c      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023b6:	2306      	movs	r3, #6
 80023b8:	e00a      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023ba:	2305      	movs	r3, #5
 80023bc:	e008      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023be:	2304      	movs	r3, #4
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023c2:	2303      	movs	r3, #3
 80023c4:	e004      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e002      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023ce:	2300      	movs	r3, #0
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f002 0203 	and.w	r2, r2, #3
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	4093      	lsls	r3, r2
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e0:	4935      	ldr	r1, [pc, #212]	@ (80024b8 <HAL_GPIO_Init+0x328>)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ee:	4b3d      	ldr	r3, [pc, #244]	@ (80024e4 <HAL_GPIO_Init+0x354>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002412:	4a34      	ldr	r2, [pc, #208]	@ (80024e4 <HAL_GPIO_Init+0x354>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002418:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <HAL_GPIO_Init+0x354>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800243c:	4a29      	ldr	r2, [pc, #164]	@ (80024e4 <HAL_GPIO_Init+0x354>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002442:	4b28      	ldr	r3, [pc, #160]	@ (80024e4 <HAL_GPIO_Init+0x354>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002466:	4a1f      	ldr	r2, [pc, #124]	@ (80024e4 <HAL_GPIO_Init+0x354>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800246c:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <HAL_GPIO_Init+0x354>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002490:	4a14      	ldr	r2, [pc, #80]	@ (80024e4 <HAL_GPIO_Init+0x354>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b0f      	cmp	r3, #15
 80024a0:	f67f ae84 	bls.w	80021ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3724      	adds	r7, #36	@ 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40020c00 	.word	0x40020c00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40021400 	.word	0x40021400
 80024d4:	40021800 	.word	0x40021800
 80024d8:	40021c00 	.word	0x40021c00
 80024dc:	40022000 	.word	0x40022000
 80024e0:	40022400 	.word	0x40022400
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
 80024f4:	4613      	mov	r3, r2
 80024f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002504:	e003      	b.n	800250e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	041a      	lsls	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e12b      	b.n	8002786 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff f848 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2224      	movs	r2, #36	@ 0x24
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800256e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800257e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002580:	f001 fe4a 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 8002584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a81      	ldr	r2, [pc, #516]	@ (8002790 <HAL_I2C_Init+0x274>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d807      	bhi.n	80025a0 <HAL_I2C_Init+0x84>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a80      	ldr	r2, [pc, #512]	@ (8002794 <HAL_I2C_Init+0x278>)
 8002594:	4293      	cmp	r3, r2
 8002596:	bf94      	ite	ls
 8002598:	2301      	movls	r3, #1
 800259a:	2300      	movhi	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	e006      	b.n	80025ae <HAL_I2C_Init+0x92>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002798 <HAL_I2C_Init+0x27c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	bf94      	ite	ls
 80025a8:	2301      	movls	r3, #1
 80025aa:	2300      	movhi	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0e7      	b.n	8002786 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a78      	ldr	r2, [pc, #480]	@ (800279c <HAL_I2C_Init+0x280>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002790 <HAL_I2C_Init+0x274>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d802      	bhi.n	80025f0 <HAL_I2C_Init+0xd4>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3301      	adds	r3, #1
 80025ee:	e009      	b.n	8002604 <HAL_I2C_Init+0xe8>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	4a69      	ldr	r2, [pc, #420]	@ (80027a0 <HAL_I2C_Init+0x284>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	3301      	adds	r3, #1
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	430b      	orrs	r3, r1
 800260a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002616:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	495c      	ldr	r1, [pc, #368]	@ (8002790 <HAL_I2C_Init+0x274>)
 8002620:	428b      	cmp	r3, r1
 8002622:	d819      	bhi.n	8002658 <HAL_I2C_Init+0x13c>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e59      	subs	r1, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002632:	1c59      	adds	r1, r3, #1
 8002634:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002638:	400b      	ands	r3, r1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_I2C_Init+0x138>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e59      	subs	r1, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fbb1 f3f3 	udiv	r3, r1, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002652:	e051      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 8002654:	2304      	movs	r3, #4
 8002656:	e04f      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d111      	bne.n	8002684 <HAL_I2C_Init+0x168>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e012      	b.n	80026aa <HAL_I2C_Init+0x18e>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e58      	subs	r0, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6859      	ldr	r1, [r3, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	0099      	lsls	r1, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	fbb0 f3f3 	udiv	r3, r0, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Init+0x196>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e022      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10e      	bne.n	80026d8 <HAL_I2C_Init+0x1bc>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1e58      	subs	r0, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	440b      	add	r3, r1
 80026c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026d6:	e00f      	b.n	80026f8 <HAL_I2C_Init+0x1dc>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1e58      	subs	r0, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	0099      	lsls	r1, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	6809      	ldr	r1, [r1, #0]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002726:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6911      	ldr	r1, [r2, #16]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68d2      	ldr	r2, [r2, #12]
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	430b      	orrs	r3, r1
 800273a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	000186a0 	.word	0x000186a0
 8002794:	001e847f 	.word	0x001e847f
 8002798:	003d08ff 	.word	0x003d08ff
 800279c:	431bde83 	.word	0x431bde83
 80027a0:	10624dd3 	.word	0x10624dd3

080027a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	461a      	mov	r2, r3
 80027b0:	460b      	mov	r3, r1
 80027b2:	817b      	strh	r3, [r7, #10]
 80027b4:	4613      	mov	r3, r2
 80027b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff fbd4 	bl	8001f64 <HAL_GetTick>
 80027bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	f040 80e0 	bne.w	800298c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2319      	movs	r3, #25
 80027d2:	2201      	movs	r2, #1
 80027d4:	4970      	ldr	r1, [pc, #448]	@ (8002998 <HAL_I2C_Master_Transmit+0x1f4>)
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fdac 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0d3      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_I2C_Master_Transmit+0x50>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e0cc      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d007      	beq.n	800281a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002828:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2221      	movs	r2, #33	@ 0x21
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2210      	movs	r2, #16
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	893a      	ldrh	r2, [r7, #8]
 800284a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4a50      	ldr	r2, [pc, #320]	@ (800299c <HAL_I2C_Master_Transmit+0x1f8>)
 800285a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800285c:	8979      	ldrh	r1, [r7, #10]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	6a3a      	ldr	r2, [r7, #32]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fbfc 	bl	8003060 <I2C_MasterRequestWrite>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e08d      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002888:	e066      	b.n	8002958 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fe6a 	bl	8003568 <I2C_WaitOnTXEFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d107      	bne.n	80028b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06b      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d11b      	bne.n	800292c <HAL_I2C_Master_Transmit+0x188>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d017      	beq.n	800292c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	6a39      	ldr	r1, [r7, #32]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fe61 	bl	80035f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00d      	beq.n	8002958 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	2b04      	cmp	r3, #4
 8002942:	d107      	bne.n	8002954 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002952:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e01a      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d194      	bne.n	800288a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e000      	b.n	800298e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	4618      	mov	r0, r3
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	00100002 	.word	0x00100002
 800299c:	ffff0000 	.word	0xffff0000

080029a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	@ 0x30
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	4608      	mov	r0, r1
 80029aa:	4611      	mov	r1, r2
 80029ac:	461a      	mov	r2, r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	817b      	strh	r3, [r7, #10]
 80029b2:	460b      	mov	r3, r1
 80029b4:	813b      	strh	r3, [r7, #8]
 80029b6:	4613      	mov	r3, r2
 80029b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ba:	f7ff fad3 	bl	8001f64 <HAL_GetTick>
 80029be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	f040 8214 	bne.w	8002df6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2319      	movs	r3, #25
 80029d4:	2201      	movs	r2, #1
 80029d6:	497b      	ldr	r1, [pc, #492]	@ (8002bc4 <HAL_I2C_Mem_Read+0x224>)
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fcab 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
 80029e6:	e207      	b.n	8002df8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Mem_Read+0x56>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e200      	b.n	8002df8 <HAL_I2C_Mem_Read+0x458>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d007      	beq.n	8002a1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2222      	movs	r2, #34	@ 0x22
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2240      	movs	r2, #64	@ 0x40
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a5b      	ldr	r2, [pc, #364]	@ (8002bc8 <HAL_I2C_Mem_Read+0x228>)
 8002a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a5e:	88f8      	ldrh	r0, [r7, #6]
 8002a60:	893a      	ldrh	r2, [r7, #8]
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fb78 	bl	8003164 <I2C_RequestMemoryRead>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e1bc      	b.n	8002df8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d113      	bne.n	8002aae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	623b      	str	r3, [r7, #32]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	623b      	str	r3, [r7, #32]
 8002a9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e190      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d11b      	bne.n	8002aee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e170      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d11b      	bne.n	8002b2e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	e150      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b44:	e144      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	f200 80f1 	bhi.w	8002d32 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d123      	bne.n	8002ba0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fd93 	bl	8003688 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e145      	b.n	8002df8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b9e:	e117      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d14e      	bne.n	8002c46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4906      	ldr	r1, [pc, #24]	@ (8002bcc <HAL_I2C_Mem_Read+0x22c>)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fbbe 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e11a      	b.n	8002df8 <HAL_I2C_Mem_Read+0x458>
 8002bc2:	bf00      	nop
 8002bc4:	00100002 	.word	0x00100002
 8002bc8:	ffff0000 	.word	0xffff0000
 8002bcc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c44:	e0c4      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	496c      	ldr	r1, [pc, #432]	@ (8002e00 <HAL_I2C_Mem_Read+0x460>)
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fb6f 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0cb      	b.n	8002df8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4955      	ldr	r1, [pc, #340]	@ (8002e00 <HAL_I2C_Mem_Read+0x460>)
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fb41 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e09d      	b.n	8002df8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d30:	e04e      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fca6 	bl	8003688 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e058      	b.n	8002df8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d124      	bne.n	8002dd0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d107      	bne.n	8002d9e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d9c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f47f aeb6 	bne.w	8002b46 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3728      	adds	r7, #40	@ 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00010004 	.word	0x00010004

08002e04 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	@ 0x28
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	460b      	mov	r3, r1
 8002e12:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff f8a6 	bl	8001f64 <HAL_GetTick>
 8002e18:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	f040 8111 	bne.w	800304e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2319      	movs	r3, #25
 8002e32:	2201      	movs	r2, #1
 8002e34:	4988      	ldr	r1, [pc, #544]	@ (8003058 <HAL_I2C_IsDeviceReady+0x254>)
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fa7c 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
 8002e44:	e104      	b.n	8003050 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_I2C_IsDeviceReady+0x50>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e0fd      	b.n	8003050 <HAL_I2C_IsDeviceReady+0x24c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d007      	beq.n	8002e7a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2224      	movs	r2, #36	@ 0x24
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a70      	ldr	r2, [pc, #448]	@ (800305c <HAL_I2C_IsDeviceReady+0x258>)
 8002e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fa3a 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed4:	d103      	bne.n	8002ede <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002edc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0b6      	b.n	8003050 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ef0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7ff f837 	bl	8001f64 <HAL_GetTick>
 8002ef6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f26:	e025      	b.n	8002f74 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7ff f81c 	bl	8001f64 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <HAL_I2C_IsDeviceReady+0x13a>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	22a0      	movs	r2, #160	@ 0xa0
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f7e:	d005      	beq.n	8002f8c <HAL_I2C_IsDeviceReady+0x188>
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <HAL_I2C_IsDeviceReady+0x188>
 8002f86:	7dbb      	ldrb	r3, [r7, #22]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0cd      	beq.n	8002f28 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d129      	bne.n	8002ff6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2319      	movs	r3, #25
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4921      	ldr	r1, [pc, #132]	@ (8003058 <HAL_I2C_IsDeviceReady+0x254>)
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f9ae 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e036      	b.n	8003050 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e02c      	b.n	8003050 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003004:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800300e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2319      	movs	r3, #25
 8003016:	2201      	movs	r2, #1
 8003018:	490f      	ldr	r1, [pc, #60]	@ (8003058 <HAL_I2C_IsDeviceReady+0x254>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f98a 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e012      	b.n	8003050 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3301      	adds	r3, #1
 800302e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	f4ff af32 	bcc.w	8002e9e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800304e:	2302      	movs	r3, #2
  }
}
 8003050:	4618      	mov	r0, r3
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	00100002 	.word	0x00100002
 800305c:	ffff0000 	.word	0xffff0000

08003060 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	460b      	mov	r3, r1
 800306e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003074:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b08      	cmp	r3, #8
 800307a:	d006      	beq.n	800308a <I2C_MasterRequestWrite+0x2a>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d003      	beq.n	800308a <I2C_MasterRequestWrite+0x2a>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003088:	d108      	bne.n	800309c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e00b      	b.n	80030b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	2b12      	cmp	r3, #18
 80030a2:	d107      	bne.n	80030b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f937 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030da:	d103      	bne.n	80030e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e035      	b.n	8003154 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030f0:	d108      	bne.n	8003104 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003100:	611a      	str	r2, [r3, #16]
 8003102:	e01b      	b.n	800313c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003104:	897b      	ldrh	r3, [r7, #10]
 8003106:	11db      	asrs	r3, r3, #7
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f003 0306 	and.w	r3, r3, #6
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f063 030f 	orn	r3, r3, #15
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	490e      	ldr	r1, [pc, #56]	@ (800315c <I2C_MasterRequestWrite+0xfc>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f980 	bl	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e010      	b.n	8003154 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4907      	ldr	r1, [pc, #28]	@ (8003160 <I2C_MasterRequestWrite+0x100>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f970 	bl	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	00010008 	.word	0x00010008
 8003160:	00010002 	.word	0x00010002

08003164 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	4608      	mov	r0, r1
 800316e:	4611      	mov	r1, r2
 8003170:	461a      	mov	r2, r3
 8003172:	4603      	mov	r3, r0
 8003174:	817b      	strh	r3, [r7, #10]
 8003176:	460b      	mov	r3, r1
 8003178:	813b      	strh	r3, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800318c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800319c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f8c2 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c4:	d103      	bne.n	80031ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0aa      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031d2:	897b      	ldrh	r3, [r7, #10]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	4952      	ldr	r1, [pc, #328]	@ (8003330 <I2C_RequestMemoryRead+0x1cc>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f91d 	bl	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e097      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800320e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003210:	6a39      	ldr	r1, [r7, #32]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f9a8 	bl	8003568 <I2C_WaitOnTXEFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	2b04      	cmp	r3, #4
 8003224:	d107      	bne.n	8003236 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003234:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e076      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003240:	893b      	ldrh	r3, [r7, #8]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]
 800324a:	e021      	b.n	8003290 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800324c:	893b      	ldrh	r3, [r7, #8]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	b29b      	uxth	r3, r3
 8003252:	b2da      	uxtb	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800325a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325c:	6a39      	ldr	r1, [r7, #32]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f982 	bl	8003568 <I2C_WaitOnTXEFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00d      	beq.n	8003286 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	2b04      	cmp	r3, #4
 8003270:	d107      	bne.n	8003282 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003280:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e050      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003286:	893b      	ldrh	r3, [r7, #8]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003292:	6a39      	ldr	r1, [r7, #32]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f967 	bl	8003568 <I2C_WaitOnTXEFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00d      	beq.n	80032bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d107      	bne.n	80032b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e035      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f82b 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00d      	beq.n	8003300 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032f2:	d103      	bne.n	80032fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e013      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003300:	897b      	ldrh	r3, [r7, #10]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	6a3a      	ldr	r2, [r7, #32]
 8003314:	4906      	ldr	r1, [pc, #24]	@ (8003330 <I2C_RequestMemoryRead+0x1cc>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f886 	bl	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	00010002 	.word	0x00010002

08003334 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003344:	e048      	b.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d044      	beq.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe fe09 	bl	8001f64 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnFlagUntilTimeout+0x30>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d139      	bne.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	0c1b      	lsrs	r3, r3, #16
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d10d      	bne.n	800338a <I2C_WaitOnFlagUntilTimeout+0x56>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	43da      	mvns	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4013      	ands	r3, r2
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	e00c      	b.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	43da      	mvns	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d116      	bne.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e023      	b.n	8003420 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	0c1b      	lsrs	r3, r3, #16
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10d      	bne.n	80033fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	43da      	mvns	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4013      	ands	r3, r2
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	e00c      	b.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	43da      	mvns	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4013      	ands	r3, r2
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	429a      	cmp	r2, r3
 800341c:	d093      	beq.n	8003346 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003436:	e071      	b.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003446:	d123      	bne.n	8003490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003456:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003460:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	f043 0204 	orr.w	r2, r3, #4
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e067      	b.n	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003496:	d041      	beq.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7fe fd64 	bl	8001f64 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d302      	bcc.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d136      	bne.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d10c      	bne.n	80034d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e00b      	b.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	43da      	mvns	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4013      	ands	r3, r2
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e021      	b.n	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	0c1b      	lsrs	r3, r3, #16
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d10c      	bne.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	43da      	mvns	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e00b      	b.n	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4013      	ands	r3, r2
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf14      	ite	ne
 8003552:	2301      	movne	r3, #1
 8003554:	2300      	moveq	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f af6d 	bne.w	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003574:	e034      	b.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f8e3 	bl	8003742 <I2C_IsAcknowledgeFailed>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e034      	b.n	80035f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358c:	d028      	beq.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358e:	f7fe fce9 	bl	8001f64 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	d302      	bcc.n	80035a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d11d      	bne.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ae:	2b80      	cmp	r3, #128	@ 0x80
 80035b0:	d016      	beq.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e007      	b.n	80035f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ea:	2b80      	cmp	r3, #128	@ 0x80
 80035ec:	d1c3      	bne.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003604:	e034      	b.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f89b 	bl	8003742 <I2C_IsAcknowledgeFailed>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e034      	b.n	8003680 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d028      	beq.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7fe fca1 	bl	8001f64 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11d      	bne.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b04      	cmp	r3, #4
 8003640:	d016      	beq.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e007      	b.n	8003680 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d1c3      	bne.n	8003606 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003694:	e049      	b.n	800372a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d119      	bne.n	80036d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0210 	mvn.w	r2, #16
 80036ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e030      	b.n	800373a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d8:	f7fe fc44 	bl	8001f64 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d11d      	bne.n	800372a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f8:	2b40      	cmp	r3, #64	@ 0x40
 80036fa:	d016      	beq.n	800372a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e007      	b.n	800373a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003734:	2b40      	cmp	r3, #64	@ 0x40
 8003736:	d1ae      	bne.n	8003696 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003758:	d11b      	bne.n	8003792 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003762:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	f043 0204 	orr.w	r2, r3, #4
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d129      	bne.n	800380a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2224      	movs	r2, #36	@ 0x24
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0210 	bic.w	r2, r2, #16
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b20      	cmp	r3, #32
 8003830:	d12a      	bne.n	8003888 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2224      	movs	r2, #36	@ 0x24
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003852:	89fb      	ldrh	r3, [r7, #14]
 8003854:	f023 030f 	bic.w	r3, r3, #15
 8003858:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b29a      	uxth	r2, r3
 800385e:	89fb      	ldrh	r3, [r7, #14]
 8003860:	4313      	orrs	r3, r2
 8003862:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	89fa      	ldrh	r2, [r7, #14]
 800386a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e000      	b.n	800388a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4b20      	ldr	r3, [pc, #128]	@ (8003928 <HAL_PWREx_EnableOverDrive+0x90>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003928 <HAL_PWREx_EnableOverDrive+0x90>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003928 <HAL_PWREx_EnableOverDrive+0x90>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038be:	4b1b      	ldr	r3, [pc, #108]	@ (800392c <HAL_PWREx_EnableOverDrive+0x94>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038c4:	f7fe fb4e 	bl	8001f64 <HAL_GetTick>
 80038c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038ca:	e009      	b.n	80038e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038cc:	f7fe fb4a 	bl	8001f64 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038da:	d901      	bls.n	80038e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e01f      	b.n	8003920 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038e0:	4b13      	ldr	r3, [pc, #76]	@ (8003930 <HAL_PWREx_EnableOverDrive+0x98>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ec:	d1ee      	bne.n	80038cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038ee:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038f4:	f7fe fb36 	bl	8001f64 <HAL_GetTick>
 80038f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038fa:	e009      	b.n	8003910 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038fc:	f7fe fb32 	bl	8001f64 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800390a:	d901      	bls.n	8003910 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e007      	b.n	8003920 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003910:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <HAL_PWREx_EnableOverDrive+0x98>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800391c:	d1ee      	bne.n	80038fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	420e0040 	.word	0x420e0040
 8003930:	40007000 	.word	0x40007000
 8003934:	420e0044 	.word	0x420e0044

08003938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e267      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d075      	beq.n	8003a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003956:	4b88      	ldr	r3, [pc, #544]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b04      	cmp	r3, #4
 8003960:	d00c      	beq.n	800397c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003962:	4b85      	ldr	r3, [pc, #532]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800396a:	2b08      	cmp	r3, #8
 800396c:	d112      	bne.n	8003994 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396e:	4b82      	ldr	r3, [pc, #520]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003976:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800397a:	d10b      	bne.n	8003994 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d05b      	beq.n	8003a40 <HAL_RCC_OscConfig+0x108>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d157      	bne.n	8003a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e242      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399c:	d106      	bne.n	80039ac <HAL_RCC_OscConfig+0x74>
 800399e:	4b76      	ldr	r3, [pc, #472]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a75      	ldr	r2, [pc, #468]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e01d      	b.n	80039e8 <HAL_RCC_OscConfig+0xb0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x98>
 80039b6:	4b70      	ldr	r3, [pc, #448]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 80039bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a6c      	ldr	r2, [pc, #432]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	e00b      	b.n	80039e8 <HAL_RCC_OscConfig+0xb0>
 80039d0:	4b69      	ldr	r3, [pc, #420]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a68      	ldr	r2, [pc, #416]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b66      	ldr	r3, [pc, #408]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a65      	ldr	r2, [pc, #404]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 80039e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d013      	beq.n	8003a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe fab8 	bl	8001f64 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f8:	f7fe fab4 	bl	8001f64 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b64      	cmp	r3, #100	@ 0x64
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e207      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0xc0>
 8003a16:	e014      	b.n	8003a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fe faa4 	bl	8001f64 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fe faa0 	bl	8001f64 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	@ 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e1f3      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a32:	4b51      	ldr	r3, [pc, #324]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0xe8>
 8003a3e:	e000      	b.n	8003a42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d063      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5a:	4b47      	ldr	r3, [pc, #284]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d11c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a66:	4b44      	ldr	r3, [pc, #272]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d116      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	4b41      	ldr	r3, [pc, #260]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_RCC_OscConfig+0x152>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d001      	beq.n	8003a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e1c7      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4937      	ldr	r1, [pc, #220]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9e:	e03a      	b.n	8003b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa8:	4b34      	ldr	r3, [pc, #208]	@ (8003b7c <HAL_RCC_OscConfig+0x244>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fe fa59 	bl	8001f64 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab6:	f7fe fa55 	bl	8001f64 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e1a8      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad4:	4b28      	ldr	r3, [pc, #160]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4925      	ldr	r1, [pc, #148]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	600b      	str	r3, [r1, #0]
 8003ae8:	e015      	b.n	8003b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aea:	4b24      	ldr	r3, [pc, #144]	@ (8003b7c <HAL_RCC_OscConfig+0x244>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe fa38 	bl	8001f64 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af8:	f7fe fa34 	bl	8001f64 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e187      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d036      	beq.n	8003b90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2a:	4b15      	ldr	r3, [pc, #84]	@ (8003b80 <HAL_RCC_OscConfig+0x248>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b30:	f7fe fa18 	bl	8001f64 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fe fa14 	bl	8001f64 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e167      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x200>
 8003b56:	e01b      	b.n	8003b90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b58:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <HAL_RCC_OscConfig+0x248>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5e:	f7fe fa01 	bl	8001f64 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b64:	e00e      	b.n	8003b84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b66:	f7fe f9fd 	bl	8001f64 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d907      	bls.n	8003b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e150      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	42470000 	.word	0x42470000
 8003b80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b84:	4b88      	ldr	r3, [pc, #544]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ea      	bne.n	8003b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8097 	beq.w	8003ccc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba2:	4b81      	ldr	r3, [pc, #516]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10f      	bne.n	8003bce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	4a7c      	ldr	r2, [pc, #496]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bbe:	4b7a      	ldr	r3, [pc, #488]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bce:	4b77      	ldr	r3, [pc, #476]	@ (8003dac <HAL_RCC_OscConfig+0x474>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d118      	bne.n	8003c0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bda:	4b74      	ldr	r3, [pc, #464]	@ (8003dac <HAL_RCC_OscConfig+0x474>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a73      	ldr	r2, [pc, #460]	@ (8003dac <HAL_RCC_OscConfig+0x474>)
 8003be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be6:	f7fe f9bd 	bl	8001f64 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bee:	f7fe f9b9 	bl	8001f64 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e10c      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c00:	4b6a      	ldr	r3, [pc, #424]	@ (8003dac <HAL_RCC_OscConfig+0x474>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d106      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2ea>
 8003c14:	4b64      	ldr	r3, [pc, #400]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c18:	4a63      	ldr	r2, [pc, #396]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c20:	e01c      	b.n	8003c5c <HAL_RCC_OscConfig+0x324>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b05      	cmp	r3, #5
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x30c>
 8003c2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	4a5e      	ldr	r2, [pc, #376]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c30:	f043 0304 	orr.w	r3, r3, #4
 8003c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c36:	4b5c      	ldr	r3, [pc, #368]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	4a5b      	ldr	r2, [pc, #364]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0x324>
 8003c44:	4b58      	ldr	r3, [pc, #352]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	4a57      	ldr	r2, [pc, #348]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c50:	4b55      	ldr	r3, [pc, #340]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c54:	4a54      	ldr	r2, [pc, #336]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c56:	f023 0304 	bic.w	r3, r3, #4
 8003c5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d015      	beq.n	8003c90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c64:	f7fe f97e 	bl	8001f64 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7fe f97a 	bl	8001f64 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e0cb      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c82:	4b49      	ldr	r3, [pc, #292]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0ee      	beq.n	8003c6c <HAL_RCC_OscConfig+0x334>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c90:	f7fe f968 	bl	8001f64 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c98:	f7fe f964 	bl	8001f64 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e0b5      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cae:	4b3e      	ldr	r3, [pc, #248]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1ee      	bne.n	8003c98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc0:	4b39      	ldr	r3, [pc, #228]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	4a38      	ldr	r2, [pc, #224]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80a1 	beq.w	8003e18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cd6:	4b34      	ldr	r3, [pc, #208]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d05c      	beq.n	8003d9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d141      	bne.n	8003d6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	4b31      	ldr	r3, [pc, #196]	@ (8003db0 <HAL_RCC_OscConfig+0x478>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe f938 	bl	8001f64 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fe f934 	bl	8001f64 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e087      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	019b      	lsls	r3, r3, #6
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	041b      	lsls	r3, r3, #16
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	491b      	ldr	r1, [pc, #108]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d40:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <HAL_RCC_OscConfig+0x478>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d46:	f7fe f90d 	bl	8001f64 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4e:	f7fe f909 	bl	8001f64 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e05c      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d60:	4b11      	ldr	r3, [pc, #68]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x416>
 8003d6c:	e054      	b.n	8003e18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6e:	4b10      	ldr	r3, [pc, #64]	@ (8003db0 <HAL_RCC_OscConfig+0x478>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d74:	f7fe f8f6 	bl	8001f64 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fe f8f2 	bl	8001f64 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e045      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8e:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <HAL_RCC_OscConfig+0x470>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x444>
 8003d9a:	e03d      	b.n	8003e18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d107      	bne.n	8003db4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e038      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40007000 	.word	0x40007000
 8003db0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e24 <HAL_RCC_OscConfig+0x4ec>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d028      	beq.n	8003e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d121      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d11a      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d111      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d107      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800

08003e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0cc      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b68      	ldr	r3, [pc, #416]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d90c      	bls.n	8003e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b65      	ldr	r3, [pc, #404]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b63      	ldr	r3, [pc, #396]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0b8      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d020      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e7c:	4b59      	ldr	r3, [pc, #356]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a58      	ldr	r2, [pc, #352]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e94:	4b53      	ldr	r3, [pc, #332]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a52      	ldr	r2, [pc, #328]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea0:	4b50      	ldr	r3, [pc, #320]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	494d      	ldr	r1, [pc, #308]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d044      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	4b47      	ldr	r3, [pc, #284]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d119      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e07f      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e06f      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e067      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f06:	4b37      	ldr	r3, [pc, #220]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f023 0203 	bic.w	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4934      	ldr	r1, [pc, #208]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f18:	f7fe f824 	bl	8001f64 <HAL_GetTick>
 8003f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f20:	f7fe f820 	bl	8001f64 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e04f      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 020c 	and.w	r2, r3, #12
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d1eb      	bne.n	8003f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f48:	4b25      	ldr	r3, [pc, #148]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d20c      	bcs.n	8003f70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b22      	ldr	r3, [pc, #136]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e032      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f7c:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4916      	ldr	r1, [pc, #88]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9a:	4b12      	ldr	r3, [pc, #72]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	490e      	ldr	r1, [pc, #56]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fae:	f000 f821 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	490a      	ldr	r1, [pc, #40]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc0:	5ccb      	ldrb	r3, [r1, r3]
 8003fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc6:	4a09      	ldr	r2, [pc, #36]	@ (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fca:	4b09      	ldr	r3, [pc, #36]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fd ff84 	bl	8001edc <HAL_InitTick>

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023c00 	.word	0x40023c00
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	08006eec 	.word	0x08006eec
 8003fec:	20000040 	.word	0x20000040
 8003ff0:	20000044 	.word	0x20000044

08003ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff8:	b094      	sub	sp, #80	@ 0x50
 8003ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800400c:	4b79      	ldr	r3, [pc, #484]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	2b08      	cmp	r3, #8
 8004016:	d00d      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x40>
 8004018:	2b08      	cmp	r3, #8
 800401a:	f200 80e1 	bhi.w	80041e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x34>
 8004022:	2b04      	cmp	r3, #4
 8004024:	d003      	beq.n	800402e <HAL_RCC_GetSysClockFreq+0x3a>
 8004026:	e0db      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4b73      	ldr	r3, [pc, #460]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800402a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800402c:	e0db      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800402e:	4b73      	ldr	r3, [pc, #460]	@ (80041fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004030:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004032:	e0d8      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004034:	4b6f      	ldr	r3, [pc, #444]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800403c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800403e:	4b6d      	ldr	r3, [pc, #436]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d063      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404a:	4b6a      	ldr	r3, [pc, #424]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	099b      	lsrs	r3, r3, #6
 8004050:	2200      	movs	r2, #0
 8004052:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004054:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405c:	633b      	str	r3, [r7, #48]	@ 0x30
 800405e:	2300      	movs	r3, #0
 8004060:	637b      	str	r3, [r7, #52]	@ 0x34
 8004062:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004066:	4622      	mov	r2, r4
 8004068:	462b      	mov	r3, r5
 800406a:	f04f 0000 	mov.w	r0, #0
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	0159      	lsls	r1, r3, #5
 8004074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004078:	0150      	lsls	r0, r2, #5
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4621      	mov	r1, r4
 8004080:	1a51      	subs	r1, r2, r1
 8004082:	6139      	str	r1, [r7, #16]
 8004084:	4629      	mov	r1, r5
 8004086:	eb63 0301 	sbc.w	r3, r3, r1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004098:	4659      	mov	r1, fp
 800409a:	018b      	lsls	r3, r1, #6
 800409c:	4651      	mov	r1, sl
 800409e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040a2:	4651      	mov	r1, sl
 80040a4:	018a      	lsls	r2, r1, #6
 80040a6:	4651      	mov	r1, sl
 80040a8:	ebb2 0801 	subs.w	r8, r2, r1
 80040ac:	4659      	mov	r1, fp
 80040ae:	eb63 0901 	sbc.w	r9, r3, r1
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040c6:	4690      	mov	r8, r2
 80040c8:	4699      	mov	r9, r3
 80040ca:	4623      	mov	r3, r4
 80040cc:	eb18 0303 	adds.w	r3, r8, r3
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	462b      	mov	r3, r5
 80040d4:	eb49 0303 	adc.w	r3, r9, r3
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040e6:	4629      	mov	r1, r5
 80040e8:	024b      	lsls	r3, r1, #9
 80040ea:	4621      	mov	r1, r4
 80040ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040f0:	4621      	mov	r1, r4
 80040f2:	024a      	lsls	r2, r1, #9
 80040f4:	4610      	mov	r0, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040fa:	2200      	movs	r2, #0
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004104:	f7fc f8cc 	bl	80002a0 <__aeabi_uldivmod>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4613      	mov	r3, r2
 800410e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004110:	e058      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004112:	4b38      	ldr	r3, [pc, #224]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	2200      	movs	r2, #0
 800411a:	4618      	mov	r0, r3
 800411c:	4611      	mov	r1, r2
 800411e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	2300      	movs	r3, #0
 8004126:	627b      	str	r3, [r7, #36]	@ 0x24
 8004128:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	f04f 0000 	mov.w	r0, #0
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	0159      	lsls	r1, r3, #5
 800413a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800413e:	0150      	lsls	r0, r2, #5
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4641      	mov	r1, r8
 8004146:	ebb2 0a01 	subs.w	sl, r2, r1
 800414a:	4649      	mov	r1, r9
 800414c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800415c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004160:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004164:	ebb2 040a 	subs.w	r4, r2, sl
 8004168:	eb63 050b 	sbc.w	r5, r3, fp
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	00eb      	lsls	r3, r5, #3
 8004176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800417a:	00e2      	lsls	r2, r4, #3
 800417c:	4614      	mov	r4, r2
 800417e:	461d      	mov	r5, r3
 8004180:	4643      	mov	r3, r8
 8004182:	18e3      	adds	r3, r4, r3
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	464b      	mov	r3, r9
 8004188:	eb45 0303 	adc.w	r3, r5, r3
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800419a:	4629      	mov	r1, r5
 800419c:	028b      	lsls	r3, r1, #10
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041a4:	4621      	mov	r1, r4
 80041a6:	028a      	lsls	r2, r1, #10
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ae:	2200      	movs	r2, #0
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	61fa      	str	r2, [r7, #28]
 80041b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b8:	f7fc f872 	bl	80002a0 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4613      	mov	r3, r2
 80041c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041c4:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	0c1b      	lsrs	r3, r3, #16
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	3301      	adds	r3, #1
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041de:	e002      	b.n	80041e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e0:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3750      	adds	r7, #80	@ 0x50
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800
 80041f8:	00f42400 	.word	0x00f42400
 80041fc:	007a1200 	.word	0x007a1200

08004200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004204:	4b03      	ldr	r3, [pc, #12]	@ (8004214 <HAL_RCC_GetHCLKFreq+0x14>)
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000040 	.word	0x20000040

08004218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800421c:	f7ff fff0 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004220:	4602      	mov	r2, r0
 8004222:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0a9b      	lsrs	r3, r3, #10
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	4903      	ldr	r1, [pc, #12]	@ (800423c <HAL_RCC_GetPCLK1Freq+0x24>)
 800422e:	5ccb      	ldrb	r3, [r1, r3]
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	08006efc 	.word	0x08006efc

08004240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004244:	f7ff ffdc 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0b5b      	lsrs	r3, r3, #13
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4903      	ldr	r1, [pc, #12]	@ (8004264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40023800 	.word	0x40023800
 8004264:	08006efc 	.word	0x08006efc

08004268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e07b      	b.n	8004372 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	2b00      	cmp	r3, #0
 8004280:	d108      	bne.n	8004294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800428a:	d009      	beq.n	80042a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	61da      	str	r2, [r3, #28]
 8004292:	e005      	b.n	80042a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd f9f6 	bl	80016ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004324:	ea42 0103 	orr.w	r1, r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	f003 0104 	and.w	r1, r3, #4
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	f003 0210 	and.w	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004360:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b088      	sub	sp, #32
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800438a:	f7fd fdeb 	bl	8001f64 <HAL_GetTick>
 800438e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d001      	beq.n	80043a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
 80043a2:	e12a      	b.n	80045fa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_SPI_Transmit+0x36>
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e122      	b.n	80045fa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_SPI_Transmit+0x48>
 80043be:	2302      	movs	r3, #2
 80043c0:	e11b      	b.n	80045fa <HAL_SPI_Transmit+0x280>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2203      	movs	r2, #3
 80043ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004410:	d10f      	bne.n	8004432 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004420:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004430:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d007      	beq.n	8004450 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800444e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004458:	d152      	bne.n	8004500 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_SPI_Transmit+0xee>
 8004462:	8b7b      	ldrh	r3, [r7, #26]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d145      	bne.n	80044f4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	881a      	ldrh	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004478:	1c9a      	adds	r2, r3, #2
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800448c:	e032      	b.n	80044f4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d112      	bne.n	80044c2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a0:	881a      	ldrh	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ac:	1c9a      	adds	r2, r3, #2
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044c0:	e018      	b.n	80044f4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c2:	f7fd fd4f 	bl	8001f64 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d803      	bhi.n	80044da <HAL_SPI_Transmit+0x160>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d102      	bne.n	80044e0 <HAL_SPI_Transmit+0x166>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d109      	bne.n	80044f4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e082      	b.n	80045fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1c7      	bne.n	800448e <HAL_SPI_Transmit+0x114>
 80044fe:	e053      	b.n	80045a8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_SPI_Transmit+0x194>
 8004508:	8b7b      	ldrh	r3, [r7, #26]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d147      	bne.n	800459e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	7812      	ldrb	r2, [r2, #0]
 800451a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004534:	e033      	b.n	800459e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b02      	cmp	r3, #2
 8004542:	d113      	bne.n	800456c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	7812      	ldrb	r2, [r2, #0]
 8004550:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	86da      	strh	r2, [r3, #54]	@ 0x36
 800456a:	e018      	b.n	800459e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800456c:	f7fd fcfa 	bl	8001f64 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d803      	bhi.n	8004584 <HAL_SPI_Transmit+0x20a>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004582:	d102      	bne.n	800458a <HAL_SPI_Transmit+0x210>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e02d      	b.n	80045fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1c6      	bne.n	8004536 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	6839      	ldr	r1, [r7, #0]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fbe7 	bl	8004d80 <SPI_EndRxTxTransaction>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80045f8:	2300      	movs	r3, #0
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b088      	sub	sp, #32
 8004606:	af02      	add	r7, sp, #8
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d001      	beq.n	8004622 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
 8004620:	e104      	b.n	800482c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800462a:	d112      	bne.n	8004652 <HAL_SPI_Receive+0x50>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10e      	bne.n	8004652 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2204      	movs	r2, #4
 8004638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800463c:	88fa      	ldrh	r2, [r7, #6]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	4613      	mov	r3, r2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f8f3 	bl	8004834 <HAL_SPI_TransmitReceive>
 800464e:	4603      	mov	r3, r0
 8004650:	e0ec      	b.n	800482c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004652:	f7fd fc87 	bl	8001f64 <HAL_GetTick>
 8004656:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_SPI_Receive+0x62>
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0e1      	b.n	800482c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_SPI_Receive+0x74>
 8004672:	2302      	movs	r3, #2
 8004674:	e0da      	b.n	800482c <HAL_SPI_Receive+0x22a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2204      	movs	r2, #4
 8004682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c4:	d10f      	bne.n	80046e6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f0:	2b40      	cmp	r3, #64	@ 0x40
 80046f2:	d007      	beq.n	8004704 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004702:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d170      	bne.n	80047ee <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800470c:	e035      	b.n	800477a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d115      	bne.n	8004748 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f103 020c 	add.w	r2, r3, #12
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	7812      	ldrb	r2, [r2, #0]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004746:	e018      	b.n	800477a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004748:	f7fd fc0c 	bl	8001f64 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d803      	bhi.n	8004760 <HAL_SPI_Receive+0x15e>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d102      	bne.n	8004766 <HAL_SPI_Receive+0x164>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e058      	b.n	800482c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1c4      	bne.n	800470e <HAL_SPI_Receive+0x10c>
 8004784:	e038      	b.n	80047f8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d113      	bne.n	80047bc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479e:	b292      	uxth	r2, r2
 80047a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a6:	1c9a      	adds	r2, r3, #2
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047ba:	e018      	b.n	80047ee <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047bc:	f7fd fbd2 	bl	8001f64 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d803      	bhi.n	80047d4 <HAL_SPI_Receive+0x1d2>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d102      	bne.n	80047da <HAL_SPI_Receive+0x1d8>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e01e      	b.n	800482c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1c6      	bne.n	8004786 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fa59 	bl	8004cb4 <SPI_EndRxTransaction>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800482a:	2300      	movs	r3, #0
  }
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	@ 0x28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004842:	2301      	movs	r3, #1
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004846:	f7fd fb8d 	bl	8001f64 <HAL_GetTick>
 800484a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004852:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800485a:	887b      	ldrh	r3, [r7, #2]
 800485c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800485e:	7ffb      	ldrb	r3, [r7, #31]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d00c      	beq.n	800487e <HAL_SPI_TransmitReceive+0x4a>
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800486a:	d106      	bne.n	800487a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <HAL_SPI_TransmitReceive+0x46>
 8004874:	7ffb      	ldrb	r3, [r7, #31]
 8004876:	2b04      	cmp	r3, #4
 8004878:	d001      	beq.n	800487e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800487a:	2302      	movs	r3, #2
 800487c:	e17f      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_SPI_TransmitReceive+0x5c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_SPI_TransmitReceive+0x5c>
 800488a:	887b      	ldrh	r3, [r7, #2]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e174      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x6e>
 800489e:	2302      	movs	r3, #2
 80048a0:	e16d      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d003      	beq.n	80048be <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2205      	movs	r2, #5
 80048ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	887a      	ldrh	r2, [r7, #2]
 80048ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	887a      	ldrh	r2, [r7, #2]
 80048e0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	887a      	ldrh	r2, [r7, #2]
 80048e6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fe:	2b40      	cmp	r3, #64	@ 0x40
 8004900:	d007      	beq.n	8004912 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004910:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800491a:	d17e      	bne.n	8004a1a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_SPI_TransmitReceive+0xf6>
 8004924:	8afb      	ldrh	r3, [r7, #22]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d16c      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492e:	881a      	ldrh	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	1c9a      	adds	r2, r3, #2
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800494e:	e059      	b.n	8004a04 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d11b      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x162>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d016      	beq.n	8004996 <HAL_SPI_TransmitReceive+0x162>
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	2b01      	cmp	r3, #1
 800496c:	d113      	bne.n	8004996 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	881a      	ldrh	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d119      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x1a4>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d014      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	b292      	uxth	r2, r2
 80049ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c0:	1c9a      	adds	r2, r3, #2
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049d4:	2301      	movs	r3, #1
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049d8:	f7fd fac4 	bl	8001f64 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d80d      	bhi.n	8004a04 <HAL_SPI_TransmitReceive+0x1d0>
 80049e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d009      	beq.n	8004a04 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e0bc      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1a0      	bne.n	8004950 <HAL_SPI_TransmitReceive+0x11c>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d19b      	bne.n	8004950 <HAL_SPI_TransmitReceive+0x11c>
 8004a18:	e082      	b.n	8004b20 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_SPI_TransmitReceive+0x1f4>
 8004a22:	8afb      	ldrh	r3, [r7, #22]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d171      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	7812      	ldrb	r2, [r2, #0]
 8004a34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a4e:	e05d      	b.n	8004b0c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d11c      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x264>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d017      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x264>
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d114      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	7812      	ldrb	r2, [r2, #0]
 8004a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d119      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x2a6>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d014      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ada:	f7fd fa43 	bl	8001f64 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d803      	bhi.n	8004af2 <HAL_SPI_TransmitReceive+0x2be>
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d102      	bne.n	8004af8 <HAL_SPI_TransmitReceive+0x2c4>
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d109      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e038      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d19c      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x21c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d197      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f92b 	bl	8004d80 <SPI_EndRxTxTransaction>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e01d      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3728      	adds	r7, #40	@ 0x28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b94:	b2db      	uxtb	r3, r3
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bb4:	f7fd f9d6 	bl	8001f64 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bc4:	f7fd f9ce 	bl	8001f64 <HAL_GetTick>
 8004bc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bca:	4b39      	ldr	r3, [pc, #228]	@ (8004cb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	015b      	lsls	r3, r3, #5
 8004bd0:	0d1b      	lsrs	r3, r3, #20
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	fb02 f303 	mul.w	r3, r2, r3
 8004bd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bda:	e054      	b.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d050      	beq.n	8004c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004be4:	f7fd f9be 	bl	8001f64 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d902      	bls.n	8004bfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d13d      	bne.n	8004c76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c12:	d111      	bne.n	8004c38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1c:	d004      	beq.n	8004c28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c26:	d107      	bne.n	8004c38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c40:	d10f      	bne.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e017      	b.n	8004ca6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	bf0c      	ite	eq
 8004c96:	2301      	moveq	r3, #1
 8004c98:	2300      	movne	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d19b      	bne.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000040 	.word	0x20000040

08004cb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cc8:	d111      	bne.n	8004cee <SPI_EndRxTransaction+0x3a>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd2:	d004      	beq.n	8004cde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cdc:	d107      	bne.n	8004cee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cf6:	d12a      	bne.n	8004d4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d00:	d012      	beq.n	8004d28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2180      	movs	r1, #128	@ 0x80
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff ff49 	bl	8004ba4 <SPI_WaitFlagStateUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02d      	beq.n	8004d74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e026      	b.n	8004d76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2101      	movs	r1, #1
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff ff36 	bl	8004ba4 <SPI_WaitFlagStateUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01a      	beq.n	8004d74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d42:	f043 0220 	orr.w	r2, r3, #32
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e013      	b.n	8004d76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2101      	movs	r1, #1
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7ff ff23 	bl	8004ba4 <SPI_WaitFlagStateUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d68:	f043 0220 	orr.w	r2, r3, #32
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e000      	b.n	8004d76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2201      	movs	r2, #1
 8004d94:	2102      	movs	r1, #2
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff ff04 	bl	8004ba4 <SPI_WaitFlagStateUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e032      	b.n	8004e18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004db2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <SPI_EndRxTxTransaction+0xa0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e24 <SPI_EndRxTxTransaction+0xa4>)
 8004db8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbc:	0d5b      	lsrs	r3, r3, #21
 8004dbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd0:	d112      	bne.n	8004df8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2180      	movs	r1, #128	@ 0x80
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f7ff fee1 	bl	8004ba4 <SPI_WaitFlagStateUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d016      	beq.n	8004e16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dec:	f043 0220 	orr.w	r2, r3, #32
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e00f      	b.n	8004e18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0e:	2b80      	cmp	r3, #128	@ 0x80
 8004e10:	d0f2      	beq.n	8004df8 <SPI_EndRxTxTransaction+0x78>
 8004e12:	e000      	b.n	8004e16 <SPI_EndRxTxTransaction+0x96>
        break;
 8004e14:	bf00      	nop
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000040 	.word	0x20000040
 8004e24:	165e9f81 	.word	0x165e9f81

08004e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e042      	b.n	8004ec0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fc fc74 	bl	800173c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2224      	movs	r2, #36	@ 0x24
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fa09 	bl	8005284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d175      	bne.n	8004fd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_UART_Transmit+0x2c>
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e06e      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2221      	movs	r2, #33	@ 0x21
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f06:	f7fd f82d 	bl	8001f64 <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f20:	d108      	bne.n	8004f34 <HAL_UART_Transmit+0x6c>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	e003      	b.n	8004f3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f3c:	e02e      	b.n	8004f9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2180      	movs	r1, #128	@ 0x80
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f8df 	bl	800510c <UART_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e03a      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10b      	bne.n	8004f7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	3302      	adds	r3, #2
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	e007      	b.n	8004f8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	781a      	ldrb	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1cb      	bne.n	8004f3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2140      	movs	r1, #64	@ 0x40
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f8ab 	bl	800510c <UART_WaitOnFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e006      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b08a      	sub	sp, #40	@ 0x28
 8004fe2:	af02      	add	r7, sp, #8
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	f040 8081 	bne.w	8005102 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_UART_Receive+0x2e>
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e079      	b.n	8005104 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2222      	movs	r2, #34	@ 0x22
 800501a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005024:	f7fc ff9e 	bl	8001f64 <HAL_GetTick>
 8005028:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	88fa      	ldrh	r2, [r7, #6]
 800502e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503e:	d108      	bne.n	8005052 <HAL_UART_Receive+0x74>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	61bb      	str	r3, [r7, #24]
 8005050:	e003      	b.n	800505a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800505a:	e047      	b.n	80050ec <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2200      	movs	r2, #0
 8005064:	2120      	movs	r1, #32
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f850 	bl	800510c <UART_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e042      	b.n	8005104 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10c      	bne.n	800509e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005090:	b29a      	uxth	r2, r3
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	3302      	adds	r3, #2
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	e01f      	b.n	80050de <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a6:	d007      	beq.n	80050b8 <HAL_UART_Receive+0xda>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <HAL_UART_Receive+0xe8>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e008      	b.n	80050d8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3301      	adds	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1b2      	bne.n	800505c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3720      	adds	r7, #32
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511c:	e03b      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005124:	d037      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005126:	f7fc ff1d 	bl	8001f64 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	6a3a      	ldr	r2, [r7, #32]
 8005132:	429a      	cmp	r2, r3
 8005134:	d302      	bcc.n	800513c <UART_WaitOnFlagUntilTimeout+0x30>
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e03a      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b00      	cmp	r3, #0
 800514c:	d023      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0x8a>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b80      	cmp	r3, #128	@ 0x80
 8005152:	d020      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b40      	cmp	r3, #64	@ 0x40
 8005158:	d01d      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b08      	cmp	r3, #8
 8005166:	d116      	bne.n	8005196 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f81d 	bl	80051be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2208      	movs	r2, #8
 8005188:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e00f      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d0b4      	beq.n	800511e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051be:	b480      	push	{r7}
 80051c0:	b095      	sub	sp, #84	@ 0x54
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	330c      	adds	r3, #12
 80051e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80051e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e5      	bne.n	80051c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3314      	adds	r3, #20
 8005200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	61fb      	str	r3, [r7, #28]
   return(result);
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3314      	adds	r3, #20
 8005218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800521a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800521c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e5      	bne.n	80051fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005232:	2b01      	cmp	r3, #1
 8005234:	d119      	bne.n	800526a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	60bb      	str	r3, [r7, #8]
   return(result);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f023 0310 	bic.w	r3, r3, #16
 800524c:	647b      	str	r3, [r7, #68]	@ 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	330c      	adds	r3, #12
 8005254:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005256:	61ba      	str	r2, [r7, #24]
 8005258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6979      	ldr	r1, [r7, #20]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	613b      	str	r3, [r7, #16]
   return(result);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e5      	bne.n	8005236 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005278:	bf00      	nop
 800527a:	3754      	adds	r7, #84	@ 0x54
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005288:	b0c0      	sub	sp, #256	@ 0x100
 800528a:	af00      	add	r7, sp, #0
 800528c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a0:	68d9      	ldr	r1, [r3, #12]
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	ea40 0301 	orr.w	r3, r0, r1
 80052ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052dc:	f021 010c 	bic.w	r1, r1, #12
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052ea:	430b      	orrs	r3, r1
 80052ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fe:	6999      	ldr	r1, [r3, #24]
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	ea40 0301 	orr.w	r3, r0, r1
 800530a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b8f      	ldr	r3, [pc, #572]	@ (8005550 <UART_SetConfig+0x2cc>)
 8005314:	429a      	cmp	r2, r3
 8005316:	d005      	beq.n	8005324 <UART_SetConfig+0xa0>
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b8d      	ldr	r3, [pc, #564]	@ (8005554 <UART_SetConfig+0x2d0>)
 8005320:	429a      	cmp	r2, r3
 8005322:	d104      	bne.n	800532e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fe ff8c 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 8005328:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800532c:	e003      	b.n	8005336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800532e:	f7fe ff73 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 8005332:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005340:	f040 810c 	bne.w	800555c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800534e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	1891      	adds	r1, r2, r2
 800535c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800535e:	415b      	adcs	r3, r3
 8005360:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005366:	4621      	mov	r1, r4
 8005368:	eb12 0801 	adds.w	r8, r2, r1
 800536c:	4629      	mov	r1, r5
 800536e:	eb43 0901 	adc.w	r9, r3, r1
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800537e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005386:	4690      	mov	r8, r2
 8005388:	4699      	mov	r9, r3
 800538a:	4623      	mov	r3, r4
 800538c:	eb18 0303 	adds.w	r3, r8, r3
 8005390:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005394:	462b      	mov	r3, r5
 8005396:	eb49 0303 	adc.w	r3, r9, r3
 800539a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053b2:	460b      	mov	r3, r1
 80053b4:	18db      	adds	r3, r3, r3
 80053b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053b8:	4613      	mov	r3, r2
 80053ba:	eb42 0303 	adc.w	r3, r2, r3
 80053be:	657b      	str	r3, [r7, #84]	@ 0x54
 80053c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053c8:	f7fa ff6a 	bl	80002a0 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4b61      	ldr	r3, [pc, #388]	@ (8005558 <UART_SetConfig+0x2d4>)
 80053d2:	fba3 2302 	umull	r2, r3, r3, r2
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	011c      	lsls	r4, r3, #4
 80053da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	1891      	adds	r1, r2, r2
 80053f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053f4:	415b      	adcs	r3, r3
 80053f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053fc:	4641      	mov	r1, r8
 80053fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005402:	4649      	mov	r1, r9
 8005404:	eb43 0b01 	adc.w	fp, r3, r1
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800541c:	4692      	mov	sl, r2
 800541e:	469b      	mov	fp, r3
 8005420:	4643      	mov	r3, r8
 8005422:	eb1a 0303 	adds.w	r3, sl, r3
 8005426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800542a:	464b      	mov	r3, r9
 800542c:	eb4b 0303 	adc.w	r3, fp, r3
 8005430:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005440:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005448:	460b      	mov	r3, r1
 800544a:	18db      	adds	r3, r3, r3
 800544c:	643b      	str	r3, [r7, #64]	@ 0x40
 800544e:	4613      	mov	r3, r2
 8005450:	eb42 0303 	adc.w	r3, r2, r3
 8005454:	647b      	str	r3, [r7, #68]	@ 0x44
 8005456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800545a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800545e:	f7fa ff1f 	bl	80002a0 <__aeabi_uldivmod>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4611      	mov	r1, r2
 8005468:	4b3b      	ldr	r3, [pc, #236]	@ (8005558 <UART_SetConfig+0x2d4>)
 800546a:	fba3 2301 	umull	r2, r3, r3, r1
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	2264      	movs	r2, #100	@ 0x64
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	1acb      	subs	r3, r1, r3
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800547e:	4b36      	ldr	r3, [pc, #216]	@ (8005558 <UART_SetConfig+0x2d4>)
 8005480:	fba3 2302 	umull	r2, r3, r3, r2
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800548c:	441c      	add	r4, r3
 800548e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005492:	2200      	movs	r2, #0
 8005494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005498:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800549c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054a0:	4642      	mov	r2, r8
 80054a2:	464b      	mov	r3, r9
 80054a4:	1891      	adds	r1, r2, r2
 80054a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054a8:	415b      	adcs	r3, r3
 80054aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054b0:	4641      	mov	r1, r8
 80054b2:	1851      	adds	r1, r2, r1
 80054b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80054b6:	4649      	mov	r1, r9
 80054b8:	414b      	adcs	r3, r1
 80054ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054c8:	4659      	mov	r1, fp
 80054ca:	00cb      	lsls	r3, r1, #3
 80054cc:	4651      	mov	r1, sl
 80054ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054d2:	4651      	mov	r1, sl
 80054d4:	00ca      	lsls	r2, r1, #3
 80054d6:	4610      	mov	r0, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	4642      	mov	r2, r8
 80054de:	189b      	adds	r3, r3, r2
 80054e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054e4:	464b      	mov	r3, r9
 80054e6:	460a      	mov	r2, r1
 80054e8:	eb42 0303 	adc.w	r3, r2, r3
 80054ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005504:	460b      	mov	r3, r1
 8005506:	18db      	adds	r3, r3, r3
 8005508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800550a:	4613      	mov	r3, r2
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800551a:	f7fa fec1 	bl	80002a0 <__aeabi_uldivmod>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <UART_SetConfig+0x2d4>)
 8005524:	fba3 1302 	umull	r1, r3, r3, r2
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	2164      	movs	r1, #100	@ 0x64
 800552c:	fb01 f303 	mul.w	r3, r1, r3
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	3332      	adds	r3, #50	@ 0x32
 8005536:	4a08      	ldr	r2, [pc, #32]	@ (8005558 <UART_SetConfig+0x2d4>)
 8005538:	fba2 2303 	umull	r2, r3, r2, r3
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	f003 0207 	and.w	r2, r3, #7
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4422      	add	r2, r4
 800554a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800554c:	e106      	b.n	800575c <UART_SetConfig+0x4d8>
 800554e:	bf00      	nop
 8005550:	40011000 	.word	0x40011000
 8005554:	40011400 	.word	0x40011400
 8005558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800555c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005560:	2200      	movs	r2, #0
 8005562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005566:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800556a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800556e:	4642      	mov	r2, r8
 8005570:	464b      	mov	r3, r9
 8005572:	1891      	adds	r1, r2, r2
 8005574:	6239      	str	r1, [r7, #32]
 8005576:	415b      	adcs	r3, r3
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
 800557a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800557e:	4641      	mov	r1, r8
 8005580:	1854      	adds	r4, r2, r1
 8005582:	4649      	mov	r1, r9
 8005584:	eb43 0501 	adc.w	r5, r3, r1
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	00eb      	lsls	r3, r5, #3
 8005592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005596:	00e2      	lsls	r2, r4, #3
 8005598:	4614      	mov	r4, r2
 800559a:	461d      	mov	r5, r3
 800559c:	4643      	mov	r3, r8
 800559e:	18e3      	adds	r3, r4, r3
 80055a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055a4:	464b      	mov	r3, r9
 80055a6:	eb45 0303 	adc.w	r3, r5, r3
 80055aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055ca:	4629      	mov	r1, r5
 80055cc:	008b      	lsls	r3, r1, #2
 80055ce:	4621      	mov	r1, r4
 80055d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d4:	4621      	mov	r1, r4
 80055d6:	008a      	lsls	r2, r1, #2
 80055d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055dc:	f7fa fe60 	bl	80002a0 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4b60      	ldr	r3, [pc, #384]	@ (8005768 <UART_SetConfig+0x4e4>)
 80055e6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	011c      	lsls	r4, r3, #4
 80055ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	1891      	adds	r1, r2, r2
 8005606:	61b9      	str	r1, [r7, #24]
 8005608:	415b      	adcs	r3, r3
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005610:	4641      	mov	r1, r8
 8005612:	1851      	adds	r1, r2, r1
 8005614:	6139      	str	r1, [r7, #16]
 8005616:	4649      	mov	r1, r9
 8005618:	414b      	adcs	r3, r1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005628:	4659      	mov	r1, fp
 800562a:	00cb      	lsls	r3, r1, #3
 800562c:	4651      	mov	r1, sl
 800562e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005632:	4651      	mov	r1, sl
 8005634:	00ca      	lsls	r2, r1, #3
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	4603      	mov	r3, r0
 800563c:	4642      	mov	r2, r8
 800563e:	189b      	adds	r3, r3, r2
 8005640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005644:	464b      	mov	r3, r9
 8005646:	460a      	mov	r2, r1
 8005648:	eb42 0303 	adc.w	r3, r2, r3
 800564c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	67bb      	str	r3, [r7, #120]	@ 0x78
 800565a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005668:	4649      	mov	r1, r9
 800566a:	008b      	lsls	r3, r1, #2
 800566c:	4641      	mov	r1, r8
 800566e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005672:	4641      	mov	r1, r8
 8005674:	008a      	lsls	r2, r1, #2
 8005676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800567a:	f7fa fe11 	bl	80002a0 <__aeabi_uldivmod>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4611      	mov	r1, r2
 8005684:	4b38      	ldr	r3, [pc, #224]	@ (8005768 <UART_SetConfig+0x4e4>)
 8005686:	fba3 2301 	umull	r2, r3, r3, r1
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	2264      	movs	r2, #100	@ 0x64
 800568e:	fb02 f303 	mul.w	r3, r2, r3
 8005692:	1acb      	subs	r3, r1, r3
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	3332      	adds	r3, #50	@ 0x32
 8005698:	4a33      	ldr	r2, [pc, #204]	@ (8005768 <UART_SetConfig+0x4e4>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056a4:	441c      	add	r4, r3
 80056a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056aa:	2200      	movs	r2, #0
 80056ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80056ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80056b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056b4:	4642      	mov	r2, r8
 80056b6:	464b      	mov	r3, r9
 80056b8:	1891      	adds	r1, r2, r2
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	415b      	adcs	r3, r3
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c4:	4641      	mov	r1, r8
 80056c6:	1851      	adds	r1, r2, r1
 80056c8:	6039      	str	r1, [r7, #0]
 80056ca:	4649      	mov	r1, r9
 80056cc:	414b      	adcs	r3, r1
 80056ce:	607b      	str	r3, [r7, #4]
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056dc:	4659      	mov	r1, fp
 80056de:	00cb      	lsls	r3, r1, #3
 80056e0:	4651      	mov	r1, sl
 80056e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056e6:	4651      	mov	r1, sl
 80056e8:	00ca      	lsls	r2, r1, #3
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	4642      	mov	r2, r8
 80056f2:	189b      	adds	r3, r3, r2
 80056f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056f6:	464b      	mov	r3, r9
 80056f8:	460a      	mov	r2, r1
 80056fa:	eb42 0303 	adc.w	r3, r2, r3
 80056fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	663b      	str	r3, [r7, #96]	@ 0x60
 800570a:	667a      	str	r2, [r7, #100]	@ 0x64
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005718:	4649      	mov	r1, r9
 800571a:	008b      	lsls	r3, r1, #2
 800571c:	4641      	mov	r1, r8
 800571e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005722:	4641      	mov	r1, r8
 8005724:	008a      	lsls	r2, r1, #2
 8005726:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800572a:	f7fa fdb9 	bl	80002a0 <__aeabi_uldivmod>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <UART_SetConfig+0x4e4>)
 8005734:	fba3 1302 	umull	r1, r3, r3, r2
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	2164      	movs	r1, #100	@ 0x64
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	3332      	adds	r3, #50	@ 0x32
 8005746:	4a08      	ldr	r2, [pc, #32]	@ (8005768 <UART_SetConfig+0x4e4>)
 8005748:	fba2 2303 	umull	r2, r3, r2, r3
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	f003 020f 	and.w	r2, r3, #15
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4422      	add	r2, r4
 800575a:	609a      	str	r2, [r3, #8]
}
 800575c:	bf00      	nop
 800575e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005762:	46bd      	mov	sp, r7
 8005764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005768:	51eb851f 	.word	0x51eb851f

0800576c <siprintf>:
 800576c:	b40e      	push	{r1, r2, r3}
 800576e:	b510      	push	{r4, lr}
 8005770:	b09d      	sub	sp, #116	@ 0x74
 8005772:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005774:	9002      	str	r0, [sp, #8]
 8005776:	9006      	str	r0, [sp, #24]
 8005778:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800577c:	480a      	ldr	r0, [pc, #40]	@ (80057a8 <siprintf+0x3c>)
 800577e:	9107      	str	r1, [sp, #28]
 8005780:	9104      	str	r1, [sp, #16]
 8005782:	490a      	ldr	r1, [pc, #40]	@ (80057ac <siprintf+0x40>)
 8005784:	f853 2b04 	ldr.w	r2, [r3], #4
 8005788:	9105      	str	r1, [sp, #20]
 800578a:	2400      	movs	r4, #0
 800578c:	a902      	add	r1, sp, #8
 800578e:	6800      	ldr	r0, [r0, #0]
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005794:	f000 f994 	bl	8005ac0 <_svfiprintf_r>
 8005798:	9b02      	ldr	r3, [sp, #8]
 800579a:	701c      	strb	r4, [r3, #0]
 800579c:	b01d      	add	sp, #116	@ 0x74
 800579e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a2:	b003      	add	sp, #12
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	2000004c 	.word	0x2000004c
 80057ac:	ffff0208 	.word	0xffff0208

080057b0 <memset>:
 80057b0:	4402      	add	r2, r0
 80057b2:	4603      	mov	r3, r0
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d100      	bne.n	80057ba <memset+0xa>
 80057b8:	4770      	bx	lr
 80057ba:	f803 1b01 	strb.w	r1, [r3], #1
 80057be:	e7f9      	b.n	80057b4 <memset+0x4>

080057c0 <__errno>:
 80057c0:	4b01      	ldr	r3, [pc, #4]	@ (80057c8 <__errno+0x8>)
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	2000004c 	.word	0x2000004c

080057cc <__libc_init_array>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005804 <__libc_init_array+0x38>)
 80057d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005808 <__libc_init_array+0x3c>)
 80057d2:	1b64      	subs	r4, r4, r5
 80057d4:	10a4      	asrs	r4, r4, #2
 80057d6:	2600      	movs	r6, #0
 80057d8:	42a6      	cmp	r6, r4
 80057da:	d109      	bne.n	80057f0 <__libc_init_array+0x24>
 80057dc:	4d0b      	ldr	r5, [pc, #44]	@ (800580c <__libc_init_array+0x40>)
 80057de:	4c0c      	ldr	r4, [pc, #48]	@ (8005810 <__libc_init_array+0x44>)
 80057e0:	f000 fc64 	bl	80060ac <_init>
 80057e4:	1b64      	subs	r4, r4, r5
 80057e6:	10a4      	asrs	r4, r4, #2
 80057e8:	2600      	movs	r6, #0
 80057ea:	42a6      	cmp	r6, r4
 80057ec:	d105      	bne.n	80057fa <__libc_init_array+0x2e>
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f4:	4798      	blx	r3
 80057f6:	3601      	adds	r6, #1
 80057f8:	e7ee      	b.n	80057d8 <__libc_init_array+0xc>
 80057fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fe:	4798      	blx	r3
 8005800:	3601      	adds	r6, #1
 8005802:	e7f2      	b.n	80057ea <__libc_init_array+0x1e>
 8005804:	08006f40 	.word	0x08006f40
 8005808:	08006f40 	.word	0x08006f40
 800580c:	08006f40 	.word	0x08006f40
 8005810:	08006f44 	.word	0x08006f44

08005814 <__retarget_lock_acquire_recursive>:
 8005814:	4770      	bx	lr

08005816 <__retarget_lock_release_recursive>:
 8005816:	4770      	bx	lr

08005818 <_free_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4605      	mov	r5, r0
 800581c:	2900      	cmp	r1, #0
 800581e:	d041      	beq.n	80058a4 <_free_r+0x8c>
 8005820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005824:	1f0c      	subs	r4, r1, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	bfb8      	it	lt
 800582a:	18e4      	addlt	r4, r4, r3
 800582c:	f000 f8e0 	bl	80059f0 <__malloc_lock>
 8005830:	4a1d      	ldr	r2, [pc, #116]	@ (80058a8 <_free_r+0x90>)
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	b933      	cbnz	r3, 8005844 <_free_r+0x2c>
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	6014      	str	r4, [r2, #0]
 800583a:	4628      	mov	r0, r5
 800583c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005840:	f000 b8dc 	b.w	80059fc <__malloc_unlock>
 8005844:	42a3      	cmp	r3, r4
 8005846:	d908      	bls.n	800585a <_free_r+0x42>
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	1821      	adds	r1, r4, r0
 800584c:	428b      	cmp	r3, r1
 800584e:	bf01      	itttt	eq
 8005850:	6819      	ldreq	r1, [r3, #0]
 8005852:	685b      	ldreq	r3, [r3, #4]
 8005854:	1809      	addeq	r1, r1, r0
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	e7ed      	b.n	8005836 <_free_r+0x1e>
 800585a:	461a      	mov	r2, r3
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	b10b      	cbz	r3, 8005864 <_free_r+0x4c>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d9fa      	bls.n	800585a <_free_r+0x42>
 8005864:	6811      	ldr	r1, [r2, #0]
 8005866:	1850      	adds	r0, r2, r1
 8005868:	42a0      	cmp	r0, r4
 800586a:	d10b      	bne.n	8005884 <_free_r+0x6c>
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	4401      	add	r1, r0
 8005870:	1850      	adds	r0, r2, r1
 8005872:	4283      	cmp	r3, r0
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	d1e0      	bne.n	800583a <_free_r+0x22>
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6053      	str	r3, [r2, #4]
 800587e:	4408      	add	r0, r1
 8005880:	6010      	str	r0, [r2, #0]
 8005882:	e7da      	b.n	800583a <_free_r+0x22>
 8005884:	d902      	bls.n	800588c <_free_r+0x74>
 8005886:	230c      	movs	r3, #12
 8005888:	602b      	str	r3, [r5, #0]
 800588a:	e7d6      	b.n	800583a <_free_r+0x22>
 800588c:	6820      	ldr	r0, [r4, #0]
 800588e:	1821      	adds	r1, r4, r0
 8005890:	428b      	cmp	r3, r1
 8005892:	bf04      	itt	eq
 8005894:	6819      	ldreq	r1, [r3, #0]
 8005896:	685b      	ldreq	r3, [r3, #4]
 8005898:	6063      	str	r3, [r4, #4]
 800589a:	bf04      	itt	eq
 800589c:	1809      	addeq	r1, r1, r0
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	6054      	str	r4, [r2, #4]
 80058a2:	e7ca      	b.n	800583a <_free_r+0x22>
 80058a4:	bd38      	pop	{r3, r4, r5, pc}
 80058a6:	bf00      	nop
 80058a8:	20000f9c 	.word	0x20000f9c

080058ac <sbrk_aligned>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4e0f      	ldr	r6, [pc, #60]	@ (80058ec <sbrk_aligned+0x40>)
 80058b0:	460c      	mov	r4, r1
 80058b2:	6831      	ldr	r1, [r6, #0]
 80058b4:	4605      	mov	r5, r0
 80058b6:	b911      	cbnz	r1, 80058be <sbrk_aligned+0x12>
 80058b8:	f000 fba4 	bl	8006004 <_sbrk_r>
 80058bc:	6030      	str	r0, [r6, #0]
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 fb9f 	bl	8006004 <_sbrk_r>
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	d103      	bne.n	80058d2 <sbrk_aligned+0x26>
 80058ca:	f04f 34ff 	mov.w	r4, #4294967295
 80058ce:	4620      	mov	r0, r4
 80058d0:	bd70      	pop	{r4, r5, r6, pc}
 80058d2:	1cc4      	adds	r4, r0, #3
 80058d4:	f024 0403 	bic.w	r4, r4, #3
 80058d8:	42a0      	cmp	r0, r4
 80058da:	d0f8      	beq.n	80058ce <sbrk_aligned+0x22>
 80058dc:	1a21      	subs	r1, r4, r0
 80058de:	4628      	mov	r0, r5
 80058e0:	f000 fb90 	bl	8006004 <_sbrk_r>
 80058e4:	3001      	adds	r0, #1
 80058e6:	d1f2      	bne.n	80058ce <sbrk_aligned+0x22>
 80058e8:	e7ef      	b.n	80058ca <sbrk_aligned+0x1e>
 80058ea:	bf00      	nop
 80058ec:	20000f98 	.word	0x20000f98

080058f0 <_malloc_r>:
 80058f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f4:	1ccd      	adds	r5, r1, #3
 80058f6:	f025 0503 	bic.w	r5, r5, #3
 80058fa:	3508      	adds	r5, #8
 80058fc:	2d0c      	cmp	r5, #12
 80058fe:	bf38      	it	cc
 8005900:	250c      	movcc	r5, #12
 8005902:	2d00      	cmp	r5, #0
 8005904:	4606      	mov	r6, r0
 8005906:	db01      	blt.n	800590c <_malloc_r+0x1c>
 8005908:	42a9      	cmp	r1, r5
 800590a:	d904      	bls.n	8005916 <_malloc_r+0x26>
 800590c:	230c      	movs	r3, #12
 800590e:	6033      	str	r3, [r6, #0]
 8005910:	2000      	movs	r0, #0
 8005912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059ec <_malloc_r+0xfc>
 800591a:	f000 f869 	bl	80059f0 <__malloc_lock>
 800591e:	f8d8 3000 	ldr.w	r3, [r8]
 8005922:	461c      	mov	r4, r3
 8005924:	bb44      	cbnz	r4, 8005978 <_malloc_r+0x88>
 8005926:	4629      	mov	r1, r5
 8005928:	4630      	mov	r0, r6
 800592a:	f7ff ffbf 	bl	80058ac <sbrk_aligned>
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	4604      	mov	r4, r0
 8005932:	d158      	bne.n	80059e6 <_malloc_r+0xf6>
 8005934:	f8d8 4000 	ldr.w	r4, [r8]
 8005938:	4627      	mov	r7, r4
 800593a:	2f00      	cmp	r7, #0
 800593c:	d143      	bne.n	80059c6 <_malloc_r+0xd6>
 800593e:	2c00      	cmp	r4, #0
 8005940:	d04b      	beq.n	80059da <_malloc_r+0xea>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	4639      	mov	r1, r7
 8005946:	4630      	mov	r0, r6
 8005948:	eb04 0903 	add.w	r9, r4, r3
 800594c:	f000 fb5a 	bl	8006004 <_sbrk_r>
 8005950:	4581      	cmp	r9, r0
 8005952:	d142      	bne.n	80059da <_malloc_r+0xea>
 8005954:	6821      	ldr	r1, [r4, #0]
 8005956:	1a6d      	subs	r5, r5, r1
 8005958:	4629      	mov	r1, r5
 800595a:	4630      	mov	r0, r6
 800595c:	f7ff ffa6 	bl	80058ac <sbrk_aligned>
 8005960:	3001      	adds	r0, #1
 8005962:	d03a      	beq.n	80059da <_malloc_r+0xea>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	442b      	add	r3, r5
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	f8d8 3000 	ldr.w	r3, [r8]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	bb62      	cbnz	r2, 80059cc <_malloc_r+0xdc>
 8005972:	f8c8 7000 	str.w	r7, [r8]
 8005976:	e00f      	b.n	8005998 <_malloc_r+0xa8>
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	1b52      	subs	r2, r2, r5
 800597c:	d420      	bmi.n	80059c0 <_malloc_r+0xd0>
 800597e:	2a0b      	cmp	r2, #11
 8005980:	d917      	bls.n	80059b2 <_malloc_r+0xc2>
 8005982:	1961      	adds	r1, r4, r5
 8005984:	42a3      	cmp	r3, r4
 8005986:	6025      	str	r5, [r4, #0]
 8005988:	bf18      	it	ne
 800598a:	6059      	strne	r1, [r3, #4]
 800598c:	6863      	ldr	r3, [r4, #4]
 800598e:	bf08      	it	eq
 8005990:	f8c8 1000 	streq.w	r1, [r8]
 8005994:	5162      	str	r2, [r4, r5]
 8005996:	604b      	str	r3, [r1, #4]
 8005998:	4630      	mov	r0, r6
 800599a:	f000 f82f 	bl	80059fc <__malloc_unlock>
 800599e:	f104 000b 	add.w	r0, r4, #11
 80059a2:	1d23      	adds	r3, r4, #4
 80059a4:	f020 0007 	bic.w	r0, r0, #7
 80059a8:	1ac2      	subs	r2, r0, r3
 80059aa:	bf1c      	itt	ne
 80059ac:	1a1b      	subne	r3, r3, r0
 80059ae:	50a3      	strne	r3, [r4, r2]
 80059b0:	e7af      	b.n	8005912 <_malloc_r+0x22>
 80059b2:	6862      	ldr	r2, [r4, #4]
 80059b4:	42a3      	cmp	r3, r4
 80059b6:	bf0c      	ite	eq
 80059b8:	f8c8 2000 	streq.w	r2, [r8]
 80059bc:	605a      	strne	r2, [r3, #4]
 80059be:	e7eb      	b.n	8005998 <_malloc_r+0xa8>
 80059c0:	4623      	mov	r3, r4
 80059c2:	6864      	ldr	r4, [r4, #4]
 80059c4:	e7ae      	b.n	8005924 <_malloc_r+0x34>
 80059c6:	463c      	mov	r4, r7
 80059c8:	687f      	ldr	r7, [r7, #4]
 80059ca:	e7b6      	b.n	800593a <_malloc_r+0x4a>
 80059cc:	461a      	mov	r2, r3
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	d1fb      	bne.n	80059cc <_malloc_r+0xdc>
 80059d4:	2300      	movs	r3, #0
 80059d6:	6053      	str	r3, [r2, #4]
 80059d8:	e7de      	b.n	8005998 <_malloc_r+0xa8>
 80059da:	230c      	movs	r3, #12
 80059dc:	6033      	str	r3, [r6, #0]
 80059de:	4630      	mov	r0, r6
 80059e0:	f000 f80c 	bl	80059fc <__malloc_unlock>
 80059e4:	e794      	b.n	8005910 <_malloc_r+0x20>
 80059e6:	6005      	str	r5, [r0, #0]
 80059e8:	e7d6      	b.n	8005998 <_malloc_r+0xa8>
 80059ea:	bf00      	nop
 80059ec:	20000f9c 	.word	0x20000f9c

080059f0 <__malloc_lock>:
 80059f0:	4801      	ldr	r0, [pc, #4]	@ (80059f8 <__malloc_lock+0x8>)
 80059f2:	f7ff bf0f 	b.w	8005814 <__retarget_lock_acquire_recursive>
 80059f6:	bf00      	nop
 80059f8:	20000f94 	.word	0x20000f94

080059fc <__malloc_unlock>:
 80059fc:	4801      	ldr	r0, [pc, #4]	@ (8005a04 <__malloc_unlock+0x8>)
 80059fe:	f7ff bf0a 	b.w	8005816 <__retarget_lock_release_recursive>
 8005a02:	bf00      	nop
 8005a04:	20000f94 	.word	0x20000f94

08005a08 <__ssputs_r>:
 8005a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	688e      	ldr	r6, [r1, #8]
 8005a0e:	461f      	mov	r7, r3
 8005a10:	42be      	cmp	r6, r7
 8005a12:	680b      	ldr	r3, [r1, #0]
 8005a14:	4682      	mov	sl, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	4690      	mov	r8, r2
 8005a1a:	d82d      	bhi.n	8005a78 <__ssputs_r+0x70>
 8005a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a24:	d026      	beq.n	8005a74 <__ssputs_r+0x6c>
 8005a26:	6965      	ldr	r5, [r4, #20]
 8005a28:	6909      	ldr	r1, [r1, #16]
 8005a2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a2e:	eba3 0901 	sub.w	r9, r3, r1
 8005a32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a36:	1c7b      	adds	r3, r7, #1
 8005a38:	444b      	add	r3, r9
 8005a3a:	106d      	asrs	r5, r5, #1
 8005a3c:	429d      	cmp	r5, r3
 8005a3e:	bf38      	it	cc
 8005a40:	461d      	movcc	r5, r3
 8005a42:	0553      	lsls	r3, r2, #21
 8005a44:	d527      	bpl.n	8005a96 <__ssputs_r+0x8e>
 8005a46:	4629      	mov	r1, r5
 8005a48:	f7ff ff52 	bl	80058f0 <_malloc_r>
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	b360      	cbz	r0, 8005aaa <__ssputs_r+0xa2>
 8005a50:	6921      	ldr	r1, [r4, #16]
 8005a52:	464a      	mov	r2, r9
 8005a54:	f000 fae6 	bl	8006024 <memcpy>
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	6126      	str	r6, [r4, #16]
 8005a66:	6165      	str	r5, [r4, #20]
 8005a68:	444e      	add	r6, r9
 8005a6a:	eba5 0509 	sub.w	r5, r5, r9
 8005a6e:	6026      	str	r6, [r4, #0]
 8005a70:	60a5      	str	r5, [r4, #8]
 8005a72:	463e      	mov	r6, r7
 8005a74:	42be      	cmp	r6, r7
 8005a76:	d900      	bls.n	8005a7a <__ssputs_r+0x72>
 8005a78:	463e      	mov	r6, r7
 8005a7a:	6820      	ldr	r0, [r4, #0]
 8005a7c:	4632      	mov	r2, r6
 8005a7e:	4641      	mov	r1, r8
 8005a80:	f000 faa6 	bl	8005fd0 <memmove>
 8005a84:	68a3      	ldr	r3, [r4, #8]
 8005a86:	1b9b      	subs	r3, r3, r6
 8005a88:	60a3      	str	r3, [r4, #8]
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	4433      	add	r3, r6
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	2000      	movs	r0, #0
 8005a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a96:	462a      	mov	r2, r5
 8005a98:	f000 fad2 	bl	8006040 <_realloc_r>
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d1e0      	bne.n	8005a64 <__ssputs_r+0x5c>
 8005aa2:	6921      	ldr	r1, [r4, #16]
 8005aa4:	4650      	mov	r0, sl
 8005aa6:	f7ff feb7 	bl	8005818 <_free_r>
 8005aaa:	230c      	movs	r3, #12
 8005aac:	f8ca 3000 	str.w	r3, [sl]
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ab6:	81a3      	strh	r3, [r4, #12]
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	e7e9      	b.n	8005a92 <__ssputs_r+0x8a>
	...

08005ac0 <_svfiprintf_r>:
 8005ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac4:	4698      	mov	r8, r3
 8005ac6:	898b      	ldrh	r3, [r1, #12]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	b09d      	sub	sp, #116	@ 0x74
 8005acc:	4607      	mov	r7, r0
 8005ace:	460d      	mov	r5, r1
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	d510      	bpl.n	8005af6 <_svfiprintf_r+0x36>
 8005ad4:	690b      	ldr	r3, [r1, #16]
 8005ad6:	b973      	cbnz	r3, 8005af6 <_svfiprintf_r+0x36>
 8005ad8:	2140      	movs	r1, #64	@ 0x40
 8005ada:	f7ff ff09 	bl	80058f0 <_malloc_r>
 8005ade:	6028      	str	r0, [r5, #0]
 8005ae0:	6128      	str	r0, [r5, #16]
 8005ae2:	b930      	cbnz	r0, 8005af2 <_svfiprintf_r+0x32>
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	b01d      	add	sp, #116	@ 0x74
 8005aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af2:	2340      	movs	r3, #64	@ 0x40
 8005af4:	616b      	str	r3, [r5, #20]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005afa:	2320      	movs	r3, #32
 8005afc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b04:	2330      	movs	r3, #48	@ 0x30
 8005b06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ca4 <_svfiprintf_r+0x1e4>
 8005b0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b0e:	f04f 0901 	mov.w	r9, #1
 8005b12:	4623      	mov	r3, r4
 8005b14:	469a      	mov	sl, r3
 8005b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b1a:	b10a      	cbz	r2, 8005b20 <_svfiprintf_r+0x60>
 8005b1c:	2a25      	cmp	r2, #37	@ 0x25
 8005b1e:	d1f9      	bne.n	8005b14 <_svfiprintf_r+0x54>
 8005b20:	ebba 0b04 	subs.w	fp, sl, r4
 8005b24:	d00b      	beq.n	8005b3e <_svfiprintf_r+0x7e>
 8005b26:	465b      	mov	r3, fp
 8005b28:	4622      	mov	r2, r4
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	f7ff ff6b 	bl	8005a08 <__ssputs_r>
 8005b32:	3001      	adds	r0, #1
 8005b34:	f000 80a7 	beq.w	8005c86 <_svfiprintf_r+0x1c6>
 8005b38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b3a:	445a      	add	r2, fp
 8005b3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 809f 	beq.w	8005c86 <_svfiprintf_r+0x1c6>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b52:	f10a 0a01 	add.w	sl, sl, #1
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	9307      	str	r3, [sp, #28]
 8005b5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b60:	4654      	mov	r4, sl
 8005b62:	2205      	movs	r2, #5
 8005b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b68:	484e      	ldr	r0, [pc, #312]	@ (8005ca4 <_svfiprintf_r+0x1e4>)
 8005b6a:	f7fa fb49 	bl	8000200 <memchr>
 8005b6e:	9a04      	ldr	r2, [sp, #16]
 8005b70:	b9d8      	cbnz	r0, 8005baa <_svfiprintf_r+0xea>
 8005b72:	06d0      	lsls	r0, r2, #27
 8005b74:	bf44      	itt	mi
 8005b76:	2320      	movmi	r3, #32
 8005b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b7c:	0711      	lsls	r1, r2, #28
 8005b7e:	bf44      	itt	mi
 8005b80:	232b      	movmi	r3, #43	@ 0x2b
 8005b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b86:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b8c:	d015      	beq.n	8005bba <_svfiprintf_r+0xfa>
 8005b8e:	9a07      	ldr	r2, [sp, #28]
 8005b90:	4654      	mov	r4, sl
 8005b92:	2000      	movs	r0, #0
 8005b94:	f04f 0c0a 	mov.w	ip, #10
 8005b98:	4621      	mov	r1, r4
 8005b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b9e:	3b30      	subs	r3, #48	@ 0x30
 8005ba0:	2b09      	cmp	r3, #9
 8005ba2:	d94b      	bls.n	8005c3c <_svfiprintf_r+0x17c>
 8005ba4:	b1b0      	cbz	r0, 8005bd4 <_svfiprintf_r+0x114>
 8005ba6:	9207      	str	r2, [sp, #28]
 8005ba8:	e014      	b.n	8005bd4 <_svfiprintf_r+0x114>
 8005baa:	eba0 0308 	sub.w	r3, r0, r8
 8005bae:	fa09 f303 	lsl.w	r3, r9, r3
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	46a2      	mov	sl, r4
 8005bb8:	e7d2      	b.n	8005b60 <_svfiprintf_r+0xa0>
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	1d19      	adds	r1, r3, #4
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	9103      	str	r1, [sp, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bfbb      	ittet	lt
 8005bc6:	425b      	neglt	r3, r3
 8005bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8005bcc:	9307      	strge	r3, [sp, #28]
 8005bce:	9307      	strlt	r3, [sp, #28]
 8005bd0:	bfb8      	it	lt
 8005bd2:	9204      	strlt	r2, [sp, #16]
 8005bd4:	7823      	ldrb	r3, [r4, #0]
 8005bd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bd8:	d10a      	bne.n	8005bf0 <_svfiprintf_r+0x130>
 8005bda:	7863      	ldrb	r3, [r4, #1]
 8005bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bde:	d132      	bne.n	8005c46 <_svfiprintf_r+0x186>
 8005be0:	9b03      	ldr	r3, [sp, #12]
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	9203      	str	r2, [sp, #12]
 8005be8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bec:	3402      	adds	r4, #2
 8005bee:	9305      	str	r3, [sp, #20]
 8005bf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005cb4 <_svfiprintf_r+0x1f4>
 8005bf4:	7821      	ldrb	r1, [r4, #0]
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	4650      	mov	r0, sl
 8005bfa:	f7fa fb01 	bl	8000200 <memchr>
 8005bfe:	b138      	cbz	r0, 8005c10 <_svfiprintf_r+0x150>
 8005c00:	9b04      	ldr	r3, [sp, #16]
 8005c02:	eba0 000a 	sub.w	r0, r0, sl
 8005c06:	2240      	movs	r2, #64	@ 0x40
 8005c08:	4082      	lsls	r2, r0
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	3401      	adds	r4, #1
 8005c0e:	9304      	str	r3, [sp, #16]
 8005c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c14:	4824      	ldr	r0, [pc, #144]	@ (8005ca8 <_svfiprintf_r+0x1e8>)
 8005c16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c1a:	2206      	movs	r2, #6
 8005c1c:	f7fa faf0 	bl	8000200 <memchr>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d036      	beq.n	8005c92 <_svfiprintf_r+0x1d2>
 8005c24:	4b21      	ldr	r3, [pc, #132]	@ (8005cac <_svfiprintf_r+0x1ec>)
 8005c26:	bb1b      	cbnz	r3, 8005c70 <_svfiprintf_r+0x1b0>
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	3307      	adds	r3, #7
 8005c2c:	f023 0307 	bic.w	r3, r3, #7
 8005c30:	3308      	adds	r3, #8
 8005c32:	9303      	str	r3, [sp, #12]
 8005c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c36:	4433      	add	r3, r6
 8005c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c3a:	e76a      	b.n	8005b12 <_svfiprintf_r+0x52>
 8005c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c40:	460c      	mov	r4, r1
 8005c42:	2001      	movs	r0, #1
 8005c44:	e7a8      	b.n	8005b98 <_svfiprintf_r+0xd8>
 8005c46:	2300      	movs	r3, #0
 8005c48:	3401      	adds	r4, #1
 8005c4a:	9305      	str	r3, [sp, #20]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	f04f 0c0a 	mov.w	ip, #10
 8005c52:	4620      	mov	r0, r4
 8005c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c58:	3a30      	subs	r2, #48	@ 0x30
 8005c5a:	2a09      	cmp	r2, #9
 8005c5c:	d903      	bls.n	8005c66 <_svfiprintf_r+0x1a6>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0c6      	beq.n	8005bf0 <_svfiprintf_r+0x130>
 8005c62:	9105      	str	r1, [sp, #20]
 8005c64:	e7c4      	b.n	8005bf0 <_svfiprintf_r+0x130>
 8005c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e7f0      	b.n	8005c52 <_svfiprintf_r+0x192>
 8005c70:	ab03      	add	r3, sp, #12
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	462a      	mov	r2, r5
 8005c76:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb0 <_svfiprintf_r+0x1f0>)
 8005c78:	a904      	add	r1, sp, #16
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	f3af 8000 	nop.w
 8005c80:	1c42      	adds	r2, r0, #1
 8005c82:	4606      	mov	r6, r0
 8005c84:	d1d6      	bne.n	8005c34 <_svfiprintf_r+0x174>
 8005c86:	89ab      	ldrh	r3, [r5, #12]
 8005c88:	065b      	lsls	r3, r3, #25
 8005c8a:	f53f af2d 	bmi.w	8005ae8 <_svfiprintf_r+0x28>
 8005c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c90:	e72c      	b.n	8005aec <_svfiprintf_r+0x2c>
 8005c92:	ab03      	add	r3, sp, #12
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	462a      	mov	r2, r5
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <_svfiprintf_r+0x1f0>)
 8005c9a:	a904      	add	r1, sp, #16
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	f000 f879 	bl	8005d94 <_printf_i>
 8005ca2:	e7ed      	b.n	8005c80 <_svfiprintf_r+0x1c0>
 8005ca4:	08006f04 	.word	0x08006f04
 8005ca8:	08006f0e 	.word	0x08006f0e
 8005cac:	00000000 	.word	0x00000000
 8005cb0:	08005a09 	.word	0x08005a09
 8005cb4:	08006f0a 	.word	0x08006f0a

08005cb8 <_printf_common>:
 8005cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	4616      	mov	r6, r2
 8005cbe:	4698      	mov	r8, r3
 8005cc0:	688a      	ldr	r2, [r1, #8]
 8005cc2:	690b      	ldr	r3, [r1, #16]
 8005cc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	bfb8      	it	lt
 8005ccc:	4613      	movlt	r3, r2
 8005cce:	6033      	str	r3, [r6, #0]
 8005cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	b10a      	cbz	r2, 8005cde <_printf_common+0x26>
 8005cda:	3301      	adds	r3, #1
 8005cdc:	6033      	str	r3, [r6, #0]
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	0699      	lsls	r1, r3, #26
 8005ce2:	bf42      	ittt	mi
 8005ce4:	6833      	ldrmi	r3, [r6, #0]
 8005ce6:	3302      	addmi	r3, #2
 8005ce8:	6033      	strmi	r3, [r6, #0]
 8005cea:	6825      	ldr	r5, [r4, #0]
 8005cec:	f015 0506 	ands.w	r5, r5, #6
 8005cf0:	d106      	bne.n	8005d00 <_printf_common+0x48>
 8005cf2:	f104 0a19 	add.w	sl, r4, #25
 8005cf6:	68e3      	ldr	r3, [r4, #12]
 8005cf8:	6832      	ldr	r2, [r6, #0]
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	42ab      	cmp	r3, r5
 8005cfe:	dc26      	bgt.n	8005d4e <_printf_common+0x96>
 8005d00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	3b00      	subs	r3, #0
 8005d08:	bf18      	it	ne
 8005d0a:	2301      	movne	r3, #1
 8005d0c:	0692      	lsls	r2, r2, #26
 8005d0e:	d42b      	bmi.n	8005d68 <_printf_common+0xb0>
 8005d10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d14:	4641      	mov	r1, r8
 8005d16:	4638      	mov	r0, r7
 8005d18:	47c8      	blx	r9
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d01e      	beq.n	8005d5c <_printf_common+0xa4>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	6922      	ldr	r2, [r4, #16]
 8005d22:	f003 0306 	and.w	r3, r3, #6
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	bf02      	ittt	eq
 8005d2a:	68e5      	ldreq	r5, [r4, #12]
 8005d2c:	6833      	ldreq	r3, [r6, #0]
 8005d2e:	1aed      	subeq	r5, r5, r3
 8005d30:	68a3      	ldr	r3, [r4, #8]
 8005d32:	bf0c      	ite	eq
 8005d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d38:	2500      	movne	r5, #0
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	bfc4      	itt	gt
 8005d3e:	1a9b      	subgt	r3, r3, r2
 8005d40:	18ed      	addgt	r5, r5, r3
 8005d42:	2600      	movs	r6, #0
 8005d44:	341a      	adds	r4, #26
 8005d46:	42b5      	cmp	r5, r6
 8005d48:	d11a      	bne.n	8005d80 <_printf_common+0xc8>
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	e008      	b.n	8005d60 <_printf_common+0xa8>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4652      	mov	r2, sl
 8005d52:	4641      	mov	r1, r8
 8005d54:	4638      	mov	r0, r7
 8005d56:	47c8      	blx	r9
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d103      	bne.n	8005d64 <_printf_common+0xac>
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d64:	3501      	adds	r5, #1
 8005d66:	e7c6      	b.n	8005cf6 <_printf_common+0x3e>
 8005d68:	18e1      	adds	r1, r4, r3
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	2030      	movs	r0, #48	@ 0x30
 8005d6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d72:	4422      	add	r2, r4
 8005d74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d7c:	3302      	adds	r3, #2
 8005d7e:	e7c7      	b.n	8005d10 <_printf_common+0x58>
 8005d80:	2301      	movs	r3, #1
 8005d82:	4622      	mov	r2, r4
 8005d84:	4641      	mov	r1, r8
 8005d86:	4638      	mov	r0, r7
 8005d88:	47c8      	blx	r9
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d0e6      	beq.n	8005d5c <_printf_common+0xa4>
 8005d8e:	3601      	adds	r6, #1
 8005d90:	e7d9      	b.n	8005d46 <_printf_common+0x8e>
	...

08005d94 <_printf_i>:
 8005d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d98:	7e0f      	ldrb	r7, [r1, #24]
 8005d9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d9c:	2f78      	cmp	r7, #120	@ 0x78
 8005d9e:	4691      	mov	r9, r2
 8005da0:	4680      	mov	r8, r0
 8005da2:	460c      	mov	r4, r1
 8005da4:	469a      	mov	sl, r3
 8005da6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005daa:	d807      	bhi.n	8005dbc <_printf_i+0x28>
 8005dac:	2f62      	cmp	r7, #98	@ 0x62
 8005dae:	d80a      	bhi.n	8005dc6 <_printf_i+0x32>
 8005db0:	2f00      	cmp	r7, #0
 8005db2:	f000 80d1 	beq.w	8005f58 <_printf_i+0x1c4>
 8005db6:	2f58      	cmp	r7, #88	@ 0x58
 8005db8:	f000 80b8 	beq.w	8005f2c <_printf_i+0x198>
 8005dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dc4:	e03a      	b.n	8005e3c <_printf_i+0xa8>
 8005dc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dca:	2b15      	cmp	r3, #21
 8005dcc:	d8f6      	bhi.n	8005dbc <_printf_i+0x28>
 8005dce:	a101      	add	r1, pc, #4	@ (adr r1, 8005dd4 <_printf_i+0x40>)
 8005dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dd4:	08005e2d 	.word	0x08005e2d
 8005dd8:	08005e41 	.word	0x08005e41
 8005ddc:	08005dbd 	.word	0x08005dbd
 8005de0:	08005dbd 	.word	0x08005dbd
 8005de4:	08005dbd 	.word	0x08005dbd
 8005de8:	08005dbd 	.word	0x08005dbd
 8005dec:	08005e41 	.word	0x08005e41
 8005df0:	08005dbd 	.word	0x08005dbd
 8005df4:	08005dbd 	.word	0x08005dbd
 8005df8:	08005dbd 	.word	0x08005dbd
 8005dfc:	08005dbd 	.word	0x08005dbd
 8005e00:	08005f3f 	.word	0x08005f3f
 8005e04:	08005e6b 	.word	0x08005e6b
 8005e08:	08005ef9 	.word	0x08005ef9
 8005e0c:	08005dbd 	.word	0x08005dbd
 8005e10:	08005dbd 	.word	0x08005dbd
 8005e14:	08005f61 	.word	0x08005f61
 8005e18:	08005dbd 	.word	0x08005dbd
 8005e1c:	08005e6b 	.word	0x08005e6b
 8005e20:	08005dbd 	.word	0x08005dbd
 8005e24:	08005dbd 	.word	0x08005dbd
 8005e28:	08005f01 	.word	0x08005f01
 8005e2c:	6833      	ldr	r3, [r6, #0]
 8005e2e:	1d1a      	adds	r2, r3, #4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6032      	str	r2, [r6, #0]
 8005e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e09c      	b.n	8005f7a <_printf_i+0x1e6>
 8005e40:	6833      	ldr	r3, [r6, #0]
 8005e42:	6820      	ldr	r0, [r4, #0]
 8005e44:	1d19      	adds	r1, r3, #4
 8005e46:	6031      	str	r1, [r6, #0]
 8005e48:	0606      	lsls	r6, r0, #24
 8005e4a:	d501      	bpl.n	8005e50 <_printf_i+0xbc>
 8005e4c:	681d      	ldr	r5, [r3, #0]
 8005e4e:	e003      	b.n	8005e58 <_printf_i+0xc4>
 8005e50:	0645      	lsls	r5, r0, #25
 8005e52:	d5fb      	bpl.n	8005e4c <_printf_i+0xb8>
 8005e54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e58:	2d00      	cmp	r5, #0
 8005e5a:	da03      	bge.n	8005e64 <_printf_i+0xd0>
 8005e5c:	232d      	movs	r3, #45	@ 0x2d
 8005e5e:	426d      	negs	r5, r5
 8005e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e64:	4858      	ldr	r0, [pc, #352]	@ (8005fc8 <_printf_i+0x234>)
 8005e66:	230a      	movs	r3, #10
 8005e68:	e011      	b.n	8005e8e <_printf_i+0xfa>
 8005e6a:	6821      	ldr	r1, [r4, #0]
 8005e6c:	6833      	ldr	r3, [r6, #0]
 8005e6e:	0608      	lsls	r0, r1, #24
 8005e70:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e74:	d402      	bmi.n	8005e7c <_printf_i+0xe8>
 8005e76:	0649      	lsls	r1, r1, #25
 8005e78:	bf48      	it	mi
 8005e7a:	b2ad      	uxthmi	r5, r5
 8005e7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e7e:	4852      	ldr	r0, [pc, #328]	@ (8005fc8 <_printf_i+0x234>)
 8005e80:	6033      	str	r3, [r6, #0]
 8005e82:	bf14      	ite	ne
 8005e84:	230a      	movne	r3, #10
 8005e86:	2308      	moveq	r3, #8
 8005e88:	2100      	movs	r1, #0
 8005e8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e8e:	6866      	ldr	r6, [r4, #4]
 8005e90:	60a6      	str	r6, [r4, #8]
 8005e92:	2e00      	cmp	r6, #0
 8005e94:	db05      	blt.n	8005ea2 <_printf_i+0x10e>
 8005e96:	6821      	ldr	r1, [r4, #0]
 8005e98:	432e      	orrs	r6, r5
 8005e9a:	f021 0104 	bic.w	r1, r1, #4
 8005e9e:	6021      	str	r1, [r4, #0]
 8005ea0:	d04b      	beq.n	8005f3a <_printf_i+0x1a6>
 8005ea2:	4616      	mov	r6, r2
 8005ea4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ea8:	fb03 5711 	mls	r7, r3, r1, r5
 8005eac:	5dc7      	ldrb	r7, [r0, r7]
 8005eae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005eb2:	462f      	mov	r7, r5
 8005eb4:	42bb      	cmp	r3, r7
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	d9f4      	bls.n	8005ea4 <_printf_i+0x110>
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d10b      	bne.n	8005ed6 <_printf_i+0x142>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	07df      	lsls	r7, r3, #31
 8005ec2:	d508      	bpl.n	8005ed6 <_printf_i+0x142>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	6861      	ldr	r1, [r4, #4]
 8005ec8:	4299      	cmp	r1, r3
 8005eca:	bfde      	ittt	le
 8005ecc:	2330      	movle	r3, #48	@ 0x30
 8005ece:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ed2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ed6:	1b92      	subs	r2, r2, r6
 8005ed8:	6122      	str	r2, [r4, #16]
 8005eda:	f8cd a000 	str.w	sl, [sp]
 8005ede:	464b      	mov	r3, r9
 8005ee0:	aa03      	add	r2, sp, #12
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	f7ff fee7 	bl	8005cb8 <_printf_common>
 8005eea:	3001      	adds	r0, #1
 8005eec:	d14a      	bne.n	8005f84 <_printf_i+0x1f0>
 8005eee:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef2:	b004      	add	sp, #16
 8005ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	f043 0320 	orr.w	r3, r3, #32
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	4832      	ldr	r0, [pc, #200]	@ (8005fcc <_printf_i+0x238>)
 8005f02:	2778      	movs	r7, #120	@ 0x78
 8005f04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	6831      	ldr	r1, [r6, #0]
 8005f0c:	061f      	lsls	r7, r3, #24
 8005f0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f12:	d402      	bmi.n	8005f1a <_printf_i+0x186>
 8005f14:	065f      	lsls	r7, r3, #25
 8005f16:	bf48      	it	mi
 8005f18:	b2ad      	uxthmi	r5, r5
 8005f1a:	6031      	str	r1, [r6, #0]
 8005f1c:	07d9      	lsls	r1, r3, #31
 8005f1e:	bf44      	itt	mi
 8005f20:	f043 0320 	orrmi.w	r3, r3, #32
 8005f24:	6023      	strmi	r3, [r4, #0]
 8005f26:	b11d      	cbz	r5, 8005f30 <_printf_i+0x19c>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	e7ad      	b.n	8005e88 <_printf_i+0xf4>
 8005f2c:	4826      	ldr	r0, [pc, #152]	@ (8005fc8 <_printf_i+0x234>)
 8005f2e:	e7e9      	b.n	8005f04 <_printf_i+0x170>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	f023 0320 	bic.w	r3, r3, #32
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	e7f6      	b.n	8005f28 <_printf_i+0x194>
 8005f3a:	4616      	mov	r6, r2
 8005f3c:	e7bd      	b.n	8005eba <_printf_i+0x126>
 8005f3e:	6833      	ldr	r3, [r6, #0]
 8005f40:	6825      	ldr	r5, [r4, #0]
 8005f42:	6961      	ldr	r1, [r4, #20]
 8005f44:	1d18      	adds	r0, r3, #4
 8005f46:	6030      	str	r0, [r6, #0]
 8005f48:	062e      	lsls	r6, r5, #24
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	d501      	bpl.n	8005f52 <_printf_i+0x1be>
 8005f4e:	6019      	str	r1, [r3, #0]
 8005f50:	e002      	b.n	8005f58 <_printf_i+0x1c4>
 8005f52:	0668      	lsls	r0, r5, #25
 8005f54:	d5fb      	bpl.n	8005f4e <_printf_i+0x1ba>
 8005f56:	8019      	strh	r1, [r3, #0]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	6123      	str	r3, [r4, #16]
 8005f5c:	4616      	mov	r6, r2
 8005f5e:	e7bc      	b.n	8005eda <_printf_i+0x146>
 8005f60:	6833      	ldr	r3, [r6, #0]
 8005f62:	1d1a      	adds	r2, r3, #4
 8005f64:	6032      	str	r2, [r6, #0]
 8005f66:	681e      	ldr	r6, [r3, #0]
 8005f68:	6862      	ldr	r2, [r4, #4]
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f7fa f947 	bl	8000200 <memchr>
 8005f72:	b108      	cbz	r0, 8005f78 <_printf_i+0x1e4>
 8005f74:	1b80      	subs	r0, r0, r6
 8005f76:	6060      	str	r0, [r4, #4]
 8005f78:	6863      	ldr	r3, [r4, #4]
 8005f7a:	6123      	str	r3, [r4, #16]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f82:	e7aa      	b.n	8005eda <_printf_i+0x146>
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	4632      	mov	r2, r6
 8005f88:	4649      	mov	r1, r9
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	47d0      	blx	sl
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d0ad      	beq.n	8005eee <_printf_i+0x15a>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	079b      	lsls	r3, r3, #30
 8005f96:	d413      	bmi.n	8005fc0 <_printf_i+0x22c>
 8005f98:	68e0      	ldr	r0, [r4, #12]
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	4298      	cmp	r0, r3
 8005f9e:	bfb8      	it	lt
 8005fa0:	4618      	movlt	r0, r3
 8005fa2:	e7a6      	b.n	8005ef2 <_printf_i+0x15e>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4632      	mov	r2, r6
 8005fa8:	4649      	mov	r1, r9
 8005faa:	4640      	mov	r0, r8
 8005fac:	47d0      	blx	sl
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d09d      	beq.n	8005eee <_printf_i+0x15a>
 8005fb2:	3501      	adds	r5, #1
 8005fb4:	68e3      	ldr	r3, [r4, #12]
 8005fb6:	9903      	ldr	r1, [sp, #12]
 8005fb8:	1a5b      	subs	r3, r3, r1
 8005fba:	42ab      	cmp	r3, r5
 8005fbc:	dcf2      	bgt.n	8005fa4 <_printf_i+0x210>
 8005fbe:	e7eb      	b.n	8005f98 <_printf_i+0x204>
 8005fc0:	2500      	movs	r5, #0
 8005fc2:	f104 0619 	add.w	r6, r4, #25
 8005fc6:	e7f5      	b.n	8005fb4 <_printf_i+0x220>
 8005fc8:	08006f15 	.word	0x08006f15
 8005fcc:	08006f26 	.word	0x08006f26

08005fd0 <memmove>:
 8005fd0:	4288      	cmp	r0, r1
 8005fd2:	b510      	push	{r4, lr}
 8005fd4:	eb01 0402 	add.w	r4, r1, r2
 8005fd8:	d902      	bls.n	8005fe0 <memmove+0x10>
 8005fda:	4284      	cmp	r4, r0
 8005fdc:	4623      	mov	r3, r4
 8005fde:	d807      	bhi.n	8005ff0 <memmove+0x20>
 8005fe0:	1e43      	subs	r3, r0, #1
 8005fe2:	42a1      	cmp	r1, r4
 8005fe4:	d008      	beq.n	8005ff8 <memmove+0x28>
 8005fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fee:	e7f8      	b.n	8005fe2 <memmove+0x12>
 8005ff0:	4402      	add	r2, r0
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	428a      	cmp	r2, r1
 8005ff6:	d100      	bne.n	8005ffa <memmove+0x2a>
 8005ff8:	bd10      	pop	{r4, pc}
 8005ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006002:	e7f7      	b.n	8005ff4 <memmove+0x24>

08006004 <_sbrk_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4d06      	ldr	r5, [pc, #24]	@ (8006020 <_sbrk_r+0x1c>)
 8006008:	2300      	movs	r3, #0
 800600a:	4604      	mov	r4, r0
 800600c:	4608      	mov	r0, r1
 800600e:	602b      	str	r3, [r5, #0]
 8006010:	f7fb fc0c 	bl	800182c <_sbrk>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_sbrk_r+0x1a>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b103      	cbz	r3, 800601e <_sbrk_r+0x1a>
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	20000f90 	.word	0x20000f90

08006024 <memcpy>:
 8006024:	440a      	add	r2, r1
 8006026:	4291      	cmp	r1, r2
 8006028:	f100 33ff 	add.w	r3, r0, #4294967295
 800602c:	d100      	bne.n	8006030 <memcpy+0xc>
 800602e:	4770      	bx	lr
 8006030:	b510      	push	{r4, lr}
 8006032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800603a:	4291      	cmp	r1, r2
 800603c:	d1f9      	bne.n	8006032 <memcpy+0xe>
 800603e:	bd10      	pop	{r4, pc}

08006040 <_realloc_r>:
 8006040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	4607      	mov	r7, r0
 8006046:	4614      	mov	r4, r2
 8006048:	460d      	mov	r5, r1
 800604a:	b921      	cbnz	r1, 8006056 <_realloc_r+0x16>
 800604c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006050:	4611      	mov	r1, r2
 8006052:	f7ff bc4d 	b.w	80058f0 <_malloc_r>
 8006056:	b92a      	cbnz	r2, 8006064 <_realloc_r+0x24>
 8006058:	f7ff fbde 	bl	8005818 <_free_r>
 800605c:	4625      	mov	r5, r4
 800605e:	4628      	mov	r0, r5
 8006060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006064:	f000 f81a 	bl	800609c <_malloc_usable_size_r>
 8006068:	4284      	cmp	r4, r0
 800606a:	4606      	mov	r6, r0
 800606c:	d802      	bhi.n	8006074 <_realloc_r+0x34>
 800606e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006072:	d8f4      	bhi.n	800605e <_realloc_r+0x1e>
 8006074:	4621      	mov	r1, r4
 8006076:	4638      	mov	r0, r7
 8006078:	f7ff fc3a 	bl	80058f0 <_malloc_r>
 800607c:	4680      	mov	r8, r0
 800607e:	b908      	cbnz	r0, 8006084 <_realloc_r+0x44>
 8006080:	4645      	mov	r5, r8
 8006082:	e7ec      	b.n	800605e <_realloc_r+0x1e>
 8006084:	42b4      	cmp	r4, r6
 8006086:	4622      	mov	r2, r4
 8006088:	4629      	mov	r1, r5
 800608a:	bf28      	it	cs
 800608c:	4632      	movcs	r2, r6
 800608e:	f7ff ffc9 	bl	8006024 <memcpy>
 8006092:	4629      	mov	r1, r5
 8006094:	4638      	mov	r0, r7
 8006096:	f7ff fbbf 	bl	8005818 <_free_r>
 800609a:	e7f1      	b.n	8006080 <_realloc_r+0x40>

0800609c <_malloc_usable_size_r>:
 800609c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a0:	1f18      	subs	r0, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	bfbc      	itt	lt
 80060a6:	580b      	ldrlt	r3, [r1, r0]
 80060a8:	18c0      	addlt	r0, r0, r3
 80060aa:	4770      	bx	lr

080060ac <_init>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr

080060b8 <_fini>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	bf00      	nop
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr
