
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dea4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800e054  0800e054  0000f054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e10c  0800e10c  00010080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e10c  0800e10c  0000f10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e114  0800e114  00010080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e114  0800e114  0000f114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e118  0800e118  0000f118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800e11c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010080  2**0
                  CONTENTS
 10 .bss          00009964  20000080  20000080  00010080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200099e4  200099e4  00010080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d1b1  00000000  00000000  000100b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006316  00000000  00000000  0003d261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002578  00000000  00000000  00043578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d03  00000000  00000000  00045af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ba56  00000000  00000000  000477f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e91a  00000000  00000000  00073249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6c48  00000000  00000000  000a1b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001987ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a2d0  00000000  00000000  001987f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001a2ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e03c 	.word	0x0800e03c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800e03c 	.word	0x0800e03c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
	...

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f001 f896 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f834 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 faaa 	bl	8000ab4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000560:	f000 f8a2 	bl	80006a8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000564:	f000 f8b4 	bl	80006d0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000568:	f000 fa54 	bl	8000a14 <MX_FMC_Init>
  MX_I2C3_Init();
 800056c:	f000 f8e2 	bl	8000734 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000570:	f000 f920 	bl	80007b4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000574:	f000 f99e 	bl	80008b4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000578:	f000 f9d2 	bl	8000920 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800057c:	f000 fa20 	bl	80009c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000580:	f00a f95c 	bl	800a83c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000584:	4a09      	ldr	r2, [pc, #36]	@ (80005ac <main+0x5c>)
 8000586:	2100      	movs	r1, #0
 8000588:	4809      	ldr	r0, [pc, #36]	@ (80005b0 <main+0x60>)
 800058a:	f00a f9a1 	bl	800a8d0 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <main+0x64>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000594:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <main+0x68>)
 8000596:	2100      	movs	r1, #0
 8000598:	4808      	ldr	r0, [pc, #32]	@ (80005bc <main+0x6c>)
 800059a:	f00a f999 	bl	800a8d0 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a07      	ldr	r2, [pc, #28]	@ (80005c0 <main+0x70>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f00a f96e 	bl	800a884 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <main+0x58>
 80005ac:	0800e0ac 	.word	0x0800e0ac
 80005b0:	08000cd5 	.word	0x08000cd5
 80005b4:	200002fc 	.word	0x200002fc
 80005b8:	0800e0d0 	.word	0x0800e0d0
 80005bc:	08000cfd 	.word	0x08000cfd
 80005c0:	20000300 	.word	0x20000300

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	@ 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f00d fc96 	bl	800df04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <SystemClock_Config+0xdc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a2b      	ldr	r2, [pc, #172]	@ (80006a0 <SystemClock_Config+0xdc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <SystemClock_Config+0xdc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <SystemClock_Config+0xe0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000610:	4a24      	ldr	r2, [pc, #144]	@ (80006a4 <SystemClock_Config+0xe0>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <SystemClock_Config+0xe0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800063c:	23b4      	movs	r3, #180	@ 0xb4
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f004 fbdb 	bl	8004e08 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000658:	f000 fb7e 	bl	8000d58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800065c:	f004 fb84 	bl	8004d68 <HAL_PWREx_EnableOverDrive>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000666:	f000 fb77 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f004 fe36 	bl	80052f8 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000692:	f000 fb61 	bl	8000d58 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	@ 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_CRC_Init+0x20>)
 80006ae:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <MX_CRC_Init+0x24>)
 80006b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_CRC_Init+0x20>)
 80006b4:	f001 f92e 	bl	8001914 <HAL_CRC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006be:	f000 fb4b 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	40023000 	.word	0x40023000

080006d0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_DMA2D_Init+0x5c>)
 80006d6:	4a16      	ldr	r2, [pc, #88]	@ (8000730 <MX_DMA2D_Init+0x60>)
 80006d8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_DMA2D_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_DMA2D_Init+0x5c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_DMA2D_Init+0x5c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_DMA2D_Init+0x5c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_DMA2D_Init+0x5c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_DMA2D_Init+0x5c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_DMA2D_Init+0x5c>)
 8000700:	2200      	movs	r2, #0
 8000702:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000704:	4809      	ldr	r0, [pc, #36]	@ (800072c <MX_DMA2D_Init+0x5c>)
 8000706:	f001 f921 	bl	800194c <HAL_DMA2D_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000710:	f000 fb22 	bl	8000d58 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000714:	2101      	movs	r1, #1
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_DMA2D_Init+0x5c>)
 8000718:	f001 fa72 	bl	8001c00 <HAL_DMA2D_ConfigLayer>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000722:	f000 fb19 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000a4 	.word	0x200000a4
 8000730:	4002b000 	.word	0x4002b000

08000734 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000738:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <MX_I2C3_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ac <MX_I2C3_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800073e:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <MX_I2C3_Init+0x74>)
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <MX_I2C3_Init+0x7c>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <MX_I2C3_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800074a:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <MX_I2C3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000750:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_I2C3_Init+0x74>)
 8000752:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000756:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <MX_I2C3_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_I2C3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000764:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_I2C3_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_I2C3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000770:	480d      	ldr	r0, [pc, #52]	@ (80007a8 <MX_I2C3_Init+0x74>)
 8000772:	f003 fdd1 	bl	8004318 <HAL_I2C_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800077c:	f000 faec 	bl	8000d58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000780:	2100      	movs	r1, #0
 8000782:	4809      	ldr	r0, [pc, #36]	@ (80007a8 <MX_I2C3_Init+0x74>)
 8000784:	f003 ff0c 	bl	80045a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800078e:	f000 fae3 	bl	8000d58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_I2C3_Init+0x74>)
 8000796:	f003 ff3f 	bl	8004618 <HAL_I2CEx_ConfigDigitalFilter>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 fada 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000e4 	.word	0x200000e4
 80007ac:	40005c00 	.word	0x40005c00
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	@ 0x38
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2234      	movs	r2, #52	@ 0x34
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00d fb9f 	bl	800df04 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007c6:	4b39      	ldr	r3, [pc, #228]	@ (80008ac <MX_LTDC_Init+0xf8>)
 80007c8:	4a39      	ldr	r2, [pc, #228]	@ (80008b0 <MX_LTDC_Init+0xfc>)
 80007ca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007cc:	4b37      	ldr	r3, [pc, #220]	@ (80008ac <MX_LTDC_Init+0xf8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007d2:	4b36      	ldr	r3, [pc, #216]	@ (80008ac <MX_LTDC_Init+0xf8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007d8:	4b34      	ldr	r3, [pc, #208]	@ (80008ac <MX_LTDC_Init+0xf8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007de:	4b33      	ldr	r3, [pc, #204]	@ (80008ac <MX_LTDC_Init+0xf8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007e4:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <MX_LTDC_Init+0xf8>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007ea:	4b30      	ldr	r3, [pc, #192]	@ (80008ac <MX_LTDC_Init+0xf8>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007f0:	4b2e      	ldr	r3, [pc, #184]	@ (80008ac <MX_LTDC_Init+0xf8>)
 80007f2:	221d      	movs	r2, #29
 80007f4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007f6:	4b2d      	ldr	r3, [pc, #180]	@ (80008ac <MX_LTDC_Init+0xf8>)
 80007f8:	2203      	movs	r2, #3
 80007fa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <MX_LTDC_Init+0xf8>)
 80007fe:	f240 120d 	movw	r2, #269	@ 0x10d
 8000802:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000804:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <MX_LTDC_Init+0xf8>)
 8000806:	f240 1243 	movw	r2, #323	@ 0x143
 800080a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 800080c:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <MX_LTDC_Init+0xf8>)
 800080e:	f240 1217 	movw	r2, #279	@ 0x117
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_LTDC_Init+0xf8>)
 8000816:	f240 1247 	movw	r2, #327	@ 0x147
 800081a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800081c:	4b23      	ldr	r3, [pc, #140]	@ (80008ac <MX_LTDC_Init+0xf8>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000824:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_LTDC_Init+0xf8>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_LTDC_Init+0xf8>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000834:	481d      	ldr	r0, [pc, #116]	@ (80008ac <MX_LTDC_Init+0xf8>)
 8000836:	f003 ff2f 	bl	8004698 <HAL_LTDC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000840:	f000 fa8a 	bl	8000d58 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000848:	23f0      	movs	r3, #240	@ 0xf0
 800084a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000850:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000854:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000856:	2302      	movs	r3, #2
 8000858:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800085a:	23ff      	movs	r3, #255	@ 0xff
 800085c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000862:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000866:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000868:	2307      	movs	r3, #7
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800086c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000872:	23f0      	movs	r3, #240	@ 0xf0
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000876:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800087a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_LTDC_Init+0xf8>)
 8000896:	f004 f891 	bl	80049bc <HAL_LTDC_ConfigLayer>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008a0:	f000 fa5a 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3738      	adds	r7, #56	@ 0x38
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000138 	.word	0x20000138
 80008b0:	40016800 	.word	0x40016800

080008b4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008ba:	4a18      	ldr	r2, [pc, #96]	@ (800091c <MX_SPI5_Init+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008e8:	2218      	movs	r2, #24
 80008ea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	@ (8000918 <MX_SPI5_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_SPI5_Init+0x64>)
 8000900:	220a      	movs	r2, #10
 8000902:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_SPI5_Init+0x64>)
 8000906:	f005 f93d 	bl	8005b84 <HAL_SPI_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000910:	f000 fa22 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200001e0 	.word	0x200001e0
 800091c:	40015000 	.word	0x40015000

08000920 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800093c:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_TIM1_Init+0x98>)
 800093e:	4a1f      	ldr	r2, [pc, #124]	@ (80009bc <MX_TIM1_Init+0x9c>)
 8000940:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000942:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <MX_TIM1_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <MX_TIM1_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800094e:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_TIM1_Init+0x98>)
 8000950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000954:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_TIM1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800095c:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <MX_TIM1_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_TIM1_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000968:	4813      	ldr	r0, [pc, #76]	@ (80009b8 <MX_TIM1_Init+0x98>)
 800096a:	f005 f994 	bl	8005c96 <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 f9f0 	bl	8000d58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4619      	mov	r1, r3
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <MX_TIM1_Init+0x98>)
 8000986:	f005 fb35 	bl	8005ff4 <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000990:	f000 f9e2 	bl	8000d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_TIM1_Init+0x98>)
 80009a2:	f005 fd5d 	bl	8006460 <HAL_TIMEx_MasterConfigSynchronization>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009ac:	f000 f9d4 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000238 	.word	0x20000238
 80009bc:	40010000 	.word	0x40010000

080009c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <MX_USART1_UART_Init+0x50>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_USART1_UART_Init+0x4c>)
 80009f8:	f005 fdc2 	bl	8006580 <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a02:	f000 f9a9 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000280 	.word	0x20000280
 8000a10:	40011000 	.word	0x40011000

08000a14 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a2e:	4a20      	ldr	r2, [pc, #128]	@ (8000ab0 <MX_FMC_Init+0x9c>)
 8000a30:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a44:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a46:	2210      	movs	r2, #16
 8000a48:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a4c:	2240      	movs	r2, #64	@ 0x40
 8000a4e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a52:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a56:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a58:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a64:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a72:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a80:	2307      	movs	r3, #7
 8000a82:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a84:	2303      	movs	r3, #3
 8000a86:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_FMC_Init+0x98>)
 8000a96:	f005 f841 	bl	8005b1c <HAL_SDRAM_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000aa0:	f000 f95a 	bl	8000d58 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200002c8 	.word	0x200002c8
 8000ab0:	a0000140 	.word	0xa0000140

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	@ 0x38
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
 8000ace:	4b7b      	ldr	r3, [pc, #492]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a7a      	ldr	r2, [pc, #488]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b78      	ldr	r3, [pc, #480]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	623b      	str	r3, [r7, #32]
 8000ae4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
 8000aea:	4b74      	ldr	r3, [pc, #464]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a73      	ldr	r2, [pc, #460]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000af0:	f043 0320 	orr.w	r3, r3, #32
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b71      	ldr	r3, [pc, #452]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0320 	and.w	r3, r3, #32
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	4b6d      	ldr	r3, [pc, #436]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b6a      	ldr	r3, [pc, #424]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	4b66      	ldr	r3, [pc, #408]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a65      	ldr	r2, [pc, #404]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b63      	ldr	r3, [pc, #396]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a5e      	ldr	r2, [pc, #376]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b58      	ldr	r3, [pc, #352]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a57      	ldr	r2, [pc, #348]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b55      	ldr	r3, [pc, #340]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b51      	ldr	r3, [pc, #324]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a50      	ldr	r2, [pc, #320]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b4e      	ldr	r3, [pc, #312]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b4a      	ldr	r3, [pc, #296]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a49      	ldr	r2, [pc, #292]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b47      	ldr	r3, [pc, #284]	@ (8000cbc <MX_GPIO_Init+0x208>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2116      	movs	r1, #22
 8000bae:	4844      	ldr	r0, [pc, #272]	@ (8000cc0 <MX_GPIO_Init+0x20c>)
 8000bb0:	f001 fa64 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2180      	movs	r1, #128	@ 0x80
 8000bb8:	4842      	ldr	r0, [pc, #264]	@ (8000cc4 <MX_GPIO_Init+0x210>)
 8000bba:	f001 fa5f 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000bc4:	4840      	ldr	r0, [pc, #256]	@ (8000cc8 <MX_GPIO_Init+0x214>)
 8000bc6:	f001 fa59 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000bd0:	483e      	ldr	r0, [pc, #248]	@ (8000ccc <MX_GPIO_Init+0x218>)
 8000bd2:	f001 fa53 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bd6:	2316      	movs	r3, #22
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	4834      	ldr	r0, [pc, #208]	@ (8000cc0 <MX_GPIO_Init+0x20c>)
 8000bee:	f001 f899 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bf2:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	482e      	ldr	r0, [pc, #184]	@ (8000cc4 <MX_GPIO_Init+0x210>)
 8000c0a:	f001 f88b 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c0e:	2380      	movs	r3, #128	@ 0x80
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	4827      	ldr	r0, [pc, #156]	@ (8000cc4 <MX_GPIO_Init+0x210>)
 8000c26:	f001 f87d 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c2e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4820      	ldr	r0, [pc, #128]	@ (8000cc0 <MX_GPIO_Init+0x20c>)
 8000c40:	f001 f870 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c44:	2304      	movs	r3, #4
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	481e      	ldr	r0, [pc, #120]	@ (8000cd0 <MX_GPIO_Init+0x21c>)
 8000c58:	f001 f864 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4815      	ldr	r0, [pc, #84]	@ (8000cc8 <MX_GPIO_Init+0x214>)
 8000c72:	f001 f857 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c76:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480e      	ldr	r0, [pc, #56]	@ (8000cc8 <MX_GPIO_Init+0x214>)
 8000c90:	f001 f848 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c94:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <MX_GPIO_Init+0x218>)
 8000cae:	f001 f839 	bl	8001d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3738      	adds	r7, #56	@ 0x38
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020c00 	.word	0x40020c00
 8000ccc:	40021800 	.word	0x40021800
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000cdc:	f00c fd4a 	bl	800d774 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 8000ce0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ce4:	f009 fe86 	bl	800a9f4 <osDelay>
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000ce8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <StartDefaultTask+0x24>)
 8000cee:	f001 f9de 	bl	80020ae <HAL_GPIO_TogglePin>
    osDelay(500);
 8000cf2:	bf00      	nop
 8000cf4:	e7f4      	b.n	8000ce0 <StartDefaultTask+0xc>
 8000cf6:	bf00      	nop
 8000cf8:	40021800 	.word	0x40021800

08000cfc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000d04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d08:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <StartTask02+0x2c>)
 8000d0a:	f001 f9d0 	bl	80020ae <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, "Hello from user task\n", 21, 10);
 8000d0e:	230a      	movs	r3, #10
 8000d10:	2215      	movs	r2, #21
 8000d12:	4906      	ldr	r1, [pc, #24]	@ (8000d2c <StartTask02+0x30>)
 8000d14:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <StartTask02+0x34>)
 8000d16:	f005 fc83 	bl	8006620 <HAL_UART_Transmit>
    osDelay(500);
 8000d1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d1e:	f009 fe69 	bl	800a9f4 <osDelay>
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000d22:	bf00      	nop
 8000d24:	e7ee      	b.n	8000d04 <StartTask02+0x8>
 8000d26:	bf00      	nop
 8000d28:	40021800 	.word	0x40021800
 8000d2c:	0800e06c 	.word	0x0800e06c
 8000d30:	20000280 	.word	0x20000280

08000d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d46:	f000 fcbf 	bl	80016c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40001000 	.word	0x40001000

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <Error_Handler+0x8>

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_MspInit+0x54>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	4a11      	ldr	r2, [pc, #68]	@ (8000db8 <HAL_MspInit+0x54>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_MspInit+0x54>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <HAL_MspInit+0x54>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <HAL_MspInit+0x54>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <HAL_MspInit+0x54>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	210f      	movs	r1, #15
 8000da6:	f06f 0001 	mvn.w	r0, #1
 8000daa:	f000 fd89 	bl	80018c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000df8 <HAL_CRC_MspInit+0x3c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10d      	bne.n	8000dea <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <HAL_CRC_MspInit+0x40>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a09      	ldr	r2, [pc, #36]	@ (8000dfc <HAL_CRC_MspInit+0x40>)
 8000dd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <HAL_CRC_MspInit+0x40>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023000 	.word	0x40023000
 8000dfc:	40023800 	.word	0x40023800

08000e00 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e48 <HAL_DMA2D_MspInit+0x48>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d115      	bne.n	8000e3e <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <HAL_DMA2D_MspInit+0x4c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e4c <HAL_DMA2D_MspInit+0x4c>)
 8000e1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_DMA2D_MspInit+0x4c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	205a      	movs	r0, #90	@ 0x5a
 8000e34:	f000 fd44 	bl	80018c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e38:	205a      	movs	r0, #90	@ 0x5a
 8000e3a:	f000 fd5d 	bl	80018f8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	4002b000 	.word	0x4002b000
 8000e4c:	40023800 	.word	0x40023800

08000e50 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a29      	ldr	r2, [pc, #164]	@ (8000f14 <HAL_I2C_MspInit+0xc4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d14b      	bne.n	8000f0a <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b28      	ldr	r3, [pc, #160]	@ (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a27      	ldr	r2, [pc, #156]	@ (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a20      	ldr	r2, [pc, #128]	@ (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4815      	ldr	r0, [pc, #84]	@ (8000f1c <HAL_I2C_MspInit+0xcc>)
 8000ec8:	f000 ff2c 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed2:	2312      	movs	r3, #18
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <HAL_I2C_MspInit+0xd0>)
 8000eea:	f000 ff1b 	bl	8001d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	4a08      	ldr	r2, [pc, #32]	@ (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000ef8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_I2C_MspInit+0xc8>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	@ 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40005c00 	.word	0x40005c00
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020800 	.word	0x40020800
 8000f20:	40020000 	.word	0x40020000

08000f24 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09a      	sub	sp, #104	@ 0x68
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f40:	2230      	movs	r2, #48	@ 0x30
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00c ffdd 	bl	800df04 <memset>
  if(hltdc->Instance==LTDC)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a85      	ldr	r2, [pc, #532]	@ (8001164 <HAL_LTDC_MspInit+0x240>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	f040 8102 	bne.w	800115a <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f56:	2308      	movs	r3, #8
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f5a:	2332      	movs	r3, #50	@ 0x32
 8000f5c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f62:	2300      	movs	r3, #0
 8000f64:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 fc16 	bl	800579c <HAL_RCCEx_PeriphCLKConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f76:	f7ff feef 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
 8000f7e:	4b7a      	ldr	r3, [pc, #488]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	4a79      	ldr	r2, [pc, #484]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8a:	4b77      	ldr	r3, [pc, #476]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f92:	623b      	str	r3, [r7, #32]
 8000f94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	4b73      	ldr	r3, [pc, #460]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a72      	ldr	r2, [pc, #456]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	f043 0320 	orr.w	r3, r3, #32
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b70      	ldr	r3, [pc, #448]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0320 	and.w	r3, r3, #32
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a6b      	ldr	r2, [pc, #428]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b69      	ldr	r3, [pc, #420]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	4b65      	ldr	r3, [pc, #404]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a64      	ldr	r2, [pc, #400]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b62      	ldr	r3, [pc, #392]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b5e      	ldr	r3, [pc, #376]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a5d      	ldr	r2, [pc, #372]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b57      	ldr	r3, [pc, #348]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a56      	ldr	r2, [pc, #344]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b54      	ldr	r3, [pc, #336]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b50      	ldr	r3, [pc, #320]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a4f      	ldr	r2, [pc, #316]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b4d      	ldr	r3, [pc, #308]	@ (8001168 <HAL_LTDC_MspInit+0x244>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800103e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001042:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001050:	230e      	movs	r3, #14
 8001052:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001058:	4619      	mov	r1, r3
 800105a:	4844      	ldr	r0, [pc, #272]	@ (800116c <HAL_LTDC_MspInit+0x248>)
 800105c:	f000 fe62 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001060:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001064:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001072:	230e      	movs	r3, #14
 8001074:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800107a:	4619      	mov	r1, r3
 800107c:	483c      	ldr	r0, [pc, #240]	@ (8001170 <HAL_LTDC_MspInit+0x24c>)
 800107e:	f000 fe51 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001082:	2303      	movs	r3, #3
 8001084:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001092:	2309      	movs	r3, #9
 8001094:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800109a:	4619      	mov	r1, r3
 800109c:	4835      	ldr	r0, [pc, #212]	@ (8001174 <HAL_LTDC_MspInit+0x250>)
 800109e:	f000 fe41 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010a2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80010a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b4:	230e      	movs	r3, #14
 80010b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010bc:	4619      	mov	r1, r3
 80010be:	482d      	ldr	r0, [pc, #180]	@ (8001174 <HAL_LTDC_MspInit+0x250>)
 80010c0:	f000 fe30 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010c4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80010c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d6:	230e      	movs	r3, #14
 80010d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010de:	4619      	mov	r1, r3
 80010e0:	4825      	ldr	r0, [pc, #148]	@ (8001178 <HAL_LTDC_MspInit+0x254>)
 80010e2:	f000 fe1f 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80010e6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80010ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f8:	230e      	movs	r3, #14
 80010fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001100:	4619      	mov	r1, r3
 8001102:	481e      	ldr	r0, [pc, #120]	@ (800117c <HAL_LTDC_MspInit+0x258>)
 8001104:	f000 fe0e 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001108:	2348      	movs	r3, #72	@ 0x48
 800110a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001118:	230e      	movs	r3, #14
 800111a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001120:	4619      	mov	r1, r3
 8001122:	4817      	ldr	r0, [pc, #92]	@ (8001180 <HAL_LTDC_MspInit+0x25c>)
 8001124:	f000 fdfe 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001128:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800112c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800113a:	2309      	movs	r3, #9
 800113c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <HAL_LTDC_MspInit+0x254>)
 8001146:	f000 fded 	bl	8001d24 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2105      	movs	r1, #5
 800114e:	2058      	movs	r0, #88	@ 0x58
 8001150:	f000 fbb6 	bl	80018c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001154:	2058      	movs	r0, #88	@ 0x58
 8001156:	f000 fbcf 	bl	80018f8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800115a:	bf00      	nop
 800115c:	3768      	adds	r7, #104	@ 0x68
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40016800 	.word	0x40016800
 8001168:	40023800 	.word	0x40023800
 800116c:	40021400 	.word	0x40021400
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400
 8001178:	40021800 	.word	0x40021800
 800117c:	40020800 	.word	0x40020800
 8001180:	40020c00 	.word	0x40020c00

08001184 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a19      	ldr	r2, [pc, #100]	@ (8001208 <HAL_SPI_MspInit+0x84>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d12c      	bne.n	8001200 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <HAL_SPI_MspInit+0x88>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	4a17      	ldr	r2, [pc, #92]	@ (800120c <HAL_SPI_MspInit+0x88>)
 80011b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HAL_SPI_MspInit+0x88>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_SPI_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a10      	ldr	r2, [pc, #64]	@ (800120c <HAL_SPI_MspInit+0x88>)
 80011cc:	f043 0320 	orr.w	r3, r3, #32
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_SPI_MspInit+0x88>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011de:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011f0:	2305      	movs	r3, #5
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <HAL_SPI_MspInit+0x8c>)
 80011fc:	f000 fd92 	bl	8001d24 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	@ 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40015000 	.word	0x40015000
 800120c:	40023800 	.word	0x40023800
 8001210:	40021400 	.word	0x40021400

08001214 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <HAL_TIM_Base_MspInit+0x3c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10d      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_TIM_Base_MspInit+0x40>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <HAL_TIM_Base_MspInit+0x40>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6453      	str	r3, [r2, #68]	@ 0x44
 8001236:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <HAL_TIM_Base_MspInit+0x40>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40010000 	.word	0x40010000
 8001254:	40023800 	.word	0x40023800

08001258 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <HAL_UART_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12c      	bne.n	80012d4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <HAL_UART_MspInit+0x88>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	4a17      	ldr	r2, [pc, #92]	@ (80012e0 <HAL_UART_MspInit+0x88>)
 8001284:	f043 0310 	orr.w	r3, r3, #16
 8001288:	6453      	str	r3, [r2, #68]	@ 0x44
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_UART_MspInit+0x88>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <HAL_UART_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a10      	ldr	r2, [pc, #64]	@ (80012e0 <HAL_UART_MspInit+0x88>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <HAL_UART_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012c4:	2307      	movs	r3, #7
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <HAL_UART_MspInit+0x8c>)
 80012d0:	f000 fd28 	bl	8001d24 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	@ 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40011000 	.word	0x40011000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012fc:	4b3b      	ldr	r3, [pc, #236]	@ (80013ec <HAL_FMC_MspInit+0x104>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d16f      	bne.n	80013e4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001304:	4b39      	ldr	r3, [pc, #228]	@ (80013ec <HAL_FMC_MspInit+0x104>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b38      	ldr	r3, [pc, #224]	@ (80013f0 <HAL_FMC_MspInit+0x108>)
 8001310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001312:	4a37      	ldr	r2, [pc, #220]	@ (80013f0 <HAL_FMC_MspInit+0x108>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6393      	str	r3, [r2, #56]	@ 0x38
 800131a:	4b35      	ldr	r3, [pc, #212]	@ (80013f0 <HAL_FMC_MspInit+0x108>)
 800131c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001326:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800132a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001338:	230c      	movs	r3, #12
 800133a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4619      	mov	r1, r3
 8001340:	482c      	ldr	r0, [pc, #176]	@ (80013f4 <HAL_FMC_MspInit+0x10c>)
 8001342:	f000 fcef 	bl	8001d24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001346:	2301      	movs	r3, #1
 8001348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4826      	ldr	r0, [pc, #152]	@ (80013f8 <HAL_FMC_MspInit+0x110>)
 8001360:	f000 fce0 	bl	8001d24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001364:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001368:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001376:	230c      	movs	r3, #12
 8001378:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	481f      	ldr	r0, [pc, #124]	@ (80013fc <HAL_FMC_MspInit+0x114>)
 8001380:	f000 fcd0 	bl	8001d24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001384:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001388:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001396:	230c      	movs	r3, #12
 8001398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4818      	ldr	r0, [pc, #96]	@ (8001400 <HAL_FMC_MspInit+0x118>)
 80013a0:	f000 fcc0 	bl	8001d24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80013a4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80013a8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013b6:	230c      	movs	r3, #12
 80013b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4811      	ldr	r0, [pc, #68]	@ (8001404 <HAL_FMC_MspInit+0x11c>)
 80013c0:	f000 fcb0 	bl	8001d24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80013c4:	2360      	movs	r3, #96	@ 0x60
 80013c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d4:	230c      	movs	r3, #12
 80013d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	480a      	ldr	r0, [pc, #40]	@ (8001408 <HAL_FMC_MspInit+0x120>)
 80013de:	f000 fca1 	bl	8001d24 <HAL_GPIO_Init>
 80013e2:	e000      	b.n	80013e6 <HAL_FMC_MspInit+0xfe>
    return;
 80013e4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000304 	.word	0x20000304
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40021400 	.word	0x40021400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021000 	.word	0x40021000
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001414:	f7ff ff68 	bl	80012e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	@ 0x38
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4b33      	ldr	r3, [pc, #204]	@ (8001504 <HAL_InitTick+0xe4>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a32      	ldr	r2, [pc, #200]	@ (8001504 <HAL_InitTick+0xe4>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001440:	4b30      	ldr	r3, [pc, #192]	@ (8001504 <HAL_InitTick+0xe4>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144c:	f107 0210 	add.w	r2, r7, #16
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f004 f96e 	bl	8005738 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001462:	2b00      	cmp	r3, #0
 8001464:	d103      	bne.n	800146e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001466:	f004 f93f 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 800146a:	6378      	str	r0, [r7, #52]	@ 0x34
 800146c:	e004      	b.n	8001478 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146e:	f004 f93b 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8001472:	4603      	mov	r3, r0
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800147a:	4a23      	ldr	r2, [pc, #140]	@ (8001508 <HAL_InitTick+0xe8>)
 800147c:	fba2 2303 	umull	r2, r3, r2, r3
 8001480:	0c9b      	lsrs	r3, r3, #18
 8001482:	3b01      	subs	r3, #1
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <HAL_InitTick+0xec>)
 8001488:	4a21      	ldr	r2, [pc, #132]	@ (8001510 <HAL_InitTick+0xf0>)
 800148a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800148c:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <HAL_InitTick+0xec>)
 800148e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001492:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001494:	4a1d      	ldr	r2, [pc, #116]	@ (800150c <HAL_InitTick+0xec>)
 8001496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001498:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800149a:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <HAL_InitTick+0xec>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <HAL_InitTick+0xec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_InitTick+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014ac:	4817      	ldr	r0, [pc, #92]	@ (800150c <HAL_InitTick+0xec>)
 80014ae:	f004 fbf2 	bl	8005c96 <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d11b      	bne.n	80014f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014c0:	4812      	ldr	r0, [pc, #72]	@ (800150c <HAL_InitTick+0xec>)
 80014c2:	f004 fc37 	bl	8005d34 <HAL_TIM_Base_Start_IT>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d111      	bne.n	80014f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014d4:	2036      	movs	r0, #54	@ 0x36
 80014d6:	f000 fa0f 	bl	80018f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d808      	bhi.n	80014f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	2036      	movs	r0, #54	@ 0x36
 80014e6:	f000 f9eb 	bl	80018c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <HAL_InitTick+0xf4>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e002      	b.n	80014f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3738      	adds	r7, #56	@ 0x38
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	431bde83 	.word	0x431bde83
 800150c:	20000308 	.word	0x20000308
 8001510:	40001000 	.word	0x40001000
 8001514:	20000004 	.word	0x20000004

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <NMI_Handler+0x4>

08001520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <MemManage_Handler+0x4>

08001530 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <UsageFault_Handler+0x4>

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <TIM6_DAC_IRQHandler+0x10>)
 8001556:	f004 fc5d 	bl	8005e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000308 	.word	0x20000308

08001564 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <OTG_HS_IRQHandler+0x10>)
 800156a:	f001 f89b 	bl	80026a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200094bc 	.word	0x200094bc

08001578 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <LTDC_IRQHandler+0x10>)
 800157e:	f003 f95b 	bl	8004838 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000138 	.word	0x20000138

0800158c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <DMA2D_IRQHandler+0x10>)
 8001592:	f000 fa24 	bl	80019de <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200000a4 	.word	0x200000a4

080015a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a8:	4a14      	ldr	r2, [pc, #80]	@ (80015fc <_sbrk+0x5c>)
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <_sbrk+0x60>)
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <_sbrk+0x64>)
 80015be:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <_sbrk+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d207      	bcs.n	80015e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d0:	f00c fcb0 	bl	800df34 <__errno>
 80015d4:	4603      	mov	r3, r0
 80015d6:	220c      	movs	r2, #12
 80015d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e009      	b.n	80015f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	4a05      	ldr	r2, [pc, #20]	@ (8001604 <_sbrk+0x64>)
 80015f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20030000 	.word	0x20030000
 8001600:	00000400 	.word	0x00000400
 8001604:	20000350 	.word	0x20000350
 8001608:	200099e8 	.word	0x200099e8

0800160c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <SystemInit+0x20>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001616:	4a05      	ldr	r2, [pc, #20]	@ (800162c <SystemInit+0x20>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001668 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001634:	f7ff ffea 	bl	800160c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163a:	490d      	ldr	r1, [pc, #52]	@ (8001670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001650:	4c0a      	ldr	r4, [pc, #40]	@ (800167c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800165e:	f00c fc6f 	bl	800df40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001662:	f7fe ff75 	bl	8000550 <main>
  bx  lr    
 8001666:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001668:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001670:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001674:	0800e11c 	.word	0x0800e11c
  ldr r2, =_sbss
 8001678:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800167c:	200099e4 	.word	0x200099e4

08001680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC_IRQHandler>
	...

08001684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001688:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <HAL_Init+0x40>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001694:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <HAL_Init+0x40>)
 800169a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800169e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <HAL_Init+0x40>)
 80016a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f8fc 	bl	80018aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff feb4 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fb54 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023c00 	.word	0x40023c00

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000354 	.word	0x20000354

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000354 	.word	0x20000354

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff ffee 	bl	80016f0 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffde 	bl	80016f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	@ (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	@ (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	@ (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	@ 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ff4c 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d2:	f7ff ff61 	bl	8001798 <__NVIC_GetPriorityGrouping>
 80018d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	6978      	ldr	r0, [r7, #20]
 80018de:	f7ff ffb1 	bl	8001844 <NVIC_EncodePriority>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff80 	bl	80017f0 <__NVIC_SetPriority>
}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff54 	bl	80017b4 <__NVIC_EnableIRQ>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	795b      	ldrb	r3, [r3, #5]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fa40 	bl	8000dbc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e03b      	b.n	80019d6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fa44 	bl	8000e00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199c:	f023 0107 	bic.w	r1, r3, #7
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68d1      	ldr	r1, [r2, #12]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	430b      	orrs	r3, r1
 80019c4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d026      	beq.n	8001a4e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d021      	beq.n	8001a4e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a18:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2204      	movs	r2, #4
 8001a32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d026      	beq.n	8001aa6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d021      	beq.n	8001aa6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a70:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2220      	movs	r2, #32
 8001a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7e:	f043 0202 	orr.w	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d026      	beq.n	8001afe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d021      	beq.n	8001afe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2208      	movs	r2, #8
 8001ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad6:	f043 0204 	orr.w	r2, r3, #4
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00e      	beq.n	8001b30 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b20:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2204      	movs	r2, #4
 8001b28:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f853 	bl	8001bd6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d024      	beq.n	8001b84 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01f      	beq.n	8001b84 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b52:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01f      	beq.n	8001bce <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d01a      	beq.n	8001bce <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2210      	movs	r2, #16
 8001bae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f80e 	bl	8001bea <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_DMA2D_ConfigLayer+0x20>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e079      	b.n	8001d14 <HAL_DMA2D_ConfigLayer+0x114>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	3318      	adds	r3, #24
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	4313      	orrs	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c4a:	4b35      	ldr	r3, [pc, #212]	@ (8001d20 <HAL_DMA2D_ConfigLayer+0x120>)
 8001c4c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b0a      	cmp	r3, #10
 8001c54:	d003      	beq.n	8001c5e <HAL_DMA2D_ConfigLayer+0x5e>
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b09      	cmp	r3, #9
 8001c5c:	d107      	bne.n	8001c6e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	e005      	b.n	8001c7a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	061b      	lsls	r3, r3, #24
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d120      	bne.n	8001cc2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	ea02 0103 	and.w	r1, r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b0a      	cmp	r3, #10
 8001ca8:	d003      	beq.n	8001cb2 <HAL_DMA2D_ConfigLayer+0xb2>
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b09      	cmp	r3, #9
 8001cb0:	d127      	bne.n	8001d02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001cbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cc0:	e01f      	b.n	8001d02 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	ea02 0103 	and.w	r1, r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b0a      	cmp	r3, #10
 8001cea:	d003      	beq.n	8001cf4 <HAL_DMA2D_ConfigLayer+0xf4>
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d106      	bne.n	8001d02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001d00:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	ff03000f 	.word	0xff03000f

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	@ 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e177      	b.n	8002030 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	f040 8166 	bne.w	800202a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d005      	beq.n	8001d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d130      	bne.n	8001dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dac:	2201      	movs	r2, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 0201 	and.w	r2, r3, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d017      	beq.n	8001e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d123      	bne.n	8001e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3208      	adds	r2, #8
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0203 	and.w	r2, r3, #3
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80c0 	beq.w	800202a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b66      	ldr	r3, [pc, #408]	@ (8002048 <HAL_GPIO_Init+0x324>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	4a65      	ldr	r2, [pc, #404]	@ (8002048 <HAL_GPIO_Init+0x324>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eba:	4b63      	ldr	r3, [pc, #396]	@ (8002048 <HAL_GPIO_Init+0x324>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec6:	4a61      	ldr	r2, [pc, #388]	@ (800204c <HAL_GPIO_Init+0x328>)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a58      	ldr	r2, [pc, #352]	@ (8002050 <HAL_GPIO_Init+0x32c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d037      	beq.n	8001f62 <HAL_GPIO_Init+0x23e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a57      	ldr	r2, [pc, #348]	@ (8002054 <HAL_GPIO_Init+0x330>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d031      	beq.n	8001f5e <HAL_GPIO_Init+0x23a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a56      	ldr	r2, [pc, #344]	@ (8002058 <HAL_GPIO_Init+0x334>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d02b      	beq.n	8001f5a <HAL_GPIO_Init+0x236>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a55      	ldr	r2, [pc, #340]	@ (800205c <HAL_GPIO_Init+0x338>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d025      	beq.n	8001f56 <HAL_GPIO_Init+0x232>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a54      	ldr	r2, [pc, #336]	@ (8002060 <HAL_GPIO_Init+0x33c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01f      	beq.n	8001f52 <HAL_GPIO_Init+0x22e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a53      	ldr	r2, [pc, #332]	@ (8002064 <HAL_GPIO_Init+0x340>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x22a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	@ (8002068 <HAL_GPIO_Init+0x344>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x226>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a51      	ldr	r2, [pc, #324]	@ (800206c <HAL_GPIO_Init+0x348>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x222>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a50      	ldr	r2, [pc, #320]	@ (8002070 <HAL_GPIO_Init+0x34c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x21e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4f      	ldr	r2, [pc, #316]	@ (8002074 <HAL_GPIO_Init+0x350>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x21a>
 8001f3a:	2309      	movs	r3, #9
 8001f3c:	e012      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f3e:	230a      	movs	r3, #10
 8001f40:	e010      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f42:	2308      	movs	r3, #8
 8001f44:	e00e      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e00c      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e00a      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e008      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e004      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e002      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x240>
 8001f62:	2300      	movs	r3, #0
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	f002 0203 	and.w	r2, r2, #3
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	4093      	lsls	r3, r2
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f74:	4935      	ldr	r1, [pc, #212]	@ (800204c <HAL_GPIO_Init+0x328>)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f82:	4b3d      	ldr	r3, [pc, #244]	@ (8002078 <HAL_GPIO_Init+0x354>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa6:	4a34      	ldr	r2, [pc, #208]	@ (8002078 <HAL_GPIO_Init+0x354>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fac:	4b32      	ldr	r3, [pc, #200]	@ (8002078 <HAL_GPIO_Init+0x354>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd0:	4a29      	ldr	r2, [pc, #164]	@ (8002078 <HAL_GPIO_Init+0x354>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fd6:	4b28      	ldr	r3, [pc, #160]	@ (8002078 <HAL_GPIO_Init+0x354>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8002078 <HAL_GPIO_Init+0x354>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <HAL_GPIO_Init+0x354>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002024:	4a14      	ldr	r2, [pc, #80]	@ (8002078 <HAL_GPIO_Init+0x354>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3301      	adds	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	2b0f      	cmp	r3, #15
 8002034:	f67f ae84 	bls.w	8001d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3724      	adds	r7, #36	@ 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40013800 	.word	0x40013800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40020800 	.word	0x40020800
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40021000 	.word	0x40021000
 8002064:	40021400 	.word	0x40021400
 8002068:	40021800 	.word	0x40021800
 800206c:	40021c00 	.word	0x40021c00
 8002070:	40022000 	.word	0x40022000
 8002074:	40022400 	.word	0x40022400
 8002078:	40013c00 	.word	0x40013c00

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002098:	e003      	b.n	80020a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	041a      	lsls	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	619a      	str	r2, [r3, #24]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020c0:	887a      	ldrh	r2, [r7, #2]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	041a      	lsls	r2, r3, #16
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	400b      	ands	r3, r1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af02      	add	r7, sp, #8
 80020e8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e059      	b.n	80021a8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f00b fb84 	bl	800d81c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2203      	movs	r2, #3
 8002118:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002122:	d102      	bne.n	800212a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 ff6d 	bl	800700e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7c1a      	ldrb	r2, [r3, #16]
 800213c:	f88d 2000 	strb.w	r2, [sp]
 8002140:	3304      	adds	r3, #4
 8002142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002144:	f004 feee 	bl	8006f24 <USB_CoreInit>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e026      	b.n	80021a8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2101      	movs	r1, #1
 8002160:	4618      	mov	r0, r3
 8002162:	f004 ff65 	bl	8007030 <USB_SetCurrentMode>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e017      	b.n	80021a8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7c1a      	ldrb	r2, [r3, #16]
 8002180:	f88d 2000 	strb.w	r2, [sp]
 8002184:	3304      	adds	r3, #4
 8002186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002188:	f005 f908 	bl	800739c <USB_HostInit>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e004      	b.n	80021a8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b08b      	sub	sp, #44	@ 0x2c
 80021b4:	af04      	add	r7, sp, #16
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	4608      	mov	r0, r1
 80021ba:	4611      	mov	r1, r2
 80021bc:	461a      	mov	r2, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	70fb      	strb	r3, [r7, #3]
 80021c2:	460b      	mov	r3, r1
 80021c4:	70bb      	strb	r3, [r7, #2]
 80021c6:	4613      	mov	r3, r2
 80021c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80021ca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80021cc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_HCD_HC_Init+0x2c>
 80021d8:	2302      	movs	r3, #2
 80021da:	e09d      	b.n	8002318 <HAL_HCD_HC_Init+0x168>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3319      	adds	r3, #25
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	3314      	adds	r3, #20
 8002208:	787a      	ldrb	r2, [r7, #1]
 800220a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	3315      	adds	r3, #21
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	3326      	adds	r3, #38	@ 0x26
 8002230:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002234:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	78bb      	ldrb	r3, [r7, #2]
 800223a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800223e:	b2d8      	uxtb	r0, r3
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	3316      	adds	r3, #22
 800224e:	4602      	mov	r2, r0
 8002250:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fbc8 	bl	80029ec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800225c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002260:	2b00      	cmp	r3, #0
 8002262:	da0a      	bge.n	800227a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	3317      	adds	r3, #23
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e009      	b.n	800228e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3317      	adds	r3, #23
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f005 f9e6 	bl	8007664 <USB_GetHostSpeed>
 8002298:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800229a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d10b      	bne.n	80022ba <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80022a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_HCD_HC_Init+0x10a>
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d104      	bne.n	80022ba <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2bbc      	cmp	r3, #188	@ 0xbc
 80022b4:	d901      	bls.n	80022ba <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80022b6:	23bc      	movs	r3, #188	@ 0xbc
 80022b8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3318      	adds	r3, #24
 80022ca:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80022ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	b298      	uxth	r0, r3
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	3328      	adds	r3, #40	@ 0x28
 80022e4:	4602      	mov	r2, r0
 80022e6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	787c      	ldrb	r4, [r7, #1]
 80022f2:	78ba      	ldrb	r2, [r7, #2]
 80022f4:	78f9      	ldrb	r1, [r7, #3]
 80022f6:	9302      	str	r3, [sp, #8]
 80022f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4623      	mov	r3, r4
 8002306:	f005 f9d5 	bl	80076b4 <USB_HC_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd90      	pop	{r4, r7, pc}

08002320 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_HCD_HC_Halt+0x1e>
 800233a:	2302      	movs	r3, #2
 800233c:	e00f      	b.n	800235e <HAL_HCD_HC_Halt+0x3e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f005 fd67 	bl	8007e22 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800235c:	7bfb      	ldrb	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	70fb      	strb	r3, [r7, #3]
 800237a:	460b      	mov	r3, r1
 800237c:	70bb      	strb	r3, [r7, #2]
 800237e:	4613      	mov	r3, r2
 8002380:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	3317      	adds	r3, #23
 8002392:	78ba      	ldrb	r2, [r7, #2]
 8002394:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	3326      	adds	r3, #38	@ 0x26
 80023a6:	787a      	ldrb	r2, [r7, #1]
 80023a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023aa:	7c3b      	ldrb	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d114      	bne.n	80023da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	332a      	adds	r3, #42	@ 0x2a
 80023c0:	2203      	movs	r2, #3
 80023c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3319      	adds	r3, #25
 80023d4:	7f3a      	ldrb	r2, [r7, #28]
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	e009      	b.n	80023ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	332a      	adds	r3, #42	@ 0x2a
 80023ea:	2202      	movs	r2, #2
 80023ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023ee:	787b      	ldrb	r3, [r7, #1]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	f200 8102 	bhi.w	80025fa <HAL_HCD_HC_SubmitRequest+0x292>
 80023f6:	a201      	add	r2, pc, #4	@ (adr r2, 80023fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	0800240d 	.word	0x0800240d
 8002400:	080025e5 	.word	0x080025e5
 8002404:	080024d1 	.word	0x080024d1
 8002408:	0800255b 	.word	0x0800255b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800240c:	7c3b      	ldrb	r3, [r7, #16]
 800240e:	2b01      	cmp	r3, #1
 8002410:	f040 80f5 	bne.w	80025fe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002414:	78bb      	ldrb	r3, [r7, #2]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d12d      	bne.n	8002476 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800241a:	8b3b      	ldrh	r3, [r7, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	333d      	adds	r3, #61	@ 0x3d
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	333d      	adds	r3, #61	@ 0x3d
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	332a      	adds	r3, #42	@ 0x2a
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800245e:	e0ce      	b.n	80025fe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	332a      	adds	r3, #42	@ 0x2a
 8002470:	2202      	movs	r2, #2
 8002472:	701a      	strb	r2, [r3, #0]
      break;
 8002474:	e0c3      	b.n	80025fe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	331a      	adds	r3, #26
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 80b8 	bne.w	80025fe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	333c      	adds	r3, #60	@ 0x3c
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	332a      	adds	r3, #42	@ 0x2a
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
      break;
 80024b8:	e0a1      	b.n	80025fe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	332a      	adds	r3, #42	@ 0x2a
 80024ca:	2202      	movs	r2, #2
 80024cc:	701a      	strb	r2, [r3, #0]
      break;
 80024ce:	e096      	b.n	80025fe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024d0:	78bb      	ldrb	r3, [r7, #2]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d120      	bne.n	8002518 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	333d      	adds	r3, #61	@ 0x3d
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	332a      	adds	r3, #42	@ 0x2a
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002500:	e07e      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	332a      	adds	r3, #42	@ 0x2a
 8002512:	2202      	movs	r2, #2
 8002514:	701a      	strb	r2, [r3, #0]
      break;
 8002516:	e073      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	333c      	adds	r3, #60	@ 0x3c
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10a      	bne.n	8002544 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	332a      	adds	r3, #42	@ 0x2a
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
      break;
 8002542:	e05d      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	332a      	adds	r3, #42	@ 0x2a
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
      break;
 8002558:	e052      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800255a:	78bb      	ldrb	r3, [r7, #2]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d120      	bne.n	80025a2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	333d      	adds	r3, #61	@ 0x3d
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	332a      	adds	r3, #42	@ 0x2a
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800258a:	e039      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	332a      	adds	r3, #42	@ 0x2a
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]
      break;
 80025a0:	e02e      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	333c      	adds	r3, #60	@ 0x3c
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	332a      	adds	r3, #42	@ 0x2a
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
      break;
 80025cc:	e018      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	332a      	adds	r3, #42	@ 0x2a
 80025de:	2202      	movs	r2, #2
 80025e0:	701a      	strb	r2, [r3, #0]
      break;
 80025e2:	e00d      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	332a      	adds	r3, #42	@ 0x2a
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
      break;
 80025f8:	e002      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80025fa:	bf00      	nop
 80025fc:	e000      	b.n	8002600 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80025fe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	332c      	adds	r3, #44	@ 0x2c
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	8b39      	ldrh	r1, [r7, #24]
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4403      	add	r3, r0
 8002624:	3334      	adds	r3, #52	@ 0x34
 8002626:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	334c      	adds	r3, #76	@ 0x4c
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3338      	adds	r3, #56	@ 0x38
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3315      	adds	r3, #21
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	334d      	adds	r3, #77	@ 0x4d
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	3310      	adds	r3, #16
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	1d19      	adds	r1, r3, #4
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	799b      	ldrb	r3, [r3, #6]
 8002692:	461a      	mov	r2, r3
 8002694:	f005 f93a 	bl	800790c <USB_HC_StartXfer>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 fe2e 	bl	800731c <USB_GetMode>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	f040 80fb 	bne.w	80028be <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 fdf1 	bl	80072b4 <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80f1 	beq.w	80028bc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f004 fde8 	bl	80072b4 <USB_ReadInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026ee:	d104      	bne.n	80026fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80026f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 fdd8 	bl	80072b4 <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800270a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800270e:	d104      	bne.n	800271a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002718:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f004 fdc8 	bl	80072b4 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800272a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800272e:	d104      	bne.n	800273a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002738:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f004 fdb8 	bl	80072b4 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d103      	bne.n	8002756 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2202      	movs	r2, #2
 8002754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fdaa 	bl	80072b4 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800276a:	d120      	bne.n	80027ae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002774:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d113      	bne.n	80027ae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002786:	2110      	movs	r1, #16
 8002788:	6938      	ldr	r0, [r7, #16]
 800278a:	f004 fc9d 	bl	80070c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800278e:	6938      	ldr	r0, [r7, #16]
 8002790:	f004 fccc 	bl	800712c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7a5b      	ldrb	r3, [r3, #9]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d105      	bne.n	80027a8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f004 febe 	bl	8007524 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f00b f8b1 	bl	800d910 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 fd7e 	bl	80072b4 <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c2:	d102      	bne.n	80027ca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f001 fd33 	bl	8004230 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f004 fd70 	bl	80072b4 <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d106      	bne.n	80027ec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f00b f87a 	bl	800d8d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2208      	movs	r2, #8
 80027ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 fd5f 	bl	80072b4 <USB_ReadInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002800:	d139      	bne.n	8002876 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f005 fafa 	bl	8007e00 <USB_HC_ReadInterrupt>
 800280c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e025      	b.n	8002860 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d018      	beq.n	800285a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800283a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800283e:	d106      	bne.n	800284e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	4619      	mov	r1, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f905 	bl	8002a56 <HCD_HC_IN_IRQHandler>
 800284c:	e005      	b.n	800285a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 ff67 	bl	8003728 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	795b      	ldrb	r3, [r3, #5]
 8002864:	461a      	mov	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	4293      	cmp	r3, r2
 800286a:	d3d3      	bcc.n	8002814 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fd1a 	bl	80072b4 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b10      	cmp	r3, #16
 8002888:	d101      	bne.n	800288e <HAL_HCD_IRQHandler+0x1ea>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_HCD_IRQHandler+0x1ec>
 800288e:	2300      	movs	r3, #0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d014      	beq.n	80028be <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0210 	bic.w	r2, r2, #16
 80028a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f001 fbe4 	bl	8004072 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0210 	orr.w	r2, r2, #16
 80028b8:	619a      	str	r2, [r3, #24]
 80028ba:	e000      	b.n	80028be <HAL_HCD_IRQHandler+0x21a>
      return;
 80028bc:	bf00      	nop
    }
  }
}
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_HCD_Start+0x16>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e013      	b.n	8002902 <HAL_HCD_Start+0x3e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 fe82 	bl	80075f2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 fb7a 	bl	8006fec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_HCD_Stop+0x16>
 800291c:	2302      	movs	r3, #2
 800291e:	e00d      	b.n	800293c <HAL_HCD_Stop+0x32>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f005 fbd5 	bl	80080dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f004 fe24 	bl	800759e <USB_ResetPort>
 8002956:	4603      	mov	r3, r0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334c      	adds	r3, #76	@ 0x4c
 800297c:	781b      	ldrb	r3, [r3, #0]
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3338      	adds	r3, #56	@ 0x38
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fe66 	bl	8007692 <USB_GetCurrentFrame>
 80029c6:	4603      	mov	r3, r0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 fe41 	bl	8007664 <USB_GetHostSpeed>
 80029e2:	4603      	mov	r3, r0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	331a      	adds	r3, #26
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	331b      	adds	r3, #27
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3325      	adds	r3, #37	@ 0x25
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3324      	adds	r3, #36	@ 0x24
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 fc30 	bl	80072da <USB_ReadChInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d11a      	bne.n	8002aba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a90:	461a      	mov	r2, r3
 8002a92:	2304      	movs	r3, #4
 8002a94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	334d      	adds	r3, #77	@ 0x4d
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f005 f9b5 	bl	8007e22 <USB_HC_Halt>
 8002ab8:	e09e      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 fc09 	bl	80072da <USB_ReadChInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad2:	d11b      	bne.n	8002b0c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ae6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	334d      	adds	r3, #77	@ 0x4d
 8002af8:	2208      	movs	r2, #8
 8002afa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	4611      	mov	r1, r2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f005 f98c 	bl	8007e22 <USB_HC_Halt>
 8002b0a:	e075      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f004 fbe0 	bl	80072da <USB_ReadChInterrupts>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d11a      	bne.n	8002b5a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b30:	461a      	mov	r2, r3
 8002b32:	2308      	movs	r3, #8
 8002b34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	334d      	adds	r3, #77	@ 0x4d
 8002b46:	2206      	movs	r2, #6
 8002b48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f005 f965 	bl	8007e22 <USB_HC_Halt>
 8002b58:	e04e      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 fbb9 	bl	80072da <USB_ReadChInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b72:	d11b      	bne.n	8002bac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b80:	461a      	mov	r2, r3
 8002b82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	334d      	adds	r3, #77	@ 0x4d
 8002b98:	2209      	movs	r2, #9
 8002b9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f005 f93c 	bl	8007e22 <USB_HC_Halt>
 8002baa:	e025      	b.n	8002bf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f004 fb90 	bl	80072da <USB_ReadChInterrupts>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc0:	2b80      	cmp	r3, #128	@ 0x80
 8002bc2:	d119      	bne.n	8002bf8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	334d      	adds	r3, #77	@ 0x4d
 8002be6:	2207      	movs	r2, #7
 8002be8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f005 f915 	bl	8007e22 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f004 fb6a 	bl	80072da <USB_ReadChInterrupts>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c10:	d112      	bne.n	8002c38 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f005 f901 	bl	8007e22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c32:	6093      	str	r3, [r2, #8]
 8002c34:	f000 bd75 	b.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f004 fb4a 	bl	80072da <USB_ReadChInterrupts>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	f040 8128 	bne.w	8002ea2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2320      	movs	r3, #32
 8002c62:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	331b      	adds	r3, #27
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d119      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	331b      	adds	r3, #27
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	0151      	lsls	r1, r2, #5
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	440a      	add	r2, r1
 8002ca4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	799b      	ldrb	r3, [r3, #6]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01b      	beq.n	8002cee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3330      	adds	r3, #48	@ 0x30
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	1ac9      	subs	r1, r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4403      	add	r3, r0
 8002cea:	3338      	adds	r3, #56	@ 0x38
 8002cec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	334d      	adds	r3, #77	@ 0x4d
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3344      	adds	r3, #68	@ 0x44
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d22:	461a      	mov	r2, r3
 8002d24:	2301      	movs	r3, #1
 8002d26:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3326      	adds	r3, #38	@ 0x26
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3326      	adds	r3, #38	@ 0x26
 8002d4e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d110      	bne.n	8002d76 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f005 f860 	bl	8007e22 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2310      	movs	r3, #16
 8002d72:	6093      	str	r3, [r2, #8]
 8002d74:	e03d      	b.n	8002df2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3326      	adds	r3, #38	@ 0x26
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d00a      	beq.n	8002da2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3326      	adds	r3, #38	@ 0x26
 8002d9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d127      	bne.n	8002df2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	0151      	lsls	r1, r2, #5
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	440a      	add	r2, r1
 8002db8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002dc0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	334c      	adds	r3, #76	@ 0x4c
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	334c      	adds	r3, #76	@ 0x4c
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	4619      	mov	r1, r3
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f00a fd9d 	bl	800d92c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	799b      	ldrb	r3, [r3, #6]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d13b      	bne.n	8002e72 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	3338      	adds	r3, #56	@ 0x38
 8002e0a:	6819      	ldr	r1, [r3, #0]
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4403      	add	r3, r0
 8002e1a:	3328      	adds	r3, #40	@ 0x28
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	440b      	add	r3, r1
 8002e20:	1e59      	subs	r1, r3, #1
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4403      	add	r3, r0
 8002e30:	3328      	adds	r3, #40	@ 0x28
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8470 	beq.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	333c      	adds	r3, #60	@ 0x3c
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	f083 0301 	eor.w	r3, r3, #1
 8002e5a:	b2d8      	uxtb	r0, r3
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	333c      	adds	r3, #60	@ 0x3c
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	f000 bc58 	b.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	333c      	adds	r3, #60	@ 0x3c
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	f083 0301 	eor.w	r3, r3, #1
 8002e8a:	b2d8      	uxtb	r0, r3
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	333c      	adds	r3, #60	@ 0x3c
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	f000 bc40 	b.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 fa15 	bl	80072da <USB_ReadChInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d131      	bne.n	8002f1e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2320      	movs	r3, #32
 8002eca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	331a      	adds	r3, #26
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	f040 841f 	bne.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	331b      	adds	r3, #27
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334d      	adds	r3, #77	@ 0x4d
 8002f08:	2203      	movs	r2, #3
 8002f0a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 ff84 	bl	8007e22 <USB_HC_Halt>
 8002f1a:	f000 bc02 	b.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f004 f9d7 	bl	80072da <USB_ReadChInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	f040 8305 	bne.w	8003542 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f44:	461a      	mov	r2, r3
 8002f46:	2302      	movs	r3, #2
 8002f48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	334d      	adds	r3, #77	@ 0x4d
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d114      	bne.n	8002f8a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	334d      	adds	r3, #77	@ 0x4d
 8002f70:	2202      	movs	r2, #2
 8002f72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	334c      	adds	r3, #76	@ 0x4c
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e2cc      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	334d      	adds	r3, #77	@ 0x4d
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b06      	cmp	r3, #6
 8002f9e:	d114      	bne.n	8002fca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	334d      	adds	r3, #77	@ 0x4d
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	334c      	adds	r3, #76	@ 0x4c
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e2ac      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334d      	adds	r3, #77	@ 0x4d
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b07      	cmp	r3, #7
 8002fde:	d00b      	beq.n	8002ff8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	@ 0x4d
 8002ff0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ff2:	2b09      	cmp	r3, #9
 8002ff4:	f040 80a6 	bne.w	8003144 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	334d      	adds	r3, #77	@ 0x4d
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	3344      	adds	r3, #68	@ 0x44
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4403      	add	r3, r0
 800302c:	3344      	adds	r3, #68	@ 0x44
 800302e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	3344      	adds	r3, #68	@ 0x44
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d943      	bls.n	80030ce <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	3344      	adds	r3, #68	@ 0x44
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	331a      	adds	r3, #26
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d123      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	331b      	adds	r3, #27
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	331c      	adds	r3, #28
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	0151      	lsls	r1, r2, #5
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	440a      	add	r2, r1
 80030ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	334c      	adds	r3, #76	@ 0x4c
 80030c8:	2204      	movs	r2, #4
 80030ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030cc:	e229      	b.n	8003522 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	334c      	adds	r3, #76	@ 0x4c
 80030de:	2202      	movs	r2, #2
 80030e0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3326      	adds	r3, #38	@ 0x26
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3326      	adds	r3, #38	@ 0x26
 8003108:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800310a:	2b02      	cmp	r3, #2
 800310c:	f040 8209 	bne.w	8003522 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003126:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800312e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800313c:	461a      	mov	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003142:	e1ee      	b.n	8003522 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	334d      	adds	r3, #77	@ 0x4d
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b05      	cmp	r3, #5
 8003158:	f040 80c8 	bne.w	80032ec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	334d      	adds	r3, #77	@ 0x4d
 800316c:	2202      	movs	r2, #2
 800316e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	331b      	adds	r3, #27
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	f040 81ce 	bne.w	8003524 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	3326      	adds	r3, #38	@ 0x26
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b03      	cmp	r3, #3
 800319c:	d16b      	bne.n	8003276 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3348      	adds	r3, #72	@ 0x48
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1c59      	adds	r1, r3, #1
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4403      	add	r3, r0
 80031be:	3348      	adds	r3, #72	@ 0x48
 80031c0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3348      	adds	r3, #72	@ 0x48
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d943      	bls.n	8003260 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3348      	adds	r3, #72	@ 0x48
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	331b      	adds	r3, #27
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3344      	adds	r3, #68	@ 0x44
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d809      	bhi.n	800322a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	331c      	adds	r3, #28
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	0151      	lsls	r1, r2, #5
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	440a      	add	r2, r1
 8003240:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003248:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	334c      	adds	r3, #76	@ 0x4c
 800325a:	2204      	movs	r2, #4
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e014      	b.n	800328a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	334c      	adds	r3, #76	@ 0x4c
 8003270:	2202      	movs	r2, #2
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e009      	b.n	800328a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334c      	adds	r3, #76	@ 0x4c
 8003286:	2202      	movs	r2, #2
 8003288:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3326      	adds	r3, #38	@ 0x26
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3326      	adds	r3, #38	@ 0x26
 80032b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	f040 8136 	bne.w	8003524 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e4:	461a      	mov	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e11b      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	334d      	adds	r3, #77	@ 0x4d
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	f040 8081 	bne.w	8003406 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	334d      	adds	r3, #77	@ 0x4d
 8003314:	2202      	movs	r2, #2
 8003316:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	331b      	adds	r3, #27
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	f040 80fa 	bne.w	8003524 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	334c      	adds	r3, #76	@ 0x4c
 8003340:	2202      	movs	r2, #2
 8003342:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	0151      	lsls	r1, r2, #5
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	440a      	add	r2, r1
 800335a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800335e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003362:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	0151      	lsls	r1, r2, #5
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	440a      	add	r2, r1
 800337a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800337e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003382:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	0151      	lsls	r1, r2, #5
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	440a      	add	r2, r1
 800339a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800339e:	f023 0320 	bic.w	r3, r3, #32
 80033a2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3326      	adds	r3, #38	@ 0x26
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	3326      	adds	r3, #38	@ 0x26
 80033ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	f040 80a9 	bne.w	8003524 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e08e      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	334d      	adds	r3, #77	@ 0x4d
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d143      	bne.n	80034a4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	334d      	adds	r3, #77	@ 0x4d
 800342c:	2202      	movs	r2, #2
 800342e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334c      	adds	r3, #76	@ 0x4c
 8003440:	2202      	movs	r2, #2
 8003442:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	3326      	adds	r3, #38	@ 0x26
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3326      	adds	r3, #38	@ 0x26
 800346a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800346c:	2b02      	cmp	r3, #2
 800346e:	d159      	bne.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003486:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800348e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e03f      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334d      	adds	r3, #77	@ 0x4d
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d126      	bne.n	8003508 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	334d      	adds	r3, #77	@ 0x4d
 80034ca:	2202      	movs	r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3344      	adds	r3, #68	@ 0x44
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	1c59      	adds	r1, r3, #1
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4403      	add	r3, r0
 80034ee:	3344      	adds	r3, #68	@ 0x44
 80034f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	334c      	adds	r3, #76	@ 0x4c
 8003502:	2204      	movs	r2, #4
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e00d      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	334d      	adds	r3, #77	@ 0x4d
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b02      	cmp	r3, #2
 800351c:	f000 8100 	beq.w	8003720 <HCD_HC_IN_IRQHandler+0xcca>
 8003520:	e000      	b.n	8003524 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003522:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	334c      	adds	r3, #76	@ 0x4c
 8003534:	781a      	ldrb	r2, [r3, #0]
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	4619      	mov	r1, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f00a f9f6 	bl	800d92c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003540:	e0ef      	b.n	8003722 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f003 fec5 	bl	80072da <USB_ReadChInterrupts>
 8003550:	4603      	mov	r3, r0
 8003552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003556:	2b40      	cmp	r3, #64	@ 0x40
 8003558:	d12f      	bne.n	80035ba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003566:	461a      	mov	r2, r3
 8003568:	2340      	movs	r3, #64	@ 0x40
 800356a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	334d      	adds	r3, #77	@ 0x4d
 800357c:	2205      	movs	r2, #5
 800357e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	331a      	adds	r3, #26
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3344      	adds	r3, #68	@ 0x44
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f004 fc35 	bl	8007e22 <USB_HC_Halt>
 80035b8:	e0b3      	b.n	8003722 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 fe89 	bl	80072da <USB_ReadChInterrupts>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	f040 80a7 	bne.w	8003722 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3326      	adds	r3, #38	@ 0x26
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d11b      	bne.n	8003622 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3344      	adds	r3, #68	@ 0x44
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	334d      	adds	r3, #77	@ 0x4d
 800360e:	2204      	movs	r2, #4
 8003610:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f004 fc01 	bl	8007e22 <USB_HC_Halt>
 8003620:	e03f      	b.n	80036a2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3326      	adds	r3, #38	@ 0x26
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3326      	adds	r3, #38	@ 0x26
 8003648:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800364a:	2b02      	cmp	r3, #2
 800364c:	d129      	bne.n	80036a2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	3344      	adds	r3, #68	@ 0x44
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	799b      	ldrb	r3, [r3, #6]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HCD_HC_IN_IRQHandler+0xc2a>
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	331b      	adds	r3, #27
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d110      	bne.n	80036a2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	334d      	adds	r3, #77	@ 0x4d
 8003690:	2204      	movs	r2, #4
 8003692:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f004 fbc0 	bl	8007e22 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	331b      	adds	r3, #27
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d129      	bne.n	800370c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	331b      	adds	r3, #27
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	440a      	add	r2, r1
 8003702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003706:	f043 0320 	orr.w	r3, r3, #32
 800370a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003718:	461a      	mov	r2, r3
 800371a:	2310      	movs	r3, #16
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	e000      	b.n	8003722 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003720:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f003 fdc7 	bl	80072da <USB_ReadChInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b04      	cmp	r3, #4
 8003754:	d11b      	bne.n	800378e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003762:	461a      	mov	r2, r3
 8003764:	2304      	movs	r3, #4
 8003766:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	334d      	adds	r3, #77	@ 0x4d
 8003778:	2207      	movs	r2, #7
 800377a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f004 fb4c 	bl	8007e22 <USB_HC_Halt>
 800378a:	f000 bc6f 	b.w	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f003 fd9f 	bl	80072da <USB_ReadChInterrupts>
 800379c:	4603      	mov	r3, r0
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	f040 8082 	bne.w	80038ac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037b4:	461a      	mov	r2, r3
 80037b6:	2320      	movs	r3, #32
 80037b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3319      	adds	r3, #25
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d124      	bne.n	800381a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	3319      	adds	r3, #25
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	334c      	adds	r3, #76	@ 0x4c
 80037f4:	2202      	movs	r2, #2
 80037f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	334d      	adds	r3, #77	@ 0x4d
 8003808:	2203      	movs	r2, #3
 800380a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f004 fb04 	bl	8007e22 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	331a      	adds	r3, #26
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	f040 841d 	bne.w	800406c <HCD_HC_OUT_IRQHandler+0x944>
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	331b      	adds	r3, #27
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 8411 	bne.w	800406c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3326      	adds	r3, #38	@ 0x26
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d009      	beq.n	8003874 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	331b      	adds	r3, #27
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	334d      	adds	r3, #77	@ 0x4d
 8003884:	2203      	movs	r2, #3
 8003886:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f004 fac6 	bl	8007e22 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3344      	adds	r3, #68	@ 0x44
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e3df      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 fd10 	bl	80072da <USB_ReadChInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c4:	d111      	bne.n	80038ea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d2:	461a      	mov	r2, r3
 80038d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f004 fa9d 	bl	8007e22 <USB_HC_Halt>
 80038e8:	e3c0      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f003 fcf1 	bl	80072da <USB_ReadChInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d168      	bne.n	80039d4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3344      	adds	r3, #68	@ 0x44
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f003 fcdb 	bl	80072da <USB_ReadChInterrupts>
 8003924:	4603      	mov	r3, r0
 8003926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392a:	2b40      	cmp	r3, #64	@ 0x40
 800392c:	d112      	bne.n	8003954 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3319      	adds	r3, #25
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800394e:	461a      	mov	r2, r3
 8003950:	2340      	movs	r3, #64	@ 0x40
 8003952:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	331b      	adds	r3, #27
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d019      	beq.n	800399e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	331b      	adds	r3, #27
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	440a      	add	r2, r1
 8003994:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800399c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039aa:	461a      	mov	r2, r3
 80039ac:	2301      	movs	r3, #1
 80039ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	334d      	adds	r3, #77	@ 0x4d
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f004 fa28 	bl	8007e22 <USB_HC_Halt>
 80039d2:	e34b      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f003 fc7c 	bl	80072da <USB_ReadChInterrupts>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e8:	2b40      	cmp	r3, #64	@ 0x40
 80039ea:	d139      	bne.n	8003a60 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	334d      	adds	r3, #77	@ 0x4d
 80039fc:	2205      	movs	r2, #5
 80039fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	331a      	adds	r3, #26
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	3319      	adds	r3, #25
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	3344      	adds	r3, #68	@ 0x44
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f004 f9eb 	bl	8007e22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2340      	movs	r3, #64	@ 0x40
 8003a5c:	6093      	str	r3, [r2, #8]
 8003a5e:	e305      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 fc36 	bl	80072da <USB_ReadChInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d11a      	bne.n	8003aae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a84:	461a      	mov	r2, r3
 8003a86:	2308      	movs	r3, #8
 8003a88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	334d      	adds	r3, #77	@ 0x4d
 8003a9a:	2206      	movs	r2, #6
 8003a9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f004 f9bb 	bl	8007e22 <USB_HC_Halt>
 8003aac:	e2de      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f003 fc0f 	bl	80072da <USB_ReadChInterrupts>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d144      	bne.n	8003b50 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3344      	adds	r3, #68	@ 0x44
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	334d      	adds	r3, #77	@ 0x4d
 8003aea:	2204      	movs	r2, #4
 8003aec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3319      	adds	r3, #25
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d114      	bne.n	8003b2e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	3318      	adds	r3, #24
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	3319      	adds	r3, #25
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 f973 	bl	8007e22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	6093      	str	r3, [r2, #8]
 8003b4e:	e28d      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 fbbe 	bl	80072da <USB_ReadChInterrupts>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b64:	2b80      	cmp	r3, #128	@ 0x80
 8003b66:	d169      	bne.n	8003c3c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	799b      	ldrb	r3, [r3, #6]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d111      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	334d      	adds	r3, #77	@ 0x4d
 8003b80:	2207      	movs	r2, #7
 8003b82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f004 f948 	bl	8007e22 <USB_HC_Halt>
 8003b92:	e049      	b.n	8003c28 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3344      	adds	r3, #68	@ 0x44
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4403      	add	r3, r0
 8003bb4:	3344      	adds	r3, #68	@ 0x44
 8003bb6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	3344      	adds	r3, #68	@ 0x44
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d922      	bls.n	8003c14 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3344      	adds	r3, #68	@ 0x44
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	334c      	adds	r3, #76	@ 0x4c
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	334c      	adds	r3, #76	@ 0x4c
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f009 fe8d 	bl	800d92c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c12:	e009      	b.n	8003c28 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	334c      	adds	r3, #76	@ 0x4c
 8003c24:	2202      	movs	r2, #2
 8003c26:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c34:	461a      	mov	r2, r3
 8003c36:	2380      	movs	r3, #128	@ 0x80
 8003c38:	6093      	str	r3, [r2, #8]
 8003c3a:	e217      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f003 fb48 	bl	80072da <USB_ReadChInterrupts>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c54:	d11b      	bne.n	8003c8e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	334d      	adds	r3, #77	@ 0x4d
 8003c66:	2209      	movs	r2, #9
 8003c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f004 f8d5 	bl	8007e22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c84:	461a      	mov	r2, r3
 8003c86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c8a:	6093      	str	r3, [r2, #8]
 8003c8c:	e1ee      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f003 fb1f 	bl	80072da <USB_ReadChInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	f040 81df 	bne.w	8004066 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	334d      	adds	r3, #77	@ 0x4d
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f040 8093 	bne.w	8003df8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334d      	adds	r3, #77	@ 0x4d
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	334c      	adds	r3, #76	@ 0x4c
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3326      	adds	r3, #38	@ 0x26
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d00b      	beq.n	8003d28 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3326      	adds	r3, #38	@ 0x26
 8003d20:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	f040 8190 	bne.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	799b      	ldrb	r3, [r3, #6]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d115      	bne.n	8003d5c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	333d      	adds	r3, #61	@ 0x3d
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	f083 0301 	eor.w	r3, r3, #1
 8003d48:	b2d8      	uxtb	r0, r3
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	333d      	adds	r3, #61	@ 0x3d
 8003d58:	4602      	mov	r2, r0
 8003d5a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	799b      	ldrb	r3, [r3, #6]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 8171 	bne.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3334      	adds	r3, #52	@ 0x34
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8165 	beq.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3334      	adds	r3, #52	@ 0x34
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4403      	add	r3, r0
 8003d9e:	3328      	adds	r3, #40	@ 0x28
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	440b      	add	r3, r1
 8003da4:	1e59      	subs	r1, r3, #1
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4403      	add	r3, r0
 8003db4:	3328      	adds	r3, #40	@ 0x28
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dbc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 813f 	beq.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	333d      	adds	r3, #61	@ 0x3d
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	f083 0301 	eor.w	r3, r3, #1
 8003de2:	b2d8      	uxtb	r0, r3
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	333d      	adds	r3, #61	@ 0x3d
 8003df2:	4602      	mov	r2, r0
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e127      	b.n	8004048 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	334d      	adds	r3, #77	@ 0x4d
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d120      	bne.n	8003e50 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	334d      	adds	r3, #77	@ 0x4d
 8003e1e:	2202      	movs	r2, #2
 8003e20:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	331b      	adds	r3, #27
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f040 8107 	bne.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	334c      	adds	r3, #76	@ 0x4c
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e0fb      	b.n	8004048 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	334d      	adds	r3, #77	@ 0x4d
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d13a      	bne.n	8003edc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	334d      	adds	r3, #77	@ 0x4d
 8003e76:	2202      	movs	r2, #2
 8003e78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	334c      	adds	r3, #76	@ 0x4c
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	331b      	adds	r3, #27
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f040 80d1 	bne.w	8004048 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	331b      	adds	r3, #27
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ed8:	6053      	str	r3, [r2, #4]
 8003eda:	e0b5      	b.n	8004048 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	334d      	adds	r3, #77	@ 0x4d
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d114      	bne.n	8003f1c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	334d      	adds	r3, #77	@ 0x4d
 8003f02:	2202      	movs	r2, #2
 8003f04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	334c      	adds	r3, #76	@ 0x4c
 8003f16:	2202      	movs	r2, #2
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e095      	b.n	8004048 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	334d      	adds	r3, #77	@ 0x4d
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b06      	cmp	r3, #6
 8003f30:	d114      	bne.n	8003f5c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	334d      	adds	r3, #77	@ 0x4d
 8003f42:	2202      	movs	r2, #2
 8003f44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	334c      	adds	r3, #76	@ 0x4c
 8003f56:	2205      	movs	r2, #5
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e075      	b.n	8004048 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	334d      	adds	r3, #77	@ 0x4d
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b07      	cmp	r3, #7
 8003f70:	d00a      	beq.n	8003f88 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	334d      	adds	r3, #77	@ 0x4d
 8003f82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	d170      	bne.n	800406a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	334d      	adds	r3, #77	@ 0x4d
 8003f98:	2202      	movs	r2, #2
 8003f9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	3344      	adds	r3, #68	@ 0x44
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	1c59      	adds	r1, r3, #1
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4403      	add	r3, r0
 8003fbc:	3344      	adds	r3, #68	@ 0x44
 8003fbe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	3344      	adds	r3, #68	@ 0x44
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d914      	bls.n	8004000 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3344      	adds	r3, #68	@ 0x44
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	334c      	adds	r3, #76	@ 0x4c
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ffe:	e022      	b.n	8004046 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	334c      	adds	r3, #76	@ 0x4c
 8004010:	2202      	movs	r2, #2
 8004012:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800402a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004032:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004040:	461a      	mov	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004046:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	334c      	adds	r3, #76	@ 0x4c
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f009 fc64 	bl	800d92c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004064:	e002      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800406a:	bf00      	nop
  }
}
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b08a      	sub	sp, #40	@ 0x28
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	0c5b      	lsrs	r3, r3, #17
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d004      	beq.n	80040b8 <HCD_RXQLVL_IRQHandler+0x46>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	f000 80b6 	beq.w	8004222 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040b6:	e0b7      	b.n	8004228 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 80b3 	beq.w	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	332c      	adds	r3, #44	@ 0x2c
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80a7 	beq.w	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	3338      	adds	r3, #56	@ 0x38
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	18d1      	adds	r1, r2, r3
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4403      	add	r3, r0
 80040fc:	3334      	adds	r3, #52	@ 0x34
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4299      	cmp	r1, r3
 8004102:	f200 8083 	bhi.w	800420c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	332c      	adds	r3, #44	@ 0x2c
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	b292      	uxth	r2, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f003 f86f 	bl	8007204 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	332c      	adds	r3, #44	@ 0x2c
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	18d1      	adds	r1, r2, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4403      	add	r3, r0
 800414a:	332c      	adds	r3, #44	@ 0x2c
 800414c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3338      	adds	r3, #56	@ 0x38
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	18d1      	adds	r1, r2, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4403      	add	r3, r0
 8004172:	3338      	adds	r3, #56	@ 0x38
 8004174:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	0cdb      	lsrs	r3, r3, #19
 8004186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4613      	mov	r3, r2
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	3328      	adds	r3, #40	@ 0x28
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d13f      	bne.n	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d03c      	beq.n	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041c2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041ca:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	333c      	adds	r3, #60	@ 0x3c
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	f083 0301 	eor.w	r3, r3, #1
 80041f4:	b2d8      	uxtb	r0, r3
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	333c      	adds	r3, #60	@ 0x3c
 8004206:	4602      	mov	r2, r0
 8004208:	701a      	strb	r2, [r3, #0]
      break;
 800420a:	e00c      	b.n	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4613      	mov	r3, r2
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	334c      	adds	r3, #76	@ 0x4c
 800421c:	2204      	movs	r2, #4
 800421e:	701a      	strb	r2, [r3, #0]
      break;
 8004220:	e001      	b.n	8004226 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004226:	bf00      	nop
  }
}
 8004228:	bf00      	nop
 800422a:	3728      	adds	r7, #40	@ 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800425c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b02      	cmp	r3, #2
 8004266:	d10b      	bne.n	8004280 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d102      	bne.n	8004278 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f009 fb3e 	bl	800d8f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f043 0302 	orr.w	r3, r3, #2
 800427e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b08      	cmp	r3, #8
 8004288:	d132      	bne.n	80042f0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f043 0308 	orr.w	r3, r3, #8
 8004290:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b04      	cmp	r3, #4
 800429a:	d126      	bne.n	80042ea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	7a5b      	ldrb	r3, [r3, #9]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d113      	bne.n	80042cc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80042aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042ae:	d106      	bne.n	80042be <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2102      	movs	r1, #2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f003 f934 	bl	8007524 <USB_InitFSLSPClkSel>
 80042bc:	e011      	b.n	80042e2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2101      	movs	r1, #1
 80042c4:	4618      	mov	r0, r3
 80042c6:	f003 f92d 	bl	8007524 <USB_InitFSLSPClkSel>
 80042ca:	e00a      	b.n	80042e2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	79db      	ldrb	r3, [r3, #7]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d106      	bne.n	80042e2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042da:	461a      	mov	r2, r3
 80042dc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80042e0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f009 fb34 	bl	800d950 <HAL_HCD_PortEnabled_Callback>
 80042e8:	e002      	b.n	80042f0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f009 fb3e 	bl	800d96c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d103      	bne.n	8004302 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f043 0320 	orr.w	r3, r3, #32
 8004300:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6013      	str	r3, [r2, #0]
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e12b      	b.n	8004582 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc fd86 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	@ 0x24
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800436a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800437a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800437c:	f001 f9b4 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8004380:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4a81      	ldr	r2, [pc, #516]	@ (800458c <HAL_I2C_Init+0x274>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d807      	bhi.n	800439c <HAL_I2C_Init+0x84>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a80      	ldr	r2, [pc, #512]	@ (8004590 <HAL_I2C_Init+0x278>)
 8004390:	4293      	cmp	r3, r2
 8004392:	bf94      	ite	ls
 8004394:	2301      	movls	r3, #1
 8004396:	2300      	movhi	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	e006      	b.n	80043aa <HAL_I2C_Init+0x92>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a7d      	ldr	r2, [pc, #500]	@ (8004594 <HAL_I2C_Init+0x27c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	bf94      	ite	ls
 80043a4:	2301      	movls	r3, #1
 80043a6:	2300      	movhi	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0e7      	b.n	8004582 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a78      	ldr	r2, [pc, #480]	@ (8004598 <HAL_I2C_Init+0x280>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	0c9b      	lsrs	r3, r3, #18
 80043bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	4a6a      	ldr	r2, [pc, #424]	@ (800458c <HAL_I2C_Init+0x274>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d802      	bhi.n	80043ec <HAL_I2C_Init+0xd4>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	3301      	adds	r3, #1
 80043ea:	e009      	b.n	8004400 <HAL_I2C_Init+0xe8>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	4a69      	ldr	r2, [pc, #420]	@ (800459c <HAL_I2C_Init+0x284>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	099b      	lsrs	r3, r3, #6
 80043fe:	3301      	adds	r3, #1
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	430b      	orrs	r3, r1
 8004406:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004412:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	495c      	ldr	r1, [pc, #368]	@ (800458c <HAL_I2C_Init+0x274>)
 800441c:	428b      	cmp	r3, r1
 800441e:	d819      	bhi.n	8004454 <HAL_I2C_Init+0x13c>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1e59      	subs	r1, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	fbb1 f3f3 	udiv	r3, r1, r3
 800442e:	1c59      	adds	r1, r3, #1
 8004430:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004434:	400b      	ands	r3, r1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_I2C_Init+0x138>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1e59      	subs	r1, r3, #1
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fbb1 f3f3 	udiv	r3, r1, r3
 8004448:	3301      	adds	r3, #1
 800444a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444e:	e051      	b.n	80044f4 <HAL_I2C_Init+0x1dc>
 8004450:	2304      	movs	r3, #4
 8004452:	e04f      	b.n	80044f4 <HAL_I2C_Init+0x1dc>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d111      	bne.n	8004480 <HAL_I2C_Init+0x168>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1e58      	subs	r0, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6859      	ldr	r1, [r3, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	440b      	add	r3, r1
 800446a:	fbb0 f3f3 	udiv	r3, r0, r3
 800446e:	3301      	adds	r3, #1
 8004470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e012      	b.n	80044a6 <HAL_I2C_Init+0x18e>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1e58      	subs	r0, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	0099      	lsls	r1, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	fbb0 f3f3 	udiv	r3, r0, r3
 8004496:	3301      	adds	r3, #1
 8004498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_I2C_Init+0x196>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e022      	b.n	80044f4 <HAL_I2C_Init+0x1dc>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10e      	bne.n	80044d4 <HAL_I2C_Init+0x1bc>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1e58      	subs	r0, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	460b      	mov	r3, r1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	440b      	add	r3, r1
 80044c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c8:	3301      	adds	r3, #1
 80044ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044d2:	e00f      	b.n	80044f4 <HAL_I2C_Init+0x1dc>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1e58      	subs	r0, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6859      	ldr	r1, [r3, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	0099      	lsls	r1, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ea:	3301      	adds	r3, #1
 80044ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	6809      	ldr	r1, [r1, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004522:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6911      	ldr	r1, [r2, #16]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68d2      	ldr	r2, [r2, #12]
 800452e:	4311      	orrs	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	430b      	orrs	r3, r1
 8004536:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	000186a0 	.word	0x000186a0
 8004590:	001e847f 	.word	0x001e847f
 8004594:	003d08ff 	.word	0x003d08ff
 8004598:	431bde83 	.word	0x431bde83
 800459c:	10624dd3 	.word	0x10624dd3

080045a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d129      	bne.n	800460a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2224      	movs	r2, #36	@ 0x24
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0210 	bic.w	r2, r2, #16
 80045dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b20      	cmp	r3, #32
 8004630:	d12a      	bne.n	8004688 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2224      	movs	r2, #36	@ 0x24
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	f023 030f 	bic.w	r3, r3, #15
 8004658:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	b29a      	uxth	r2, r3
 800465e:	89fb      	ldrh	r3, [r7, #14]
 8004660:	4313      	orrs	r3, r2
 8004662:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	89fa      	ldrh	r2, [r7, #14]
 800466a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e000      	b.n	800468a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004688:	2302      	movs	r3, #2
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0bf      	b.n	800482a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fc fc30 	bl	8000f24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80046da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6999      	ldr	r1, [r3, #24]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6899      	ldr	r1, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b4a      	ldr	r3, [pc, #296]	@ (8004834 <HAL_LTDC_Init+0x19c>)
 800470c:	400b      	ands	r3, r1
 800470e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	041b      	lsls	r3, r3, #16
 8004716:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6899      	ldr	r1, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68d9      	ldr	r1, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b3e      	ldr	r3, [pc, #248]	@ (8004834 <HAL_LTDC_Init+0x19c>)
 800473a:	400b      	ands	r3, r1
 800473c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68d9      	ldr	r1, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6919      	ldr	r1, [r3, #16]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b33      	ldr	r3, [pc, #204]	@ (8004834 <HAL_LTDC_Init+0x19c>)
 8004768:	400b      	ands	r3, r1
 800476a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6919      	ldr	r1, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6959      	ldr	r1, [r3, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b27      	ldr	r3, [pc, #156]	@ (8004834 <HAL_LTDC_Init+0x19c>)
 8004796:	400b      	ands	r3, r1
 8004798:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	041b      	lsls	r3, r3, #16
 80047a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6959      	ldr	r1, [r3, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80047c8:	041b      	lsls	r3, r3, #16
 80047ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80047da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0206 	orr.w	r2, r2, #6
 8004806:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	f000f800 	.word	0xf000f800

08004838 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d023      	beq.n	80048a2 <HAL_LTDC_IRQHandler+0x6a>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01e      	beq.n	80048a2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0204 	bic.w	r2, r2, #4
 8004872:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2204      	movs	r2, #4
 800487a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004882:	f043 0201 	orr.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2204      	movs	r2, #4
 8004890:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f86f 	bl	8004980 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d023      	beq.n	80048f4 <HAL_LTDC_IRQHandler+0xbc>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01e      	beq.n	80048f4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0202 	bic.w	r2, r2, #2
 80048c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2202      	movs	r2, #2
 80048cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048d4:	f043 0202 	orr.w	r2, r3, #2
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2204      	movs	r2, #4
 80048e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f846 	bl	8004980 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01b      	beq.n	8004936 <HAL_LTDC_IRQHandler+0xfe>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d016      	beq.n	8004936 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2201      	movs	r2, #1
 800491e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f82f 	bl	8004994 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01b      	beq.n	8004978 <HAL_LTDC_IRQHandler+0x140>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d016      	beq.n	8004978 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0208 	bic.w	r2, r2, #8
 8004958:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2208      	movs	r2, #8
 8004960:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f818 	bl	80049a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049bc:	b5b0      	push	{r4, r5, r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_LTDC_ConfigLayer+0x1a>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e02c      	b.n	8004a30 <HAL_LTDC_ConfigLayer+0x74>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2134      	movs	r1, #52	@ 0x34
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4614      	mov	r4, r2
 80049fa:	461d      	mov	r5, r3
 80049fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f811 	bl	8004a38 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bdb0      	pop	{r4, r5, r7, pc}

08004a38 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b089      	sub	sp, #36	@ 0x24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	0c1b      	lsrs	r3, r3, #16
 8004a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a54:	4413      	add	r3, r2
 8004a56:	041b      	lsls	r3, r3, #16
 8004a58:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	01db      	lsls	r3, r3, #7
 8004a64:	4413      	add	r3, r2
 8004a66:	3384      	adds	r3, #132	@ 0x84
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	4611      	mov	r1, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	01d2      	lsls	r2, r2, #7
 8004a74:	440a      	add	r2, r1
 8004a76:	3284      	adds	r2, #132	@ 0x84
 8004a78:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a7c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a8e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a90:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4619      	mov	r1, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	01db      	lsls	r3, r3, #7
 8004a9c:	440b      	add	r3, r1
 8004a9e:	3384      	adds	r3, #132	@ 0x84
 8004aa0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004aa6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ab6:	4413      	add	r3, r2
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	01db      	lsls	r3, r3, #7
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3384      	adds	r3, #132	@ 0x84
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	01d2      	lsls	r2, r2, #7
 8004ad6:	440a      	add	r2, r1
 8004ad8:	3284      	adds	r2, #132	@ 0x84
 8004ada:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ade:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aee:	4413      	add	r3, r2
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4619      	mov	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	01db      	lsls	r3, r3, #7
 8004afc:	440b      	add	r3, r1
 8004afe:	3384      	adds	r3, #132	@ 0x84
 8004b00:	4619      	mov	r1, r3
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	01db      	lsls	r3, r3, #7
 8004b12:	4413      	add	r3, r2
 8004b14:	3384      	adds	r3, #132	@ 0x84
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	01d2      	lsls	r2, r2, #7
 8004b22:	440a      	add	r2, r1
 8004b24:	3284      	adds	r2, #132	@ 0x84
 8004b26:	f023 0307 	bic.w	r3, r3, #7
 8004b2a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	01db      	lsls	r3, r3, #7
 8004b36:	4413      	add	r3, r2
 8004b38:	3384      	adds	r3, #132	@ 0x84
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b48:	021b      	lsls	r3, r3, #8
 8004b4a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004b52:	041b      	lsls	r3, r3, #16
 8004b54:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	01db      	lsls	r3, r3, #7
 8004b68:	4413      	add	r3, r2
 8004b6a:	3384      	adds	r3, #132	@ 0x84
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	01db      	lsls	r3, r3, #7
 8004b78:	4413      	add	r3, r2
 8004b7a:	3384      	adds	r3, #132	@ 0x84
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b88:	461a      	mov	r2, r3
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4619      	mov	r1, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	01db      	lsls	r3, r3, #7
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3384      	adds	r3, #132	@ 0x84
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	01db      	lsls	r3, r3, #7
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3384      	adds	r3, #132	@ 0x84
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	01d2      	lsls	r2, r2, #7
 8004bc2:	440a      	add	r2, r1
 8004bc4:	3284      	adds	r2, #132	@ 0x84
 8004bc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	01db      	lsls	r3, r3, #7
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3384      	adds	r3, #132	@ 0x84
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	01db      	lsls	r3, r3, #7
 8004bec:	4413      	add	r3, r2
 8004bee:	3384      	adds	r3, #132	@ 0x84
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	01d2      	lsls	r2, r2, #7
 8004bfc:	440a      	add	r2, r1
 8004bfe:	3284      	adds	r2, #132	@ 0x84
 8004c00:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c04:	f023 0307 	bic.w	r3, r3, #7
 8004c08:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	68f9      	ldr	r1, [r7, #12]
 8004c14:	6809      	ldr	r1, [r1, #0]
 8004c16:	4608      	mov	r0, r1
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	01c9      	lsls	r1, r1, #7
 8004c1c:	4401      	add	r1, r0
 8004c1e:	3184      	adds	r1, #132	@ 0x84
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	01db      	lsls	r3, r3, #7
 8004c2e:	4413      	add	r3, r2
 8004c30:	3384      	adds	r3, #132	@ 0x84
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	01db      	lsls	r3, r3, #7
 8004c3e:	4413      	add	r3, r2
 8004c40:	3384      	adds	r3, #132	@ 0x84
 8004c42:	461a      	mov	r2, r3
 8004c44:	2300      	movs	r3, #0
 8004c46:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	01db      	lsls	r3, r3, #7
 8004c52:	4413      	add	r3, r2
 8004c54:	3384      	adds	r3, #132	@ 0x84
 8004c56:	461a      	mov	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d102      	bne.n	8004c6c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004c66:	2304      	movs	r3, #4
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	e01b      	b.n	8004ca4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d102      	bne.n	8004c7a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004c74:	2303      	movs	r3, #3
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e014      	b.n	8004ca4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d00b      	beq.n	8004c9a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d007      	beq.n	8004c9a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d003      	beq.n	8004c9a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c96:	2b07      	cmp	r3, #7
 8004c98:	d102      	bne.n	8004ca0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	e001      	b.n	8004ca4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	01db      	lsls	r3, r3, #7
 8004cae:	4413      	add	r3, r2
 8004cb0:	3384      	adds	r3, #132	@ 0x84
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	4611      	mov	r1, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	01d2      	lsls	r2, r2, #7
 8004cbe:	440a      	add	r2, r1
 8004cc0:	3284      	adds	r2, #132	@ 0x84
 8004cc2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	6859      	ldr	r1, [r3, #4]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	1acb      	subs	r3, r1, r3
 8004cde:	69f9      	ldr	r1, [r7, #28]
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	6809      	ldr	r1, [r1, #0]
 8004cea:	4608      	mov	r0, r1
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	01c9      	lsls	r1, r1, #7
 8004cf0:	4401      	add	r1, r0
 8004cf2:	3184      	adds	r1, #132	@ 0x84
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	01db      	lsls	r3, r3, #7
 8004d02:	4413      	add	r3, r2
 8004d04:	3384      	adds	r3, #132	@ 0x84
 8004d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	01d2      	lsls	r2, r2, #7
 8004d12:	440a      	add	r2, r1
 8004d14:	3284      	adds	r2, #132	@ 0x84
 8004d16:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d1a:	f023 0307 	bic.w	r3, r3, #7
 8004d1e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	01db      	lsls	r3, r3, #7
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3384      	adds	r3, #132	@ 0x84
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	01db      	lsls	r3, r3, #7
 8004d40:	4413      	add	r3, r2
 8004d42:	3384      	adds	r3, #132	@ 0x84
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	01d2      	lsls	r2, r2, #7
 8004d50:	440a      	add	r2, r1
 8004d52:	3284      	adds	r2, #132	@ 0x84
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	6013      	str	r3, [r2, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	3724      	adds	r7, #36	@ 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	4b20      	ldr	r3, [pc, #128]	@ (8004df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d82:	4b1d      	ldr	r3, [pc, #116]	@ (8004df8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <HAL_PWREx_EnableOverDrive+0x94>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d94:	f7fc fcac 	bl	80016f0 <HAL_GetTick>
 8004d98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d9a:	e009      	b.n	8004db0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d9c:	f7fc fca8 	bl	80016f0 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004daa:	d901      	bls.n	8004db0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e01f      	b.n	8004df0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004db0:	4b13      	ldr	r3, [pc, #76]	@ (8004e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dbc:	d1ee      	bne.n	8004d9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004dbe:	4b11      	ldr	r3, [pc, #68]	@ (8004e04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dc4:	f7fc fc94 	bl	80016f0 <HAL_GetTick>
 8004dc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dca:	e009      	b.n	8004de0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dcc:	f7fc fc90 	bl	80016f0 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004dda:	d901      	bls.n	8004de0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e007      	b.n	8004df0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004de0:	4b07      	ldr	r3, [pc, #28]	@ (8004e00 <HAL_PWREx_EnableOverDrive+0x98>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dec:	d1ee      	bne.n	8004dcc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	420e0040 	.word	0x420e0040
 8004e00:	40007000 	.word	0x40007000
 8004e04:	420e0044 	.word	0x420e0044

08004e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e267      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d075      	beq.n	8004f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e26:	4b88      	ldr	r3, [pc, #544]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d00c      	beq.n	8004e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e32:	4b85      	ldr	r3, [pc, #532]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d112      	bne.n	8004e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3e:	4b82      	ldr	r3, [pc, #520]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e4a:	d10b      	bne.n	8004e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e4c:	4b7e      	ldr	r3, [pc, #504]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d05b      	beq.n	8004f10 <HAL_RCC_OscConfig+0x108>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d157      	bne.n	8004f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e242      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e6c:	d106      	bne.n	8004e7c <HAL_RCC_OscConfig+0x74>
 8004e6e:	4b76      	ldr	r3, [pc, #472]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a75      	ldr	r2, [pc, #468]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e01d      	b.n	8004eb8 <HAL_RCC_OscConfig+0xb0>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x98>
 8004e86:	4b70      	ldr	r3, [pc, #448]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a6f      	ldr	r2, [pc, #444]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b6d      	ldr	r3, [pc, #436]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6c      	ldr	r2, [pc, #432]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e00b      	b.n	8004eb8 <HAL_RCC_OscConfig+0xb0>
 8004ea0:	4b69      	ldr	r3, [pc, #420]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a68      	ldr	r2, [pc, #416]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4b66      	ldr	r3, [pc, #408]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a65      	ldr	r2, [pc, #404]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d013      	beq.n	8004ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7fc fc16 	bl	80016f0 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fc fc12 	bl	80016f0 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	@ 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e207      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	4b5b      	ldr	r3, [pc, #364]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xc0>
 8004ee6:	e014      	b.n	8004f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7fc fc02 	bl	80016f0 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fc fbfe 	bl	80016f0 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	@ 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e1f3      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f02:	4b51      	ldr	r3, [pc, #324]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xe8>
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d063      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2a:	4b47      	ldr	r3, [pc, #284]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d11c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f36:	4b44      	ldr	r3, [pc, #272]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d116      	bne.n	8004f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f42:	4b41      	ldr	r3, [pc, #260]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_RCC_OscConfig+0x152>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d001      	beq.n	8004f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e1c7      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4937      	ldr	r1, [pc, #220]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6e:	e03a      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f78:	4b34      	ldr	r3, [pc, #208]	@ (800504c <HAL_RCC_OscConfig+0x244>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7e:	f7fc fbb7 	bl	80016f0 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f86:	f7fc fbb3 	bl	80016f0 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e1a8      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f98:	4b2b      	ldr	r3, [pc, #172]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa4:	4b28      	ldr	r3, [pc, #160]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4925      	ldr	r1, [pc, #148]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	600b      	str	r3, [r1, #0]
 8004fb8:	e015      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fba:	4b24      	ldr	r3, [pc, #144]	@ (800504c <HAL_RCC_OscConfig+0x244>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7fc fb96 	bl	80016f0 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc8:	f7fc fb92 	bl	80016f0 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e187      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fda:	4b1b      	ldr	r3, [pc, #108]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d036      	beq.n	8005060 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ffa:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <HAL_RCC_OscConfig+0x248>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005000:	f7fc fb76 	bl	80016f0 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005008:	f7fc fb72 	bl	80016f0 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e167      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501a:	4b0b      	ldr	r3, [pc, #44]	@ (8005048 <HAL_RCC_OscConfig+0x240>)
 800501c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x200>
 8005026:	e01b      	b.n	8005060 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005028:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <HAL_RCC_OscConfig+0x248>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502e:	f7fc fb5f 	bl	80016f0 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005034:	e00e      	b.n	8005054 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005036:	f7fc fb5b 	bl	80016f0 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d907      	bls.n	8005054 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e150      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
 8005048:	40023800 	.word	0x40023800
 800504c:	42470000 	.word	0x42470000
 8005050:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005054:	4b88      	ldr	r3, [pc, #544]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ea      	bne.n	8005036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8097 	beq.w	800519c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506e:	2300      	movs	r3, #0
 8005070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005072:	4b81      	ldr	r3, [pc, #516]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10f      	bne.n	800509e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507e:	2300      	movs	r3, #0
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	4b7d      	ldr	r3, [pc, #500]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	4a7c      	ldr	r2, [pc, #496]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800508c:	6413      	str	r3, [r2, #64]	@ 0x40
 800508e:	4b7a      	ldr	r3, [pc, #488]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800509a:	2301      	movs	r3, #1
 800509c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509e:	4b77      	ldr	r3, [pc, #476]	@ (800527c <HAL_RCC_OscConfig+0x474>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d118      	bne.n	80050dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050aa:	4b74      	ldr	r3, [pc, #464]	@ (800527c <HAL_RCC_OscConfig+0x474>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a73      	ldr	r2, [pc, #460]	@ (800527c <HAL_RCC_OscConfig+0x474>)
 80050b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b6:	f7fc fb1b 	bl	80016f0 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050be:	f7fc fb17 	bl	80016f0 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e10c      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d0:	4b6a      	ldr	r3, [pc, #424]	@ (800527c <HAL_RCC_OscConfig+0x474>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d106      	bne.n	80050f2 <HAL_RCC_OscConfig+0x2ea>
 80050e4:	4b64      	ldr	r3, [pc, #400]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e8:	4a63      	ldr	r2, [pc, #396]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f0:	e01c      	b.n	800512c <HAL_RCC_OscConfig+0x324>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b05      	cmp	r3, #5
 80050f8:	d10c      	bne.n	8005114 <HAL_RCC_OscConfig+0x30c>
 80050fa:	4b5f      	ldr	r3, [pc, #380]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fe:	4a5e      	ldr	r2, [pc, #376]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005100:	f043 0304 	orr.w	r3, r3, #4
 8005104:	6713      	str	r3, [r2, #112]	@ 0x70
 8005106:	4b5c      	ldr	r3, [pc, #368]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510a:	4a5b      	ldr	r2, [pc, #364]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6713      	str	r3, [r2, #112]	@ 0x70
 8005112:	e00b      	b.n	800512c <HAL_RCC_OscConfig+0x324>
 8005114:	4b58      	ldr	r3, [pc, #352]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005118:	4a57      	ldr	r2, [pc, #348]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005120:	4b55      	ldr	r3, [pc, #340]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005124:	4a54      	ldr	r2, [pc, #336]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005126:	f023 0304 	bic.w	r3, r3, #4
 800512a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d015      	beq.n	8005160 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fc fadc 	bl	80016f0 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513a:	e00a      	b.n	8005152 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513c:	f7fc fad8 	bl	80016f0 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e0cb      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005152:	4b49      	ldr	r3, [pc, #292]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0ee      	beq.n	800513c <HAL_RCC_OscConfig+0x334>
 800515e:	e014      	b.n	800518a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005160:	f7fc fac6 	bl	80016f0 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005166:	e00a      	b.n	800517e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fc fac2 	bl	80016f0 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e0b5      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517e:	4b3e      	ldr	r3, [pc, #248]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ee      	bne.n	8005168 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800518a:	7dfb      	ldrb	r3, [r7, #23]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d105      	bne.n	800519c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005190:	4b39      	ldr	r3, [pc, #228]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	4a38      	ldr	r2, [pc, #224]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005196:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800519a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80a1 	beq.w	80052e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a6:	4b34      	ldr	r3, [pc, #208]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 030c 	and.w	r3, r3, #12
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d05c      	beq.n	800526c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d141      	bne.n	800523e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ba:	4b31      	ldr	r3, [pc, #196]	@ (8005280 <HAL_RCC_OscConfig+0x478>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fc fa96 	bl	80016f0 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c8:	f7fc fa92 	bl	80016f0 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e087      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	4b27      	ldr	r3, [pc, #156]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	019b      	lsls	r3, r3, #6
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	3b01      	subs	r3, #1
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	061b      	lsls	r3, r3, #24
 800520a:	491b      	ldr	r1, [pc, #108]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 800520c:	4313      	orrs	r3, r2
 800520e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005210:	4b1b      	ldr	r3, [pc, #108]	@ (8005280 <HAL_RCC_OscConfig+0x478>)
 8005212:	2201      	movs	r2, #1
 8005214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005216:	f7fc fa6b 	bl	80016f0 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521e:	f7fc fa67 	bl	80016f0 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e05c      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005230:	4b11      	ldr	r3, [pc, #68]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f0      	beq.n	800521e <HAL_RCC_OscConfig+0x416>
 800523c:	e054      	b.n	80052e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523e:	4b10      	ldr	r3, [pc, #64]	@ (8005280 <HAL_RCC_OscConfig+0x478>)
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7fc fa54 	bl	80016f0 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800524c:	f7fc fa50 	bl	80016f0 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e045      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525e:	4b06      	ldr	r3, [pc, #24]	@ (8005278 <HAL_RCC_OscConfig+0x470>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f0      	bne.n	800524c <HAL_RCC_OscConfig+0x444>
 800526a:	e03d      	b.n	80052e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d107      	bne.n	8005284 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e038      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
 8005278:	40023800 	.word	0x40023800
 800527c:	40007000 	.word	0x40007000
 8005280:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005284:	4b1b      	ldr	r3, [pc, #108]	@ (80052f4 <HAL_RCC_OscConfig+0x4ec>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d028      	beq.n	80052e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800529c:	429a      	cmp	r2, r3
 800529e:	d121      	bne.n	80052e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d11a      	bne.n	80052e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052b4:	4013      	ands	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052bc:	4293      	cmp	r3, r2
 80052be:	d111      	bne.n	80052e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	3b01      	subs	r3, #1
 80052ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d001      	beq.n	80052e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40023800 	.word	0x40023800

080052f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0cc      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800530c:	4b68      	ldr	r3, [pc, #416]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d90c      	bls.n	8005334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b65      	ldr	r3, [pc, #404]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005322:	4b63      	ldr	r3, [pc, #396]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d001      	beq.n	8005334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0b8      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d020      	beq.n	8005382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800534c:	4b59      	ldr	r3, [pc, #356]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4a58      	ldr	r2, [pc, #352]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005364:	4b53      	ldr	r3, [pc, #332]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a52      	ldr	r2, [pc, #328]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800536e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005370:	4b50      	ldr	r3, [pc, #320]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	494d      	ldr	r1, [pc, #308]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d044      	beq.n	8005418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005396:	4b47      	ldr	r3, [pc, #284]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d119      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e07f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d003      	beq.n	80053b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b6:	4b3f      	ldr	r3, [pc, #252]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e06f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c6:	4b3b      	ldr	r3, [pc, #236]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e067      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053d6:	4b37      	ldr	r3, [pc, #220]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 0203 	bic.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4934      	ldr	r1, [pc, #208]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053e8:	f7fc f982 	bl	80016f0 <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f0:	f7fc f97e 	bl	80016f0 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e04f      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	4b2b      	ldr	r3, [pc, #172]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 020c 	and.w	r2, r3, #12
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	429a      	cmp	r2, r3
 8005416:	d1eb      	bne.n	80053f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005418:	4b25      	ldr	r3, [pc, #148]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d20c      	bcs.n	8005440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b22      	ldr	r3, [pc, #136]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b20      	ldr	r3, [pc, #128]	@ (80054b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e032      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800544c:	4b19      	ldr	r3, [pc, #100]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4916      	ldr	r1, [pc, #88]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800546a:	4b12      	ldr	r3, [pc, #72]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	490e      	ldr	r1, [pc, #56]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800547e:	f000 f821 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8005482:	4602      	mov	r2, r0
 8005484:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	490a      	ldr	r1, [pc, #40]	@ (80054b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	5ccb      	ldrb	r3, [r1, r3]
 8005492:	fa22 f303 	lsr.w	r3, r2, r3
 8005496:	4a09      	ldr	r2, [pc, #36]	@ (80054bc <HAL_RCC_ClockConfig+0x1c4>)
 8005498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800549a:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <HAL_RCC_ClockConfig+0x1c8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fb ffbe 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40023c00 	.word	0x40023c00
 80054b4:	40023800 	.word	0x40023800
 80054b8:	0800e0f4 	.word	0x0800e0f4
 80054bc:	20000000 	.word	0x20000000
 80054c0:	20000004 	.word	0x20000004

080054c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c8:	b094      	sub	sp, #80	@ 0x50
 80054ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d0:	2300      	movs	r3, #0
 80054d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054d4:	2300      	movs	r3, #0
 80054d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054dc:	4b79      	ldr	r3, [pc, #484]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 030c 	and.w	r3, r3, #12
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d00d      	beq.n	8005504 <HAL_RCC_GetSysClockFreq+0x40>
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	f200 80e1 	bhi.w	80056b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0x34>
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d003      	beq.n	80054fe <HAL_RCC_GetSysClockFreq+0x3a>
 80054f6:	e0db      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054f8:	4b73      	ldr	r3, [pc, #460]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80054fa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80054fc:	e0db      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054fe:	4b73      	ldr	r3, [pc, #460]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x208>)
 8005500:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005502:	e0d8      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005504:	4b6f      	ldr	r3, [pc, #444]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800550c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800550e:	4b6d      	ldr	r3, [pc, #436]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d063      	beq.n	80055e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551a:	4b6a      	ldr	r3, [pc, #424]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	2200      	movs	r2, #0
 8005522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005524:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552c:	633b      	str	r3, [r7, #48]	@ 0x30
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	@ 0x34
 8005532:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005536:	4622      	mov	r2, r4
 8005538:	462b      	mov	r3, r5
 800553a:	f04f 0000 	mov.w	r0, #0
 800553e:	f04f 0100 	mov.w	r1, #0
 8005542:	0159      	lsls	r1, r3, #5
 8005544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005548:	0150      	lsls	r0, r2, #5
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4621      	mov	r1, r4
 8005550:	1a51      	subs	r1, r2, r1
 8005552:	6139      	str	r1, [r7, #16]
 8005554:	4629      	mov	r1, r5
 8005556:	eb63 0301 	sbc.w	r3, r3, r1
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005568:	4659      	mov	r1, fp
 800556a:	018b      	lsls	r3, r1, #6
 800556c:	4651      	mov	r1, sl
 800556e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005572:	4651      	mov	r1, sl
 8005574:	018a      	lsls	r2, r1, #6
 8005576:	4651      	mov	r1, sl
 8005578:	ebb2 0801 	subs.w	r8, r2, r1
 800557c:	4659      	mov	r1, fp
 800557e:	eb63 0901 	sbc.w	r9, r3, r1
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800558e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005596:	4690      	mov	r8, r2
 8005598:	4699      	mov	r9, r3
 800559a:	4623      	mov	r3, r4
 800559c:	eb18 0303 	adds.w	r3, r8, r3
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	462b      	mov	r3, r5
 80055a4:	eb49 0303 	adc.w	r3, r9, r3
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055b6:	4629      	mov	r1, r5
 80055b8:	024b      	lsls	r3, r1, #9
 80055ba:	4621      	mov	r1, r4
 80055bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055c0:	4621      	mov	r1, r4
 80055c2:	024a      	lsls	r2, r1, #9
 80055c4:	4610      	mov	r0, r2
 80055c6:	4619      	mov	r1, r3
 80055c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ca:	2200      	movs	r2, #0
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055d4:	f7fa fe0c 	bl	80001f0 <__aeabi_uldivmod>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4613      	mov	r3, r2
 80055de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055e0:	e058      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e2:	4b38      	ldr	r3, [pc, #224]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	2200      	movs	r2, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	4611      	mov	r1, r2
 80055ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055fc:	4642      	mov	r2, r8
 80055fe:	464b      	mov	r3, r9
 8005600:	f04f 0000 	mov.w	r0, #0
 8005604:	f04f 0100 	mov.w	r1, #0
 8005608:	0159      	lsls	r1, r3, #5
 800560a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800560e:	0150      	lsls	r0, r2, #5
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4641      	mov	r1, r8
 8005616:	ebb2 0a01 	subs.w	sl, r2, r1
 800561a:	4649      	mov	r1, r9
 800561c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800562c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005630:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005634:	ebb2 040a 	subs.w	r4, r2, sl
 8005638:	eb63 050b 	sbc.w	r5, r3, fp
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	00eb      	lsls	r3, r5, #3
 8005646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800564a:	00e2      	lsls	r2, r4, #3
 800564c:	4614      	mov	r4, r2
 800564e:	461d      	mov	r5, r3
 8005650:	4643      	mov	r3, r8
 8005652:	18e3      	adds	r3, r4, r3
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	464b      	mov	r3, r9
 8005658:	eb45 0303 	adc.w	r3, r5, r3
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800566a:	4629      	mov	r1, r5
 800566c:	028b      	lsls	r3, r1, #10
 800566e:	4621      	mov	r1, r4
 8005670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005674:	4621      	mov	r1, r4
 8005676:	028a      	lsls	r2, r1, #10
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567e:	2200      	movs	r2, #0
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	61fa      	str	r2, [r7, #28]
 8005684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005688:	f7fa fdb2 	bl	80001f0 <__aeabi_uldivmod>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4613      	mov	r3, r2
 8005692:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005694:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	3301      	adds	r3, #1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80056a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056ae:	e002      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b0:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80056b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3750      	adds	r7, #80	@ 0x50
 80056bc:	46bd      	mov	sp, r7
 80056be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800
 80056c8:	00f42400 	.word	0x00f42400
 80056cc:	007a1200 	.word	0x007a1200

080056d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000000 	.word	0x20000000

080056e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056ec:	f7ff fff0 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	0a9b      	lsrs	r3, r3, #10
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	4903      	ldr	r1, [pc, #12]	@ (800570c <HAL_RCC_GetPCLK1Freq+0x24>)
 80056fe:	5ccb      	ldrb	r3, [r1, r3]
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40023800 	.word	0x40023800
 800570c:	0800e104 	.word	0x0800e104

08005710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005714:	f7ff ffdc 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 8005718:	4602      	mov	r2, r0
 800571a:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	0b5b      	lsrs	r3, r3, #13
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	4903      	ldr	r1, [pc, #12]	@ (8005734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005726:	5ccb      	ldrb	r3, [r1, r3]
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800572c:	4618      	mov	r0, r3
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40023800 	.word	0x40023800
 8005734:	0800e104 	.word	0x0800e104

08005738 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	220f      	movs	r2, #15
 8005746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005748:	4b12      	ldr	r3, [pc, #72]	@ (8005794 <HAL_RCC_GetClockConfig+0x5c>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 0203 	and.w	r2, r3, #3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005754:	4b0f      	ldr	r3, [pc, #60]	@ (8005794 <HAL_RCC_GetClockConfig+0x5c>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005760:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <HAL_RCC_GetClockConfig+0x5c>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800576c:	4b09      	ldr	r3, [pc, #36]	@ (8005794 <HAL_RCC_GetClockConfig+0x5c>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	08db      	lsrs	r3, r3, #3
 8005772:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800577a:	4b07      	ldr	r3, [pc, #28]	@ (8005798 <HAL_RCC_GetClockConfig+0x60>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 020f 	and.w	r2, r3, #15
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40023800 	.word	0x40023800
 8005798:	40023c00 	.word	0x40023c00

0800579c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d075      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057d0:	4b91      	ldr	r3, [pc, #580]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057d6:	f7fb ff8b 	bl	80016f0 <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057de:	f7fb ff87 	bl	80016f0 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e189      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057f0:	4b8a      	ldr	r3, [pc, #552]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f0      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	019a      	lsls	r2, r3, #6
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	071b      	lsls	r3, r3, #28
 8005814:	4981      	ldr	r1, [pc, #516]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01f      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005828:	4b7c      	ldr	r3, [pc, #496]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800582a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800582e:	0f1b      	lsrs	r3, r3, #28
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	019a      	lsls	r2, r3, #6
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	061b      	lsls	r3, r3, #24
 8005842:	431a      	orrs	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	071b      	lsls	r3, r3, #28
 8005848:	4974      	ldr	r1, [pc, #464]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005850:	4b72      	ldr	r3, [pc, #456]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005856:	f023 021f 	bic.w	r2, r3, #31
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	3b01      	subs	r3, #1
 8005860:	496e      	ldr	r1, [pc, #440]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	019a      	lsls	r2, r3, #6
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	061b      	lsls	r3, r3, #24
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	071b      	lsls	r3, r3, #28
 8005888:	4964      	ldr	r1, [pc, #400]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005890:	4b61      	ldr	r3, [pc, #388]	@ (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005892:	2201      	movs	r2, #1
 8005894:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005896:	f7fb ff2b 	bl	80016f0 <HAL_GetTick>
 800589a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800589c:	e008      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800589e:	f7fb ff27 	bl	80016f0 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e129      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058b0:	4b5a      	ldr	r3, [pc, #360]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d105      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d079      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058d4:	4b52      	ldr	r3, [pc, #328]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058da:	f7fb ff09 	bl	80016f0 <HAL_GetTick>
 80058de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058e2:	f7fb ff05 	bl	80016f0 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e107      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058f4:	4b49      	ldr	r3, [pc, #292]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005900:	d0ef      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d020      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800590e:	4b43      	ldr	r3, [pc, #268]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005914:	0f1b      	lsrs	r3, r3, #28
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	019a      	lsls	r2, r3, #6
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	061b      	lsls	r3, r3, #24
 8005928:	431a      	orrs	r2, r3
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	071b      	lsls	r3, r3, #28
 800592e:	493b      	ldr	r1, [pc, #236]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005936:	4b39      	ldr	r3, [pc, #228]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800593c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	3b01      	subs	r3, #1
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	4934      	ldr	r1, [pc, #208]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01e      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800595c:	4b2f      	ldr	r3, [pc, #188]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005962:	0e1b      	lsrs	r3, r3, #24
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	019a      	lsls	r2, r3, #6
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	061b      	lsls	r3, r3, #24
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	071b      	lsls	r3, r3, #28
 800597c:	4927      	ldr	r1, [pc, #156]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005984:	4b25      	ldr	r3, [pc, #148]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800598a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	4922      	ldr	r1, [pc, #136]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800599a:	4b21      	ldr	r3, [pc, #132]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800599c:	2201      	movs	r2, #1
 800599e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059a0:	f7fb fea6 	bl	80016f0 <HAL_GetTick>
 80059a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80059a8:	f7fb fea2 	bl	80016f0 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e0a4      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059ba:	4b18      	ldr	r3, [pc, #96]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059c6:	d1ef      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 808b 	beq.w	8005aec <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	4b10      	ldr	r3, [pc, #64]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059de:	4a0f      	ldr	r2, [pc, #60]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80059e6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059fe:	f7fb fe77 	bl	80016f0 <HAL_GetTick>
 8005a02:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a04:	e010      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a06:	f7fb fe73 	bl	80016f0 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d909      	bls.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e075      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005a18:	42470068 	.word	0x42470068
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	42470070 	.word	0x42470070
 8005a24:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a28:	4b38      	ldr	r3, [pc, #224]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0e8      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a34:	4b36      	ldr	r3, [pc, #216]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02f      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d028      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a52:	4b2f      	ldr	r3, [pc, #188]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a62:	4b2c      	ldr	r3, [pc, #176]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a68:	4a29      	ldr	r2, [pc, #164]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a6e:	4b28      	ldr	r3, [pc, #160]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d114      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a7a:	f7fb fe39 	bl	80016f0 <HAL_GetTick>
 8005a7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a80:	e00a      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a82:	f7fb fe35 	bl	80016f0 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e035      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a98:	4b1d      	ldr	r3, [pc, #116]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0ee      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab0:	d10d      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005ab2:	4b17      	ldr	r3, [pc, #92]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac6:	4912      	ldr	r1, [pc, #72]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	608b      	str	r3, [r1, #8]
 8005acc:	e005      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005ace:	4b10      	ldr	r3, [pc, #64]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ad4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005ad8:	6093      	str	r3, [r2, #8]
 8005ada:	4b0d      	ldr	r3, [pc, #52]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005adc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae6:	490a      	ldr	r1, [pc, #40]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005afe:	4b06      	ldr	r3, [pc, #24]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005b00:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40007000 	.word	0x40007000
 8005b10:	40023800 	.word	0x40023800
 8005b14:	42470e40 	.word	0x42470e40
 8005b18:	424711e0 	.word	0x424711e0

08005b1c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e025      	b.n	8005b7c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fb fc61 	bl	800140c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f001 f91b 	bl	8006d98 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	f001 f970 	bl	8006e52 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e07b      	b.n	8005c8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d108      	bne.n	8005bb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba6:	d009      	beq.n	8005bbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	61da      	str	r2, [r3, #28]
 8005bae:	e005      	b.n	8005bbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fb fad4 	bl	8001184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bf2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c40:	ea42 0103 	orr.w	r1, r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	0c1b      	lsrs	r3, r3, #16
 8005c5a:	f003 0104 	and.w	r1, r3, #4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c62:	f003 0210 	and.w	r2, r3, #16
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e041      	b.n	8005d2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fb faa9 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f000 fa7d 	bl	80061d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d001      	beq.n	8005d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e04e      	b.n	8005dea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a23      	ldr	r2, [pc, #140]	@ (8005df8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d022      	beq.n	8005db4 <HAL_TIM_Base_Start_IT+0x80>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d76:	d01d      	beq.n	8005db4 <HAL_TIM_Base_Start_IT+0x80>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dfc <HAL_TIM_Base_Start_IT+0xc8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d018      	beq.n	8005db4 <HAL_TIM_Base_Start_IT+0x80>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1e      	ldr	r2, [pc, #120]	@ (8005e00 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <HAL_TIM_Base_Start_IT+0x80>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a1c      	ldr	r2, [pc, #112]	@ (8005e04 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00e      	beq.n	8005db4 <HAL_TIM_Base_Start_IT+0x80>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005e08 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d009      	beq.n	8005db4 <HAL_TIM_Base_Start_IT+0x80>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a19      	ldr	r2, [pc, #100]	@ (8005e0c <HAL_TIM_Base_Start_IT+0xd8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d004      	beq.n	8005db4 <HAL_TIM_Base_Start_IT+0x80>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a18      	ldr	r2, [pc, #96]	@ (8005e10 <HAL_TIM_Base_Start_IT+0xdc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d111      	bne.n	8005dd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b06      	cmp	r3, #6
 8005dc4:	d010      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f042 0201 	orr.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd6:	e007      	b.n	8005de8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40010400 	.word	0x40010400
 8005e0c:	40014000 	.word	0x40014000
 8005e10:	40001800 	.word	0x40001800

08005e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d020      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01b      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0202 	mvn.w	r2, #2
 8005e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f999 	bl	8006196 <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f98b 	bl	8006182 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f99c 	bl	80061aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d020      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01b      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0204 	mvn.w	r2, #4
 8005e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f973 	bl	8006196 <HAL_TIM_IC_CaptureCallback>
 8005eb0:	e005      	b.n	8005ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f965 	bl	8006182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f976 	bl	80061aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d020      	beq.n	8005f10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01b      	beq.n	8005f10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0208 	mvn.w	r2, #8
 8005ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f94d 	bl	8006196 <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f93f 	bl	8006182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f950 	bl	80061aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d020      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01b      	beq.n	8005f5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0210 	mvn.w	r2, #16
 8005f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2208      	movs	r2, #8
 8005f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f927 	bl	8006196 <HAL_TIM_IC_CaptureCallback>
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f919 	bl	8006182 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f92a 	bl	80061aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00c      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d007      	beq.n	8005f80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0201 	mvn.w	r2, #1
 8005f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fa feda 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00c      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fae4 	bl	800656c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d007      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8fb 	bl	80061be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00c      	beq.n	8005fec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0220 	mvn.w	r2, #32
 8005fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fab6 	bl	8006558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIM_ConfigClockSource+0x1c>
 800600c:	2302      	movs	r3, #2
 800600e:	e0b4      	b.n	800617a <HAL_TIM_ConfigClockSource+0x186>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800602e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006048:	d03e      	beq.n	80060c8 <HAL_TIM_ConfigClockSource+0xd4>
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800604e:	f200 8087 	bhi.w	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006056:	f000 8086 	beq.w	8006166 <HAL_TIM_ConfigClockSource+0x172>
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605e:	d87f      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006060:	2b70      	cmp	r3, #112	@ 0x70
 8006062:	d01a      	beq.n	800609a <HAL_TIM_ConfigClockSource+0xa6>
 8006064:	2b70      	cmp	r3, #112	@ 0x70
 8006066:	d87b      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006068:	2b60      	cmp	r3, #96	@ 0x60
 800606a:	d050      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x11a>
 800606c:	2b60      	cmp	r3, #96	@ 0x60
 800606e:	d877      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b50      	cmp	r3, #80	@ 0x50
 8006072:	d03c      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0xfa>
 8006074:	2b50      	cmp	r3, #80	@ 0x50
 8006076:	d873      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006078:	2b40      	cmp	r3, #64	@ 0x40
 800607a:	d058      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x13a>
 800607c:	2b40      	cmp	r3, #64	@ 0x40
 800607e:	d86f      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006080:	2b30      	cmp	r3, #48	@ 0x30
 8006082:	d064      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x15a>
 8006084:	2b30      	cmp	r3, #48	@ 0x30
 8006086:	d86b      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006088:	2b20      	cmp	r3, #32
 800608a:	d060      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x15a>
 800608c:	2b20      	cmp	r3, #32
 800608e:	d867      	bhi.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d05c      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x15a>
 8006094:	2b10      	cmp	r3, #16
 8006096:	d05a      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x15a>
 8006098:	e062      	b.n	8006160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060aa:	f000 f9b9 	bl	8006420 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80060bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	609a      	str	r2, [r3, #8]
      break;
 80060c6:	e04f      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060d8:	f000 f9a2 	bl	8006420 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060ea:	609a      	str	r2, [r3, #8]
      break;
 80060ec:	e03c      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fa:	461a      	mov	r2, r3
 80060fc:	f000 f916 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2150      	movs	r1, #80	@ 0x50
 8006106:	4618      	mov	r0, r3
 8006108:	f000 f96f 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 800610c:	e02c      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800611a:	461a      	mov	r2, r3
 800611c:	f000 f935 	bl	800638a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2160      	movs	r1, #96	@ 0x60
 8006126:	4618      	mov	r0, r3
 8006128:	f000 f95f 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 800612c:	e01c      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800613a:	461a      	mov	r2, r3
 800613c:	f000 f8f6 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2140      	movs	r1, #64	@ 0x40
 8006146:	4618      	mov	r0, r3
 8006148:	f000 f94f 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 800614c:	e00c      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f000 f946 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 800615e:	e003      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
      break;
 8006164:	e000      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006178:	7bfb      	ldrb	r3, [r7, #15]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a46      	ldr	r2, [pc, #280]	@ (8006300 <TIM_Base_SetConfig+0x12c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d013      	beq.n	8006214 <TIM_Base_SetConfig+0x40>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f2:	d00f      	beq.n	8006214 <TIM_Base_SetConfig+0x40>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a43      	ldr	r2, [pc, #268]	@ (8006304 <TIM_Base_SetConfig+0x130>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00b      	beq.n	8006214 <TIM_Base_SetConfig+0x40>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a42      	ldr	r2, [pc, #264]	@ (8006308 <TIM_Base_SetConfig+0x134>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d007      	beq.n	8006214 <TIM_Base_SetConfig+0x40>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a41      	ldr	r2, [pc, #260]	@ (800630c <TIM_Base_SetConfig+0x138>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a40      	ldr	r2, [pc, #256]	@ (8006310 <TIM_Base_SetConfig+0x13c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d108      	bne.n	8006226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800621a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a35      	ldr	r2, [pc, #212]	@ (8006300 <TIM_Base_SetConfig+0x12c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d02b      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006234:	d027      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a32      	ldr	r2, [pc, #200]	@ (8006304 <TIM_Base_SetConfig+0x130>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d023      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a31      	ldr	r2, [pc, #196]	@ (8006308 <TIM_Base_SetConfig+0x134>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01f      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a30      	ldr	r2, [pc, #192]	@ (800630c <TIM_Base_SetConfig+0x138>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01b      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a2f      	ldr	r2, [pc, #188]	@ (8006310 <TIM_Base_SetConfig+0x13c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d017      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2e      	ldr	r2, [pc, #184]	@ (8006314 <TIM_Base_SetConfig+0x140>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2d      	ldr	r2, [pc, #180]	@ (8006318 <TIM_Base_SetConfig+0x144>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00f      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a2c      	ldr	r2, [pc, #176]	@ (800631c <TIM_Base_SetConfig+0x148>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00b      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2b      	ldr	r2, [pc, #172]	@ (8006320 <TIM_Base_SetConfig+0x14c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d007      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2a      	ldr	r2, [pc, #168]	@ (8006324 <TIM_Base_SetConfig+0x150>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d003      	beq.n	8006286 <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a29      	ldr	r2, [pc, #164]	@ (8006328 <TIM_Base_SetConfig+0x154>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d108      	bne.n	8006298 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800628c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a10      	ldr	r2, [pc, #64]	@ (8006300 <TIM_Base_SetConfig+0x12c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d003      	beq.n	80062cc <TIM_Base_SetConfig+0xf8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a12      	ldr	r2, [pc, #72]	@ (8006310 <TIM_Base_SetConfig+0x13c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d103      	bne.n	80062d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d105      	bne.n	80062f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	611a      	str	r2, [r3, #16]
  }
}
 80062f2:	bf00      	nop
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40010000 	.word	0x40010000
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40010400 	.word	0x40010400
 8006314:	40014000 	.word	0x40014000
 8006318:	40014400 	.word	0x40014400
 800631c:	40014800 	.word	0x40014800
 8006320:	40001800 	.word	0x40001800
 8006324:	40001c00 	.word	0x40001c00
 8006328:	40002000 	.word	0x40002000

0800632c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0201 	bic.w	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 030a 	bic.w	r3, r3, #10
 8006368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800638a:	b480      	push	{r7}
 800638c:	b087      	sub	sp, #28
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f023 0210 	bic.w	r2, r3, #16
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	031b      	lsls	r3, r3, #12
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	f043 0307 	orr.w	r3, r3, #7
 800640c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	609a      	str	r2, [r3, #8]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800643a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	021a      	lsls	r2, r3, #8
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	431a      	orrs	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4313      	orrs	r3, r2
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006474:	2302      	movs	r3, #2
 8006476:	e05a      	b.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a21      	ldr	r2, [pc, #132]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d022      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c4:	d01d      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d018      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1a      	ldr	r2, [pc, #104]	@ (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00e      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a18      	ldr	r2, [pc, #96]	@ (800654c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a17      	ldr	r2, [pc, #92]	@ (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d004      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d10c      	bne.n	800651c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	4313      	orrs	r3, r2
 8006512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	40010000 	.word	0x40010000
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	40000c00 	.word	0x40000c00
 800654c:	40010400 	.word	0x40010400
 8006550:	40014000 	.word	0x40014000
 8006554:	40001800 	.word	0x40001800

08006558 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e042      	b.n	8006618 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fa fe56 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2224      	movs	r2, #36	@ 0x24
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f973 	bl	80068b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	@ 0x28
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	4613      	mov	r3, r2
 800662e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b20      	cmp	r3, #32
 800663e:	d175      	bne.n	800672c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_UART_Transmit+0x2c>
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e06e      	b.n	800672e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2221      	movs	r2, #33	@ 0x21
 800665a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800665e:	f7fb f847 	bl	80016f0 <HAL_GetTick>
 8006662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	88fa      	ldrh	r2, [r7, #6]
 8006668:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006678:	d108      	bne.n	800668c <HAL_UART_Transmit+0x6c>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	e003      	b.n	8006694 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006694:	e02e      	b.n	80066f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2200      	movs	r2, #0
 800669e:	2180      	movs	r1, #128	@ 0x80
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f848 	bl	8006736 <UART_WaitOnFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e03a      	b.n	800672e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10b      	bne.n	80066d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	3302      	adds	r3, #2
 80066d2:	61bb      	str	r3, [r7, #24]
 80066d4:	e007      	b.n	80066e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	781a      	ldrb	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	3301      	adds	r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1cb      	bne.n	8006696 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2200      	movs	r2, #0
 8006706:	2140      	movs	r1, #64	@ 0x40
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 f814 	bl	8006736 <UART_WaitOnFlagUntilTimeout>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e006      	b.n	800672e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	e000      	b.n	800672e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800672c:	2302      	movs	r3, #2
  }
}
 800672e:	4618      	mov	r0, r3
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b086      	sub	sp, #24
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	603b      	str	r3, [r7, #0]
 8006742:	4613      	mov	r3, r2
 8006744:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006746:	e03b      	b.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d037      	beq.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006750:	f7fa ffce 	bl	80016f0 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	429a      	cmp	r2, r3
 800675e:	d302      	bcc.n	8006766 <UART_WaitOnFlagUntilTimeout+0x30>
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e03a      	b.n	80067e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d023      	beq.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b80      	cmp	r3, #128	@ 0x80
 800677c:	d020      	beq.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b40      	cmp	r3, #64	@ 0x40
 8006782:	d01d      	beq.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b08      	cmp	r3, #8
 8006790:	d116      	bne.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f81d 	bl	80067e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2208      	movs	r2, #8
 80067b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e00f      	b.n	80067e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4013      	ands	r3, r2
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d0b4      	beq.n	8006748 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b095      	sub	sp, #84	@ 0x54
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	330c      	adds	r3, #12
 80067f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006810:	643a      	str	r2, [r7, #64]	@ 0x40
 8006812:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800681e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e5      	bne.n	80067f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3314      	adds	r3, #20
 800682a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	61fb      	str	r3, [r7, #28]
   return(result);
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	f023 0301 	bic.w	r3, r3, #1
 800683a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3314      	adds	r3, #20
 8006842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006844:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006846:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800684a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e5      	bne.n	8006824 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685c:	2b01      	cmp	r3, #1
 800685e:	d119      	bne.n	8006894 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f023 0310 	bic.w	r3, r3, #16
 8006876:	647b      	str	r3, [r7, #68]	@ 0x44
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006880:	61ba      	str	r2, [r7, #24]
 8006882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6979      	ldr	r1, [r7, #20]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	613b      	str	r3, [r7, #16]
   return(result);
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e5      	bne.n	8006860 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80068a2:	bf00      	nop
 80068a4:	3754      	adds	r7, #84	@ 0x54
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
	...

080068b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b4:	b0c0      	sub	sp, #256	@ 0x100
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80068c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068cc:	68d9      	ldr	r1, [r3, #12]
 80068ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	ea40 0301 	orr.w	r3, r0, r1
 80068d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	431a      	orrs	r2, r3
 80068e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006908:	f021 010c 	bic.w	r1, r1, #12
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006916:	430b      	orrs	r3, r1
 8006918:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800692a:	6999      	ldr	r1, [r3, #24]
 800692c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	ea40 0301 	orr.w	r3, r0, r1
 8006936:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b8f      	ldr	r3, [pc, #572]	@ (8006b7c <UART_SetConfig+0x2cc>)
 8006940:	429a      	cmp	r2, r3
 8006942:	d005      	beq.n	8006950 <UART_SetConfig+0xa0>
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b8d      	ldr	r3, [pc, #564]	@ (8006b80 <UART_SetConfig+0x2d0>)
 800694c:	429a      	cmp	r2, r3
 800694e:	d104      	bne.n	800695a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006950:	f7fe fede 	bl	8005710 <HAL_RCC_GetPCLK2Freq>
 8006954:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006958:	e003      	b.n	8006962 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800695a:	f7fe fec5 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 800695e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800696c:	f040 810c 	bne.w	8006b88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006974:	2200      	movs	r2, #0
 8006976:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800697a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800697e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006982:	4622      	mov	r2, r4
 8006984:	462b      	mov	r3, r5
 8006986:	1891      	adds	r1, r2, r2
 8006988:	65b9      	str	r1, [r7, #88]	@ 0x58
 800698a:	415b      	adcs	r3, r3
 800698c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800698e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006992:	4621      	mov	r1, r4
 8006994:	eb12 0801 	adds.w	r8, r2, r1
 8006998:	4629      	mov	r1, r5
 800699a:	eb43 0901 	adc.w	r9, r3, r1
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069b2:	4690      	mov	r8, r2
 80069b4:	4699      	mov	r9, r3
 80069b6:	4623      	mov	r3, r4
 80069b8:	eb18 0303 	adds.w	r3, r8, r3
 80069bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069c0:	462b      	mov	r3, r5
 80069c2:	eb49 0303 	adc.w	r3, r9, r3
 80069c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80069da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069de:	460b      	mov	r3, r1
 80069e0:	18db      	adds	r3, r3, r3
 80069e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069e4:	4613      	mov	r3, r2
 80069e6:	eb42 0303 	adc.w	r3, r2, r3
 80069ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80069ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80069f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80069f4:	f7f9 fbfc 	bl	80001f0 <__aeabi_uldivmod>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4b61      	ldr	r3, [pc, #388]	@ (8006b84 <UART_SetConfig+0x2d4>)
 80069fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	011c      	lsls	r4, r3, #4
 8006a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a18:	4642      	mov	r2, r8
 8006a1a:	464b      	mov	r3, r9
 8006a1c:	1891      	adds	r1, r2, r2
 8006a1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006a20:	415b      	adcs	r3, r3
 8006a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a28:	4641      	mov	r1, r8
 8006a2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006a2e:	4649      	mov	r1, r9
 8006a30:	eb43 0b01 	adc.w	fp, r3, r1
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a48:	4692      	mov	sl, r2
 8006a4a:	469b      	mov	fp, r3
 8006a4c:	4643      	mov	r3, r8
 8006a4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006a52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a56:	464b      	mov	r3, r9
 8006a58:	eb4b 0303 	adc.w	r3, fp, r3
 8006a5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a74:	460b      	mov	r3, r1
 8006a76:	18db      	adds	r3, r3, r3
 8006a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	eb42 0303 	adc.w	r3, r2, r3
 8006a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a8a:	f7f9 fbb1 	bl	80001f0 <__aeabi_uldivmod>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4611      	mov	r1, r2
 8006a94:	4b3b      	ldr	r3, [pc, #236]	@ (8006b84 <UART_SetConfig+0x2d4>)
 8006a96:	fba3 2301 	umull	r2, r3, r3, r1
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	2264      	movs	r2, #100	@ 0x64
 8006a9e:	fb02 f303 	mul.w	r3, r2, r3
 8006aa2:	1acb      	subs	r3, r1, r3
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006aaa:	4b36      	ldr	r3, [pc, #216]	@ (8006b84 <UART_SetConfig+0x2d4>)
 8006aac:	fba3 2302 	umull	r2, r3, r3, r2
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ab8:	441c      	add	r4, r3
 8006aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ac4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ac8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006acc:	4642      	mov	r2, r8
 8006ace:	464b      	mov	r3, r9
 8006ad0:	1891      	adds	r1, r2, r2
 8006ad2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ad4:	415b      	adcs	r3, r3
 8006ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ad8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006adc:	4641      	mov	r1, r8
 8006ade:	1851      	adds	r1, r2, r1
 8006ae0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	414b      	adcs	r3, r1
 8006ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	f04f 0300 	mov.w	r3, #0
 8006af0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006af4:	4659      	mov	r1, fp
 8006af6:	00cb      	lsls	r3, r1, #3
 8006af8:	4651      	mov	r1, sl
 8006afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006afe:	4651      	mov	r1, sl
 8006b00:	00ca      	lsls	r2, r1, #3
 8006b02:	4610      	mov	r0, r2
 8006b04:	4619      	mov	r1, r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	4642      	mov	r2, r8
 8006b0a:	189b      	adds	r3, r3, r2
 8006b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b10:	464b      	mov	r3, r9
 8006b12:	460a      	mov	r2, r1
 8006b14:	eb42 0303 	adc.w	r3, r2, r3
 8006b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b30:	460b      	mov	r3, r1
 8006b32:	18db      	adds	r3, r3, r3
 8006b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b36:	4613      	mov	r3, r2
 8006b38:	eb42 0303 	adc.w	r3, r2, r3
 8006b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b46:	f7f9 fb53 	bl	80001f0 <__aeabi_uldivmod>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b84 <UART_SetConfig+0x2d4>)
 8006b50:	fba3 1302 	umull	r1, r3, r3, r2
 8006b54:	095b      	lsrs	r3, r3, #5
 8006b56:	2164      	movs	r1, #100	@ 0x64
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	3332      	adds	r3, #50	@ 0x32
 8006b62:	4a08      	ldr	r2, [pc, #32]	@ (8006b84 <UART_SetConfig+0x2d4>)
 8006b64:	fba2 2303 	umull	r2, r3, r2, r3
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	f003 0207 	and.w	r2, r3, #7
 8006b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4422      	add	r2, r4
 8006b76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b78:	e106      	b.n	8006d88 <UART_SetConfig+0x4d8>
 8006b7a:	bf00      	nop
 8006b7c:	40011000 	.word	0x40011000
 8006b80:	40011400 	.word	0x40011400
 8006b84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b9a:	4642      	mov	r2, r8
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	1891      	adds	r1, r2, r2
 8006ba0:	6239      	str	r1, [r7, #32]
 8006ba2:	415b      	adcs	r3, r3
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ba6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006baa:	4641      	mov	r1, r8
 8006bac:	1854      	adds	r4, r2, r1
 8006bae:	4649      	mov	r1, r9
 8006bb0:	eb43 0501 	adc.w	r5, r3, r1
 8006bb4:	f04f 0200 	mov.w	r2, #0
 8006bb8:	f04f 0300 	mov.w	r3, #0
 8006bbc:	00eb      	lsls	r3, r5, #3
 8006bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bc2:	00e2      	lsls	r2, r4, #3
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	4643      	mov	r3, r8
 8006bca:	18e3      	adds	r3, r4, r3
 8006bcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	eb45 0303 	adc.w	r3, r5, r3
 8006bd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006be6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006bea:	f04f 0200 	mov.w	r2, #0
 8006bee:	f04f 0300 	mov.w	r3, #0
 8006bf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	008b      	lsls	r3, r1, #2
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c00:	4621      	mov	r1, r4
 8006c02:	008a      	lsls	r2, r1, #2
 8006c04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c08:	f7f9 faf2 	bl	80001f0 <__aeabi_uldivmod>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4b60      	ldr	r3, [pc, #384]	@ (8006d94 <UART_SetConfig+0x4e4>)
 8006c12:	fba3 2302 	umull	r2, r3, r3, r2
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	011c      	lsls	r4, r3, #4
 8006c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	464b      	mov	r3, r9
 8006c30:	1891      	adds	r1, r2, r2
 8006c32:	61b9      	str	r1, [r7, #24]
 8006c34:	415b      	adcs	r3, r3
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c3c:	4641      	mov	r1, r8
 8006c3e:	1851      	adds	r1, r2, r1
 8006c40:	6139      	str	r1, [r7, #16]
 8006c42:	4649      	mov	r1, r9
 8006c44:	414b      	adcs	r3, r1
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c54:	4659      	mov	r1, fp
 8006c56:	00cb      	lsls	r3, r1, #3
 8006c58:	4651      	mov	r1, sl
 8006c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c5e:	4651      	mov	r1, sl
 8006c60:	00ca      	lsls	r2, r1, #3
 8006c62:	4610      	mov	r0, r2
 8006c64:	4619      	mov	r1, r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	4642      	mov	r2, r8
 8006c6a:	189b      	adds	r3, r3, r2
 8006c6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c70:	464b      	mov	r3, r9
 8006c72:	460a      	mov	r2, r1
 8006c74:	eb42 0303 	adc.w	r3, r2, r3
 8006c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c94:	4649      	mov	r1, r9
 8006c96:	008b      	lsls	r3, r1, #2
 8006c98:	4641      	mov	r1, r8
 8006c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	008a      	lsls	r2, r1, #2
 8006ca2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ca6:	f7f9 faa3 	bl	80001f0 <__aeabi_uldivmod>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4b38      	ldr	r3, [pc, #224]	@ (8006d94 <UART_SetConfig+0x4e4>)
 8006cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8006cb6:	095b      	lsrs	r3, r3, #5
 8006cb8:	2264      	movs	r2, #100	@ 0x64
 8006cba:	fb02 f303 	mul.w	r3, r2, r3
 8006cbe:	1acb      	subs	r3, r1, r3
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	3332      	adds	r3, #50	@ 0x32
 8006cc4:	4a33      	ldr	r2, [pc, #204]	@ (8006d94 <UART_SetConfig+0x4e4>)
 8006cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cd0:	441c      	add	r4, r3
 8006cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cda:	677a      	str	r2, [r7, #116]	@ 0x74
 8006cdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	1891      	adds	r1, r2, r2
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	415b      	adcs	r3, r3
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cf0:	4641      	mov	r1, r8
 8006cf2:	1851      	adds	r1, r2, r1
 8006cf4:	6039      	str	r1, [r7, #0]
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	414b      	adcs	r3, r1
 8006cfa:	607b      	str	r3, [r7, #4]
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d08:	4659      	mov	r1, fp
 8006d0a:	00cb      	lsls	r3, r1, #3
 8006d0c:	4651      	mov	r1, sl
 8006d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d12:	4651      	mov	r1, sl
 8006d14:	00ca      	lsls	r2, r1, #3
 8006d16:	4610      	mov	r0, r2
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4642      	mov	r2, r8
 8006d1e:	189b      	adds	r3, r3, r2
 8006d20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d22:	464b      	mov	r3, r9
 8006d24:	460a      	mov	r2, r1
 8006d26:	eb42 0303 	adc.w	r3, r2, r3
 8006d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d36:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	f04f 0300 	mov.w	r3, #0
 8006d40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d44:	4649      	mov	r1, r9
 8006d46:	008b      	lsls	r3, r1, #2
 8006d48:	4641      	mov	r1, r8
 8006d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d4e:	4641      	mov	r1, r8
 8006d50:	008a      	lsls	r2, r1, #2
 8006d52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d56:	f7f9 fa4b 	bl	80001f0 <__aeabi_uldivmod>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <UART_SetConfig+0x4e4>)
 8006d60:	fba3 1302 	umull	r1, r3, r3, r2
 8006d64:	095b      	lsrs	r3, r3, #5
 8006d66:	2164      	movs	r1, #100	@ 0x64
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	3332      	adds	r3, #50	@ 0x32
 8006d72:	4a08      	ldr	r2, [pc, #32]	@ (8006d94 <UART_SetConfig+0x4e4>)
 8006d74:	fba2 2303 	umull	r2, r3, r2, r3
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	f003 020f 	and.w	r2, r3, #15
 8006d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4422      	add	r2, r4
 8006d86:	609a      	str	r2, [r3, #8]
}
 8006d88:	bf00      	nop
 8006d8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d94:	51eb851f 	.word	0x51eb851f

08006d98 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d123      	bne.n	8006df2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006db2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	6851      	ldr	r1, [r2, #4]
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	6892      	ldr	r2, [r2, #8]
 8006dbe:	4311      	orrs	r1, r2
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	68d2      	ldr	r2, [r2, #12]
 8006dc4:	4311      	orrs	r1, r2
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	6912      	ldr	r2, [r2, #16]
 8006dca:	4311      	orrs	r1, r2
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	6952      	ldr	r2, [r2, #20]
 8006dd0:	4311      	orrs	r1, r2
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	6992      	ldr	r2, [r2, #24]
 8006dd6:	4311      	orrs	r1, r2
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	69d2      	ldr	r2, [r2, #28]
 8006ddc:	4311      	orrs	r1, r2
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	6a12      	ldr	r2, [r2, #32]
 8006de2:	4311      	orrs	r1, r2
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006de8:	430a      	orrs	r2, r1
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	e028      	b.n	8006e44 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	69d9      	ldr	r1, [r3, #28]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	4319      	orrs	r1, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006e18:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	6851      	ldr	r1, [r2, #4]
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	6892      	ldr	r2, [r2, #8]
 8006e24:	4311      	orrs	r1, r2
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	68d2      	ldr	r2, [r2, #12]
 8006e2a:	4311      	orrs	r1, r2
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	6912      	ldr	r2, [r2, #16]
 8006e30:	4311      	orrs	r1, r2
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	6952      	ldr	r2, [r2, #20]
 8006e36:	4311      	orrs	r1, r2
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	6992      	ldr	r2, [r2, #24]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d128      	bne.n	8006eb6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	1e59      	subs	r1, r3, #1
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	4319      	orrs	r1, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	4319      	orrs	r1, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	031b      	lsls	r3, r3, #12
 8006e8e:	4319      	orrs	r1, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	041b      	lsls	r3, r3, #16
 8006e98:	4319      	orrs	r1, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	051b      	lsls	r3, r3, #20
 8006ea2:	4319      	orrs	r1, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	061b      	lsls	r3, r3, #24
 8006eac:	430b      	orrs	r3, r1
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	609a      	str	r2, [r3, #8]
 8006eb4:	e02f      	b.n	8006f16 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ebe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	68d2      	ldr	r2, [r2, #12]
 8006ec6:	3a01      	subs	r2, #1
 8006ec8:	0311      	lsls	r1, r2, #12
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	6952      	ldr	r2, [r2, #20]
 8006ece:	3a01      	subs	r2, #1
 8006ed0:	0512      	lsls	r2, r2, #20
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	1e59      	subs	r1, r3, #1
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	4319      	orrs	r1, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	4319      	orrs	r1, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	4319      	orrs	r1, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	061b      	lsls	r3, r3, #24
 8006f0e:	430b      	orrs	r3, r1
 8006f10:	431a      	orrs	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f24:	b084      	sub	sp, #16
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	f107 001c 	add.w	r0, r7, #28
 8006f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d123      	bne.n	8006f86 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d105      	bne.n	8006f7a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9dc 	bl	8007338 <USB_CoreReset>
 8006f80:	4603      	mov	r3, r0
 8006f82:	73fb      	strb	r3, [r7, #15]
 8006f84:	e01b      	b.n	8006fbe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f9d0 	bl	8007338 <USB_CoreReset>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	639a      	str	r2, [r3, #56]	@ 0x38
 8006fb0:	e005      	b.n	8006fbe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fbe:	7fbb      	ldrb	r3, [r7, #30]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d10b      	bne.n	8006fdc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f043 0206 	orr.w	r2, r3, #6
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f043 0220 	orr.w	r2, r3, #32
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fe8:	b004      	add	sp, #16
 8006fea:	4770      	bx	lr

08006fec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f043 0201 	orr.w	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f023 0201 	bic.w	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800704c:	78fb      	ldrb	r3, [r7, #3]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d115      	bne.n	800707e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800705e:	200a      	movs	r0, #10
 8007060:	f7fa fb52 	bl	8001708 <HAL_Delay>
      ms += 10U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	330a      	adds	r3, #10
 8007068:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f956 	bl	800731c <USB_GetMode>
 8007070:	4603      	mov	r3, r0
 8007072:	2b01      	cmp	r3, #1
 8007074:	d01e      	beq.n	80070b4 <USB_SetCurrentMode+0x84>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2bc7      	cmp	r3, #199	@ 0xc7
 800707a:	d9f0      	bls.n	800705e <USB_SetCurrentMode+0x2e>
 800707c:	e01a      	b.n	80070b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d115      	bne.n	80070b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007090:	200a      	movs	r0, #10
 8007092:	f7fa fb39 	bl	8001708 <HAL_Delay>
      ms += 10U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	330a      	adds	r3, #10
 800709a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f93d 	bl	800731c <USB_GetMode>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <USB_SetCurrentMode+0x84>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80070ac:	d9f0      	bls.n	8007090 <USB_SetCurrentMode+0x60>
 80070ae:	e001      	b.n	80070b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e005      	b.n	80070c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80070b8:	d101      	bne.n	80070be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070e2:	d901      	bls.n	80070e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e01b      	b.n	8007120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	daf2      	bge.n	80070d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	019b      	lsls	r3, r3, #6
 80070f8:	f043 0220 	orr.w	r2, r3, #32
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800710c:	d901      	bls.n	8007112 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e006      	b.n	8007120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b20      	cmp	r3, #32
 800711c:	d0f0      	beq.n	8007100 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007144:	d901      	bls.n	800714a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e018      	b.n	800717c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	daf2      	bge.n	8007138 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2210      	movs	r2, #16
 800715a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3301      	adds	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007168:	d901      	bls.n	800716e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e006      	b.n	800717c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f003 0310 	and.w	r3, r3, #16
 8007176:	2b10      	cmp	r3, #16
 8007178:	d0f0      	beq.n	800715c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007188:	b480      	push	{r7}
 800718a:	b089      	sub	sp, #36	@ 0x24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4611      	mov	r1, r2
 8007194:	461a      	mov	r2, r3
 8007196:	460b      	mov	r3, r1
 8007198:	71fb      	strb	r3, [r7, #7]
 800719a:	4613      	mov	r3, r2
 800719c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d123      	bne.n	80071f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071ae:	88bb      	ldrh	r3, [r7, #4]
 80071b0:	3303      	adds	r3, #3
 80071b2:	089b      	lsrs	r3, r3, #2
 80071b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071b6:	2300      	movs	r3, #0
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	e018      	b.n	80071ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	031a      	lsls	r2, r3, #12
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071c8:	461a      	mov	r2, r3
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	3301      	adds	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	3301      	adds	r3, #1
 80071da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	3301      	adds	r3, #1
 80071e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	3301      	adds	r3, #1
 80071e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	3301      	adds	r3, #1
 80071ec:	61bb      	str	r3, [r7, #24]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d3e2      	bcc.n	80071bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3724      	adds	r7, #36	@ 0x24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007204:	b480      	push	{r7}
 8007206:	b08b      	sub	sp, #44	@ 0x2c
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	089b      	lsrs	r3, r3, #2
 800721e:	b29b      	uxth	r3, r3
 8007220:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007222:	88fb      	ldrh	r3, [r7, #6]
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800722a:	2300      	movs	r3, #0
 800722c:	623b      	str	r3, [r7, #32]
 800722e:	e014      	b.n	800725a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	601a      	str	r2, [r3, #0]
    pDest++;
 800723c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723e:	3301      	adds	r3, #1
 8007240:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	3301      	adds	r3, #1
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	3301      	adds	r3, #1
 800724c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	3301      	adds	r3, #1
 8007252:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	3301      	adds	r3, #1
 8007258:	623b      	str	r3, [r7, #32]
 800725a:	6a3a      	ldr	r2, [r7, #32]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	429a      	cmp	r2, r3
 8007260:	d3e6      	bcc.n	8007230 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007262:	8bfb      	ldrh	r3, [r7, #30]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01e      	beq.n	80072a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007272:	461a      	mov	r2, r3
 8007274:	f107 0310 	add.w	r3, r7, #16
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
 8007288:	b2da      	uxtb	r2, r3
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	701a      	strb	r2, [r3, #0]
      i++;
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	3301      	adds	r3, #1
 8007292:	623b      	str	r3, [r7, #32]
      pDest++;
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	3301      	adds	r3, #1
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800729a:	8bfb      	ldrh	r3, [r7, #30]
 800729c:	3b01      	subs	r3, #1
 800729e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072a0:	8bfb      	ldrh	r3, [r7, #30]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1ea      	bne.n	800727c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	372c      	adds	r7, #44	@ 0x2c
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	4013      	ands	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072cc:	68fb      	ldr	r3, [r7, #12]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	4013      	ands	r3, r2
 800730c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800730e:	68bb      	ldr	r3, [r7, #8]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	f003 0301 	and.w	r3, r3, #1
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007350:	d901      	bls.n	8007356 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e01b      	b.n	800738e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	daf2      	bge.n	8007344 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f043 0201 	orr.w	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800737a:	d901      	bls.n	8007380 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e006      	b.n	800738e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b01      	cmp	r3, #1
 800738a:	d0f0      	beq.n	800736e <USB_CoreReset+0x36>

  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
	...

0800739c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800739c:	b084      	sub	sp, #16
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80073aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073bc:	461a      	mov	r2, r3
 80073be:	2300      	movs	r3, #0
 80073c0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073de:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d119      	bne.n	8007426 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80073f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d10a      	bne.n	8007410 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007408:	f043 0304 	orr.w	r3, r3, #4
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	e014      	b.n	800743a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800741e:	f023 0304 	bic.w	r3, r3, #4
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	e009      	b.n	800743a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007434:	f023 0304 	bic.w	r3, r3, #4
 8007438:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800743a:	2110      	movs	r1, #16
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff fe43 	bl	80070c8 <USB_FlushTxFifo>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff fe6d 	bl	800712c <USB_FlushRxFifo>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800745c:	2300      	movs	r3, #0
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	e015      	b.n	800748e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4413      	add	r3, r2
 800746a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800746e:	461a      	mov	r2, r3
 8007470:	f04f 33ff 	mov.w	r3, #4294967295
 8007474:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4413      	add	r3, r2
 800747e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007482:	461a      	mov	r2, r3
 8007484:	2300      	movs	r3, #0
 8007486:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	3301      	adds	r3, #1
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007492:	461a      	mov	r2, r3
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	4293      	cmp	r3, r2
 8007498:	d3e3      	bcc.n	8007462 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f04f 32ff 	mov.w	r2, #4294967295
 80074a6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a18      	ldr	r2, [pc, #96]	@ (800750c <USB_HostInit+0x170>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d10b      	bne.n	80074c8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074b6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a15      	ldr	r2, [pc, #84]	@ (8007510 <USB_HostInit+0x174>)
 80074bc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a14      	ldr	r2, [pc, #80]	@ (8007514 <USB_HostInit+0x178>)
 80074c2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80074c6:	e009      	b.n	80074dc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2280      	movs	r2, #128	@ 0x80
 80074cc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a11      	ldr	r2, [pc, #68]	@ (8007518 <USB_HostInit+0x17c>)
 80074d2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a11      	ldr	r2, [pc, #68]	@ (800751c <USB_HostInit+0x180>)
 80074d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d105      	bne.n	80074f0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	f043 0210 	orr.w	r2, r3, #16
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699a      	ldr	r2, [r3, #24]
 80074f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007520 <USB_HostInit+0x184>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007508:	b004      	add	sp, #16
 800750a:	4770      	bx	lr
 800750c:	40040000 	.word	0x40040000
 8007510:	01000200 	.word	0x01000200
 8007514:	00e00300 	.word	0x00e00300
 8007518:	00600080 	.word	0x00600080
 800751c:	004000e0 	.word	0x004000e0
 8007520:	a3200008 	.word	0xa3200008

08007524 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007542:	f023 0303 	bic.w	r3, r3, #3
 8007546:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	68f9      	ldr	r1, [r7, #12]
 8007558:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800755c:	4313      	orrs	r3, r2
 800755e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d107      	bne.n	8007576 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800756c:	461a      	mov	r2, r3
 800756e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007572:	6053      	str	r3, [r2, #4]
 8007574:	e00c      	b.n	8007590 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	2b02      	cmp	r3, #2
 800757a:	d107      	bne.n	800758c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007582:	461a      	mov	r2, r3
 8007584:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007588:	6053      	str	r3, [r2, #4]
 800758a:	e001      	b.n	8007590 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b084      	sub	sp, #16
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80075be:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80075ce:	2064      	movs	r0, #100	@ 0x64
 80075d0:	f7fa f89a 	bl	8001708 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80075e2:	200a      	movs	r0, #10
 80075e4:	f7fa f890 	bl	8001708 <HAL_Delay>

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	460b      	mov	r3, r1
 80075fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007616:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <USB_DriveVbus+0x44>
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d106      	bne.n	8007636 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007630:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007634:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800763c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007640:	d109      	bne.n	8007656 <USB_DriveVbus+0x64>
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d106      	bne.n	8007656 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007650:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007654:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	0c5b      	lsrs	r3, r3, #17
 8007682:	f003 0303 	and.w	r3, r3, #3
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	b29b      	uxth	r3, r3
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	4608      	mov	r0, r1
 80076be:	4611      	mov	r1, r2
 80076c0:	461a      	mov	r2, r3
 80076c2:	4603      	mov	r3, r0
 80076c4:	70fb      	strb	r3, [r7, #3]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70bb      	strb	r3, [r7, #2]
 80076ca:	4613      	mov	r3, r2
 80076cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e2:	461a      	mov	r2, r3
 80076e4:	f04f 33ff 	mov.w	r3, #4294967295
 80076e8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80076ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d87c      	bhi.n	80077ec <USB_HC_Init+0x138>
 80076f2:	a201      	add	r2, pc, #4	@ (adr r2, 80076f8 <USB_HC_Init+0x44>)
 80076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f8:	08007709 	.word	0x08007709
 80076fc:	080077af 	.word	0x080077af
 8007700:	08007709 	.word	0x08007709
 8007704:	08007771 	.word	0x08007771
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	4413      	add	r3, r2
 8007710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007714:	461a      	mov	r2, r3
 8007716:	f240 439d 	movw	r3, #1181	@ 0x49d
 800771a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800771c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007720:	2b00      	cmp	r3, #0
 8007722:	da10      	bge.n	8007746 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	4413      	add	r3, r2
 800772c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	78fa      	ldrb	r2, [r7, #3]
 8007734:	0151      	lsls	r1, r2, #5
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	440a      	add	r2, r1
 800773a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800773e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007742:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007744:	e055      	b.n	80077f2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a6f      	ldr	r2, [pc, #444]	@ (8007908 <USB_HC_Init+0x254>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d151      	bne.n	80077f2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	4413      	add	r3, r2
 8007756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	78fa      	ldrb	r2, [r7, #3]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	440a      	add	r2, r1
 8007764:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007768:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800776c:	60d3      	str	r3, [r2, #12]
      break;
 800776e:	e040      	b.n	80077f2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800777c:	461a      	mov	r2, r3
 800777e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007782:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007784:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007788:	2b00      	cmp	r3, #0
 800778a:	da34      	bge.n	80077f6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4413      	add	r3, r2
 8007794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80077ac:	e023      	b.n	80077f6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ba:	461a      	mov	r2, r3
 80077bc:	f240 2325 	movw	r3, #549	@ 0x225
 80077c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80077c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da17      	bge.n	80077fa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	78fa      	ldrb	r2, [r7, #3]
 80077da:	0151      	lsls	r1, r2, #5
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	440a      	add	r2, r1
 80077e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077e4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80077e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80077ea:	e006      	b.n	80077fa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	77fb      	strb	r3, [r7, #31]
      break;
 80077f0:	e004      	b.n	80077fc <USB_HC_Init+0x148>
      break;
 80077f2:	bf00      	nop
 80077f4:	e002      	b.n	80077fc <USB_HC_Init+0x148>
      break;
 80077f6:	bf00      	nop
 80077f8:	e000      	b.n	80077fc <USB_HC_Init+0x148>
      break;
 80077fa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80077fc:	78fb      	ldrb	r3, [r7, #3]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	4413      	add	r3, r2
 8007804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007808:	461a      	mov	r2, r3
 800780a:	2300      	movs	r3, #0
 800780c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	4413      	add	r3, r2
 8007816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	78fa      	ldrb	r2, [r7, #3]
 800781e:	0151      	lsls	r1, r2, #5
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	440a      	add	r2, r1
 8007824:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	78fb      	ldrb	r3, [r7, #3]
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	2101      	movs	r1, #1
 800783e:	fa01 f303 	lsl.w	r3, r1, r3
 8007842:	6939      	ldr	r1, [r7, #16]
 8007844:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007848:	4313      	orrs	r3, r2
 800784a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007858:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800785c:	2b00      	cmp	r3, #0
 800785e:	da03      	bge.n	8007868 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007860:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	e001      	b.n	800786c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff fef9 	bl	8007664 <USB_GetHostSpeed>
 8007872:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007874:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007878:	2b02      	cmp	r3, #2
 800787a:	d106      	bne.n	800788a <USB_HC_Init+0x1d6>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d003      	beq.n	800788a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007882:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	e001      	b.n	800788e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800788e:	787b      	ldrb	r3, [r7, #1]
 8007890:	059b      	lsls	r3, r3, #22
 8007892:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007896:	78bb      	ldrb	r3, [r7, #2]
 8007898:	02db      	lsls	r3, r3, #11
 800789a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800789e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80078a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078a4:	049b      	lsls	r3, r3, #18
 80078a6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80078aa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80078ac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80078ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80078b2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	431a      	orrs	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078bc:	78fa      	ldrb	r2, [r7, #3]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80078c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078cc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80078ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d003      	beq.n	80078de <USB_HC_Init+0x22a>
 80078d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d10f      	bne.n	80078fe <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	78fa      	ldrb	r2, [r7, #3]
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80078fc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80078fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3720      	adds	r7, #32
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40040000 	.word	0x40040000

0800790c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08c      	sub	sp, #48	@ 0x30
 8007910:	af02      	add	r7, sp, #8
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007924:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007928:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4a5d      	ldr	r2, [pc, #372]	@ (8007aa4 <USB_HC_StartXfer+0x198>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d12f      	bne.n	8007992 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007932:	79fb      	ldrb	r3, [r7, #7]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d11c      	bne.n	8007972 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	7c9b      	ldrb	r3, [r3, #18]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <USB_HC_StartXfer+0x3c>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	7c9b      	ldrb	r3, [r3, #18]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d124      	bne.n	8007992 <USB_HC_StartXfer+0x86>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	799b      	ldrb	r3, [r3, #6]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d120      	bne.n	8007992 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	4413      	add	r3, r2
 8007958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	0151      	lsls	r1, r2, #5
 8007962:	6a3a      	ldr	r2, [r7, #32]
 8007964:	440a      	add	r2, r1
 8007966:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800796a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800796e:	60d3      	str	r3, [r2, #12]
 8007970:	e00f      	b.n	8007992 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	791b      	ldrb	r3, [r3, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10b      	bne.n	8007992 <USB_HC_StartXfer+0x86>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	795b      	ldrb	r3, [r3, #5]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d107      	bne.n	8007992 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	4619      	mov	r1, r3
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fb6b 	bl	8008064 <USB_DoPing>
        return HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	e232      	b.n	8007df8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	799b      	ldrb	r3, [r3, #6]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d158      	bne.n	8007a4c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800799a:	2301      	movs	r3, #1
 800799c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	78db      	ldrb	r3, [r3, #3]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d007      	beq.n	80079b6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	8a92      	ldrh	r2, [r2, #20]
 80079ac:	fb03 f202 	mul.w	r2, r3, r2
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	61da      	str	r2, [r3, #28]
 80079b4:	e07c      	b.n	8007ab0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	7c9b      	ldrb	r3, [r3, #18]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d130      	bne.n	8007a20 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	2bbc      	cmp	r3, #188	@ 0xbc
 80079c4:	d918      	bls.n	80079f8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	8a9b      	ldrh	r3, [r3, #20]
 80079ca:	461a      	mov	r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d003      	beq.n	80079e8 <USB_HC_StartXfer+0xdc>
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d103      	bne.n	80079f0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2202      	movs	r2, #2
 80079ec:	60da      	str	r2, [r3, #12]
 80079ee:	e05f      	b.n	8007ab0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2201      	movs	r2, #1
 80079f4:	60da      	str	r2, [r3, #12]
 80079f6:	e05b      	b.n	8007ab0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	6a1a      	ldr	r2, [r3, #32]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d007      	beq.n	8007a18 <USB_HC_StartXfer+0x10c>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d003      	beq.n	8007a18 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2204      	movs	r2, #4
 8007a14:	60da      	str	r2, [r3, #12]
 8007a16:	e04b      	b.n	8007ab0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2203      	movs	r2, #3
 8007a1c:	60da      	str	r2, [r3, #12]
 8007a1e:	e047      	b.n	8007ab0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d10d      	bne.n	8007a42 <USB_HC_StartXfer+0x136>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	8a92      	ldrh	r2, [r2, #20]
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d907      	bls.n	8007a42 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	8a92      	ldrh	r2, [r2, #20]
 8007a38:	fb03 f202 	mul.w	r2, r3, r2
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	61da      	str	r2, [r3, #28]
 8007a40:	e036      	b.n	8007ab0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	6a1a      	ldr	r2, [r3, #32]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	61da      	str	r2, [r3, #28]
 8007a4a:	e031      	b.n	8007ab0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d018      	beq.n	8007a86 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	8a92      	ldrh	r2, [r2, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	8a92      	ldrh	r2, [r2, #20]
 8007a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a68:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007a6a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007a6c:	8b7b      	ldrh	r3, [r7, #26]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d90b      	bls.n	8007a8a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007a72:	8b7b      	ldrh	r3, [r7, #26]
 8007a74:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	8a92      	ldrh	r2, [r2, #20]
 8007a7c:	fb03 f202 	mul.w	r2, r3, r2
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	61da      	str	r2, [r3, #28]
 8007a84:	e001      	b.n	8007a8a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007a86:	2301      	movs	r3, #1
 8007a88:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	78db      	ldrb	r3, [r3, #3]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	8a92      	ldrh	r2, [r2, #20]
 8007a98:	fb03 f202 	mul.w	r2, r3, r2
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	61da      	str	r2, [r3, #28]
 8007aa0:	e006      	b.n	8007ab0 <USB_HC_StartXfer+0x1a4>
 8007aa2:	bf00      	nop
 8007aa4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	6a1a      	ldr	r2, [r3, #32]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ab8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007aba:	04d9      	lsls	r1, r3, #19
 8007abc:	4ba3      	ldr	r3, [pc, #652]	@ (8007d4c <USB_HC_StartXfer+0x440>)
 8007abe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ac0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	7d9b      	ldrb	r3, [r3, #22]
 8007ac6:	075b      	lsls	r3, r3, #29
 8007ac8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007acc:	69f9      	ldr	r1, [r7, #28]
 8007ace:	0148      	lsls	r0, r1, #5
 8007ad0:	6a39      	ldr	r1, [r7, #32]
 8007ad2:	4401      	add	r1, r0
 8007ad4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ad8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ada:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d009      	beq.n	8007af6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	6999      	ldr	r1, [r3, #24]
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af2:	460a      	mov	r2, r1
 8007af4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bf0c      	ite	eq
 8007b06:	2301      	moveq	r3, #1
 8007b08:	2300      	movne	r3, #0
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	6a3a      	ldr	r2, [r7, #32]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b2c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	7e7b      	ldrb	r3, [r7, #25]
 8007b3e:	075b      	lsls	r3, r3, #29
 8007b40:	69f9      	ldr	r1, [r7, #28]
 8007b42:	0148      	lsls	r0, r1, #5
 8007b44:	6a39      	ldr	r1, [r7, #32]
 8007b46:	4401      	add	r1, r0
 8007b48:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	799b      	ldrb	r3, [r3, #6]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	f040 80c3 	bne.w	8007ce0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	7c5b      	ldrb	r3, [r3, #17]
 8007b5e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b64:	4313      	orrs	r3, r2
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	0151      	lsls	r1, r2, #5
 8007b6a:	6a3a      	ldr	r2, [r7, #32]
 8007b6c:	440a      	add	r2, r1
 8007b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b76:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	0151      	lsls	r1, r2, #5
 8007b8a:	6a3a      	ldr	r2, [r7, #32]
 8007b8c:	440a      	add	r2, r1
 8007b8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b92:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007b96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	79db      	ldrb	r3, [r3, #7]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d123      	bne.n	8007be8 <USB_HC_StartXfer+0x2dc>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	78db      	ldrb	r3, [r3, #3]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d11f      	bne.n	8007be8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	0151      	lsls	r1, r2, #5
 8007bba:	6a3a      	ldr	r2, [r7, #32]
 8007bbc:	440a      	add	r2, r1
 8007bbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bc6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	0151      	lsls	r1, r2, #5
 8007bda:	6a3a      	ldr	r2, [r7, #32]
 8007bdc:	440a      	add	r2, r1
 8007bde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007be6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	7c9b      	ldrb	r3, [r3, #18]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d003      	beq.n	8007bf8 <USB_HC_StartXfer+0x2ec>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	7c9b      	ldrb	r3, [r3, #18]
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d117      	bne.n	8007c28 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d113      	bne.n	8007c28 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	78db      	ldrb	r3, [r3, #3]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d10f      	bne.n	8007c28 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c26:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	7c9b      	ldrb	r3, [r3, #18]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d162      	bne.n	8007cf6 <USB_HC_StartXfer+0x3ea>
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d15e      	bne.n	8007cf6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d858      	bhi.n	8007cf4 <USB_HC_StartXfer+0x3e8>
 8007c42:	a201      	add	r2, pc, #4	@ (adr r2, 8007c48 <USB_HC_StartXfer+0x33c>)
 8007c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c48:	08007c59 	.word	0x08007c59
 8007c4c:	08007c7b 	.word	0x08007c7b
 8007c50:	08007c9d 	.word	0x08007c9d
 8007c54:	08007cbf 	.word	0x08007cbf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	0151      	lsls	r1, r2, #5
 8007c6a:	6a3a      	ldr	r2, [r7, #32]
 8007c6c:	440a      	add	r2, r1
 8007c6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c76:	6053      	str	r3, [r2, #4]
          break;
 8007c78:	e03d      	b.n	8007cf6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	0151      	lsls	r1, r2, #5
 8007c8c:	6a3a      	ldr	r2, [r7, #32]
 8007c8e:	440a      	add	r2, r1
 8007c90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c94:	f043 030e 	orr.w	r3, r3, #14
 8007c98:	6053      	str	r3, [r2, #4]
          break;
 8007c9a:	e02c      	b.n	8007cf6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	69fa      	ldr	r2, [r7, #28]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	6a3a      	ldr	r2, [r7, #32]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cba:	6053      	str	r3, [r2, #4]
          break;
 8007cbc:	e01b      	b.n	8007cf6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	0151      	lsls	r1, r2, #5
 8007cd0:	6a3a      	ldr	r2, [r7, #32]
 8007cd2:	440a      	add	r2, r1
 8007cd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cdc:	6053      	str	r3, [r2, #4]
          break;
 8007cde:	e00a      	b.n	8007cf6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cec:	461a      	mov	r2, r3
 8007cee:	2300      	movs	r3, #0
 8007cf0:	6053      	str	r3, [r2, #4]
 8007cf2:	e000      	b.n	8007cf6 <USB_HC_StartXfer+0x3ea>
          break;
 8007cf4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d0c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	78db      	ldrb	r3, [r3, #3]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d004      	beq.n	8007d20 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d1c:	613b      	str	r3, [r7, #16]
 8007d1e:	e003      	b.n	8007d28 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d26:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d2e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e055      	b.n	8007df8 <USB_HC_StartXfer+0x4ec>
 8007d4c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	78db      	ldrb	r3, [r3, #3]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d14e      	bne.n	8007df6 <USB_HC_StartXfer+0x4ea>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d04a      	beq.n	8007df6 <USB_HC_StartXfer+0x4ea>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	79db      	ldrb	r3, [r3, #7]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d146      	bne.n	8007df6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	7c9b      	ldrb	r3, [r3, #18]
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d831      	bhi.n	8007dd4 <USB_HC_StartXfer+0x4c8>
 8007d70:	a201      	add	r2, pc, #4	@ (adr r2, 8007d78 <USB_HC_StartXfer+0x46c>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007d89 	.word	0x08007d89
 8007d7c:	08007dad 	.word	0x08007dad
 8007d80:	08007d89 	.word	0x08007d89
 8007d84:	08007dad 	.word	0x08007dad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	3303      	adds	r3, #3
 8007d8e:	089b      	lsrs	r3, r3, #2
 8007d90:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007d92:	8afa      	ldrh	r2, [r7, #22]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d91c      	bls.n	8007dd8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	f043 0220 	orr.w	r2, r3, #32
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007daa:	e015      	b.n	8007dd8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	3303      	adds	r3, #3
 8007db2:	089b      	lsrs	r3, r3, #2
 8007db4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007db6:	8afa      	ldrh	r2, [r7, #22]
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d90a      	bls.n	8007ddc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007dd2:	e003      	b.n	8007ddc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007dd4:	bf00      	nop
 8007dd6:	e002      	b.n	8007dde <USB_HC_StartXfer+0x4d2>
        break;
 8007dd8:	bf00      	nop
 8007dda:	e000      	b.n	8007dde <USB_HC_StartXfer+0x4d2>
        break;
 8007ddc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6999      	ldr	r1, [r3, #24]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	785a      	ldrb	r2, [r3, #1]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2000      	movs	r0, #0
 8007dee:	9000      	str	r0, [sp, #0]
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff f9c9 	bl	8007188 <USB_WritePacket>
  }

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3728      	adds	r7, #40	@ 0x28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	b29b      	uxth	r3, r3
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b089      	sub	sp, #36	@ 0x24
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	0c9b      	lsrs	r3, r3, #18
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	0fdb      	lsrs	r3, r3, #31
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	0fdb      	lsrs	r3, r3, #31
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f003 0320 	and.w	r3, r3, #32
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	d10d      	bne.n	8007ea4 <USB_HC_Halt+0x82>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <USB_HC_Halt+0x82>
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d002      	beq.n	8007ea0 <USB_HC_Halt+0x7e>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d101      	bne.n	8007ea4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e0d8      	b.n	8008056 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <USB_HC_Halt+0x8e>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d173      	bne.n	8007f98 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	0151      	lsls	r1, r2, #5
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	440a      	add	r2, r1
 8007ec6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ece:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d14a      	bne.n	8007f72 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d133      	bne.n	8007f50 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	0151      	lsls	r1, r2, #5
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	440a      	add	r2, r1
 8007efe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f06:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	0151      	lsls	r1, r2, #5
 8007f1a:	69fa      	ldr	r2, [r7, #28]
 8007f1c:	440a      	add	r2, r1
 8007f1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f26:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f34:	d82e      	bhi.n	8007f94 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f4c:	d0ec      	beq.n	8007f28 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f4e:	e081      	b.n	8008054 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	0151      	lsls	r1, r2, #5
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	440a      	add	r2, r1
 8007f66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f6e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f70:	e070      	b.n	8008054 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	0151      	lsls	r1, r2, #5
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	440a      	add	r2, r1
 8007f88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f90:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f92:	e05f      	b.n	8008054 <USB_HC_Halt+0x232>
            break;
 8007f94:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f96:	e05d      	b.n	8008054 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fb6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d133      	bne.n	8008030 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	0151      	lsls	r1, r2, #5
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	440a      	add	r2, r1
 8007fde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fe2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fe6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008002:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008006:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	3301      	adds	r3, #1
 800800c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008014:	d81d      	bhi.n	8008052 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800802c:	d0ec      	beq.n	8008008 <USB_HC_Halt+0x1e6>
 800802e:	e011      	b.n	8008054 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	4413      	add	r3, r2
 8008038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	0151      	lsls	r1, r2, #5
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	440a      	add	r2, r1
 8008046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800804a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	e000      	b.n	8008054 <USB_HC_Halt+0x232>
          break;
 8008052:	bf00      	nop
    }
  }

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3724      	adds	r7, #36	@ 0x24
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008078:	2301      	movs	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	04da      	lsls	r2, r3, #19
 8008080:	4b15      	ldr	r3, [pc, #84]	@ (80080d8 <USB_DoPing+0x74>)
 8008082:	4013      	ands	r3, r2
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	0151      	lsls	r1, r2, #5
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	440a      	add	r2, r1
 800808c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008090:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008094:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	4413      	add	r3, r2
 800809e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080ac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080b4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c2:	461a      	mov	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	1ff80000 	.word	0x1ff80000

080080dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7fe ff8c 	bl	800700e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080f6:	2110      	movs	r1, #16
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7fe ffe5 	bl	80070c8 <USB_FlushTxFifo>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff f80f 	bl	800712c <USB_FlushRxFifo>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008118:	2300      	movs	r3, #0
 800811a:	61bb      	str	r3, [r7, #24]
 800811c:	e01f      	b.n	800815e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	4413      	add	r3, r2
 8008126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008134:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800813c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008144:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	4413      	add	r3, r2
 800814e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008152:	461a      	mov	r2, r3
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	3301      	adds	r3, #1
 800815c:	61bb      	str	r3, [r7, #24]
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	2b0f      	cmp	r3, #15
 8008162:	d9dc      	bls.n	800811e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008164:	2300      	movs	r3, #0
 8008166:	61bb      	str	r3, [r7, #24]
 8008168:	e034      	b.n	80081d4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008180:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008188:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008190:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	4413      	add	r3, r2
 800819a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800819e:	461a      	mov	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081b0:	d80c      	bhi.n	80081cc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081c8:	d0ec      	beq.n	80081a4 <USB_StopHost+0xc8>
 80081ca:	e000      	b.n	80081ce <USB_StopHost+0xf2>
        break;
 80081cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	3301      	adds	r3, #1
 80081d2:	61bb      	str	r3, [r7, #24]
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	2b0f      	cmp	r3, #15
 80081d8:	d9c7      	bls.n	800816a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081e0:	461a      	mov	r2, r3
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
 80081e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f04f 32ff 	mov.w	r2, #4294967295
 80081ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7fe fefb 	bl	8006fec <USB_EnableGlobalInt>

  return ret;
 80081f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3720      	adds	r7, #32
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008200:	b590      	push	{r4, r7, lr}
 8008202:	b089      	sub	sp, #36	@ 0x24
 8008204:	af04      	add	r7, sp, #16
 8008206:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008208:	2301      	movs	r3, #1
 800820a:	2202      	movs	r2, #2
 800820c:	2102      	movs	r1, #2
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fcd1 	bl	8008bb6 <USBH_FindInterface>
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	2bff      	cmp	r3, #255	@ 0xff
 800821c:	d002      	beq.n	8008224 <USBH_CDC_InterfaceInit+0x24>
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d901      	bls.n	8008228 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008224:	2302      	movs	r3, #2
 8008226:	e13d      	b.n	80084a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fca6 	bl	8008b7e <USBH_SelectInterface>
 8008232:	4603      	mov	r3, r0
 8008234:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800823c:	2302      	movs	r3, #2
 800823e:	e131      	b.n	80084a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008246:	2050      	movs	r0, #80	@ 0x50
 8008248:	f005 fd9e 	bl	800dd88 <malloc>
 800824c:	4603      	mov	r3, r0
 800824e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008260:	2302      	movs	r3, #2
 8008262:	e11f      	b.n	80084a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008264:	2250      	movs	r2, #80	@ 0x50
 8008266:	2100      	movs	r1, #0
 8008268:	68b8      	ldr	r0, [r7, #8]
 800826a:	f005 fe4b 	bl	800df04 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	211a      	movs	r1, #26
 8008274:	fb01 f303 	mul.w	r3, r1, r3
 8008278:	4413      	add	r3, r2
 800827a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	b25b      	sxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	da15      	bge.n	80082b2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	211a      	movs	r1, #26
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	4413      	add	r3, r2
 8008292:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008296:	781a      	ldrb	r2, [r3, #0]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	211a      	movs	r1, #26
 80082a2:	fb01 f303 	mul.w	r3, r1, r3
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80082ac:	881a      	ldrh	r2, [r3, #0]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f002 fa18 	bl	800a6ee <USBH_AllocPipe>
 80082be:	4603      	mov	r3, r0
 80082c0:	461a      	mov	r2, r3
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	7819      	ldrb	r1, [r3, #0]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	7858      	ldrb	r0, [r3, #1]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	8952      	ldrh	r2, [r2, #10]
 80082de:	9202      	str	r2, [sp, #8]
 80082e0:	2203      	movs	r2, #3
 80082e2:	9201      	str	r2, [sp, #4]
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	4623      	mov	r3, r4
 80082e8:	4602      	mov	r2, r0
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f002 f9d0 	bl	800a690 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2200      	movs	r2, #0
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f005 fcbf 	bl	800dc7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80082fe:	2300      	movs	r3, #0
 8008300:	2200      	movs	r2, #0
 8008302:	210a      	movs	r1, #10
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fc56 	bl	8008bb6 <USBH_FindInterface>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	2bff      	cmp	r3, #255	@ 0xff
 8008312:	d002      	beq.n	800831a <USBH_CDC_InterfaceInit+0x11a>
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d901      	bls.n	800831e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800831a:	2302      	movs	r3, #2
 800831c:	e0c2      	b.n	80084a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	211a      	movs	r1, #26
 8008324:	fb01 f303 	mul.w	r3, r1, r3
 8008328:	4413      	add	r3, r2
 800832a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	b25b      	sxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	da16      	bge.n	8008364 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	211a      	movs	r1, #26
 800833c:	fb01 f303 	mul.w	r3, r1, r3
 8008340:	4413      	add	r3, r2
 8008342:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	211a      	movs	r1, #26
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	4413      	add	r3, r2
 8008358:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800835c:	881a      	ldrh	r2, [r3, #0]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	835a      	strh	r2, [r3, #26]
 8008362:	e015      	b.n	8008390 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	211a      	movs	r1, #26
 800836a:	fb01 f303 	mul.w	r3, r1, r3
 800836e:	4413      	add	r3, r2
 8008370:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008374:	781a      	ldrb	r2, [r3, #0]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	211a      	movs	r1, #26
 8008380:	fb01 f303 	mul.w	r3, r1, r3
 8008384:	4413      	add	r3, r2
 8008386:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800838a:	881a      	ldrh	r2, [r3, #0]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	211a      	movs	r1, #26
 8008396:	fb01 f303 	mul.w	r3, r1, r3
 800839a:	4413      	add	r3, r2
 800839c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	b25b      	sxtb	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	da16      	bge.n	80083d6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	211a      	movs	r1, #26
 80083ae:	fb01 f303 	mul.w	r3, r1, r3
 80083b2:	4413      	add	r3, r2
 80083b4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80083b8:	781a      	ldrb	r2, [r3, #0]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	211a      	movs	r1, #26
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80083ce:	881a      	ldrh	r2, [r3, #0]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	835a      	strh	r2, [r3, #26]
 80083d4:	e015      	b.n	8008402 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	211a      	movs	r1, #26
 80083dc:	fb01 f303 	mul.w	r3, r1, r3
 80083e0:	4413      	add	r3, r2
 80083e2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80083e6:	781a      	ldrb	r2, [r3, #0]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	211a      	movs	r1, #26
 80083f2:	fb01 f303 	mul.w	r3, r1, r3
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80083fc:	881a      	ldrh	r2, [r3, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	7b9b      	ldrb	r3, [r3, #14]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f002 f970 	bl	800a6ee <USBH_AllocPipe>
 800840e:	4603      	mov	r3, r0
 8008410:	461a      	mov	r2, r3
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	7bdb      	ldrb	r3, [r3, #15]
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f002 f966 	bl	800a6ee <USBH_AllocPipe>
 8008422:	4603      	mov	r3, r0
 8008424:	461a      	mov	r2, r3
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	7b59      	ldrb	r1, [r3, #13]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	7b98      	ldrb	r0, [r3, #14]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	8b12      	ldrh	r2, [r2, #24]
 8008442:	9202      	str	r2, [sp, #8]
 8008444:	2202      	movs	r2, #2
 8008446:	9201      	str	r2, [sp, #4]
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	4623      	mov	r3, r4
 800844c:	4602      	mov	r2, r0
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f002 f91e 	bl	800a690 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	7b19      	ldrb	r1, [r3, #12]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	7bd8      	ldrb	r0, [r3, #15]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	8b52      	ldrh	r2, [r2, #26]
 800846c:	9202      	str	r2, [sp, #8]
 800846e:	2202      	movs	r2, #2
 8008470:	9201      	str	r2, [sp, #4]
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	4623      	mov	r3, r4
 8008476:	4602      	mov	r2, r0
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f002 f909 	bl	800a690 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	7b5b      	ldrb	r3, [r3, #13]
 800848a:	2200      	movs	r2, #0
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f005 fbf4 	bl	800dc7c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	7b1b      	ldrb	r3, [r3, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f005 fbed 	bl	800dc7c <USBH_LL_SetToggle>

  return USBH_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd90      	pop	{r4, r7, pc}

080084ac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00e      	beq.n	80084e4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f002 f8fe 	bl	800a6ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f002 f929 	bl	800a730 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	7b1b      	ldrb	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00e      	beq.n	800850a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	7b1b      	ldrb	r3, [r3, #12]
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f002 f8eb 	bl	800a6ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	7b1b      	ldrb	r3, [r3, #12]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f002 f916 	bl	800a730 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	7b5b      	ldrb	r3, [r3, #13]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00e      	beq.n	8008530 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	7b5b      	ldrb	r3, [r3, #13]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f002 f8d8 	bl	800a6ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	7b5b      	ldrb	r3, [r3, #13]
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f002 f903 	bl	800a730 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	4618      	mov	r0, r3
 8008546:	f005 fc27 	bl	800dd98 <free>
    phost->pActiveClass->pData = 0U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008550:	2200      	movs	r2, #0
 8008552:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	3340      	adds	r3, #64	@ 0x40
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f8b1 	bl	80086de <GetLineCoding>
 800857c:	4603      	mov	r3, r0
 800857e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008580:	7afb      	ldrb	r3, [r7, #11]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d105      	bne.n	8008592 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800858c:	2102      	movs	r1, #2
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008592:	7afb      	ldrb	r3, [r7, #11]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80085a4:	2301      	movs	r3, #1
 80085a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085b2:	69db      	ldr	r3, [r3, #28]
 80085b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d877      	bhi.n	80086b0 <USBH_CDC_Process+0x114>
 80085c0:	a201      	add	r2, pc, #4	@ (adr r2, 80085c8 <USBH_CDC_Process+0x2c>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085dd 	.word	0x080085dd
 80085cc:	080085e3 	.word	0x080085e3
 80085d0:	08008613 	.word	0x08008613
 80085d4:	08008687 	.word	0x08008687
 80085d8:	08008695 	.word	0x08008695
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
      break;
 80085e0:	e06d      	b.n	80086be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f897 	bl	800871c <SetLineCoding>
 80085ee:	4603      	mov	r3, r0
 80085f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d104      	bne.n	8008602 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008600:	e058      	b.n	80086b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d055      	beq.n	80086b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2204      	movs	r2, #4
 800860c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008610:	e050      	b.n	80086b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	3340      	adds	r3, #64	@ 0x40
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f860 	bl	80086de <GetLineCoding>
 800861e:	4603      	mov	r3, r0
 8008620:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d126      	bne.n	8008676 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800863a:	791b      	ldrb	r3, [r3, #4]
 800863c:	429a      	cmp	r2, r3
 800863e:	d13b      	bne.n	80086b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800864a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800864c:	429a      	cmp	r2, r3
 800864e:	d133      	bne.n	80086b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800865a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800865c:	429a      	cmp	r2, r3
 800865e:	d12b      	bne.n	80086b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008668:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800866a:	429a      	cmp	r2, r3
 800866c:	d124      	bne.n	80086b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f982 	bl	8008978 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008674:	e020      	b.n	80086b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d01d      	beq.n	80086b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2204      	movs	r2, #4
 8008680:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008684:	e018      	b.n	80086b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f867 	bl	800875a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f8f6 	bl	800887e <CDC_ProcessReception>
      break;
 8008692:	e014      	b.n	80086be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008694:	2100      	movs	r1, #0
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 f984 	bl	80099a4 <USBH_ClrFeature>
 800869c:	4603      	mov	r3, r0
 800869e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10a      	bne.n	80086bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80086ae:	e005      	b.n	80086bc <USBH_CDC_Process+0x120>

    default:
      break;
 80086b0:	bf00      	nop
 80086b2:	e004      	b.n	80086be <USBH_CDC_Process+0x122>
      break;
 80086b4:	bf00      	nop
 80086b6:	e002      	b.n	80086be <USBH_CDC_Process+0x122>
      break;
 80086b8:	bf00      	nop
 80086ba:	e000      	b.n	80086be <USBH_CDC_Process+0x122>
      break;
 80086bc:	bf00      	nop

  }

  return status;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	22a1      	movs	r2, #161	@ 0xa1
 80086ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2221      	movs	r2, #33	@ 0x21
 80086f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2207      	movs	r2, #7
 8008704:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2207      	movs	r2, #7
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 fc7e 	bl	800a00e <USBH_CtlReq>
 8008712:	4603      	mov	r3, r0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2221      	movs	r2, #33	@ 0x21
 800872a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2207      	movs	r2, #7
 8008742:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	2207      	movs	r2, #7
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f001 fc5f 	bl	800a00e <USBH_CtlReq>
 8008750:	4603      	mov	r3, r0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b086      	sub	sp, #24
 800875e:	af02      	add	r7, sp, #8
 8008760:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800876c:	2300      	movs	r3, #0
 800876e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008776:	2b01      	cmp	r3, #1
 8008778:	d002      	beq.n	8008780 <CDC_ProcessTransmission+0x26>
 800877a:	2b02      	cmp	r3, #2
 800877c:	d023      	beq.n	80087c6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800877e:	e07a      	b.n	8008876 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	8b12      	ldrh	r2, [r2, #24]
 8008788:	4293      	cmp	r3, r2
 800878a:	d90b      	bls.n	80087a4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	69d9      	ldr	r1, [r3, #28]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	8b1a      	ldrh	r2, [r3, #24]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	7b5b      	ldrb	r3, [r3, #13]
 8008798:	2001      	movs	r0, #1
 800879a:	9000      	str	r0, [sp, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 ff34 	bl	800a60a <USBH_BulkSendData>
 80087a2:	e00b      	b.n	80087bc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	7b5b      	ldrb	r3, [r3, #13]
 80087b2:	2001      	movs	r0, #1
 80087b4:	9000      	str	r0, [sp, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f001 ff27 	bl	800a60a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80087c4:	e057      	b.n	8008876 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	7b5b      	ldrb	r3, [r3, #13]
 80087ca:	4619      	mov	r1, r3
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f005 fa2b 	bl	800dc28 <USBH_LL_GetURBState>
 80087d2:	4603      	mov	r3, r0
 80087d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80087d6:	7afb      	ldrb	r3, [r7, #11]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d136      	bne.n	800884a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	8b12      	ldrh	r2, [r2, #24]
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d90e      	bls.n	8008806 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	8b12      	ldrh	r2, [r2, #24]
 80087f0:	1a9a      	subs	r2, r3, r2
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	8b12      	ldrh	r2, [r2, #24]
 80087fe:	441a      	add	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	61da      	str	r2, [r3, #28]
 8008804:	e002      	b.n	800880c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	d004      	beq.n	800881e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800881c:	e006      	b.n	800882c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f892 	bl	8008950 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2204      	movs	r2, #4
 8008830:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008840:	2300      	movs	r3, #0
 8008842:	2200      	movs	r2, #0
 8008844:	f002 f964 	bl	800ab10 <osMessageQueuePut>
      break;
 8008848:	e014      	b.n	8008874 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800884a:	7afb      	ldrb	r3, [r7, #11]
 800884c:	2b02      	cmp	r3, #2
 800884e:	d111      	bne.n	8008874 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2204      	movs	r2, #4
 800885c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800886c:	2300      	movs	r3, #0
 800886e:	2200      	movs	r2, #0
 8008870:	f002 f94e 	bl	800ab10 <osMessageQueuePut>
      break;
 8008874:	bf00      	nop
  }
}
 8008876:	bf00      	nop
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b086      	sub	sp, #24
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008890:	2300      	movs	r3, #0
 8008892:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800889a:	2b03      	cmp	r3, #3
 800889c:	d002      	beq.n	80088a4 <CDC_ProcessReception+0x26>
 800889e:	2b04      	cmp	r3, #4
 80088a0:	d00e      	beq.n	80088c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80088a2:	e051      	b.n	8008948 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	6a19      	ldr	r1, [r3, #32]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	8b5a      	ldrh	r2, [r3, #26]
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	7b1b      	ldrb	r3, [r3, #12]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f001 fecf 	bl	800a654 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2204      	movs	r2, #4
 80088ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80088be:	e043      	b.n	8008948 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	7b1b      	ldrb	r3, [r3, #12]
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f005 f9ae 	bl	800dc28 <USBH_LL_GetURBState>
 80088cc:	4603      	mov	r3, r0
 80088ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80088d0:	7cfb      	ldrb	r3, [r7, #19]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d137      	bne.n	8008946 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	7b1b      	ldrb	r3, [r3, #12]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f005 f911 	bl	800db04 <USBH_LL_GetLastXferSize>
 80088e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d016      	beq.n	800891c <CDC_ProcessReception+0x9e>
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	8b5b      	ldrh	r3, [r3, #26]
 80088f2:	461a      	mov	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d910      	bls.n	800891c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad2      	subs	r2, r2, r3
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	6a1a      	ldr	r2, [r3, #32]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	441a      	add	r2, r3
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2203      	movs	r2, #3
 8008916:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800891a:	e006      	b.n	800892a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f81d 	bl	8008964 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2204      	movs	r2, #4
 800892e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800893e:	2300      	movs	r3, #0
 8008940:	2200      	movs	r2, #0
 8008942:	f002 f8e5 	bl	800ab10 <osMessageQueuePut>
      break;
 8008946:	bf00      	nop
  }
}
 8008948:	bf00      	nop
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	4613      	mov	r3, r2
 8008998:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80089a0:	2302      	movs	r3, #2
 80089a2:	e044      	b.n	8008a2e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	79fa      	ldrb	r2, [r7, #7]
 80089a8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f841 	bl	8008a44 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d003      	beq.n	80089f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 80089f0:	2200      	movs	r2, #0
 80089f2:	2104      	movs	r1, #4
 80089f4:	2010      	movs	r0, #16
 80089f6:	f002 f818 	bl	800aa2a <osMessageQueueNew>
 80089fa:	4602      	mov	r2, r0
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8008a02:	4b0d      	ldr	r3, [pc, #52]	@ (8008a38 <USBH_Init+0xac>)
 8008a04:	4a0d      	ldr	r2, [pc, #52]	@ (8008a3c <USBH_Init+0xb0>)
 8008a06:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8008a08:	4b0b      	ldr	r3, [pc, #44]	@ (8008a38 <USBH_Init+0xac>)
 8008a0a:	2280      	movs	r2, #128	@ 0x80
 8008a0c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8008a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a38 <USBH_Init+0xac>)
 8008a10:	2218      	movs	r2, #24
 8008a12:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8008a14:	4a08      	ldr	r2, [pc, #32]	@ (8008a38 <USBH_Init+0xac>)
 8008a16:	68f9      	ldr	r1, [r7, #12]
 8008a18:	4809      	ldr	r0, [pc, #36]	@ (8008a40 <USBH_Init+0xb4>)
 8008a1a:	f001 ff59 	bl	800a8d0 <osThreadNew>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f004 ffae 	bl	800d988 <USBH_LL_Init>

  return USBH_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000358 	.word	0x20000358
 8008a3c:	0800e088 	.word	0x0800e088
 8008a40:	080096f5 	.word	0x080096f5

08008a44 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e009      	b.n	8008a6a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	33e0      	adds	r3, #224	@ 0xe0
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	2200      	movs	r2, #0
 8008a62:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3301      	adds	r3, #1
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2b0f      	cmp	r3, #15
 8008a6e:	d9f2      	bls.n	8008a56 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e009      	b.n	8008a8a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3301      	adds	r3, #1
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a90:	d3f1      	bcc.n	8008a76 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2240      	movs	r2, #64	@ 0x40
 8008ab6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	331c      	adds	r3, #28
 8008ae2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f005 fa0b 	bl	800df04 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008af4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008af8:	2100      	movs	r1, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f005 fa02 	bl	800df04 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008b06:	2212      	movs	r2, #18
 8008b08:	2100      	movs	r1, #0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f005 f9fa 	bl	800df04 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008b16:	223e      	movs	r2, #62	@ 0x3e
 8008b18:	2100      	movs	r1, #0
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f005 f9f2 	bl	800df04 <memset>

  return USBH_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d016      	beq.n	8008b6c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10e      	bne.n	8008b66 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b4e:	1c59      	adds	r1, r3, #1
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	33de      	adds	r3, #222	@ 0xde
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
 8008b64:	e004      	b.n	8008b70 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008b66:	2302      	movs	r3, #2
 8008b68:	73fb      	strb	r3, [r7, #15]
 8008b6a:	e001      	b.n	8008b70 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b085      	sub	sp, #20
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008b94:	78fa      	ldrb	r2, [r7, #3]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d204      	bcs.n	8008ba4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	78fa      	ldrb	r2, [r7, #3]
 8008b9e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008ba2:	e001      	b.n	8008ba8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b087      	sub	sp, #28
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	70fb      	strb	r3, [r7, #3]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70bb      	strb	r3, [r7, #2]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008bde:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008be0:	e025      	b.n	8008c2e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	221a      	movs	r2, #26
 8008be6:	fb02 f303 	mul.w	r3, r2, r3
 8008bea:	3308      	adds	r3, #8
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	3302      	adds	r3, #2
 8008bf2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	795b      	ldrb	r3, [r3, #5]
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d002      	beq.n	8008c04 <USBH_FindInterface+0x4e>
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	2bff      	cmp	r3, #255	@ 0xff
 8008c02:	d111      	bne.n	8008c28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c08:	78ba      	ldrb	r2, [r7, #2]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d002      	beq.n	8008c14 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c0e:	78bb      	ldrb	r3, [r7, #2]
 8008c10:	2bff      	cmp	r3, #255	@ 0xff
 8008c12:	d109      	bne.n	8008c28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c18:	787a      	ldrb	r2, [r7, #1]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d002      	beq.n	8008c24 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c1e:	787b      	ldrb	r3, [r7, #1]
 8008c20:	2bff      	cmp	r3, #255	@ 0xff
 8008c22:	d101      	bne.n	8008c28 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	e006      	b.n	8008c36 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d9d6      	bls.n	8008be2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c34:	23ff      	movs	r3, #255	@ 0xff
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f004 fee2 	bl	800da14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008c50:	2101      	movs	r1, #1
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f004 fffb 	bl	800dc4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
	...

08008c64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af04      	add	r7, sp, #16
 8008c6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d102      	bne.n	8008c86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2203      	movs	r2, #3
 8008c84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b0b      	cmp	r3, #11
 8008c8e:	f200 8244 	bhi.w	800911a <USBH_Process+0x4b6>
 8008c92:	a201      	add	r2, pc, #4	@ (adr r2, 8008c98 <USBH_Process+0x34>)
 8008c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c98:	08008cc9 	.word	0x08008cc9
 8008c9c:	08008d17 	.word	0x08008d17
 8008ca0:	08008d9b 	.word	0x08008d9b
 8008ca4:	08009099 	.word	0x08009099
 8008ca8:	0800911b 	.word	0x0800911b
 8008cac:	08008e57 	.word	0x08008e57
 8008cb0:	08009023 	.word	0x08009023
 8008cb4:	08008ea9 	.word	0x08008ea9
 8008cb8:	08008ee5 	.word	0x08008ee5
 8008cbc:	08008f1d 	.word	0x08008f1d
 8008cc0:	08008f7b 	.word	0x08008f7b
 8008cc4:	08009081 	.word	0x08009081
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8224 	beq.w	800911e <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008cdc:	20c8      	movs	r0, #200	@ 0xc8
 8008cde:	f005 f800 	bl	800dce2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f004 fef3 	bl	800dace <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f001 fefe 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008d14:	e203      	b.n	800911e <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d107      	bne.n	8008d30 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	701a      	strb	r2, [r3, #0]
 8008d2e:	e025      	b.n	8008d7c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008d36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d3a:	d914      	bls.n	8008d66 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d42:	3301      	adds	r3, #1
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	d903      	bls.n	8008d5e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	220d      	movs	r2, #13
 8008d5a:	701a      	strb	r2, [r3, #0]
 8008d5c:	e00e      	b.n	8008d7c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	701a      	strb	r2, [r3, #0]
 8008d64:	e00a      	b.n	8008d7c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008d6c:	f103 020a 	add.w	r2, r3, #10
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008d76:	200a      	movs	r0, #10
 8008d78:	f004 ffb3 	bl	800dce2 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d90:	2300      	movs	r3, #0
 8008d92:	2200      	movs	r2, #0
 8008d94:	f001 febc 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      break;
 8008d98:	e1c8      	b.n	800912c <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008daa:	2104      	movs	r1, #4
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008db0:	2064      	movs	r0, #100	@ 0x64
 8008db2:	f004 ff96 	bl	800dce2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f004 fe62 	bl	800da80 <USBH_LL_GetSpeed>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2205      	movs	r2, #5
 8008dca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008dcc:	2100      	movs	r1, #0
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fc8d 	bl	800a6ee <USBH_AllocPipe>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008ddc:	2180      	movs	r1, #128	@ 0x80
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f001 fc85 	bl	800a6ee <USBH_AllocPipe>
 8008de4:	4603      	mov	r3, r0
 8008de6:	461a      	mov	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7919      	ldrb	r1, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008e00:	9202      	str	r2, [sp, #8]
 8008e02:	2200      	movs	r2, #0
 8008e04:	9201      	str	r2, [sp, #4]
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2280      	movs	r2, #128	@ 0x80
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f001 fc3f 	bl	800a690 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7959      	ldrb	r1, [r3, #5]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e26:	9202      	str	r2, [sp, #8]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	9201      	str	r2, [sp, #4]
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2200      	movs	r2, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 fc2c 	bl	800a690 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f001 fe5e 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      break;
 8008e54:	e16a      	b.n	800912c <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f96e 	bl	8009138 <USBH_HandleEnum>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f040 815c 	bne.w	8009122 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d103      	bne.n	8008e84 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2208      	movs	r2, #8
 8008e80:	701a      	strb	r2, [r3, #0]
 8008e82:	e002      	b.n	8008e8a <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2207      	movs	r2, #7
 8008e88:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2205      	movs	r2, #5
 8008e8e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f001 fe35 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008ea6:	e13c      	b.n	8009122 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 8139 	beq.w	8009126 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008eba:	2101      	movs	r1, #1
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2208      	movs	r2, #8
 8008ec4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2205      	movs	r2, #5
 8008eca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008eda:	2300      	movs	r3, #0
 8008edc:	2200      	movs	r2, #0
 8008ede:	f001 fe17 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8008ee2:	e120      	b.n	8009126 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fd12 	bl	8009916 <USBH_SetCfg>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2209      	movs	r2, #9
 8008efc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008f12:	2300      	movs	r3, #0
 8008f14:	2200      	movs	r2, #0
 8008f16:	f001 fdfb 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      break;
 8008f1a:	e107      	b.n	800912c <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008f22:	f003 0320 	and.w	r3, r3, #32
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d015      	beq.n	8008f56 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008f2a:	2101      	movs	r1, #1
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fd15 	bl	800995c <USBH_SetFeature>
 8008f32:	4603      	mov	r3, r0
 8008f34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	220a      	movs	r2, #10
 8008f42:	701a      	strb	r2, [r3, #0]
 8008f44:	e00a      	b.n	8008f5c <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	d106      	bne.n	8008f5c <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	220a      	movs	r2, #10
 8008f52:	701a      	strb	r2, [r3, #0]
 8008f54:	e002      	b.n	8008f5c <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	220a      	movs	r2, #10
 8008f5a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008f70:	2300      	movs	r3, #0
 8008f72:	2200      	movs	r2, #0
 8008f74:	f001 fdcc 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      break;
 8008f78:	e0d8      	b.n	800912c <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d03f      	beq.n	8009004 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
 8008f90:	e016      	b.n	8008fc0 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008f92:	7bfa      	ldrb	r2, [r7, #15]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	32de      	adds	r2, #222	@ 0xde
 8008f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9c:	791a      	ldrb	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d108      	bne.n	8008fba <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008fa8:	7bfa      	ldrb	r2, [r7, #15]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	32de      	adds	r2, #222	@ 0xde
 8008fae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008fb8:	e005      	b.n	8008fc6 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	73fb      	strb	r3, [r7, #15]
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0e5      	beq.n	8008f92 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d016      	beq.n	8008ffe <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	4798      	blx	r3
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2206      	movs	r2, #6
 8008fe6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fee:	2103      	movs	r1, #3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	4798      	blx	r3
 8008ff4:	e006      	b.n	8009004 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	220d      	movs	r2, #13
 8008ffa:	701a      	strb	r2, [r3, #0]
 8008ffc:	e002      	b.n	8009004 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	220d      	movs	r2, #13
 8009002:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2205      	movs	r2, #5
 8009008:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009018:	2300      	movs	r3, #0
 800901a:	2200      	movs	r2, #0
 800901c:	f001 fd78 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      break;
 8009020:	e084      	b.n	800912c <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009028:	2b00      	cmp	r3, #0
 800902a:	d017      	beq.n	800905c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	4798      	blx	r3
 8009038:	4603      	mov	r3, r0
 800903a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d103      	bne.n	800904c <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	220b      	movs	r2, #11
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	e00a      	b.n	8009062 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	d106      	bne.n	8009062 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	220d      	movs	r2, #13
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	e002      	b.n	8009062 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	220d      	movs	r2, #13
 8009060:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2205      	movs	r2, #5
 8009066:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009076:	2300      	movs	r3, #0
 8009078:	2200      	movs	r2, #0
 800907a:	f001 fd49 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      break;
 800907e:	e055      	b.n	800912c <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009086:	2b00      	cmp	r3, #0
 8009088:	d04f      	beq.n	800912a <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	4798      	blx	r3
      }
      break;
 8009096:	e048      	b.n	800912a <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff fccf 	bl	8008a44 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d009      	beq.n	80090c4 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d005      	beq.n	80090da <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090d4:	2105      	movs	r1, #5
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d107      	bne.n	80090f6 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff fda7 	bl	8008c42 <USBH_Start>
 80090f4:	e002      	b.n	80090fc <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f004 fc8c 	bl	800da14 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009110:	2300      	movs	r3, #0
 8009112:	2200      	movs	r2, #0
 8009114:	f001 fcfc 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      break;
 8009118:	e008      	b.n	800912c <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800911a:	bf00      	nop
 800911c:	e006      	b.n	800912c <USBH_Process+0x4c8>
      break;
 800911e:	bf00      	nop
 8009120:	e004      	b.n	800912c <USBH_Process+0x4c8>
      break;
 8009122:	bf00      	nop
 8009124:	e002      	b.n	800912c <USBH_Process+0x4c8>
    break;
 8009126:	bf00      	nop
 8009128:	e000      	b.n	800912c <USBH_Process+0x4c8>
      break;
 800912a:	bf00      	nop
  }
  return USBH_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop

08009138 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af04      	add	r7, sp, #16
 800913e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009140:	2301      	movs	r3, #1
 8009142:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009144:	2301      	movs	r3, #1
 8009146:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	2b07      	cmp	r3, #7
 800914e:	f200 8204 	bhi.w	800955a <USBH_HandleEnum+0x422>
 8009152:	a201      	add	r2, pc, #4	@ (adr r2, 8009158 <USBH_HandleEnum+0x20>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	08009179 	.word	0x08009179
 800915c:	08009233 	.word	0x08009233
 8009160:	0800929d 	.word	0x0800929d
 8009164:	08009327 	.word	0x08009327
 8009168:	08009391 	.word	0x08009391
 800916c:	08009401 	.word	0x08009401
 8009170:	0800949d 	.word	0x0800949d
 8009174:	0800951b 	.word	0x0800951b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009178:	2108      	movs	r1, #8
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fae8 	bl	8009750 <USBH_Get_DevDesc>
 8009180:	4603      	mov	r3, r0
 8009182:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d12e      	bne.n	80091e8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	7919      	ldrb	r1, [r3, #4]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80091ae:	9202      	str	r2, [sp, #8]
 80091b0:	2200      	movs	r2, #0
 80091b2:	9201      	str	r2, [sp, #4]
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	4603      	mov	r3, r0
 80091b8:	2280      	movs	r2, #128	@ 0x80
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f001 fa68 	bl	800a690 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7959      	ldrb	r1, [r3, #5]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091d4:	9202      	str	r2, [sp, #8]
 80091d6:	2200      	movs	r2, #0
 80091d8:	9201      	str	r2, [sp, #4]
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	4603      	mov	r3, r0
 80091de:	2200      	movs	r2, #0
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 fa55 	bl	800a690 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80091e6:	e1ba      	b.n	800955e <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	f040 81b7 	bne.w	800955e <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091f6:	3301      	adds	r3, #1
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009206:	2b03      	cmp	r3, #3
 8009208:	d903      	bls.n	8009212 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	220d      	movs	r2, #13
 800920e:	701a      	strb	r2, [r3, #0]
      break;
 8009210:	e1a5      	b.n	800955e <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	795b      	ldrb	r3, [r3, #5]
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f001 fa89 	bl	800a730 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	791b      	ldrb	r3, [r3, #4]
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 fa83 	bl	800a730 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	701a      	strb	r2, [r3, #0]
      break;
 8009230:	e195      	b.n	800955e <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009232:	2112      	movs	r1, #18
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fa8b 	bl	8009750 <USBH_Get_DevDesc>
 800923a:	4603      	mov	r3, r0
 800923c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d103      	bne.n	800924c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800924a:	e18a      	b.n	8009562 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	2b03      	cmp	r3, #3
 8009250:	f040 8187 	bne.w	8009562 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800925a:	3301      	adds	r3, #1
 800925c:	b2da      	uxtb	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800926a:	2b03      	cmp	r3, #3
 800926c:	d903      	bls.n	8009276 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	220d      	movs	r2, #13
 8009272:	701a      	strb	r2, [r3, #0]
      break;
 8009274:	e175      	b.n	8009562 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	795b      	ldrb	r3, [r3, #5]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 fa57 	bl	800a730 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	791b      	ldrb	r3, [r3, #4]
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fa51 	bl	800a730 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	701a      	strb	r2, [r3, #0]
      break;
 800929a:	e162      	b.n	8009562 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800929c:	2101      	movs	r1, #1
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fb15 	bl	80098ce <USBH_SetAddress>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d130      	bne.n	8009310 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80092ae:	2002      	movs	r0, #2
 80092b0:	f004 fd17 	bl	800dce2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2203      	movs	r2, #3
 80092c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	7919      	ldrb	r1, [r3, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80092d6:	9202      	str	r2, [sp, #8]
 80092d8:	2200      	movs	r2, #0
 80092da:	9201      	str	r2, [sp, #4]
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	4603      	mov	r3, r0
 80092e0:	2280      	movs	r2, #128	@ 0x80
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 f9d4 	bl	800a690 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	7959      	ldrb	r1, [r3, #5]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092fc:	9202      	str	r2, [sp, #8]
 80092fe:	2200      	movs	r2, #0
 8009300:	9201      	str	r2, [sp, #4]
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	4603      	mov	r3, r0
 8009306:	2200      	movs	r2, #0
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 f9c1 	bl	800a690 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800930e:	e12a      	b.n	8009566 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	2b03      	cmp	r3, #3
 8009314:	f040 8127 	bne.w	8009566 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	220d      	movs	r2, #13
 800931c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	705a      	strb	r2, [r3, #1]
      break;
 8009324:	e11f      	b.n	8009566 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009326:	2109      	movs	r1, #9
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fa3d 	bl	80097a8 <USBH_Get_CfgDesc>
 800932e:	4603      	mov	r3, r0
 8009330:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d103      	bne.n	8009340 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2204      	movs	r2, #4
 800933c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800933e:	e114      	b.n	800956a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b03      	cmp	r3, #3
 8009344:	f040 8111 	bne.w	800956a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800934e:	3301      	adds	r3, #1
 8009350:	b2da      	uxtb	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800935e:	2b03      	cmp	r3, #3
 8009360:	d903      	bls.n	800936a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	220d      	movs	r2, #13
 8009366:	701a      	strb	r2, [r3, #0]
      break;
 8009368:	e0ff      	b.n	800956a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	795b      	ldrb	r3, [r3, #5]
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 f9dd 	bl	800a730 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	791b      	ldrb	r3, [r3, #4]
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 f9d7 	bl	800a730 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	701a      	strb	r2, [r3, #0]
      break;
 800938e:	e0ec      	b.n	800956a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fa05 	bl	80097a8 <USBH_Get_CfgDesc>
 800939e:	4603      	mov	r3, r0
 80093a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d103      	bne.n	80093b0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2205      	movs	r2, #5
 80093ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093ae:	e0de      	b.n	800956e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	f040 80db 	bne.w	800956e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093be:	3301      	adds	r3, #1
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d903      	bls.n	80093da <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	220d      	movs	r2, #13
 80093d6:	701a      	strb	r2, [r3, #0]
      break;
 80093d8:	e0c9      	b.n	800956e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	795b      	ldrb	r3, [r3, #5]
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 f9a5 	bl	800a730 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	791b      	ldrb	r3, [r3, #4]
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 f99f 	bl	800a730 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	701a      	strb	r2, [r3, #0]
      break;
 80093fe:	e0b6      	b.n	800956e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009406:	2b00      	cmp	r3, #0
 8009408:	d036      	beq.n	8009478 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009416:	23ff      	movs	r3, #255	@ 0xff
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f9ef 	bl	80097fc <USBH_Get_StringDesc>
 800941e:	4603      	mov	r3, r0
 8009420:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009422:	7bbb      	ldrb	r3, [r7, #14]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d111      	bne.n	800944c <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2206      	movs	r2, #6
 800942c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2205      	movs	r2, #5
 8009432:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009442:	2300      	movs	r3, #0
 8009444:	2200      	movs	r2, #0
 8009446:	f001 fb63 	bl	800ab10 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800944a:	e092      	b.n	8009572 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	2b03      	cmp	r3, #3
 8009450:	f040 808f 	bne.w	8009572 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2206      	movs	r2, #6
 8009458:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2205      	movs	r2, #5
 800945e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800946e:	2300      	movs	r3, #0
 8009470:	2200      	movs	r2, #0
 8009472:	f001 fb4d 	bl	800ab10 <osMessageQueuePut>
      break;
 8009476:	e07c      	b.n	8009572 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2206      	movs	r2, #6
 800947c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2205      	movs	r2, #5
 8009482:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009492:	2300      	movs	r3, #0
 8009494:	2200      	movs	r2, #0
 8009496:	f001 fb3b 	bl	800ab10 <osMessageQueuePut>
      break;
 800949a:	e06a      	b.n	8009572 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d027      	beq.n	80094f6 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094b2:	23ff      	movs	r3, #255	@ 0xff
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f9a1 	bl	80097fc <USBH_Get_StringDesc>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d103      	bne.n	80094cc <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2207      	movs	r2, #7
 80094c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80094ca:	e054      	b.n	8009576 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d151      	bne.n	8009576 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2207      	movs	r2, #7
 80094d6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2205      	movs	r2, #5
 80094dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80094ec:	2300      	movs	r3, #0
 80094ee:	2200      	movs	r2, #0
 80094f0:	f001 fb0e 	bl	800ab10 <osMessageQueuePut>
      break;
 80094f4:	e03f      	b.n	8009576 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2207      	movs	r2, #7
 80094fa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2205      	movs	r2, #5
 8009500:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009510:	2300      	movs	r3, #0
 8009512:	2200      	movs	r2, #0
 8009514:	f001 fafc 	bl	800ab10 <osMessageQueuePut>
      break;
 8009518:	e02d      	b.n	8009576 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009520:	2b00      	cmp	r3, #0
 8009522:	d017      	beq.n	8009554 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009530:	23ff      	movs	r3, #255	@ 0xff
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f962 	bl	80097fc <USBH_Get_StringDesc>
 8009538:	4603      	mov	r3, r0
 800953a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d102      	bne.n	8009548 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009546:	e018      	b.n	800957a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009548:	7bbb      	ldrb	r3, [r7, #14]
 800954a:	2b03      	cmp	r3, #3
 800954c:	d115      	bne.n	800957a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	73fb      	strb	r3, [r7, #15]
      break;
 8009552:	e012      	b.n	800957a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]
      break;
 8009558:	e00f      	b.n	800957a <USBH_HandleEnum+0x442>

    default:
      break;
 800955a:	bf00      	nop
 800955c:	e00e      	b.n	800957c <USBH_HandleEnum+0x444>
      break;
 800955e:	bf00      	nop
 8009560:	e00c      	b.n	800957c <USBH_HandleEnum+0x444>
      break;
 8009562:	bf00      	nop
 8009564:	e00a      	b.n	800957c <USBH_HandleEnum+0x444>
      break;
 8009566:	bf00      	nop
 8009568:	e008      	b.n	800957c <USBH_HandleEnum+0x444>
      break;
 800956a:	bf00      	nop
 800956c:	e006      	b.n	800957c <USBH_HandleEnum+0x444>
      break;
 800956e:	bf00      	nop
 8009570:	e004      	b.n	800957c <USBH_HandleEnum+0x444>
      break;
 8009572:	bf00      	nop
 8009574:	e002      	b.n	800957c <USBH_HandleEnum+0x444>
      break;
 8009576:	bf00      	nop
 8009578:	e000      	b.n	800957c <USBH_HandleEnum+0x444>
      break;
 800957a:	bf00      	nop
  }
  return Status;
 800957c:	7bfb      	ldrb	r3, [r7, #15]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop

08009588 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800959a:	bf00      	nop
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b082      	sub	sp, #8
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f804 	bl	80095ca <USBH_HandleSof>
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b0b      	cmp	r3, #11
 80095da:	d10a      	bne.n	80095f2 <USBH_HandleSof+0x28>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d005      	beq.n	80095f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	4798      	blx	r3
  }
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b082      	sub	sp, #8
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800961e:	2300      	movs	r3, #0
 8009620:	2200      	movs	r2, #0
 8009622:	f001 fa75 	bl	800ab10 <osMessageQueuePut>
#endif
#endif

  return;
 8009626:	bf00      	nop
}
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800963e:	bf00      	nop
}
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800967e:	2300      	movs	r3, #0
 8009680:	2200      	movs	r2, #0
 8009682:	f001 fa45 	bl	800ab10 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f004 f9ca 	bl	800da4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	791b      	ldrb	r3, [r3, #4]
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 f837 	bl	800a730 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	795b      	ldrb	r3, [r3, #5]
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 f831 	bl	800a730 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80096e2:	2300      	movs	r3, #0
 80096e4:	2200      	movs	r2, #0
 80096e6:	f001 fa13 	bl	800ab10 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009708:	f04f 33ff 	mov.w	r3, #4294967295
 800970c:	2200      	movs	r2, #0
 800970e:	f001 fa5f 	bl	800abd0 <osMessageQueueGet>
 8009712:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1f0      	bne.n	80096fc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff faa2 	bl	8008c64 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009720:	e7ec      	b.n	80096fc <USBH_Process_OS+0x8>

08009722 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800973e:	2300      	movs	r3, #0
 8009740:	2200      	movs	r2, #0
 8009742:	f001 f9e5 	bl	800ab10 <osMessageQueuePut>
#endif

  return USBH_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af02      	add	r7, sp, #8
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800975c:	887b      	ldrh	r3, [r7, #2]
 800975e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009762:	d901      	bls.n	8009768 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009764:	2303      	movs	r3, #3
 8009766:	e01b      	b.n	80097a0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800976e:	887b      	ldrh	r3, [r7, #2]
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	4613      	mov	r3, r2
 8009774:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009778:	2100      	movs	r1, #0
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f872 	bl	8009864 <USBH_GetDescriptor>
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d109      	bne.n	800979e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009790:	887a      	ldrh	r2, [r7, #2]
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f929 	bl	80099ec <USBH_ParseDevDesc>
 800979a:	4603      	mov	r3, r0
 800979c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	331c      	adds	r3, #28
 80097b8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80097ba:	887b      	ldrh	r3, [r7, #2]
 80097bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097c0:	d901      	bls.n	80097c6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e016      	b.n	80097f4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80097c6:	887b      	ldrh	r3, [r7, #2]
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097d0:	2100      	movs	r1, #0
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f846 	bl	8009864 <USBH_GetDescriptor>
 80097d8:	4603      	mov	r3, r0
 80097da:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d107      	bne.n	80097f2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80097e2:	887b      	ldrh	r3, [r7, #2]
 80097e4:	461a      	mov	r2, r3
 80097e6:	68b9      	ldr	r1, [r7, #8]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f9af 	bl	8009b4c <USBH_ParseCfgDesc>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af02      	add	r7, sp, #8
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	461a      	mov	r2, r3
 8009808:	460b      	mov	r3, r1
 800980a:	72fb      	strb	r3, [r7, #11]
 800980c:	4613      	mov	r3, r2
 800980e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009810:	893b      	ldrh	r3, [r7, #8]
 8009812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009816:	d802      	bhi.n	800981e <USBH_Get_StringDesc+0x22>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800981e:	2303      	movs	r3, #3
 8009820:	e01c      	b.n	800985c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009822:	7afb      	ldrb	r3, [r7, #11]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800982a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009832:	893b      	ldrh	r3, [r7, #8]
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	460b      	mov	r3, r1
 8009838:	2100      	movs	r1, #0
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f000 f812 	bl	8009864 <USBH_GetDescriptor>
 8009840:	4603      	mov	r3, r0
 8009842:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d107      	bne.n	800985a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009850:	893a      	ldrh	r2, [r7, #8]
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4618      	mov	r0, r3
 8009856:	f000 fb8d 	bl	8009f74 <USBH_ParseStringDesc>
  }

  return status;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	607b      	str	r3, [r7, #4]
 800986e:	460b      	mov	r3, r1
 8009870:	72fb      	strb	r3, [r7, #11]
 8009872:	4613      	mov	r3, r2
 8009874:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	789b      	ldrb	r3, [r3, #2]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d11c      	bne.n	80098b8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800987e:	7afb      	ldrb	r3, [r7, #11]
 8009880:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009884:	b2da      	uxtb	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2206      	movs	r2, #6
 800988e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	893a      	ldrh	r2, [r7, #8]
 8009894:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009896:	893b      	ldrh	r3, [r7, #8]
 8009898:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800989c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098a0:	d104      	bne.n	80098ac <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f240 4209 	movw	r2, #1033	@ 0x409
 80098a8:	829a      	strh	r2, [r3, #20]
 80098aa:	e002      	b.n	80098b2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	8b3a      	ldrh	r2, [r7, #24]
 80098b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80098b8:	8b3b      	ldrh	r3, [r7, #24]
 80098ba:	461a      	mov	r2, r3
 80098bc:	6879      	ldr	r1, [r7, #4]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fba5 	bl	800a00e <USBH_CtlReq>
 80098c4:	4603      	mov	r3, r0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b082      	sub	sp, #8
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	460b      	mov	r3, r1
 80098d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	789b      	ldrb	r3, [r3, #2]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d10f      	bne.n	8009902 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2205      	movs	r2, #5
 80098ec:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009902:	2200      	movs	r2, #0
 8009904:	2100      	movs	r1, #0
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fb81 	bl	800a00e <USBH_CtlReq>
 800990c:	4603      	mov	r3, r0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	460b      	mov	r3, r1
 8009920:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	789b      	ldrb	r3, [r3, #2]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d10e      	bne.n	8009948 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2209      	movs	r2, #9
 8009934:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	887a      	ldrh	r2, [r7, #2]
 800993a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009948:	2200      	movs	r2, #0
 800994a:	2100      	movs	r1, #0
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fb5e 	bl	800a00e <USBH_CtlReq>
 8009952:	4603      	mov	r3, r0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	460b      	mov	r3, r1
 8009966:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	789b      	ldrb	r3, [r3, #2]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d10f      	bne.n	8009990 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2203      	movs	r2, #3
 800997a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	b29a      	uxth	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009990:	2200      	movs	r2, #0
 8009992:	2100      	movs	r1, #0
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fb3a 	bl	800a00e <USBH_CtlReq>
 800999a:	4603      	mov	r3, r0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	789b      	ldrb	r3, [r3, #2]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d10f      	bne.n	80099d8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2202      	movs	r2, #2
 80099bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80099ca:	78fb      	ldrb	r3, [r7, #3]
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099d8:	2200      	movs	r2, #0
 80099da:	2100      	movs	r1, #0
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fb16 	bl	800a00e <USBH_CtlReq>
 80099e2:	4603      	mov	r3, r0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	4613      	mov	r3, r2
 80099f8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009a00:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	e094      	b.n	8009b3a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	781a      	ldrb	r2, [r3, #0]
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	785a      	ldrb	r2, [r3, #1]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	3302      	adds	r3, #2
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	3303      	adds	r3, #3
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	021b      	lsls	r3, r3, #8
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	4313      	orrs	r3, r2
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	791a      	ldrb	r2, [r3, #4]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	795a      	ldrb	r2, [r3, #5]
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	799a      	ldrb	r2, [r3, #6]
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	79da      	ldrb	r2, [r3, #7]
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d004      	beq.n	8009a6e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d11b      	bne.n	8009aa6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	79db      	ldrb	r3, [r3, #7]
 8009a72:	2b20      	cmp	r3, #32
 8009a74:	dc0f      	bgt.n	8009a96 <USBH_ParseDevDesc+0xaa>
 8009a76:	2b08      	cmp	r3, #8
 8009a78:	db0f      	blt.n	8009a9a <USBH_ParseDevDesc+0xae>
 8009a7a:	3b08      	subs	r3, #8
 8009a7c:	4a32      	ldr	r2, [pc, #200]	@ (8009b48 <USBH_ParseDevDesc+0x15c>)
 8009a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	bf14      	ite	ne
 8009a8a:	2301      	movne	r3, #1
 8009a8c:	2300      	moveq	r3, #0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d106      	bne.n	8009aa2 <USBH_ParseDevDesc+0xb6>
 8009a94:	e001      	b.n	8009a9a <USBH_ParseDevDesc+0xae>
 8009a96:	2b40      	cmp	r3, #64	@ 0x40
 8009a98:	d003      	beq.n	8009aa2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2208      	movs	r2, #8
 8009a9e:	71da      	strb	r2, [r3, #7]
        break;
 8009aa0:	e000      	b.n	8009aa4 <USBH_ParseDevDesc+0xb8>
        break;
 8009aa2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009aa4:	e00e      	b.n	8009ac4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d107      	bne.n	8009ac0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	79db      	ldrb	r3, [r3, #7]
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d005      	beq.n	8009ac4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	2208      	movs	r2, #8
 8009abc:	71da      	strb	r2, [r3, #7]
 8009abe:	e001      	b.n	8009ac4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009ac4:	88fb      	ldrh	r3, [r7, #6]
 8009ac6:	2b08      	cmp	r3, #8
 8009ac8:	d936      	bls.n	8009b38 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	3308      	adds	r3, #8
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	3309      	adds	r3, #9
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	4313      	orrs	r3, r2
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	330a      	adds	r3, #10
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	330b      	adds	r3, #11
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	021b      	lsls	r3, r3, #8
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	4313      	orrs	r3, r2
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	330c      	adds	r3, #12
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	330d      	adds	r3, #13
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	021b      	lsls	r3, r3, #8
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	4313      	orrs	r3, r2
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	7b9a      	ldrb	r2, [r3, #14]
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	7bda      	ldrb	r2, [r3, #15]
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	7c1a      	ldrb	r2, [r3, #16]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	7c5a      	ldrb	r2, [r3, #17]
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	01000101 	.word	0x01000101

08009b4c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08c      	sub	sp, #48	@ 0x30
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	4613      	mov	r3, r2
 8009b58:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009b60:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	e0da      	b.n	8009d34 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	781a      	ldrb	r2, [r3, #0]
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	785a      	ldrb	r2, [r3, #1]
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	3302      	adds	r3, #2
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	3303      	adds	r3, #3
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bac:	bf28      	it	cs
 8009bae:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	791a      	ldrb	r2, [r3, #4]
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	795a      	ldrb	r2, [r3, #5]
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	799a      	ldrb	r2, [r3, #6]
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	79da      	ldrb	r2, [r3, #7]
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	7a1a      	ldrb	r2, [r3, #8]
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b09      	cmp	r3, #9
 8009be6:	d002      	beq.n	8009bee <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	2209      	movs	r2, #9
 8009bec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	2b09      	cmp	r3, #9
 8009bf2:	f240 809d 	bls.w	8009d30 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009bf6:	2309      	movs	r3, #9
 8009bf8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009bfe:	e081      	b.n	8009d04 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c00:	f107 0316 	add.w	r3, r7, #22
 8009c04:	4619      	mov	r1, r3
 8009c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c08:	f000 f9e7 	bl	8009fda <USBH_GetNextDesc>
 8009c0c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c10:	785b      	ldrb	r3, [r3, #1]
 8009c12:	2b04      	cmp	r3, #4
 8009c14:	d176      	bne.n	8009d04 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b09      	cmp	r3, #9
 8009c1c:	d002      	beq.n	8009c24 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c20:	2209      	movs	r2, #9
 8009c22:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c28:	221a      	movs	r2, #26
 8009c2a:	fb02 f303 	mul.w	r3, r2, r3
 8009c2e:	3308      	adds	r3, #8
 8009c30:	6a3a      	ldr	r2, [r7, #32]
 8009c32:	4413      	add	r3, r2
 8009c34:	3302      	adds	r3, #2
 8009c36:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c3a:	69f8      	ldr	r0, [r7, #28]
 8009c3c:	f000 f87e 	bl	8009d3c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009c40:	2300      	movs	r3, #0
 8009c42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c4a:	e043      	b.n	8009cd4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c4c:	f107 0316 	add.w	r3, r7, #22
 8009c50:	4619      	mov	r1, r3
 8009c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c54:	f000 f9c1 	bl	8009fda <USBH_GetNextDesc>
 8009c58:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5c:	785b      	ldrb	r3, [r3, #1]
 8009c5e:	2b05      	cmp	r3, #5
 8009c60:	d138      	bne.n	8009cd4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	795b      	ldrb	r3, [r3, #5]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d113      	bne.n	8009c92 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d003      	beq.n	8009c7a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	799b      	ldrb	r3, [r3, #6]
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d10b      	bne.n	8009c92 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	79db      	ldrb	r3, [r3, #7]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10b      	bne.n	8009c9a <USBH_ParseCfgDesc+0x14e>
 8009c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b09      	cmp	r3, #9
 8009c88:	d007      	beq.n	8009c9a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8c:	2209      	movs	r2, #9
 8009c8e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c90:	e003      	b.n	8009c9a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c94:	2207      	movs	r2, #7
 8009c96:	701a      	strb	r2, [r3, #0]
 8009c98:	e000      	b.n	8009c9c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c9a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ca0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009ca4:	3201      	adds	r2, #1
 8009ca6:	00d2      	lsls	r2, r2, #3
 8009ca8:	211a      	movs	r1, #26
 8009caa:	fb01 f303 	mul.w	r3, r1, r3
 8009cae:	4413      	add	r3, r2
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	6a3a      	ldr	r2, [r7, #32]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009cba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cbc:	69b9      	ldr	r1, [r7, #24]
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 f870 	bl	8009da4 <USBH_ParseEPDesc>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009cca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009cce:	3301      	adds	r3, #1
 8009cd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	791b      	ldrb	r3, [r3, #4]
 8009cd8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d204      	bcs.n	8009cea <USBH_ParseCfgDesc+0x19e>
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	885a      	ldrh	r2, [r3, #2]
 8009ce4:	8afb      	ldrh	r3, [r7, #22]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d8b0      	bhi.n	8009c4c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	791b      	ldrb	r3, [r3, #4]
 8009cee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d201      	bcs.n	8009cfa <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e01c      	b.n	8009d34 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cfe:	3301      	adds	r3, #1
 8009d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d805      	bhi.n	8009d18 <USBH_ParseCfgDesc+0x1cc>
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	885a      	ldrh	r2, [r3, #2]
 8009d10:	8afb      	ldrh	r3, [r7, #22]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	f63f af74 	bhi.w	8009c00 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	791b      	ldrb	r3, [r3, #4]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	bf28      	it	cs
 8009d20:	2302      	movcs	r3, #2
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d201      	bcs.n	8009d30 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e001      	b.n	8009d34 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009d30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3730      	adds	r7, #48	@ 0x30
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781a      	ldrb	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	785a      	ldrb	r2, [r3, #1]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	789a      	ldrb	r2, [r3, #2]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	78da      	ldrb	r2, [r3, #3]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	bf28      	it	cs
 8009d70:	2302      	movcs	r3, #2
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	795a      	ldrb	r2, [r3, #5]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	799a      	ldrb	r2, [r3, #6]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	79da      	ldrb	r2, [r3, #7]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	7a1a      	ldrb	r2, [r3, #8]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	721a      	strb	r2, [r3, #8]
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	781a      	ldrb	r2, [r3, #0]
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	785a      	ldrb	r2, [r3, #1]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	789a      	ldrb	r2, [r3, #2]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	78da      	ldrb	r2, [r3, #3]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	3305      	adds	r3, #5
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	021b      	lsls	r3, r3, #8
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	4313      	orrs	r3, r2
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	799a      	ldrb	r2, [r3, #6]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	889b      	ldrh	r3, [r3, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d009      	beq.n	8009e12 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e06:	d804      	bhi.n	8009e12 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e10:	d901      	bls.n	8009e16 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009e12:	2303      	movs	r3, #3
 8009e14:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d136      	bne.n	8009e8e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	78db      	ldrb	r3, [r3, #3]
 8009e24:	f003 0303 	and.w	r3, r3, #3
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d108      	bne.n	8009e3e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	889b      	ldrh	r3, [r3, #4]
 8009e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e34:	f240 8097 	bls.w	8009f66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	75fb      	strb	r3, [r7, #23]
 8009e3c:	e093      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	78db      	ldrb	r3, [r3, #3]
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d107      	bne.n	8009e5a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	889b      	ldrh	r3, [r3, #4]
 8009e4e:	2b40      	cmp	r3, #64	@ 0x40
 8009e50:	f240 8089 	bls.w	8009f66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e54:	2303      	movs	r3, #3
 8009e56:	75fb      	strb	r3, [r7, #23]
 8009e58:	e085      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	78db      	ldrb	r3, [r3, #3]
 8009e5e:	f003 0303 	and.w	r3, r3, #3
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d005      	beq.n	8009e72 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	78db      	ldrb	r3, [r3, #3]
 8009e6a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d10a      	bne.n	8009e88 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	799b      	ldrb	r3, [r3, #6]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <USBH_ParseEPDesc+0xde>
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	799b      	ldrb	r3, [r3, #6]
 8009e7e:	2b10      	cmp	r3, #16
 8009e80:	d970      	bls.n	8009f64 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009e82:	2303      	movs	r3, #3
 8009e84:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009e86:	e06d      	b.n	8009f64 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	75fb      	strb	r3, [r7, #23]
 8009e8c:	e06b      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d13c      	bne.n	8009f12 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	78db      	ldrb	r3, [r3, #3]
 8009e9c:	f003 0303 	and.w	r3, r3, #3
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d005      	beq.n	8009eb0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	78db      	ldrb	r3, [r3, #3]
 8009ea8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d106      	bne.n	8009ebe <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	889b      	ldrh	r3, [r3, #4]
 8009eb4:	2b40      	cmp	r3, #64	@ 0x40
 8009eb6:	d956      	bls.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009ebc:	e053      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	78db      	ldrb	r3, [r3, #3]
 8009ec2:	f003 0303 	and.w	r3, r3, #3
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d10e      	bne.n	8009ee8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	799b      	ldrb	r3, [r3, #6]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d007      	beq.n	8009ee2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009ed6:	2b10      	cmp	r3, #16
 8009ed8:	d803      	bhi.n	8009ee2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009ede:	2b40      	cmp	r3, #64	@ 0x40
 8009ee0:	d941      	bls.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	75fb      	strb	r3, [r7, #23]
 8009ee6:	e03e      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	78db      	ldrb	r3, [r3, #3]
 8009eec:	f003 0303 	and.w	r3, r3, #3
 8009ef0:	2b03      	cmp	r3, #3
 8009ef2:	d10b      	bne.n	8009f0c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	799b      	ldrb	r3, [r3, #6]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d004      	beq.n	8009f06 <USBH_ParseEPDesc+0x162>
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	889b      	ldrh	r3, [r3, #4]
 8009f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f04:	d32f      	bcc.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f06:	2303      	movs	r3, #3
 8009f08:	75fb      	strb	r3, [r7, #23]
 8009f0a:	e02c      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	75fb      	strb	r3, [r7, #23]
 8009f10:	e029      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d120      	bne.n	8009f5e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	78db      	ldrb	r3, [r3, #3]
 8009f20:	f003 0303 	and.w	r3, r3, #3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d106      	bne.n	8009f36 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	889b      	ldrh	r3, [r3, #4]
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d01a      	beq.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f30:	2303      	movs	r3, #3
 8009f32:	75fb      	strb	r3, [r7, #23]
 8009f34:	e017      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	78db      	ldrb	r3, [r3, #3]
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d10a      	bne.n	8009f58 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	799b      	ldrb	r3, [r3, #6]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <USBH_ParseEPDesc+0x1ae>
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	889b      	ldrh	r3, [r3, #4]
 8009f4e:	2b08      	cmp	r3, #8
 8009f50:	d909      	bls.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f52:	2303      	movs	r3, #3
 8009f54:	75fb      	strb	r3, [r7, #23]
 8009f56:	e006      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	75fb      	strb	r3, [r7, #23]
 8009f5c:	e003      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	75fb      	strb	r3, [r7, #23]
 8009f62:	e000      	b.n	8009f66 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f64:	bf00      	nop
  }

  return status;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	371c      	adds	r7, #28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3301      	adds	r3, #1
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	2b03      	cmp	r3, #3
 8009f8a:	d120      	bne.n	8009fce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	1e9a      	subs	r2, r3, #2
 8009f92:	88fb      	ldrh	r3, [r7, #6]
 8009f94:	4293      	cmp	r3, r2
 8009f96:	bf28      	it	cs
 8009f98:	4613      	movcs	r3, r2
 8009f9a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3302      	adds	r3, #2
 8009fa0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	82fb      	strh	r3, [r7, #22]
 8009fa6:	e00b      	b.n	8009fc0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009fa8:	8afb      	ldrh	r3, [r7, #22]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	4413      	add	r3, r2
 8009fae:	781a      	ldrb	r2, [r3, #0]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009fba:	8afb      	ldrh	r3, [r7, #22]
 8009fbc:	3302      	adds	r3, #2
 8009fbe:	82fb      	strh	r3, [r7, #22]
 8009fc0:	8afa      	ldrh	r2, [r7, #22]
 8009fc2:	8abb      	ldrh	r3, [r7, #20]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d3ef      	bcc.n	8009fa8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	701a      	strb	r2, [r3, #0]
  }
}
 8009fce:	bf00      	nop
 8009fd0:	371c      	adds	r7, #28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b085      	sub	sp, #20
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	7812      	ldrb	r2, [r2, #0]
 8009fec:	4413      	add	r3, r2
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a000:	68fb      	ldr	r3, [r7, #12]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b086      	sub	sp, #24
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	4613      	mov	r3, r2
 800a01a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a01c:	2301      	movs	r3, #1
 800a01e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	789b      	ldrb	r3, [r3, #2]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d002      	beq.n	800a02e <USBH_CtlReq+0x20>
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d01d      	beq.n	800a068 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a02c:	e043      	b.n	800a0b6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	88fa      	ldrh	r2, [r7, #6]
 800a038:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2201      	movs	r2, #1
 800a03e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2202      	movs	r2, #2
 800a044:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a046:	2301      	movs	r3, #1
 800a048:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2203      	movs	r2, #3
 800a04e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a05e:	2300      	movs	r3, #0
 800a060:	2200      	movs	r2, #0
 800a062:	f000 fd55 	bl	800ab10 <osMessageQueuePut>
      break;
 800a066:	e026      	b.n	800a0b6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 f829 	bl	800a0c0 <USBH_HandleControl>
 800a06e:	4603      	mov	r3, r0
 800a070:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <USBH_CtlReq+0x70>
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	2b03      	cmp	r3, #3
 800a07c:	d106      	bne.n	800a08c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	761a      	strb	r2, [r3, #24]
 800a08a:	e005      	b.n	800a098 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
 800a08e:	2b02      	cmp	r3, #2
 800a090:	d102      	bne.n	800a098 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2201      	movs	r2, #1
 800a096:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2203      	movs	r2, #3
 800a09c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f000 fd2e 	bl	800ab10 <osMessageQueuePut>
      break;
 800a0b4:	bf00      	nop
  }
  return status;
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af02      	add	r7, sp, #8
 800a0c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	7e1b      	ldrb	r3, [r3, #24]
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	2b0a      	cmp	r3, #10
 800a0d8:	f200 8229 	bhi.w	800a52e <USBH_HandleControl+0x46e>
 800a0dc:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e4 <USBH_HandleControl+0x24>)
 800a0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e2:	bf00      	nop
 800a0e4:	0800a111 	.word	0x0800a111
 800a0e8:	0800a12b 	.word	0x0800a12b
 800a0ec:	0800a1cd 	.word	0x0800a1cd
 800a0f0:	0800a1f3 	.word	0x0800a1f3
 800a0f4:	0800a27f 	.word	0x0800a27f
 800a0f8:	0800a2a9 	.word	0x0800a2a9
 800a0fc:	0800a36b 	.word	0x0800a36b
 800a100:	0800a38d 	.word	0x0800a38d
 800a104:	0800a41f 	.word	0x0800a41f
 800a108:	0800a445 	.word	0x0800a445
 800a10c:	0800a4d7 	.word	0x0800a4d7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f103 0110 	add.w	r1, r3, #16
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	795b      	ldrb	r3, [r3, #5]
 800a11a:	461a      	mov	r2, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa17 	bl	800a550 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2202      	movs	r2, #2
 800a126:	761a      	strb	r2, [r3, #24]
      break;
 800a128:	e20c      	b.n	800a544 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	795b      	ldrb	r3, [r3, #5]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f003 fd79 	bl	800dc28 <USBH_LL_GetURBState>
 800a136:	4603      	mov	r3, r0
 800a138:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d12c      	bne.n	800a19a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	7c1b      	ldrb	r3, [r3, #16]
 800a144:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a148:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	8adb      	ldrh	r3, [r3, #22]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a152:	7b7b      	ldrb	r3, [r7, #13]
 800a154:	2b80      	cmp	r3, #128	@ 0x80
 800a156:	d103      	bne.n	800a160 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2203      	movs	r2, #3
 800a15c:	761a      	strb	r2, [r3, #24]
 800a15e:	e00d      	b.n	800a17c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2205      	movs	r2, #5
 800a164:	761a      	strb	r2, [r3, #24]
 800a166:	e009      	b.n	800a17c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a168:	7b7b      	ldrb	r3, [r7, #13]
 800a16a:	2b80      	cmp	r3, #128	@ 0x80
 800a16c:	d103      	bne.n	800a176 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2209      	movs	r2, #9
 800a172:	761a      	strb	r2, [r3, #24]
 800a174:	e002      	b.n	800a17c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2207      	movs	r2, #7
 800a17a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2203      	movs	r2, #3
 800a180:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a190:	2300      	movs	r3, #0
 800a192:	2200      	movs	r2, #0
 800a194:	f000 fcbc 	bl	800ab10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a198:	e1cb      	b.n	800a532 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
 800a19c:	2b04      	cmp	r3, #4
 800a19e:	d003      	beq.n	800a1a8 <USBH_HandleControl+0xe8>
 800a1a0:	7bbb      	ldrb	r3, [r7, #14]
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	f040 81c5 	bne.w	800a532 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	220b      	movs	r2, #11
 800a1ac:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f000 fca3 	bl	800ab10 <osMessageQueuePut>
      break;
 800a1ca:	e1b2      	b.n	800a532 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6899      	ldr	r1, [r3, #8]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	899a      	ldrh	r2, [r3, #12]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	791b      	ldrb	r3, [r3, #4]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f9f2 	bl	800a5ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2204      	movs	r2, #4
 800a1ee:	761a      	strb	r2, [r3, #24]
      break;
 800a1f0:	e1a8      	b.n	800a544 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	791b      	ldrb	r3, [r3, #4]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f003 fd15 	bl	800dc28 <USBH_LL_GetURBState>
 800a1fe:	4603      	mov	r3, r0
 800a200:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a202:	7bbb      	ldrb	r3, [r7, #14]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d110      	bne.n	800a22a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2209      	movs	r2, #9
 800a20c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2203      	movs	r2, #3
 800a212:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a222:	2300      	movs	r3, #0
 800a224:	2200      	movs	r2, #0
 800a226:	f000 fc73 	bl	800ab10 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a22a:	7bbb      	ldrb	r3, [r7, #14]
 800a22c:	2b05      	cmp	r3, #5
 800a22e:	d110      	bne.n	800a252 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a230:	2303      	movs	r3, #3
 800a232:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2203      	movs	r2, #3
 800a238:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a248:	2300      	movs	r3, #0
 800a24a:	2200      	movs	r2, #0
 800a24c:	f000 fc60 	bl	800ab10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a250:	e171      	b.n	800a536 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	2b04      	cmp	r3, #4
 800a256:	f040 816e 	bne.w	800a536 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	220b      	movs	r2, #11
 800a25e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2203      	movs	r2, #3
 800a264:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a274:	2300      	movs	r3, #0
 800a276:	2200      	movs	r2, #0
 800a278:	f000 fc4a 	bl	800ab10 <osMessageQueuePut>
      break;
 800a27c:	e15b      	b.n	800a536 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6899      	ldr	r1, [r3, #8]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	899a      	ldrh	r2, [r3, #12]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	795b      	ldrb	r3, [r3, #5]
 800a28a:	2001      	movs	r0, #1
 800a28c:	9000      	str	r0, [sp, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f978 	bl	800a584 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2206      	movs	r2, #6
 800a2a4:	761a      	strb	r2, [r3, #24]
      break;
 800a2a6:	e14d      	b.n	800a544 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	795b      	ldrb	r3, [r3, #5]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f003 fcba 	bl	800dc28 <USBH_LL_GetURBState>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d111      	bne.n	800a2e2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2207      	movs	r2, #7
 800a2c2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2203      	movs	r2, #3
 800a2c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a2d8:	2300      	movs	r3, #0
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f000 fc18 	bl	800ab10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2e0:	e12b      	b.n	800a53a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a2e2:	7bbb      	ldrb	r3, [r7, #14]
 800a2e4:	2b05      	cmp	r3, #5
 800a2e6:	d113      	bne.n	800a310 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	220c      	movs	r2, #12
 800a2ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2203      	movs	r2, #3
 800a2f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a306:	2300      	movs	r3, #0
 800a308:	2200      	movs	r2, #0
 800a30a:	f000 fc01 	bl	800ab10 <osMessageQueuePut>
      break;
 800a30e:	e114      	b.n	800a53a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a310:	7bbb      	ldrb	r3, [r7, #14]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d111      	bne.n	800a33a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2205      	movs	r2, #5
 800a31a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2203      	movs	r2, #3
 800a320:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a330:	2300      	movs	r3, #0
 800a332:	2200      	movs	r2, #0
 800a334:	f000 fbec 	bl	800ab10 <osMessageQueuePut>
      break;
 800a338:	e0ff      	b.n	800a53a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a33a:	7bbb      	ldrb	r3, [r7, #14]
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	f040 80fc 	bne.w	800a53a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	220b      	movs	r2, #11
 800a346:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a348:	2302      	movs	r3, #2
 800a34a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2203      	movs	r2, #3
 800a350:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a360:	2300      	movs	r3, #0
 800a362:	2200      	movs	r2, #0
 800a364:	f000 fbd4 	bl	800ab10 <osMessageQueuePut>
      break;
 800a368:	e0e7      	b.n	800a53a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	791b      	ldrb	r3, [r3, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	2100      	movs	r1, #0
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f92b 	bl	800a5ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2208      	movs	r2, #8
 800a388:	761a      	strb	r2, [r3, #24]

      break;
 800a38a:	e0db      	b.n	800a544 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	791b      	ldrb	r3, [r3, #4]
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f003 fc48 	bl	800dc28 <USBH_LL_GetURBState>
 800a398:	4603      	mov	r3, r0
 800a39a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a39c:	7bbb      	ldrb	r3, [r7, #14]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d113      	bne.n	800a3ca <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	220d      	movs	r2, #13
 800a3a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2203      	movs	r2, #3
 800a3b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f000 fba4 	bl	800ab10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3c8:	e0b9      	b.n	800a53e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a3ca:	7bbb      	ldrb	r3, [r7, #14]
 800a3cc:	2b04      	cmp	r3, #4
 800a3ce:	d111      	bne.n	800a3f4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	220b      	movs	r2, #11
 800a3d4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2203      	movs	r2, #3
 800a3da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f000 fb8f 	bl	800ab10 <osMessageQueuePut>
      break;
 800a3f2:	e0a4      	b.n	800a53e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a3f4:	7bbb      	ldrb	r3, [r7, #14]
 800a3f6:	2b05      	cmp	r3, #5
 800a3f8:	f040 80a1 	bne.w	800a53e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2203      	movs	r2, #3
 800a404:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a414:	2300      	movs	r3, #0
 800a416:	2200      	movs	r2, #0
 800a418:	f000 fb7a 	bl	800ab10 <osMessageQueuePut>
      break;
 800a41c:	e08f      	b.n	800a53e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	795b      	ldrb	r3, [r3, #5]
 800a422:	2201      	movs	r2, #1
 800a424:	9200      	str	r2, [sp, #0]
 800a426:	2200      	movs	r2, #0
 800a428:	2100      	movs	r1, #0
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f8aa 	bl	800a584 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a436:	b29a      	uxth	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	220a      	movs	r2, #10
 800a440:	761a      	strb	r2, [r3, #24]
      break;
 800a442:	e07f      	b.n	800a544 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	795b      	ldrb	r3, [r3, #5]
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f003 fbec 	bl	800dc28 <USBH_LL_GetURBState>
 800a450:	4603      	mov	r3, r0
 800a452:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d113      	bne.n	800a482 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	220d      	movs	r2, #13
 800a462:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2203      	movs	r2, #3
 800a468:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a478:	2300      	movs	r3, #0
 800a47a:	2200      	movs	r2, #0
 800a47c:	f000 fb48 	bl	800ab10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a480:	e05f      	b.n	800a542 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	2b02      	cmp	r3, #2
 800a486:	d111      	bne.n	800a4ac <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2209      	movs	r2, #9
 800a48c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2203      	movs	r2, #3
 800a492:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f000 fb33 	bl	800ab10 <osMessageQueuePut>
      break;
 800a4aa:	e04a      	b.n	800a542 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	2b04      	cmp	r3, #4
 800a4b0:	d147      	bne.n	800a542 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	220b      	movs	r2, #11
 800a4b6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2203      	movs	r2, #3
 800a4bc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f000 fb1e 	bl	800ab10 <osMessageQueuePut>
      break;
 800a4d4:	e035      	b.n	800a542 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	7e5b      	ldrb	r3, [r3, #25]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	765a      	strb	r2, [r3, #25]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	7e5b      	ldrb	r3, [r3, #25]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d806      	bhi.n	800a4f8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a4f6:	e025      	b.n	800a544 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4fe:	2106      	movs	r1, #6
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	795b      	ldrb	r3, [r3, #5]
 800a50e:	4619      	mov	r1, r3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f90d 	bl	800a730 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	791b      	ldrb	r3, [r3, #4]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f907 	bl	800a730 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a528:	2302      	movs	r3, #2
 800a52a:	73fb      	strb	r3, [r7, #15]
      break;
 800a52c:	e00a      	b.n	800a544 <USBH_HandleControl+0x484>

    default:
      break;
 800a52e:	bf00      	nop
 800a530:	e008      	b.n	800a544 <USBH_HandleControl+0x484>
      break;
 800a532:	bf00      	nop
 800a534:	e006      	b.n	800a544 <USBH_HandleControl+0x484>
      break;
 800a536:	bf00      	nop
 800a538:	e004      	b.n	800a544 <USBH_HandleControl+0x484>
      break;
 800a53a:	bf00      	nop
 800a53c:	e002      	b.n	800a544 <USBH_HandleControl+0x484>
      break;
 800a53e:	bf00      	nop
 800a540:	e000      	b.n	800a544 <USBH_HandleControl+0x484>
      break;
 800a542:	bf00      	nop
  }

  return status;
 800a544:	7bfb      	ldrb	r3, [r7, #15]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop

0800a550 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af04      	add	r7, sp, #16
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	4613      	mov	r3, r2
 800a55c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a55e:	79f9      	ldrb	r1, [r7, #7]
 800a560:	2300      	movs	r3, #0
 800a562:	9303      	str	r3, [sp, #12]
 800a564:	2308      	movs	r3, #8
 800a566:	9302      	str	r3, [sp, #8]
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	9301      	str	r3, [sp, #4]
 800a56c:	2300      	movs	r3, #0
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	2300      	movs	r3, #0
 800a572:	2200      	movs	r2, #0
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f003 fb26 	bl	800dbc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af04      	add	r7, sp, #16
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	4611      	mov	r1, r2
 800a590:	461a      	mov	r2, r3
 800a592:	460b      	mov	r3, r1
 800a594:	80fb      	strh	r3, [r7, #6]
 800a596:	4613      	mov	r3, r2
 800a598:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5a8:	7979      	ldrb	r1, [r7, #5]
 800a5aa:	7e3b      	ldrb	r3, [r7, #24]
 800a5ac:	9303      	str	r3, [sp, #12]
 800a5ae:	88fb      	ldrh	r3, [r7, #6]
 800a5b0:	9302      	str	r3, [sp, #8]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	9301      	str	r3, [sp, #4]
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	2200      	movs	r2, #0
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f003 fb01 	bl	800dbc6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b088      	sub	sp, #32
 800a5d2:	af04      	add	r7, sp, #16
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	4611      	mov	r1, r2
 800a5da:	461a      	mov	r2, r3
 800a5dc:	460b      	mov	r3, r1
 800a5de:	80fb      	strh	r3, [r7, #6]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5e4:	7979      	ldrb	r1, [r7, #5]
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	9303      	str	r3, [sp, #12]
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	9302      	str	r3, [sp, #8]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	9301      	str	r3, [sp, #4]
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f003 fae3 	bl	800dbc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a600:	2300      	movs	r3, #0

}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b088      	sub	sp, #32
 800a60e:	af04      	add	r7, sp, #16
 800a610:	60f8      	str	r0, [r7, #12]
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	4611      	mov	r1, r2
 800a616:	461a      	mov	r2, r3
 800a618:	460b      	mov	r3, r1
 800a61a:	80fb      	strh	r3, [r7, #6]
 800a61c:	4613      	mov	r3, r2
 800a61e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a62a:	2300      	movs	r3, #0
 800a62c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a62e:	7979      	ldrb	r1, [r7, #5]
 800a630:	7e3b      	ldrb	r3, [r7, #24]
 800a632:	9303      	str	r3, [sp, #12]
 800a634:	88fb      	ldrh	r3, [r7, #6]
 800a636:	9302      	str	r3, [sp, #8]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	2301      	movs	r3, #1
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2302      	movs	r3, #2
 800a642:	2200      	movs	r2, #0
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f003 fabe 	bl	800dbc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b088      	sub	sp, #32
 800a658:	af04      	add	r7, sp, #16
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	4611      	mov	r1, r2
 800a660:	461a      	mov	r2, r3
 800a662:	460b      	mov	r3, r1
 800a664:	80fb      	strh	r3, [r7, #6]
 800a666:	4613      	mov	r3, r2
 800a668:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a66a:	7979      	ldrb	r1, [r7, #5]
 800a66c:	2300      	movs	r3, #0
 800a66e:	9303      	str	r3, [sp, #12]
 800a670:	88fb      	ldrh	r3, [r7, #6]
 800a672:	9302      	str	r3, [sp, #8]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	9301      	str	r3, [sp, #4]
 800a678:	2301      	movs	r3, #1
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	2302      	movs	r3, #2
 800a67e:	2201      	movs	r2, #1
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f003 faa0 	bl	800dbc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af04      	add	r7, sp, #16
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	4608      	mov	r0, r1
 800a69a:	4611      	mov	r1, r2
 800a69c:	461a      	mov	r2, r3
 800a69e:	4603      	mov	r3, r0
 800a6a0:	70fb      	strb	r3, [r7, #3]
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	70bb      	strb	r3, [r7, #2]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a6aa:	7878      	ldrb	r0, [r7, #1]
 800a6ac:	78ba      	ldrb	r2, [r7, #2]
 800a6ae:	78f9      	ldrb	r1, [r7, #3]
 800a6b0:	8b3b      	ldrh	r3, [r7, #24]
 800a6b2:	9302      	str	r3, [sp, #8]
 800a6b4:	7d3b      	ldrb	r3, [r7, #20]
 800a6b6:	9301      	str	r3, [sp, #4]
 800a6b8:	7c3b      	ldrb	r3, [r7, #16]
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	4603      	mov	r3, r0
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f003 fa33 	bl	800db2a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f003 fa52 	bl	800db88 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f836 	bl	800a76c <USBH_GetFreePipe>
 800a700:	4603      	mov	r3, r0
 800a702:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a704:	89fb      	ldrh	r3, [r7, #14]
 800a706:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d00a      	beq.n	800a724 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a70e:	78fa      	ldrb	r2, [r7, #3]
 800a710:	89fb      	ldrh	r3, [r7, #14]
 800a712:	f003 030f 	and.w	r3, r3, #15
 800a716:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	33e0      	adds	r3, #224	@ 0xe0
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	440b      	add	r3, r1
 800a722:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a724:	89fb      	ldrh	r3, [r7, #14]
 800a726:	b2db      	uxtb	r3, r3
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	460b      	mov	r3, r1
 800a73a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a73c:	78fb      	ldrb	r3, [r7, #3]
 800a73e:	2b0f      	cmp	r3, #15
 800a740:	d80d      	bhi.n	800a75e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	33e0      	adds	r3, #224	@ 0xe0
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	78fb      	ldrb	r3, [r7, #3]
 800a750:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	33e0      	adds	r3, #224	@ 0xe0
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	440b      	add	r3, r1
 800a75c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a774:	2300      	movs	r3, #0
 800a776:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a778:	2300      	movs	r3, #0
 800a77a:	73fb      	strb	r3, [r7, #15]
 800a77c:	e00f      	b.n	800a79e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a77e:	7bfb      	ldrb	r3, [r7, #15]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	33e0      	adds	r3, #224	@ 0xe0
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d102      	bne.n	800a798 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	b29b      	uxth	r3, r3
 800a796:	e007      	b.n	800a7a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	3301      	adds	r3, #1
 800a79c:	73fb      	strb	r3, [r7, #15]
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
 800a7a0:	2b0f      	cmp	r3, #15
 800a7a2:	d9ec      	bls.n	800a77e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a7a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <__NVIC_SetPriority>:
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	6039      	str	r1, [r7, #0]
 800a7be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	db0a      	blt.n	800a7de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	490c      	ldr	r1, [pc, #48]	@ (800a800 <__NVIC_SetPriority+0x4c>)
 800a7ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7d2:	0112      	lsls	r2, r2, #4
 800a7d4:	b2d2      	uxtb	r2, r2
 800a7d6:	440b      	add	r3, r1
 800a7d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a7dc:	e00a      	b.n	800a7f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	4908      	ldr	r1, [pc, #32]	@ (800a804 <__NVIC_SetPriority+0x50>)
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	f003 030f 	and.w	r3, r3, #15
 800a7ea:	3b04      	subs	r3, #4
 800a7ec:	0112      	lsls	r2, r2, #4
 800a7ee:	b2d2      	uxtb	r2, r2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	761a      	strb	r2, [r3, #24]
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	e000e100 	.word	0xe000e100
 800a804:	e000ed00 	.word	0xe000ed00

0800a808 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a80c:	4b05      	ldr	r3, [pc, #20]	@ (800a824 <SysTick_Handler+0x1c>)
 800a80e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a810:	f001 ff30 	bl	800c674 <xTaskGetSchedulerState>
 800a814:	4603      	mov	r3, r0
 800a816:	2b01      	cmp	r3, #1
 800a818:	d001      	beq.n	800a81e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a81a:	f002 fd25 	bl	800d268 <xPortSysTickHandler>
  }
}
 800a81e:	bf00      	nop
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	e000e010 	.word	0xe000e010

0800a828 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a828:	b580      	push	{r7, lr}
 800a82a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a82c:	2100      	movs	r1, #0
 800a82e:	f06f 0004 	mvn.w	r0, #4
 800a832:	f7ff ffbf 	bl	800a7b4 <__NVIC_SetPriority>
#endif
}
 800a836:	bf00      	nop
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a842:	f3ef 8305 	mrs	r3, IPSR
 800a846:	603b      	str	r3, [r7, #0]
  return(result);
 800a848:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a84e:	f06f 0305 	mvn.w	r3, #5
 800a852:	607b      	str	r3, [r7, #4]
 800a854:	e00c      	b.n	800a870 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a856:	4b0a      	ldr	r3, [pc, #40]	@ (800a880 <osKernelInitialize+0x44>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d105      	bne.n	800a86a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a85e:	4b08      	ldr	r3, [pc, #32]	@ (800a880 <osKernelInitialize+0x44>)
 800a860:	2201      	movs	r2, #1
 800a862:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a864:	2300      	movs	r3, #0
 800a866:	607b      	str	r3, [r7, #4]
 800a868:	e002      	b.n	800a870 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295
 800a86e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a870:	687b      	ldr	r3, [r7, #4]
}
 800a872:	4618      	mov	r0, r3
 800a874:	370c      	adds	r7, #12
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	2000037c 	.word	0x2000037c

0800a884 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a88a:	f3ef 8305 	mrs	r3, IPSR
 800a88e:	603b      	str	r3, [r7, #0]
  return(result);
 800a890:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a896:	f06f 0305 	mvn.w	r3, #5
 800a89a:	607b      	str	r3, [r7, #4]
 800a89c:	e010      	b.n	800a8c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a89e:	4b0b      	ldr	r3, [pc, #44]	@ (800a8cc <osKernelStart+0x48>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d109      	bne.n	800a8ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a8a6:	f7ff ffbf 	bl	800a828 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a8aa:	4b08      	ldr	r3, [pc, #32]	@ (800a8cc <osKernelStart+0x48>)
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a8b0:	f001 fa6a 	bl	800bd88 <vTaskStartScheduler>
      stat = osOK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	607b      	str	r3, [r7, #4]
 800a8b8:	e002      	b.n	800a8c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a8be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a8c0:	687b      	ldr	r3, [r7, #4]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	2000037c 	.word	0x2000037c

0800a8d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08e      	sub	sp, #56	@ 0x38
 800a8d4:	af04      	add	r7, sp, #16
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8e0:	f3ef 8305 	mrs	r3, IPSR
 800a8e4:	617b      	str	r3, [r7, #20]
  return(result);
 800a8e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d17e      	bne.n	800a9ea <osThreadNew+0x11a>
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d07b      	beq.n	800a9ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a8f2:	2380      	movs	r3, #128	@ 0x80
 800a8f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a8f6:	2318      	movs	r3, #24
 800a8f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a902:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d045      	beq.n	800a996 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <osThreadNew+0x48>
        name = attr->name;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d008      	beq.n	800a93e <osThreadNew+0x6e>
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	2b38      	cmp	r3, #56	@ 0x38
 800a930:	d805      	bhi.n	800a93e <osThreadNew+0x6e>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <osThreadNew+0x72>
        return (NULL);
 800a93e:	2300      	movs	r3, #0
 800a940:	e054      	b.n	800a9ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	089b      	lsrs	r3, r3, #2
 800a950:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00e      	beq.n	800a978 <osThreadNew+0xa8>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	2b5f      	cmp	r3, #95	@ 0x5f
 800a960:	d90a      	bls.n	800a978 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a966:	2b00      	cmp	r3, #0
 800a968:	d006      	beq.n	800a978 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <osThreadNew+0xa8>
        mem = 1;
 800a972:	2301      	movs	r3, #1
 800a974:	61bb      	str	r3, [r7, #24]
 800a976:	e010      	b.n	800a99a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10c      	bne.n	800a99a <osThreadNew+0xca>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d108      	bne.n	800a99a <osThreadNew+0xca>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d104      	bne.n	800a99a <osThreadNew+0xca>
          mem = 0;
 800a990:	2300      	movs	r3, #0
 800a992:	61bb      	str	r3, [r7, #24]
 800a994:	e001      	b.n	800a99a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a996:	2300      	movs	r3, #0
 800a998:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d110      	bne.n	800a9c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a9a8:	9202      	str	r2, [sp, #8]
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	6a3a      	ldr	r2, [r7, #32]
 800a9b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f001 f808 	bl	800b9cc <xTaskCreateStatic>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	613b      	str	r3, [r7, #16]
 800a9c0:	e013      	b.n	800a9ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d110      	bne.n	800a9ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	f107 0310 	add.w	r3, r7, #16
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f001 f856 	bl	800ba8c <xTaskCreate>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d001      	beq.n	800a9ea <osThreadNew+0x11a>
            hTask = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a9ea:	693b      	ldr	r3, [r7, #16]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3728      	adds	r7, #40	@ 0x28
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9fc:	f3ef 8305 	mrs	r3, IPSR
 800aa00:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d003      	beq.n	800aa10 <osDelay+0x1c>
    stat = osErrorISR;
 800aa08:	f06f 0305 	mvn.w	r3, #5
 800aa0c:	60fb      	str	r3, [r7, #12]
 800aa0e:	e007      	b.n	800aa20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f001 f97e 	bl	800bd1c <vTaskDelay>
    }
  }

  return (stat);
 800aa20:	68fb      	ldr	r3, [r7, #12]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b08a      	sub	sp, #40	@ 0x28
 800aa2e:	af02      	add	r7, sp, #8
 800aa30:	60f8      	str	r0, [r7, #12]
 800aa32:	60b9      	str	r1, [r7, #8]
 800aa34:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aa36:	2300      	movs	r3, #0
 800aa38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa3a:	f3ef 8305 	mrs	r3, IPSR
 800aa3e:	613b      	str	r3, [r7, #16]
  return(result);
 800aa40:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d15f      	bne.n	800ab06 <osMessageQueueNew+0xdc>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d05c      	beq.n	800ab06 <osMessageQueueNew+0xdc>
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d059      	beq.n	800ab06 <osMessageQueueNew+0xdc>
    mem = -1;
 800aa52:	f04f 33ff 	mov.w	r3, #4294967295
 800aa56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d029      	beq.n	800aab2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d012      	beq.n	800aa8c <osMessageQueueNew+0x62>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	2b4f      	cmp	r3, #79	@ 0x4f
 800aa6c:	d90e      	bls.n	800aa8c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00a      	beq.n	800aa8c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	695a      	ldr	r2, [r3, #20]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	68b9      	ldr	r1, [r7, #8]
 800aa7e:	fb01 f303 	mul.w	r3, r1, r3
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d302      	bcc.n	800aa8c <osMessageQueueNew+0x62>
        mem = 1;
 800aa86:	2301      	movs	r3, #1
 800aa88:	61bb      	str	r3, [r7, #24]
 800aa8a:	e014      	b.n	800aab6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d110      	bne.n	800aab6 <osMessageQueueNew+0x8c>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10c      	bne.n	800aab6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d108      	bne.n	800aab6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d104      	bne.n	800aab6 <osMessageQueueNew+0x8c>
          mem = 0;
 800aaac:	2300      	movs	r3, #0
 800aaae:	61bb      	str	r3, [r7, #24]
 800aab0:	e001      	b.n	800aab6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d10b      	bne.n	800aad4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	691a      	ldr	r2, [r3, #16]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	2100      	movs	r1, #0
 800aac6:	9100      	str	r1, [sp, #0]
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f000 fa30 	bl	800af30 <xQueueGenericCreateStatic>
 800aad0:	61f8      	str	r0, [r7, #28]
 800aad2:	e008      	b.n	800aae6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d105      	bne.n	800aae6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800aada:	2200      	movs	r2, #0
 800aadc:	68b9      	ldr	r1, [r7, #8]
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f000 faa3 	bl	800b02a <xQueueGenericCreate>
 800aae4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00c      	beq.n	800ab06 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d003      	beq.n	800aafa <osMessageQueueNew+0xd0>
        name = attr->name;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	e001      	b.n	800aafe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800aafe:	6979      	ldr	r1, [r7, #20]
 800ab00:	69f8      	ldr	r0, [r7, #28]
 800ab02:	f000 ff05 	bl	800b910 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ab06:	69fb      	ldr	r3, [r7, #28]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3720      	adds	r7, #32
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	603b      	str	r3, [r7, #0]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab28:	f3ef 8305 	mrs	r3, IPSR
 800ab2c:	617b      	str	r3, [r7, #20]
  return(result);
 800ab2e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d028      	beq.n	800ab86 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d005      	beq.n	800ab46 <osMessageQueuePut+0x36>
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <osMessageQueuePut+0x36>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ab46:	f06f 0303 	mvn.w	r3, #3
 800ab4a:	61fb      	str	r3, [r7, #28]
 800ab4c:	e038      	b.n	800abc0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ab52:	f107 0210 	add.w	r2, r7, #16
 800ab56:	2300      	movs	r3, #0
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	69b8      	ldr	r0, [r7, #24]
 800ab5c:	f000 fbc6 	bl	800b2ec <xQueueGenericSendFromISR>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d003      	beq.n	800ab6e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ab66:	f06f 0302 	mvn.w	r3, #2
 800ab6a:	61fb      	str	r3, [r7, #28]
 800ab6c:	e028      	b.n	800abc0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d025      	beq.n	800abc0 <osMessageQueuePut+0xb0>
 800ab74:	4b15      	ldr	r3, [pc, #84]	@ (800abcc <osMessageQueuePut+0xbc>)
 800ab76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	e01c      	b.n	800abc0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <osMessageQueuePut+0x82>
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d103      	bne.n	800ab9a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ab92:	f06f 0303 	mvn.w	r3, #3
 800ab96:	61fb      	str	r3, [r7, #28]
 800ab98:	e012      	b.n	800abc0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	68b9      	ldr	r1, [r7, #8]
 800aba0:	69b8      	ldr	r0, [r7, #24]
 800aba2:	f000 faa1 	bl	800b0e8 <xQueueGenericSend>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d009      	beq.n	800abc0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800abb2:	f06f 0301 	mvn.w	r3, #1
 800abb6:	61fb      	str	r3, [r7, #28]
 800abb8:	e002      	b.n	800abc0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800abba:	f06f 0302 	mvn.w	r3, #2
 800abbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800abc0:	69fb      	ldr	r3, [r7, #28]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3720      	adds	r7, #32
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	e000ed04 	.word	0xe000ed04

0800abd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
 800abdc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abe6:	f3ef 8305 	mrs	r3, IPSR
 800abea:	617b      	str	r3, [r7, #20]
  return(result);
 800abec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d028      	beq.n	800ac44 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d005      	beq.n	800ac04 <osMessageQueueGet+0x34>
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d002      	beq.n	800ac04 <osMessageQueueGet+0x34>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d003      	beq.n	800ac0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ac04:	f06f 0303 	mvn.w	r3, #3
 800ac08:	61fb      	str	r3, [r7, #28]
 800ac0a:	e037      	b.n	800ac7c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ac10:	f107 0310 	add.w	r3, r7, #16
 800ac14:	461a      	mov	r2, r3
 800ac16:	68b9      	ldr	r1, [r7, #8]
 800ac18:	69b8      	ldr	r0, [r7, #24]
 800ac1a:	f000 fce7 	bl	800b5ec <xQueueReceiveFromISR>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d003      	beq.n	800ac2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ac24:	f06f 0302 	mvn.w	r3, #2
 800ac28:	61fb      	str	r3, [r7, #28]
 800ac2a:	e027      	b.n	800ac7c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d024      	beq.n	800ac7c <osMessageQueueGet+0xac>
 800ac32:	4b15      	ldr	r3, [pc, #84]	@ (800ac88 <osMessageQueueGet+0xb8>)
 800ac34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	e01b      	b.n	800ac7c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <osMessageQueueGet+0x80>
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d103      	bne.n	800ac58 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ac50:	f06f 0303 	mvn.w	r3, #3
 800ac54:	61fb      	str	r3, [r7, #28]
 800ac56:	e011      	b.n	800ac7c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ac58:	683a      	ldr	r2, [r7, #0]
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	69b8      	ldr	r0, [r7, #24]
 800ac5e:	f000 fbe3 	bl	800b428 <xQueueReceive>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d009      	beq.n	800ac7c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ac6e:	f06f 0301 	mvn.w	r3, #1
 800ac72:	61fb      	str	r3, [r7, #28]
 800ac74:	e002      	b.n	800ac7c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ac76:	f06f 0302 	mvn.w	r3, #2
 800ac7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ac7c:	69fb      	ldr	r3, [r7, #28]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	e000ed04 	.word	0xe000ed04

0800ac8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	4a07      	ldr	r2, [pc, #28]	@ (800acb8 <vApplicationGetIdleTaskMemory+0x2c>)
 800ac9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	4a06      	ldr	r2, [pc, #24]	@ (800acbc <vApplicationGetIdleTaskMemory+0x30>)
 800aca2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2280      	movs	r2, #128	@ 0x80
 800aca8:	601a      	str	r2, [r3, #0]
}
 800acaa:	bf00      	nop
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	20000380 	.word	0x20000380
 800acbc:	200003e0 	.word	0x200003e0

0800acc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	4a07      	ldr	r2, [pc, #28]	@ (800acec <vApplicationGetTimerTaskMemory+0x2c>)
 800acd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	4a06      	ldr	r2, [pc, #24]	@ (800acf0 <vApplicationGetTimerTaskMemory+0x30>)
 800acd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800acde:	601a      	str	r2, [r3, #0]
}
 800ace0:	bf00      	nop
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	200005e0 	.word	0x200005e0
 800acf0:	20000640 	.word	0x20000640

0800acf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f103 0208 	add.w	r2, r3, #8
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f103 0208 	add.w	r2, r3, #8
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f103 0208 	add.w	r2, r3, #8
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad42:	bf00      	nop
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b085      	sub	sp, #20
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	689a      	ldr	r2, [r3, #8]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	601a      	str	r2, [r3, #0]
}
 800ad8a:	bf00      	nop
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad96:	b480      	push	{r7}
 800ad98:	b085      	sub	sp, #20
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adac:	d103      	bne.n	800adb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e00c      	b.n	800add0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	3308      	adds	r3, #8
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	e002      	b.n	800adc4 <vListInsert+0x2e>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d2f6      	bcs.n	800adbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	683a      	ldr	r2, [r7, #0]
 800adde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	601a      	str	r2, [r3, #0]
}
 800adfc:	bf00      	nop
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	6892      	ldr	r2, [r2, #8]
 800ae1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	6852      	ldr	r2, [r2, #4]
 800ae28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d103      	bne.n	800ae3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	689a      	ldr	r2, [r3, #8]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	1e5a      	subs	r2, r3, #1
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10b      	bne.n	800ae88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	e7fd      	b.n	800ae84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ae88:	f002 f95e 	bl	800d148 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae94:	68f9      	ldr	r1, [r7, #12]
 800ae96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae98:	fb01 f303 	mul.w	r3, r1, r3
 800ae9c:	441a      	add	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	68f9      	ldr	r1, [r7, #12]
 800aebc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aebe:	fb01 f303 	mul.w	r3, r1, r3
 800aec2:	441a      	add	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	22ff      	movs	r2, #255	@ 0xff
 800aecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	22ff      	movs	r2, #255	@ 0xff
 800aed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d114      	bne.n	800af08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d01a      	beq.n	800af1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3310      	adds	r3, #16
 800aeea:	4618      	mov	r0, r3
 800aeec:	f001 fa00 	bl	800c2f0 <xTaskRemoveFromEventList>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d012      	beq.n	800af1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aef6:	4b0d      	ldr	r3, [pc, #52]	@ (800af2c <xQueueGenericReset+0xd0>)
 800aef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	e009      	b.n	800af1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	3310      	adds	r3, #16
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff fef1 	bl	800acf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	3324      	adds	r3, #36	@ 0x24
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff feec 	bl	800acf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af1c:	f002 f946 	bl	800d1ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af20:	2301      	movs	r3, #1
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	e000ed04 	.word	0xe000ed04

0800af30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af30:	b580      	push	{r7, lr}
 800af32:	b08e      	sub	sp, #56	@ 0x38
 800af34:	af02      	add	r7, sp, #8
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10b      	bne.n	800af5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af56:	bf00      	nop
 800af58:	bf00      	nop
 800af5a:	e7fd      	b.n	800af58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10b      	bne.n	800af7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800af62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop
 800af78:	e7fd      	b.n	800af76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <xQueueGenericCreateStatic+0x56>
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <xQueueGenericCreateStatic+0x5a>
 800af86:	2301      	movs	r3, #1
 800af88:	e000      	b.n	800af8c <xQueueGenericCreateStatic+0x5c>
 800af8a:	2300      	movs	r3, #0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10b      	bne.n	800afa8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	623b      	str	r3, [r7, #32]
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	e7fd      	b.n	800afa4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <xQueueGenericCreateStatic+0x84>
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <xQueueGenericCreateStatic+0x88>
 800afb4:	2301      	movs	r3, #1
 800afb6:	e000      	b.n	800afba <xQueueGenericCreateStatic+0x8a>
 800afb8:	2300      	movs	r3, #0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10b      	bne.n	800afd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	61fb      	str	r3, [r7, #28]
}
 800afd0:	bf00      	nop
 800afd2:	bf00      	nop
 800afd4:	e7fd      	b.n	800afd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800afd6:	2350      	movs	r3, #80	@ 0x50
 800afd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	2b50      	cmp	r3, #80	@ 0x50
 800afde:	d00b      	beq.n	800aff8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	61bb      	str	r3, [r7, #24]
}
 800aff2:	bf00      	nop
 800aff4:	bf00      	nop
 800aff6:	e7fd      	b.n	800aff4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aff8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800affe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00d      	beq.n	800b020 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b00c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	4613      	mov	r3, r2
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	68b9      	ldr	r1, [r7, #8]
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f000 f840 	bl	800b0a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b022:	4618      	mov	r0, r3
 800b024:	3730      	adds	r7, #48	@ 0x30
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b08a      	sub	sp, #40	@ 0x28
 800b02e:	af02      	add	r7, sp, #8
 800b030:	60f8      	str	r0, [r7, #12]
 800b032:	60b9      	str	r1, [r7, #8]
 800b034:	4613      	mov	r3, r2
 800b036:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10b      	bne.n	800b056 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	613b      	str	r3, [r7, #16]
}
 800b050:	bf00      	nop
 800b052:	bf00      	nop
 800b054:	e7fd      	b.n	800b052 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	fb02 f303 	mul.w	r3, r2, r3
 800b05e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	3350      	adds	r3, #80	@ 0x50
 800b064:	4618      	mov	r0, r3
 800b066:	f002 f991 	bl	800d38c <pvPortMalloc>
 800b06a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d011      	beq.n	800b096 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	3350      	adds	r3, #80	@ 0x50
 800b07a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b084:	79fa      	ldrb	r2, [r7, #7]
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	4613      	mov	r3, r2
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	68b9      	ldr	r1, [r7, #8]
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 f805 	bl	800b0a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b096:	69bb      	ldr	r3, [r7, #24]
	}
 800b098:	4618      	mov	r0, r3
 800b09a:	3720      	adds	r7, #32
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d103      	bne.n	800b0bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	69ba      	ldr	r2, [r7, #24]
 800b0b8:	601a      	str	r2, [r3, #0]
 800b0ba:	e002      	b.n	800b0c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0ce:	2101      	movs	r1, #1
 800b0d0:	69b8      	ldr	r0, [r7, #24]
 800b0d2:	f7ff fec3 	bl	800ae5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	78fa      	ldrb	r2, [r7, #3]
 800b0da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0de:	bf00      	nop
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
	...

0800b0e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08e      	sub	sp, #56	@ 0x38
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
 800b0f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10b      	bne.n	800b11c <xQueueGenericSend+0x34>
	__asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b108:	f383 8811 	msr	BASEPRI, r3
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b116:	bf00      	nop
 800b118:	bf00      	nop
 800b11a:	e7fd      	b.n	800b118 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d103      	bne.n	800b12a <xQueueGenericSend+0x42>
 800b122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <xQueueGenericSend+0x46>
 800b12a:	2301      	movs	r3, #1
 800b12c:	e000      	b.n	800b130 <xQueueGenericSend+0x48>
 800b12e:	2300      	movs	r3, #0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10b      	bne.n	800b14c <xQueueGenericSend+0x64>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b146:	bf00      	nop
 800b148:	bf00      	nop
 800b14a:	e7fd      	b.n	800b148 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d103      	bne.n	800b15a <xQueueGenericSend+0x72>
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <xQueueGenericSend+0x76>
 800b15a:	2301      	movs	r3, #1
 800b15c:	e000      	b.n	800b160 <xQueueGenericSend+0x78>
 800b15e:	2300      	movs	r3, #0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10b      	bne.n	800b17c <xQueueGenericSend+0x94>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	623b      	str	r3, [r7, #32]
}
 800b176:	bf00      	nop
 800b178:	bf00      	nop
 800b17a:	e7fd      	b.n	800b178 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b17c:	f001 fa7a 	bl	800c674 <xTaskGetSchedulerState>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d102      	bne.n	800b18c <xQueueGenericSend+0xa4>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <xQueueGenericSend+0xa8>
 800b18c:	2301      	movs	r3, #1
 800b18e:	e000      	b.n	800b192 <xQueueGenericSend+0xaa>
 800b190:	2300      	movs	r3, #0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10b      	bne.n	800b1ae <xQueueGenericSend+0xc6>
	__asm volatile
 800b196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	61fb      	str	r3, [r7, #28]
}
 800b1a8:	bf00      	nop
 800b1aa:	bf00      	nop
 800b1ac:	e7fd      	b.n	800b1aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1ae:	f001 ffcb 	bl	800d148 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d302      	bcc.n	800b1c4 <xQueueGenericSend+0xdc>
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d129      	bne.n	800b218 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	68b9      	ldr	r1, [r7, #8]
 800b1c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1ca:	f000 fa91 	bl	800b6f0 <prvCopyDataToQueue>
 800b1ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d010      	beq.n	800b1fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1da:	3324      	adds	r3, #36	@ 0x24
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 f887 	bl	800c2f0 <xTaskRemoveFromEventList>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d013      	beq.n	800b210 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b1e8:	4b3f      	ldr	r3, [pc, #252]	@ (800b2e8 <xQueueGenericSend+0x200>)
 800b1ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ee:	601a      	str	r2, [r3, #0]
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	e00a      	b.n	800b210 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d007      	beq.n	800b210 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b200:	4b39      	ldr	r3, [pc, #228]	@ (800b2e8 <xQueueGenericSend+0x200>)
 800b202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b206:	601a      	str	r2, [r3, #0]
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b210:	f001 ffcc 	bl	800d1ac <vPortExitCritical>
				return pdPASS;
 800b214:	2301      	movs	r3, #1
 800b216:	e063      	b.n	800b2e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d103      	bne.n	800b226 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b21e:	f001 ffc5 	bl	800d1ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b222:	2300      	movs	r3, #0
 800b224:	e05c      	b.n	800b2e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d106      	bne.n	800b23a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b22c:	f107 0314 	add.w	r3, r7, #20
 800b230:	4618      	mov	r0, r3
 800b232:	f001 f8c1 	bl	800c3b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b236:	2301      	movs	r3, #1
 800b238:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b23a:	f001 ffb7 	bl	800d1ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b23e:	f000 fe0b 	bl	800be58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b242:	f001 ff81 	bl	800d148 <vPortEnterCritical>
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b24c:	b25b      	sxtb	r3, r3
 800b24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b252:	d103      	bne.n	800b25c <xQueueGenericSend+0x174>
 800b254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b262:	b25b      	sxtb	r3, r3
 800b264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b268:	d103      	bne.n	800b272 <xQueueGenericSend+0x18a>
 800b26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b272:	f001 ff9b 	bl	800d1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b276:	1d3a      	adds	r2, r7, #4
 800b278:	f107 0314 	add.w	r3, r7, #20
 800b27c:	4611      	mov	r1, r2
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 f8b0 	bl	800c3e4 <xTaskCheckForTimeOut>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d124      	bne.n	800b2d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b28a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b28c:	f000 fb28 	bl	800b8e0 <prvIsQueueFull>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d018      	beq.n	800b2c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b298:	3310      	adds	r3, #16
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	4611      	mov	r1, r2
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 ffd4 	bl	800c24c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b2a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2a6:	f000 fab3 	bl	800b810 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b2aa:	f000 fde3 	bl	800be74 <xTaskResumeAll>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f47f af7c 	bne.w	800b1ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e8 <xQueueGenericSend+0x200>)
 800b2b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	e772      	b.n	800b1ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b2c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2ca:	f000 faa1 	bl	800b810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2ce:	f000 fdd1 	bl	800be74 <xTaskResumeAll>
 800b2d2:	e76c      	b.n	800b1ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2d6:	f000 fa9b 	bl	800b810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2da:	f000 fdcb 	bl	800be74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3738      	adds	r7, #56	@ 0x38
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	e000ed04 	.word	0xe000ed04

0800b2ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b090      	sub	sp, #64	@ 0x40
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10b      	bne.n	800b31c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b316:	bf00      	nop
 800b318:	bf00      	nop
 800b31a:	e7fd      	b.n	800b318 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d103      	bne.n	800b32a <xQueueGenericSendFromISR+0x3e>
 800b322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b326:	2b00      	cmp	r3, #0
 800b328:	d101      	bne.n	800b32e <xQueueGenericSendFromISR+0x42>
 800b32a:	2301      	movs	r3, #1
 800b32c:	e000      	b.n	800b330 <xQueueGenericSendFromISR+0x44>
 800b32e:	2300      	movs	r3, #0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10b      	bne.n	800b34c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b346:	bf00      	nop
 800b348:	bf00      	nop
 800b34a:	e7fd      	b.n	800b348 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d103      	bne.n	800b35a <xQueueGenericSendFromISR+0x6e>
 800b352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b356:	2b01      	cmp	r3, #1
 800b358:	d101      	bne.n	800b35e <xQueueGenericSendFromISR+0x72>
 800b35a:	2301      	movs	r3, #1
 800b35c:	e000      	b.n	800b360 <xQueueGenericSendFromISR+0x74>
 800b35e:	2300      	movs	r3, #0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10b      	bne.n	800b37c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	623b      	str	r3, [r7, #32]
}
 800b376:	bf00      	nop
 800b378:	bf00      	nop
 800b37a:	e7fd      	b.n	800b378 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b37c:	f001 ffc4 	bl	800d308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b380:	f3ef 8211 	mrs	r2, BASEPRI
 800b384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	61fa      	str	r2, [r7, #28]
 800b396:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b398:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b39a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d302      	bcc.n	800b3ae <xQueueGenericSendFromISR+0xc2>
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d12f      	bne.n	800b40e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	68b9      	ldr	r1, [r7, #8]
 800b3c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b3c4:	f000 f994 	bl	800b6f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d0:	d112      	bne.n	800b3f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d016      	beq.n	800b408 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3dc:	3324      	adds	r3, #36	@ 0x24
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 ff86 	bl	800c2f0 <xTaskRemoveFromEventList>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00e      	beq.n	800b408 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00b      	beq.n	800b408 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	e007      	b.n	800b408 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	b25a      	sxtb	r2, r3
 800b402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b408:	2301      	movs	r3, #1
 800b40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b40c:	e001      	b.n	800b412 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b40e:	2300      	movs	r3, #0
 800b410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b414:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b41c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b420:	4618      	mov	r0, r3
 800b422:	3740      	adds	r7, #64	@ 0x40
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08c      	sub	sp, #48	@ 0x30
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b434:	2300      	movs	r3, #0
 800b436:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10b      	bne.n	800b45a <xQueueReceive+0x32>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	623b      	str	r3, [r7, #32]
}
 800b454:	bf00      	nop
 800b456:	bf00      	nop
 800b458:	e7fd      	b.n	800b456 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d103      	bne.n	800b468 <xQueueReceive+0x40>
 800b460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <xQueueReceive+0x44>
 800b468:	2301      	movs	r3, #1
 800b46a:	e000      	b.n	800b46e <xQueueReceive+0x46>
 800b46c:	2300      	movs	r3, #0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10b      	bne.n	800b48a <xQueueReceive+0x62>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	61fb      	str	r3, [r7, #28]
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop
 800b488:	e7fd      	b.n	800b486 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b48a:	f001 f8f3 	bl	800c674 <xTaskGetSchedulerState>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d102      	bne.n	800b49a <xQueueReceive+0x72>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d101      	bne.n	800b49e <xQueueReceive+0x76>
 800b49a:	2301      	movs	r3, #1
 800b49c:	e000      	b.n	800b4a0 <xQueueReceive+0x78>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10b      	bne.n	800b4bc <xQueueReceive+0x94>
	__asm volatile
 800b4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a8:	f383 8811 	msr	BASEPRI, r3
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	61bb      	str	r3, [r7, #24]
}
 800b4b6:	bf00      	nop
 800b4b8:	bf00      	nop
 800b4ba:	e7fd      	b.n	800b4b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4bc:	f001 fe44 	bl	800d148 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d01f      	beq.n	800b50c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4cc:	68b9      	ldr	r1, [r7, #8]
 800b4ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4d0:	f000 f978 	bl	800b7c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d6:	1e5a      	subs	r2, r3, #1
 800b4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00f      	beq.n	800b504 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e6:	3310      	adds	r3, #16
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 ff01 	bl	800c2f0 <xTaskRemoveFromEventList>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d007      	beq.n	800b504 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4f4:	4b3c      	ldr	r3, [pc, #240]	@ (800b5e8 <xQueueReceive+0x1c0>)
 800b4f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4fa:	601a      	str	r2, [r3, #0]
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b504:	f001 fe52 	bl	800d1ac <vPortExitCritical>
				return pdPASS;
 800b508:	2301      	movs	r3, #1
 800b50a:	e069      	b.n	800b5e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d103      	bne.n	800b51a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b512:	f001 fe4b 	bl	800d1ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b516:	2300      	movs	r3, #0
 800b518:	e062      	b.n	800b5e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d106      	bne.n	800b52e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b520:	f107 0310 	add.w	r3, r7, #16
 800b524:	4618      	mov	r0, r3
 800b526:	f000 ff47 	bl	800c3b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b52a:	2301      	movs	r3, #1
 800b52c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b52e:	f001 fe3d 	bl	800d1ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b532:	f000 fc91 	bl	800be58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b536:	f001 fe07 	bl	800d148 <vPortEnterCritical>
 800b53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b540:	b25b      	sxtb	r3, r3
 800b542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b546:	d103      	bne.n	800b550 <xQueueReceive+0x128>
 800b548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b552:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b556:	b25b      	sxtb	r3, r3
 800b558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55c:	d103      	bne.n	800b566 <xQueueReceive+0x13e>
 800b55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b566:	f001 fe21 	bl	800d1ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b56a:	1d3a      	adds	r2, r7, #4
 800b56c:	f107 0310 	add.w	r3, r7, #16
 800b570:	4611      	mov	r1, r2
 800b572:	4618      	mov	r0, r3
 800b574:	f000 ff36 	bl	800c3e4 <xTaskCheckForTimeOut>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d123      	bne.n	800b5c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b57e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b580:	f000 f998 	bl	800b8b4 <prvIsQueueEmpty>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d017      	beq.n	800b5ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58c:	3324      	adds	r3, #36	@ 0x24
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	4611      	mov	r1, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f000 fe5a 	bl	800c24c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b598:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b59a:	f000 f939 	bl	800b810 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b59e:	f000 fc69 	bl	800be74 <xTaskResumeAll>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d189      	bne.n	800b4bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b5a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e8 <xQueueReceive+0x1c0>)
 800b5aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5ae:	601a      	str	r2, [r3, #0]
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	e780      	b.n	800b4bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b5ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5bc:	f000 f928 	bl	800b810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5c0:	f000 fc58 	bl	800be74 <xTaskResumeAll>
 800b5c4:	e77a      	b.n	800b4bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5c8:	f000 f922 	bl	800b810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5cc:	f000 fc52 	bl	800be74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5d2:	f000 f96f 	bl	800b8b4 <prvIsQueueEmpty>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f43f af6f 	beq.w	800b4bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3730      	adds	r7, #48	@ 0x30
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08e      	sub	sp, #56	@ 0x38
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10b      	bne.n	800b61a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	623b      	str	r3, [r7, #32]
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop
 800b618:	e7fd      	b.n	800b616 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d103      	bne.n	800b628 <xQueueReceiveFromISR+0x3c>
 800b620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <xQueueReceiveFromISR+0x40>
 800b628:	2301      	movs	r3, #1
 800b62a:	e000      	b.n	800b62e <xQueueReceiveFromISR+0x42>
 800b62c:	2300      	movs	r3, #0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10b      	bne.n	800b64a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	61fb      	str	r3, [r7, #28]
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop
 800b648:	e7fd      	b.n	800b646 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b64a:	f001 fe5d 	bl	800d308 <vPortValidateInterruptPriority>
	__asm volatile
 800b64e:	f3ef 8211 	mrs	r2, BASEPRI
 800b652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	61ba      	str	r2, [r7, #24]
 800b664:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b666:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b668:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b66e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b672:	2b00      	cmp	r3, #0
 800b674:	d02f      	beq.n	800b6d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b67c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b680:	68b9      	ldr	r1, [r7, #8]
 800b682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b684:	f000 f89e 	bl	800b7c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68a:	1e5a      	subs	r2, r3, #1
 800b68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b690:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b698:	d112      	bne.n	800b6c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d016      	beq.n	800b6d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a4:	3310      	adds	r3, #16
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 fe22 	bl	800c2f0 <xTaskRemoveFromEventList>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00e      	beq.n	800b6d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00b      	beq.n	800b6d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	e007      	b.n	800b6d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	b25a      	sxtb	r2, r3
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6d4:	e001      	b.n	800b6da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	f383 8811 	msr	BASEPRI, r3
}
 800b6e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3738      	adds	r7, #56	@ 0x38
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b704:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10d      	bne.n	800b72a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d14d      	bne.n	800b7b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f000 ffc8 	bl	800c6b0 <xTaskPriorityDisinherit>
 800b720:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	609a      	str	r2, [r3, #8]
 800b728:	e043      	b.n	800b7b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d119      	bne.n	800b764 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6858      	ldr	r0, [r3, #4]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b738:	461a      	mov	r2, r3
 800b73a:	68b9      	ldr	r1, [r7, #8]
 800b73c:	f002 fc26 	bl	800df8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	685a      	ldr	r2, [r3, #4]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b748:	441a      	add	r2, r3
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	429a      	cmp	r2, r3
 800b758:	d32b      	bcc.n	800b7b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	605a      	str	r2, [r3, #4]
 800b762:	e026      	b.n	800b7b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	68d8      	ldr	r0, [r3, #12]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b76c:	461a      	mov	r2, r3
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	f002 fc0c 	bl	800df8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	68da      	ldr	r2, [r3, #12]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b77c:	425b      	negs	r3, r3
 800b77e:	441a      	add	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	68da      	ldr	r2, [r3, #12]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d207      	bcs.n	800b7a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b798:	425b      	negs	r3, r3
 800b79a:	441a      	add	r2, r3
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d105      	bne.n	800b7b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	1c5a      	adds	r2, r3, #1
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b7ba:	697b      	ldr	r3, [r7, #20]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d018      	beq.n	800b808 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68da      	ldr	r2, [r3, #12]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7de:	441a      	add	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d303      	bcc.n	800b7f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68d9      	ldr	r1, [r3, #12]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b800:	461a      	mov	r2, r3
 800b802:	6838      	ldr	r0, [r7, #0]
 800b804:	f002 fbc2 	bl	800df8c <memcpy>
	}
}
 800b808:	bf00      	nop
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b818:	f001 fc96 	bl	800d148 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b822:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b824:	e011      	b.n	800b84a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d012      	beq.n	800b854 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3324      	adds	r3, #36	@ 0x24
 800b832:	4618      	mov	r0, r3
 800b834:	f000 fd5c 	bl	800c2f0 <xTaskRemoveFromEventList>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d001      	beq.n	800b842 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b83e:	f000 fe35 	bl	800c4ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b842:	7bfb      	ldrb	r3, [r7, #15]
 800b844:	3b01      	subs	r3, #1
 800b846:	b2db      	uxtb	r3, r3
 800b848:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b84a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	dce9      	bgt.n	800b826 <prvUnlockQueue+0x16>
 800b852:	e000      	b.n	800b856 <prvUnlockQueue+0x46>
					break;
 800b854:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	22ff      	movs	r2, #255	@ 0xff
 800b85a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b85e:	f001 fca5 	bl	800d1ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b862:	f001 fc71 	bl	800d148 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b86c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b86e:	e011      	b.n	800b894 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d012      	beq.n	800b89e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3310      	adds	r3, #16
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 fd37 	bl	800c2f0 <xTaskRemoveFromEventList>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b888:	f000 fe10 	bl	800c4ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b88c:	7bbb      	ldrb	r3, [r7, #14]
 800b88e:	3b01      	subs	r3, #1
 800b890:	b2db      	uxtb	r3, r3
 800b892:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dce9      	bgt.n	800b870 <prvUnlockQueue+0x60>
 800b89c:	e000      	b.n	800b8a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b89e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	22ff      	movs	r2, #255	@ 0xff
 800b8a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b8a8:	f001 fc80 	bl	800d1ac <vPortExitCritical>
}
 800b8ac:	bf00      	nop
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8bc:	f001 fc44 	bl	800d148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d102      	bne.n	800b8ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	60fb      	str	r3, [r7, #12]
 800b8cc:	e001      	b.n	800b8d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8d2:	f001 fc6b 	bl	800d1ac <vPortExitCritical>

	return xReturn;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8e8:	f001 fc2e 	bl	800d148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d102      	bne.n	800b8fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	e001      	b.n	800b902 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b8fe:	2300      	movs	r3, #0
 800b900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b902:	f001 fc53 	bl	800d1ac <vPortExitCritical>

	return xReturn;
 800b906:	68fb      	ldr	r3, [r7, #12]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b91a:	2300      	movs	r3, #0
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	e014      	b.n	800b94a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b920:	4a0f      	ldr	r2, [pc, #60]	@ (800b960 <vQueueAddToRegistry+0x50>)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10b      	bne.n	800b944 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b92c:	490c      	ldr	r1, [pc, #48]	@ (800b960 <vQueueAddToRegistry+0x50>)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b936:	4a0a      	ldr	r2, [pc, #40]	@ (800b960 <vQueueAddToRegistry+0x50>)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	4413      	add	r3, r2
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b942:	e006      	b.n	800b952 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	3301      	adds	r3, #1
 800b948:	60fb      	str	r3, [r7, #12]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b07      	cmp	r3, #7
 800b94e:	d9e7      	bls.n	800b920 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b950:	bf00      	nop
 800b952:	bf00      	nop
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	20000a40 	.word	0x20000a40

0800b964 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b974:	f001 fbe8 	bl	800d148 <vPortEnterCritical>
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b97e:	b25b      	sxtb	r3, r3
 800b980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b984:	d103      	bne.n	800b98e <vQueueWaitForMessageRestricted+0x2a>
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b994:	b25b      	sxtb	r3, r3
 800b996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99a:	d103      	bne.n	800b9a4 <vQueueWaitForMessageRestricted+0x40>
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9a4:	f001 fc02 	bl	800d1ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d106      	bne.n	800b9be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	3324      	adds	r3, #36	@ 0x24
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	68b9      	ldr	r1, [r7, #8]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 fc6d 	bl	800c298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b9be:	6978      	ldr	r0, [r7, #20]
 800b9c0:	f7ff ff26 	bl	800b810 <prvUnlockQueue>
	}
 800b9c4:	bf00      	nop
 800b9c6:	3718      	adds	r7, #24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b08e      	sub	sp, #56	@ 0x38
 800b9d0:	af04      	add	r7, sp, #16
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
 800b9d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10b      	bne.n	800b9f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e4:	f383 8811 	msr	BASEPRI, r3
 800b9e8:	f3bf 8f6f 	isb	sy
 800b9ec:	f3bf 8f4f 	dsb	sy
 800b9f0:	623b      	str	r3, [r7, #32]
}
 800b9f2:	bf00      	nop
 800b9f4:	bf00      	nop
 800b9f6:	e7fd      	b.n	800b9f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10b      	bne.n	800ba16 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	61fb      	str	r3, [r7, #28]
}
 800ba10:	bf00      	nop
 800ba12:	bf00      	nop
 800ba14:	e7fd      	b.n	800ba12 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ba16:	2360      	movs	r3, #96	@ 0x60
 800ba18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	2b60      	cmp	r3, #96	@ 0x60
 800ba1e:	d00b      	beq.n	800ba38 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	61bb      	str	r3, [r7, #24]
}
 800ba32:	bf00      	nop
 800ba34:	bf00      	nop
 800ba36:	e7fd      	b.n	800ba34 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ba38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01e      	beq.n	800ba7e <xTaskCreateStatic+0xb2>
 800ba40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d01b      	beq.n	800ba7e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba48:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba4e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ba50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba52:	2202      	movs	r2, #2
 800ba54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ba58:	2300      	movs	r3, #0
 800ba5a:	9303      	str	r3, [sp, #12]
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	9302      	str	r3, [sp, #8]
 800ba60:	f107 0314 	add.w	r3, r7, #20
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	68b9      	ldr	r1, [r7, #8]
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 f850 	bl	800bb16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba78:	f000 f8e0 	bl	800bc3c <prvAddNewTaskToReadyList>
 800ba7c:	e001      	b.n	800ba82 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ba82:	697b      	ldr	r3, [r7, #20]
	}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3728      	adds	r7, #40	@ 0x28
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08c      	sub	sp, #48	@ 0x30
 800ba90:	af04      	add	r7, sp, #16
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	603b      	str	r3, [r7, #0]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ba9c:	88fb      	ldrh	r3, [r7, #6]
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 fc73 	bl	800d38c <pvPortMalloc>
 800baa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00e      	beq.n	800bacc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800baae:	2060      	movs	r0, #96	@ 0x60
 800bab0:	f001 fc6c 	bl	800d38c <pvPortMalloc>
 800bab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	631a      	str	r2, [r3, #48]	@ 0x30
 800bac2:	e005      	b.n	800bad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bac4:	6978      	ldr	r0, [r7, #20]
 800bac6:	f001 fd35 	bl	800d534 <vPortFree>
 800baca:	e001      	b.n	800bad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bacc:	2300      	movs	r3, #0
 800bace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d017      	beq.n	800bb06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bade:	88fa      	ldrh	r2, [r7, #6]
 800bae0:	2300      	movs	r3, #0
 800bae2:	9303      	str	r3, [sp, #12]
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	9302      	str	r3, [sp, #8]
 800bae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baea:	9301      	str	r3, [sp, #4]
 800baec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	68b9      	ldr	r1, [r7, #8]
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f000 f80e 	bl	800bb16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bafa:	69f8      	ldr	r0, [r7, #28]
 800bafc:	f000 f89e 	bl	800bc3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bb00:	2301      	movs	r3, #1
 800bb02:	61bb      	str	r3, [r7, #24]
 800bb04:	e002      	b.n	800bb0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bb06:	f04f 33ff 	mov.w	r3, #4294967295
 800bb0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bb0c:	69bb      	ldr	r3, [r7, #24]
	}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3720      	adds	r7, #32
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b088      	sub	sp, #32
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	60f8      	str	r0, [r7, #12]
 800bb1e:	60b9      	str	r1, [r7, #8]
 800bb20:	607a      	str	r2, [r7, #4]
 800bb22:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb26:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	21a5      	movs	r1, #165	@ 0xa5
 800bb30:	f002 f9e8 	bl	800df04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4413      	add	r3, r2
 800bb44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	f023 0307 	bic.w	r3, r3, #7
 800bb4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	f003 0307 	and.w	r3, r3, #7
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00b      	beq.n	800bb70 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	617b      	str	r3, [r7, #20]
}
 800bb6a:	bf00      	nop
 800bb6c:	bf00      	nop
 800bb6e:	e7fd      	b.n	800bb6c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d01f      	beq.n	800bbb6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb76:	2300      	movs	r3, #0
 800bb78:	61fb      	str	r3, [r7, #28]
 800bb7a:	e012      	b.n	800bba2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	4413      	add	r3, r2
 800bb82:	7819      	ldrb	r1, [r3, #0]
 800bb84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	4413      	add	r3, r2
 800bb8a:	3334      	adds	r3, #52	@ 0x34
 800bb8c:	460a      	mov	r2, r1
 800bb8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	4413      	add	r3, r2
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d006      	beq.n	800bbaa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	61fb      	str	r3, [r7, #28]
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	2b0f      	cmp	r3, #15
 800bba6:	d9e9      	bls.n	800bb7c <prvInitialiseNewTask+0x66>
 800bba8:	e000      	b.n	800bbac <prvInitialiseNewTask+0x96>
			{
				break;
 800bbaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bbb4:	e003      	b.n	800bbbe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc0:	2b37      	cmp	r3, #55	@ 0x37
 800bbc2:	d901      	bls.n	800bbc8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bbc4:	2337      	movs	r3, #55	@ 0x37
 800bbc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbcc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbd2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbdc:	3304      	adds	r3, #4
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff f8a8 	bl	800ad34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe6:	3318      	adds	r3, #24
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff f8a3 	bl	800ad34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bbee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc02:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800bc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc06:	2200      	movs	r2, #0
 800bc08:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	68f9      	ldr	r1, [r7, #12]
 800bc1c:	69b8      	ldr	r0, [r7, #24]
 800bc1e:	f001 f965 	bl	800ceec <pxPortInitialiseStack>
 800bc22:	4602      	mov	r2, r0
 800bc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d002      	beq.n	800bc34 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc34:	bf00      	nop
 800bc36:	3720      	adds	r7, #32
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bc44:	f001 fa80 	bl	800d148 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bc48:	4b2d      	ldr	r3, [pc, #180]	@ (800bd00 <prvAddNewTaskToReadyList+0xc4>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	4a2c      	ldr	r2, [pc, #176]	@ (800bd00 <prvAddNewTaskToReadyList+0xc4>)
 800bc50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bc52:	4b2c      	ldr	r3, [pc, #176]	@ (800bd04 <prvAddNewTaskToReadyList+0xc8>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d109      	bne.n	800bc6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bc5a:	4a2a      	ldr	r2, [pc, #168]	@ (800bd04 <prvAddNewTaskToReadyList+0xc8>)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bc60:	4b27      	ldr	r3, [pc, #156]	@ (800bd00 <prvAddNewTaskToReadyList+0xc4>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d110      	bne.n	800bc8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bc68:	f000 fc46 	bl	800c4f8 <prvInitialiseTaskLists>
 800bc6c:	e00d      	b.n	800bc8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bc6e:	4b26      	ldr	r3, [pc, #152]	@ (800bd08 <prvAddNewTaskToReadyList+0xcc>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d109      	bne.n	800bc8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bc76:	4b23      	ldr	r3, [pc, #140]	@ (800bd04 <prvAddNewTaskToReadyList+0xc8>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d802      	bhi.n	800bc8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bc84:	4a1f      	ldr	r2, [pc, #124]	@ (800bd04 <prvAddNewTaskToReadyList+0xc8>)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bc8a:	4b20      	ldr	r3, [pc, #128]	@ (800bd0c <prvAddNewTaskToReadyList+0xd0>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	4a1e      	ldr	r2, [pc, #120]	@ (800bd0c <prvAddNewTaskToReadyList+0xd0>)
 800bc92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bc94:	4b1d      	ldr	r3, [pc, #116]	@ (800bd0c <prvAddNewTaskToReadyList+0xd0>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bca0:	4b1b      	ldr	r3, [pc, #108]	@ (800bd10 <prvAddNewTaskToReadyList+0xd4>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d903      	bls.n	800bcb0 <prvAddNewTaskToReadyList+0x74>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcac:	4a18      	ldr	r2, [pc, #96]	@ (800bd10 <prvAddNewTaskToReadyList+0xd4>)
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4a15      	ldr	r2, [pc, #84]	@ (800bd14 <prvAddNewTaskToReadyList+0xd8>)
 800bcbe:	441a      	add	r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	3304      	adds	r3, #4
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	4610      	mov	r0, r2
 800bcc8:	f7ff f841 	bl	800ad4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bccc:	f001 fa6e 	bl	800d1ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bcd0:	4b0d      	ldr	r3, [pc, #52]	@ (800bd08 <prvAddNewTaskToReadyList+0xcc>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00e      	beq.n	800bcf6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bcd8:	4b0a      	ldr	r3, [pc, #40]	@ (800bd04 <prvAddNewTaskToReadyList+0xc8>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d207      	bcs.n	800bcf6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bce6:	4b0c      	ldr	r3, [pc, #48]	@ (800bd18 <prvAddNewTaskToReadyList+0xdc>)
 800bce8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcec:	601a      	str	r2, [r3, #0]
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcf6:	bf00      	nop
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	20000f54 	.word	0x20000f54
 800bd04:	20000a80 	.word	0x20000a80
 800bd08:	20000f60 	.word	0x20000f60
 800bd0c:	20000f70 	.word	0x20000f70
 800bd10:	20000f5c 	.word	0x20000f5c
 800bd14:	20000a84 	.word	0x20000a84
 800bd18:	e000ed04 	.word	0xe000ed04

0800bd1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd24:	2300      	movs	r3, #0
 800bd26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d018      	beq.n	800bd60 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd2e:	4b14      	ldr	r3, [pc, #80]	@ (800bd80 <vTaskDelay+0x64>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00b      	beq.n	800bd4e <vTaskDelay+0x32>
	__asm volatile
 800bd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd3a:	f383 8811 	msr	BASEPRI, r3
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	f3bf 8f4f 	dsb	sy
 800bd46:	60bb      	str	r3, [r7, #8]
}
 800bd48:	bf00      	nop
 800bd4a:	bf00      	nop
 800bd4c:	e7fd      	b.n	800bd4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bd4e:	f000 f883 	bl	800be58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bd52:	2100      	movs	r1, #0
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fd1b 	bl	800c790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bd5a:	f000 f88b 	bl	800be74 <xTaskResumeAll>
 800bd5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d107      	bne.n	800bd76 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bd66:	4b07      	ldr	r3, [pc, #28]	@ (800bd84 <vTaskDelay+0x68>)
 800bd68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd6c:	601a      	str	r2, [r3, #0]
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd76:	bf00      	nop
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	20000f7c 	.word	0x20000f7c
 800bd84:	e000ed04 	.word	0xe000ed04

0800bd88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08a      	sub	sp, #40	@ 0x28
 800bd8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd92:	2300      	movs	r3, #0
 800bd94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd96:	463a      	mov	r2, r7
 800bd98:	1d39      	adds	r1, r7, #4
 800bd9a:	f107 0308 	add.w	r3, r7, #8
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fe ff74 	bl	800ac8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bda4:	6839      	ldr	r1, [r7, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	9202      	str	r2, [sp, #8]
 800bdac:	9301      	str	r3, [sp, #4]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	460a      	mov	r2, r1
 800bdb6:	4922      	ldr	r1, [pc, #136]	@ (800be40 <vTaskStartScheduler+0xb8>)
 800bdb8:	4822      	ldr	r0, [pc, #136]	@ (800be44 <vTaskStartScheduler+0xbc>)
 800bdba:	f7ff fe07 	bl	800b9cc <xTaskCreateStatic>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	4a21      	ldr	r2, [pc, #132]	@ (800be48 <vTaskStartScheduler+0xc0>)
 800bdc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bdc4:	4b20      	ldr	r3, [pc, #128]	@ (800be48 <vTaskStartScheduler+0xc0>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	617b      	str	r3, [r7, #20]
 800bdd0:	e001      	b.n	800bdd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d102      	bne.n	800bde2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bddc:	f000 fd2c 	bl	800c838 <xTimerCreateTimerTask>
 800bde0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d116      	bne.n	800be16 <vTaskStartScheduler+0x8e>
	__asm volatile
 800bde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdec:	f383 8811 	msr	BASEPRI, r3
 800bdf0:	f3bf 8f6f 	isb	sy
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	613b      	str	r3, [r7, #16]
}
 800bdfa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bdfc:	4b13      	ldr	r3, [pc, #76]	@ (800be4c <vTaskStartScheduler+0xc4>)
 800bdfe:	f04f 32ff 	mov.w	r2, #4294967295
 800be02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be04:	4b12      	ldr	r3, [pc, #72]	@ (800be50 <vTaskStartScheduler+0xc8>)
 800be06:	2201      	movs	r2, #1
 800be08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800be0a:	4b12      	ldr	r3, [pc, #72]	@ (800be54 <vTaskStartScheduler+0xcc>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be10:	f001 f8f6 	bl	800d000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be14:	e00f      	b.n	800be36 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1c:	d10b      	bne.n	800be36 <vTaskStartScheduler+0xae>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	60fb      	str	r3, [r7, #12]
}
 800be30:	bf00      	nop
 800be32:	bf00      	nop
 800be34:	e7fd      	b.n	800be32 <vTaskStartScheduler+0xaa>
}
 800be36:	bf00      	nop
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	0800e094 	.word	0x0800e094
 800be44:	0800c4c5 	.word	0x0800c4c5
 800be48:	20000f78 	.word	0x20000f78
 800be4c:	20000f74 	.word	0x20000f74
 800be50:	20000f60 	.word	0x20000f60
 800be54:	20000f58 	.word	0x20000f58

0800be58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800be58:	b480      	push	{r7}
 800be5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800be5c:	4b04      	ldr	r3, [pc, #16]	@ (800be70 <vTaskSuspendAll+0x18>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3301      	adds	r3, #1
 800be62:	4a03      	ldr	r2, [pc, #12]	@ (800be70 <vTaskSuspendAll+0x18>)
 800be64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800be66:	bf00      	nop
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	20000f7c 	.word	0x20000f7c

0800be74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800be7e:	2300      	movs	r3, #0
 800be80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800be82:	4b42      	ldr	r3, [pc, #264]	@ (800bf8c <xTaskResumeAll+0x118>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10b      	bne.n	800bea2 <xTaskResumeAll+0x2e>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	603b      	str	r3, [r7, #0]
}
 800be9c:	bf00      	nop
 800be9e:	bf00      	nop
 800bea0:	e7fd      	b.n	800be9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bea2:	f001 f951 	bl	800d148 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bea6:	4b39      	ldr	r3, [pc, #228]	@ (800bf8c <xTaskResumeAll+0x118>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	3b01      	subs	r3, #1
 800beac:	4a37      	ldr	r2, [pc, #220]	@ (800bf8c <xTaskResumeAll+0x118>)
 800beae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beb0:	4b36      	ldr	r3, [pc, #216]	@ (800bf8c <xTaskResumeAll+0x118>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d162      	bne.n	800bf7e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800beb8:	4b35      	ldr	r3, [pc, #212]	@ (800bf90 <xTaskResumeAll+0x11c>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d05e      	beq.n	800bf7e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bec0:	e02f      	b.n	800bf22 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bec2:	4b34      	ldr	r3, [pc, #208]	@ (800bf94 <xTaskResumeAll+0x120>)
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3318      	adds	r3, #24
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fe ff9a 	bl	800ae08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3304      	adds	r3, #4
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fe ff95 	bl	800ae08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bee2:	4b2d      	ldr	r3, [pc, #180]	@ (800bf98 <xTaskResumeAll+0x124>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d903      	bls.n	800bef2 <xTaskResumeAll+0x7e>
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beee:	4a2a      	ldr	r2, [pc, #168]	@ (800bf98 <xTaskResumeAll+0x124>)
 800bef0:	6013      	str	r3, [r2, #0]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef6:	4613      	mov	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4a27      	ldr	r2, [pc, #156]	@ (800bf9c <xTaskResumeAll+0x128>)
 800bf00:	441a      	add	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	3304      	adds	r3, #4
 800bf06:	4619      	mov	r1, r3
 800bf08:	4610      	mov	r0, r2
 800bf0a:	f7fe ff20 	bl	800ad4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf12:	4b23      	ldr	r3, [pc, #140]	@ (800bfa0 <xTaskResumeAll+0x12c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d302      	bcc.n	800bf22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bf1c:	4b21      	ldr	r3, [pc, #132]	@ (800bfa4 <xTaskResumeAll+0x130>)
 800bf1e:	2201      	movs	r2, #1
 800bf20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf22:	4b1c      	ldr	r3, [pc, #112]	@ (800bf94 <xTaskResumeAll+0x120>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1cb      	bne.n	800bec2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bf30:	f000 fb80 	bl	800c634 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bf34:	4b1c      	ldr	r3, [pc, #112]	@ (800bfa8 <xTaskResumeAll+0x134>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d010      	beq.n	800bf62 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf40:	f000 f846 	bl	800bfd0 <xTaskIncrementTick>
 800bf44:	4603      	mov	r3, r0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d002      	beq.n	800bf50 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bf4a:	4b16      	ldr	r3, [pc, #88]	@ (800bfa4 <xTaskResumeAll+0x130>)
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	3b01      	subs	r3, #1
 800bf54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1f1      	bne.n	800bf40 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bf5c:	4b12      	ldr	r3, [pc, #72]	@ (800bfa8 <xTaskResumeAll+0x134>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bf62:	4b10      	ldr	r3, [pc, #64]	@ (800bfa4 <xTaskResumeAll+0x130>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d009      	beq.n	800bf7e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bf6e:	4b0f      	ldr	r3, [pc, #60]	@ (800bfac <xTaskResumeAll+0x138>)
 800bf70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf74:	601a      	str	r2, [r3, #0]
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf7e:	f001 f915 	bl	800d1ac <vPortExitCritical>

	return xAlreadyYielded;
 800bf82:	68bb      	ldr	r3, [r7, #8]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	20000f7c 	.word	0x20000f7c
 800bf90:	20000f54 	.word	0x20000f54
 800bf94:	20000f14 	.word	0x20000f14
 800bf98:	20000f5c 	.word	0x20000f5c
 800bf9c:	20000a84 	.word	0x20000a84
 800bfa0:	20000a80 	.word	0x20000a80
 800bfa4:	20000f68 	.word	0x20000f68
 800bfa8:	20000f64 	.word	0x20000f64
 800bfac:	e000ed04 	.word	0xe000ed04

0800bfb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bfb6:	4b05      	ldr	r3, [pc, #20]	@ (800bfcc <xTaskGetTickCount+0x1c>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bfbc:	687b      	ldr	r3, [r7, #4]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	20000f58 	.word	0x20000f58

0800bfd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfda:	4b4f      	ldr	r3, [pc, #316]	@ (800c118 <xTaskIncrementTick+0x148>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f040 8090 	bne.w	800c104 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bfe4:	4b4d      	ldr	r3, [pc, #308]	@ (800c11c <xTaskIncrementTick+0x14c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bfec:	4a4b      	ldr	r2, [pc, #300]	@ (800c11c <xTaskIncrementTick+0x14c>)
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d121      	bne.n	800c03c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bff8:	4b49      	ldr	r3, [pc, #292]	@ (800c120 <xTaskIncrementTick+0x150>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00b      	beq.n	800c01a <xTaskIncrementTick+0x4a>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	603b      	str	r3, [r7, #0]
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop
 800c018:	e7fd      	b.n	800c016 <xTaskIncrementTick+0x46>
 800c01a:	4b41      	ldr	r3, [pc, #260]	@ (800c120 <xTaskIncrementTick+0x150>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	60fb      	str	r3, [r7, #12]
 800c020:	4b40      	ldr	r3, [pc, #256]	@ (800c124 <xTaskIncrementTick+0x154>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a3e      	ldr	r2, [pc, #248]	@ (800c120 <xTaskIncrementTick+0x150>)
 800c026:	6013      	str	r3, [r2, #0]
 800c028:	4a3e      	ldr	r2, [pc, #248]	@ (800c124 <xTaskIncrementTick+0x154>)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6013      	str	r3, [r2, #0]
 800c02e:	4b3e      	ldr	r3, [pc, #248]	@ (800c128 <xTaskIncrementTick+0x158>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3301      	adds	r3, #1
 800c034:	4a3c      	ldr	r2, [pc, #240]	@ (800c128 <xTaskIncrementTick+0x158>)
 800c036:	6013      	str	r3, [r2, #0]
 800c038:	f000 fafc 	bl	800c634 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c03c:	4b3b      	ldr	r3, [pc, #236]	@ (800c12c <xTaskIncrementTick+0x15c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	429a      	cmp	r2, r3
 800c044:	d349      	bcc.n	800c0da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c046:	4b36      	ldr	r3, [pc, #216]	@ (800c120 <xTaskIncrementTick+0x150>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d104      	bne.n	800c05a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c050:	4b36      	ldr	r3, [pc, #216]	@ (800c12c <xTaskIncrementTick+0x15c>)
 800c052:	f04f 32ff 	mov.w	r2, #4294967295
 800c056:	601a      	str	r2, [r3, #0]
					break;
 800c058:	e03f      	b.n	800c0da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c05a:	4b31      	ldr	r3, [pc, #196]	@ (800c120 <xTaskIncrementTick+0x150>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	68db      	ldr	r3, [r3, #12]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d203      	bcs.n	800c07a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c072:	4a2e      	ldr	r2, [pc, #184]	@ (800c12c <xTaskIncrementTick+0x15c>)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c078:	e02f      	b.n	800c0da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	3304      	adds	r3, #4
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fe fec2 	bl	800ae08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d004      	beq.n	800c096 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	3318      	adds	r3, #24
 800c090:	4618      	mov	r0, r3
 800c092:	f7fe feb9 	bl	800ae08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c09a:	4b25      	ldr	r3, [pc, #148]	@ (800c130 <xTaskIncrementTick+0x160>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d903      	bls.n	800c0aa <xTaskIncrementTick+0xda>
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a6:	4a22      	ldr	r2, [pc, #136]	@ (800c130 <xTaskIncrementTick+0x160>)
 800c0a8:	6013      	str	r3, [r2, #0]
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4a1f      	ldr	r2, [pc, #124]	@ (800c134 <xTaskIncrementTick+0x164>)
 800c0b8:	441a      	add	r2, r3
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	4619      	mov	r1, r3
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	f7fe fe44 	bl	800ad4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0ca:	4b1b      	ldr	r3, [pc, #108]	@ (800c138 <xTaskIncrementTick+0x168>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d3b8      	bcc.n	800c046 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0d8:	e7b5      	b.n	800c046 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c0da:	4b17      	ldr	r3, [pc, #92]	@ (800c138 <xTaskIncrementTick+0x168>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0e0:	4914      	ldr	r1, [pc, #80]	@ (800c134 <xTaskIncrementTick+0x164>)
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	440b      	add	r3, r1
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d901      	bls.n	800c0f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c0f6:	4b11      	ldr	r3, [pc, #68]	@ (800c13c <xTaskIncrementTick+0x16c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d007      	beq.n	800c10e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c0fe:	2301      	movs	r3, #1
 800c100:	617b      	str	r3, [r7, #20]
 800c102:	e004      	b.n	800c10e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c104:	4b0e      	ldr	r3, [pc, #56]	@ (800c140 <xTaskIncrementTick+0x170>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	3301      	adds	r3, #1
 800c10a:	4a0d      	ldr	r2, [pc, #52]	@ (800c140 <xTaskIncrementTick+0x170>)
 800c10c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c10e:	697b      	ldr	r3, [r7, #20]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3718      	adds	r7, #24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20000f7c 	.word	0x20000f7c
 800c11c:	20000f58 	.word	0x20000f58
 800c120:	20000f0c 	.word	0x20000f0c
 800c124:	20000f10 	.word	0x20000f10
 800c128:	20000f6c 	.word	0x20000f6c
 800c12c:	20000f74 	.word	0x20000f74
 800c130:	20000f5c 	.word	0x20000f5c
 800c134:	20000a84 	.word	0x20000a84
 800c138:	20000a80 	.word	0x20000a80
 800c13c:	20000f68 	.word	0x20000f68
 800c140:	20000f64 	.word	0x20000f64

0800c144 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c14a:	4b3b      	ldr	r3, [pc, #236]	@ (800c238 <vTaskSwitchContext+0xf4>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c152:	4b3a      	ldr	r3, [pc, #232]	@ (800c23c <vTaskSwitchContext+0xf8>)
 800c154:	2201      	movs	r2, #1
 800c156:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c158:	e069      	b.n	800c22e <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 800c15a:	4b38      	ldr	r3, [pc, #224]	@ (800c23c <vTaskSwitchContext+0xf8>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c160:	4b37      	ldr	r3, [pc, #220]	@ (800c240 <vTaskSwitchContext+0xfc>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c166:	613b      	str	r3, [r7, #16]
 800c168:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800c16c:	60fb      	str	r3, [r7, #12]
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	429a      	cmp	r2, r3
 800c176:	d111      	bne.n	800c19c <vTaskSwitchContext+0x58>
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	3304      	adds	r3, #4
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	429a      	cmp	r2, r3
 800c182:	d10b      	bne.n	800c19c <vTaskSwitchContext+0x58>
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	3308      	adds	r3, #8
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d105      	bne.n	800c19c <vTaskSwitchContext+0x58>
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	330c      	adds	r3, #12
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d008      	beq.n	800c1ae <vTaskSwitchContext+0x6a>
 800c19c:	4b28      	ldr	r3, [pc, #160]	@ (800c240 <vTaskSwitchContext+0xfc>)
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	4b27      	ldr	r3, [pc, #156]	@ (800c240 <vTaskSwitchContext+0xfc>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3334      	adds	r3, #52	@ 0x34
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	f7f4 f9be 	bl	800052a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ae:	4b25      	ldr	r3, [pc, #148]	@ (800c244 <vTaskSwitchContext+0x100>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	617b      	str	r3, [r7, #20]
 800c1b4:	e011      	b.n	800c1da <vTaskSwitchContext+0x96>
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10b      	bne.n	800c1d4 <vTaskSwitchContext+0x90>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	607b      	str	r3, [r7, #4]
}
 800c1ce:	bf00      	nop
 800c1d0:	bf00      	nop
 800c1d2:	e7fd      	b.n	800c1d0 <vTaskSwitchContext+0x8c>
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	617b      	str	r3, [r7, #20]
 800c1da:	491b      	ldr	r1, [pc, #108]	@ (800c248 <vTaskSwitchContext+0x104>)
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4413      	add	r3, r2
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	440b      	add	r3, r1
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d0e3      	beq.n	800c1b6 <vTaskSwitchContext+0x72>
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4a13      	ldr	r2, [pc, #76]	@ (800c248 <vTaskSwitchContext+0x104>)
 800c1fa:	4413      	add	r3, r2
 800c1fc:	60bb      	str	r3, [r7, #8]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	605a      	str	r2, [r3, #4]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	3308      	adds	r3, #8
 800c210:	429a      	cmp	r2, r3
 800c212:	d104      	bne.n	800c21e <vTaskSwitchContext+0xda>
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	685a      	ldr	r2, [r3, #4]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	605a      	str	r2, [r3, #4]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	4a06      	ldr	r2, [pc, #24]	@ (800c240 <vTaskSwitchContext+0xfc>)
 800c226:	6013      	str	r3, [r2, #0]
 800c228:	4a06      	ldr	r2, [pc, #24]	@ (800c244 <vTaskSwitchContext+0x100>)
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	6013      	str	r3, [r2, #0]
}
 800c22e:	bf00      	nop
 800c230:	3718      	adds	r7, #24
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	20000f7c 	.word	0x20000f7c
 800c23c:	20000f68 	.word	0x20000f68
 800c240:	20000a80 	.word	0x20000a80
 800c244:	20000f5c 	.word	0x20000f5c
 800c248:	20000a84 	.word	0x20000a84

0800c24c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10b      	bne.n	800c274 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c260:	f383 8811 	msr	BASEPRI, r3
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	60fb      	str	r3, [r7, #12]
}
 800c26e:	bf00      	nop
 800c270:	bf00      	nop
 800c272:	e7fd      	b.n	800c270 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c274:	4b07      	ldr	r3, [pc, #28]	@ (800c294 <vTaskPlaceOnEventList+0x48>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3318      	adds	r3, #24
 800c27a:	4619      	mov	r1, r3
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7fe fd8a 	bl	800ad96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c282:	2101      	movs	r1, #1
 800c284:	6838      	ldr	r0, [r7, #0]
 800c286:	f000 fa83 	bl	800c790 <prvAddCurrentTaskToDelayedList>
}
 800c28a:	bf00      	nop
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20000a80 	.word	0x20000a80

0800c298 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10b      	bne.n	800c2c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	617b      	str	r3, [r7, #20]
}
 800c2bc:	bf00      	nop
 800c2be:	bf00      	nop
 800c2c0:	e7fd      	b.n	800c2be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c2ec <vTaskPlaceOnEventListRestricted+0x54>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	3318      	adds	r3, #24
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f7fe fd3f 	bl	800ad4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c2dc:	6879      	ldr	r1, [r7, #4]
 800c2de:	68b8      	ldr	r0, [r7, #8]
 800c2e0:	f000 fa56 	bl	800c790 <prvAddCurrentTaskToDelayedList>
	}
 800c2e4:	bf00      	nop
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20000a80 	.word	0x20000a80

0800c2f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d10b      	bne.n	800c31e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	60fb      	str	r3, [r7, #12]
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	e7fd      	b.n	800c31a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	3318      	adds	r3, #24
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe fd70 	bl	800ae08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c328:	4b1d      	ldr	r3, [pc, #116]	@ (800c3a0 <xTaskRemoveFromEventList+0xb0>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d11d      	bne.n	800c36c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	3304      	adds	r3, #4
 800c334:	4618      	mov	r0, r3
 800c336:	f7fe fd67 	bl	800ae08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c33e:	4b19      	ldr	r3, [pc, #100]	@ (800c3a4 <xTaskRemoveFromEventList+0xb4>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d903      	bls.n	800c34e <xTaskRemoveFromEventList+0x5e>
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c34a:	4a16      	ldr	r2, [pc, #88]	@ (800c3a4 <xTaskRemoveFromEventList+0xb4>)
 800c34c:	6013      	str	r3, [r2, #0]
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4a13      	ldr	r2, [pc, #76]	@ (800c3a8 <xTaskRemoveFromEventList+0xb8>)
 800c35c:	441a      	add	r2, r3
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	3304      	adds	r3, #4
 800c362:	4619      	mov	r1, r3
 800c364:	4610      	mov	r0, r2
 800c366:	f7fe fcf2 	bl	800ad4e <vListInsertEnd>
 800c36a:	e005      	b.n	800c378 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	3318      	adds	r3, #24
 800c370:	4619      	mov	r1, r3
 800c372:	480e      	ldr	r0, [pc, #56]	@ (800c3ac <xTaskRemoveFromEventList+0xbc>)
 800c374:	f7fe fceb 	bl	800ad4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c37c:	4b0c      	ldr	r3, [pc, #48]	@ (800c3b0 <xTaskRemoveFromEventList+0xc0>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c382:	429a      	cmp	r2, r3
 800c384:	d905      	bls.n	800c392 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c386:	2301      	movs	r3, #1
 800c388:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c38a:	4b0a      	ldr	r3, [pc, #40]	@ (800c3b4 <xTaskRemoveFromEventList+0xc4>)
 800c38c:	2201      	movs	r2, #1
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	e001      	b.n	800c396 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c392:	2300      	movs	r3, #0
 800c394:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c396:	697b      	ldr	r3, [r7, #20]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3718      	adds	r7, #24
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	20000f7c 	.word	0x20000f7c
 800c3a4:	20000f5c 	.word	0x20000f5c
 800c3a8:	20000a84 	.word	0x20000a84
 800c3ac:	20000f14 	.word	0x20000f14
 800c3b0:	20000a80 	.word	0x20000a80
 800c3b4:	20000f68 	.word	0x20000f68

0800c3b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c3c0:	4b06      	ldr	r3, [pc, #24]	@ (800c3dc <vTaskInternalSetTimeOutState+0x24>)
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c3c8:	4b05      	ldr	r3, [pc, #20]	@ (800c3e0 <vTaskInternalSetTimeOutState+0x28>)
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	605a      	str	r2, [r3, #4]
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	20000f6c 	.word	0x20000f6c
 800c3e0:	20000f58 	.word	0x20000f58

0800c3e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b088      	sub	sp, #32
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d10b      	bne.n	800c40c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	613b      	str	r3, [r7, #16]
}
 800c406:	bf00      	nop
 800c408:	bf00      	nop
 800c40a:	e7fd      	b.n	800c408 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d10b      	bne.n	800c42a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	60fb      	str	r3, [r7, #12]
}
 800c424:	bf00      	nop
 800c426:	bf00      	nop
 800c428:	e7fd      	b.n	800c426 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c42a:	f000 fe8d 	bl	800d148 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c42e:	4b1d      	ldr	r3, [pc, #116]	@ (800c4a4 <xTaskCheckForTimeOut+0xc0>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c446:	d102      	bne.n	800c44e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c448:	2300      	movs	r3, #0
 800c44a:	61fb      	str	r3, [r7, #28]
 800c44c:	e023      	b.n	800c496 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	4b15      	ldr	r3, [pc, #84]	@ (800c4a8 <xTaskCheckForTimeOut+0xc4>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	429a      	cmp	r2, r3
 800c458:	d007      	beq.n	800c46a <xTaskCheckForTimeOut+0x86>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	69ba      	ldr	r2, [r7, #24]
 800c460:	429a      	cmp	r2, r3
 800c462:	d302      	bcc.n	800c46a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c464:	2301      	movs	r3, #1
 800c466:	61fb      	str	r3, [r7, #28]
 800c468:	e015      	b.n	800c496 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	429a      	cmp	r2, r3
 800c472:	d20b      	bcs.n	800c48c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	1ad2      	subs	r2, r2, r3
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff ff99 	bl	800c3b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c486:	2300      	movs	r3, #0
 800c488:	61fb      	str	r3, [r7, #28]
 800c48a:	e004      	b.n	800c496 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2200      	movs	r2, #0
 800c490:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c492:	2301      	movs	r3, #1
 800c494:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c496:	f000 fe89 	bl	800d1ac <vPortExitCritical>

	return xReturn;
 800c49a:	69fb      	ldr	r3, [r7, #28]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3720      	adds	r7, #32
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	20000f58 	.word	0x20000f58
 800c4a8:	20000f6c 	.word	0x20000f6c

0800c4ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c4b0:	4b03      	ldr	r3, [pc, #12]	@ (800c4c0 <vTaskMissedYield+0x14>)
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	601a      	str	r2, [r3, #0]
}
 800c4b6:	bf00      	nop
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	20000f68 	.word	0x20000f68

0800c4c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c4cc:	f000 f854 	bl	800c578 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c4d0:	4b07      	ldr	r3, [pc, #28]	@ (800c4f0 <prvIdleTask+0x2c>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d907      	bls.n	800c4e8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c4d8:	4b06      	ldr	r3, [pc, #24]	@ (800c4f4 <prvIdleTask+0x30>)
 800c4da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4de:	601a      	str	r2, [r3, #0]
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c4e8:	f7f4 f818 	bl	800051c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c4ec:	e7ee      	b.n	800c4cc <prvIdleTask+0x8>
 800c4ee:	bf00      	nop
 800c4f0:	20000a84 	.word	0x20000a84
 800c4f4:	e000ed04 	.word	0xe000ed04

0800c4f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c4fe:	2300      	movs	r3, #0
 800c500:	607b      	str	r3, [r7, #4]
 800c502:	e00c      	b.n	800c51e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	4613      	mov	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	4a12      	ldr	r2, [pc, #72]	@ (800c558 <prvInitialiseTaskLists+0x60>)
 800c510:	4413      	add	r3, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f7fe fbee 	bl	800acf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	3301      	adds	r3, #1
 800c51c:	607b      	str	r3, [r7, #4]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2b37      	cmp	r3, #55	@ 0x37
 800c522:	d9ef      	bls.n	800c504 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c524:	480d      	ldr	r0, [pc, #52]	@ (800c55c <prvInitialiseTaskLists+0x64>)
 800c526:	f7fe fbe5 	bl	800acf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c52a:	480d      	ldr	r0, [pc, #52]	@ (800c560 <prvInitialiseTaskLists+0x68>)
 800c52c:	f7fe fbe2 	bl	800acf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c530:	480c      	ldr	r0, [pc, #48]	@ (800c564 <prvInitialiseTaskLists+0x6c>)
 800c532:	f7fe fbdf 	bl	800acf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c536:	480c      	ldr	r0, [pc, #48]	@ (800c568 <prvInitialiseTaskLists+0x70>)
 800c538:	f7fe fbdc 	bl	800acf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c53c:	480b      	ldr	r0, [pc, #44]	@ (800c56c <prvInitialiseTaskLists+0x74>)
 800c53e:	f7fe fbd9 	bl	800acf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c542:	4b0b      	ldr	r3, [pc, #44]	@ (800c570 <prvInitialiseTaskLists+0x78>)
 800c544:	4a05      	ldr	r2, [pc, #20]	@ (800c55c <prvInitialiseTaskLists+0x64>)
 800c546:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c548:	4b0a      	ldr	r3, [pc, #40]	@ (800c574 <prvInitialiseTaskLists+0x7c>)
 800c54a:	4a05      	ldr	r2, [pc, #20]	@ (800c560 <prvInitialiseTaskLists+0x68>)
 800c54c:	601a      	str	r2, [r3, #0]
}
 800c54e:	bf00      	nop
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	20000a84 	.word	0x20000a84
 800c55c:	20000ee4 	.word	0x20000ee4
 800c560:	20000ef8 	.word	0x20000ef8
 800c564:	20000f14 	.word	0x20000f14
 800c568:	20000f28 	.word	0x20000f28
 800c56c:	20000f40 	.word	0x20000f40
 800c570:	20000f0c 	.word	0x20000f0c
 800c574:	20000f10 	.word	0x20000f10

0800c578 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c57e:	e019      	b.n	800c5b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c580:	f000 fde2 	bl	800d148 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c584:	4b10      	ldr	r3, [pc, #64]	@ (800c5c8 <prvCheckTasksWaitingTermination+0x50>)
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	3304      	adds	r3, #4
 800c590:	4618      	mov	r0, r3
 800c592:	f7fe fc39 	bl	800ae08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c596:	4b0d      	ldr	r3, [pc, #52]	@ (800c5cc <prvCheckTasksWaitingTermination+0x54>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	3b01      	subs	r3, #1
 800c59c:	4a0b      	ldr	r2, [pc, #44]	@ (800c5cc <prvCheckTasksWaitingTermination+0x54>)
 800c59e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c5a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c5d0 <prvCheckTasksWaitingTermination+0x58>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	4a0a      	ldr	r2, [pc, #40]	@ (800c5d0 <prvCheckTasksWaitingTermination+0x58>)
 800c5a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c5aa:	f000 fdff 	bl	800d1ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f810 	bl	800c5d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5b4:	4b06      	ldr	r3, [pc, #24]	@ (800c5d0 <prvCheckTasksWaitingTermination+0x58>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1e1      	bne.n	800c580 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c5bc:	bf00      	nop
 800c5be:	bf00      	nop
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	20000f28 	.word	0x20000f28
 800c5cc:	20000f54 	.word	0x20000f54
 800c5d0:	20000f3c 	.word	0x20000f3c

0800c5d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d108      	bne.n	800c5f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 ffa2 	bl	800d534 <vPortFree>
				vPortFree( pxTCB );
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 ff9f 	bl	800d534 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c5f6:	e019      	b.n	800c62c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d103      	bne.n	800c60a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 ff96 	bl	800d534 <vPortFree>
	}
 800c608:	e010      	b.n	800c62c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c610:	2b02      	cmp	r3, #2
 800c612:	d00b      	beq.n	800c62c <prvDeleteTCB+0x58>
	__asm volatile
 800c614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	60fb      	str	r3, [r7, #12]
}
 800c626:	bf00      	nop
 800c628:	bf00      	nop
 800c62a:	e7fd      	b.n	800c628 <prvDeleteTCB+0x54>
	}
 800c62c:	bf00      	nop
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c63a:	4b0c      	ldr	r3, [pc, #48]	@ (800c66c <prvResetNextTaskUnblockTime+0x38>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d104      	bne.n	800c64e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c644:	4b0a      	ldr	r3, [pc, #40]	@ (800c670 <prvResetNextTaskUnblockTime+0x3c>)
 800c646:	f04f 32ff 	mov.w	r2, #4294967295
 800c64a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c64c:	e008      	b.n	800c660 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c64e:	4b07      	ldr	r3, [pc, #28]	@ (800c66c <prvResetNextTaskUnblockTime+0x38>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	4a04      	ldr	r2, [pc, #16]	@ (800c670 <prvResetNextTaskUnblockTime+0x3c>)
 800c65e:	6013      	str	r3, [r2, #0]
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	20000f0c 	.word	0x20000f0c
 800c670:	20000f74 	.word	0x20000f74

0800c674 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c67a:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a8 <xTaskGetSchedulerState+0x34>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d102      	bne.n	800c688 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c682:	2301      	movs	r3, #1
 800c684:	607b      	str	r3, [r7, #4]
 800c686:	e008      	b.n	800c69a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c688:	4b08      	ldr	r3, [pc, #32]	@ (800c6ac <xTaskGetSchedulerState+0x38>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d102      	bne.n	800c696 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c690:	2302      	movs	r3, #2
 800c692:	607b      	str	r3, [r7, #4]
 800c694:	e001      	b.n	800c69a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c696:	2300      	movs	r3, #0
 800c698:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c69a:	687b      	ldr	r3, [r7, #4]
	}
 800c69c:	4618      	mov	r0, r3
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr
 800c6a8:	20000f60 	.word	0x20000f60
 800c6ac:	20000f7c 	.word	0x20000f7c

0800c6b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d058      	beq.n	800c778 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c6c6:	4b2f      	ldr	r3, [pc, #188]	@ (800c784 <xTaskPriorityDisinherit+0xd4>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	693a      	ldr	r2, [r7, #16]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d00b      	beq.n	800c6e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	60fb      	str	r3, [r7, #12]
}
 800c6e2:	bf00      	nop
 800c6e4:	bf00      	nop
 800c6e6:	e7fd      	b.n	800c6e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d10b      	bne.n	800c708 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f4:	f383 8811 	msr	BASEPRI, r3
 800c6f8:	f3bf 8f6f 	isb	sy
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	60bb      	str	r3, [r7, #8]
}
 800c702:	bf00      	nop
 800c704:	bf00      	nop
 800c706:	e7fd      	b.n	800c704 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c70c:	1e5a      	subs	r2, r3, #1
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d02c      	beq.n	800c778 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c722:	2b00      	cmp	r3, #0
 800c724:	d128      	bne.n	800c778 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	3304      	adds	r3, #4
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fe fb6c 	bl	800ae08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c73c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c748:	4b0f      	ldr	r3, [pc, #60]	@ (800c788 <xTaskPriorityDisinherit+0xd8>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d903      	bls.n	800c758 <xTaskPriorityDisinherit+0xa8>
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c754:	4a0c      	ldr	r2, [pc, #48]	@ (800c788 <xTaskPriorityDisinherit+0xd8>)
 800c756:	6013      	str	r3, [r2, #0]
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c75c:	4613      	mov	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4a09      	ldr	r2, [pc, #36]	@ (800c78c <xTaskPriorityDisinherit+0xdc>)
 800c766:	441a      	add	r2, r3
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	3304      	adds	r3, #4
 800c76c:	4619      	mov	r1, r3
 800c76e:	4610      	mov	r0, r2
 800c770:	f7fe faed 	bl	800ad4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c774:	2301      	movs	r3, #1
 800c776:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c778:	697b      	ldr	r3, [r7, #20]
	}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3718      	adds	r7, #24
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	20000a80 	.word	0x20000a80
 800c788:	20000f5c 	.word	0x20000f5c
 800c78c:	20000a84 	.word	0x20000a84

0800c790 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c79a:	4b21      	ldr	r3, [pc, #132]	@ (800c820 <prvAddCurrentTaskToDelayedList+0x90>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7a0:	4b20      	ldr	r3, [pc, #128]	@ (800c824 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe fb2e 	bl	800ae08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b2:	d10a      	bne.n	800c7ca <prvAddCurrentTaskToDelayedList+0x3a>
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d007      	beq.n	800c7ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7ba:	4b1a      	ldr	r3, [pc, #104]	@ (800c824 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	3304      	adds	r3, #4
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	4819      	ldr	r0, [pc, #100]	@ (800c828 <prvAddCurrentTaskToDelayedList+0x98>)
 800c7c4:	f7fe fac3 	bl	800ad4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c7c8:	e026      	b.n	800c818 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7d2:	4b14      	ldr	r3, [pc, #80]	@ (800c824 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d209      	bcs.n	800c7f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7e2:	4b12      	ldr	r3, [pc, #72]	@ (800c82c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c824 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	3304      	adds	r3, #4
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	f7fe fad1 	bl	800ad96 <vListInsert>
}
 800c7f4:	e010      	b.n	800c818 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7f6:	4b0e      	ldr	r3, [pc, #56]	@ (800c830 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c824 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	3304      	adds	r3, #4
 800c800:	4619      	mov	r1, r3
 800c802:	4610      	mov	r0, r2
 800c804:	f7fe fac7 	bl	800ad96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c808:	4b0a      	ldr	r3, [pc, #40]	@ (800c834 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d202      	bcs.n	800c818 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c812:	4a08      	ldr	r2, [pc, #32]	@ (800c834 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	6013      	str	r3, [r2, #0]
}
 800c818:	bf00      	nop
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	20000f58 	.word	0x20000f58
 800c824:	20000a80 	.word	0x20000a80
 800c828:	20000f40 	.word	0x20000f40
 800c82c:	20000f10 	.word	0x20000f10
 800c830:	20000f0c 	.word	0x20000f0c
 800c834:	20000f74 	.word	0x20000f74

0800c838 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08a      	sub	sp, #40	@ 0x28
 800c83c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c83e:	2300      	movs	r3, #0
 800c840:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c842:	f000 fb13 	bl	800ce6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c846:	4b1d      	ldr	r3, [pc, #116]	@ (800c8bc <xTimerCreateTimerTask+0x84>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d021      	beq.n	800c892 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c856:	1d3a      	adds	r2, r7, #4
 800c858:	f107 0108 	add.w	r1, r7, #8
 800c85c:	f107 030c 	add.w	r3, r7, #12
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe fa2d 	bl	800acc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c866:	6879      	ldr	r1, [r7, #4]
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	9202      	str	r2, [sp, #8]
 800c86e:	9301      	str	r3, [sp, #4]
 800c870:	2302      	movs	r3, #2
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	2300      	movs	r3, #0
 800c876:	460a      	mov	r2, r1
 800c878:	4911      	ldr	r1, [pc, #68]	@ (800c8c0 <xTimerCreateTimerTask+0x88>)
 800c87a:	4812      	ldr	r0, [pc, #72]	@ (800c8c4 <xTimerCreateTimerTask+0x8c>)
 800c87c:	f7ff f8a6 	bl	800b9cc <xTaskCreateStatic>
 800c880:	4603      	mov	r3, r0
 800c882:	4a11      	ldr	r2, [pc, #68]	@ (800c8c8 <xTimerCreateTimerTask+0x90>)
 800c884:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c886:	4b10      	ldr	r3, [pc, #64]	@ (800c8c8 <xTimerCreateTimerTask+0x90>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d001      	beq.n	800c892 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c88e:	2301      	movs	r3, #1
 800c890:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10b      	bne.n	800c8b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	613b      	str	r3, [r7, #16]
}
 800c8aa:	bf00      	nop
 800c8ac:	bf00      	nop
 800c8ae:	e7fd      	b.n	800c8ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c8b0:	697b      	ldr	r3, [r7, #20]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3718      	adds	r7, #24
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	20000fb0 	.word	0x20000fb0
 800c8c0:	0800e09c 	.word	0x0800e09c
 800c8c4:	0800ca05 	.word	0x0800ca05
 800c8c8:	20000fb4 	.word	0x20000fb4

0800c8cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08a      	sub	sp, #40	@ 0x28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10b      	bne.n	800c8fc <xTimerGenericCommand+0x30>
	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	623b      	str	r3, [r7, #32]
}
 800c8f6:	bf00      	nop
 800c8f8:	bf00      	nop
 800c8fa:	e7fd      	b.n	800c8f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c8fc:	4b19      	ldr	r3, [pc, #100]	@ (800c964 <xTimerGenericCommand+0x98>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d02a      	beq.n	800c95a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	2b05      	cmp	r3, #5
 800c914:	dc18      	bgt.n	800c948 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c916:	f7ff fead 	bl	800c674 <xTaskGetSchedulerState>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d109      	bne.n	800c934 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c920:	4b10      	ldr	r3, [pc, #64]	@ (800c964 <xTimerGenericCommand+0x98>)
 800c922:	6818      	ldr	r0, [r3, #0]
 800c924:	f107 0110 	add.w	r1, r7, #16
 800c928:	2300      	movs	r3, #0
 800c92a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c92c:	f7fe fbdc 	bl	800b0e8 <xQueueGenericSend>
 800c930:	6278      	str	r0, [r7, #36]	@ 0x24
 800c932:	e012      	b.n	800c95a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c934:	4b0b      	ldr	r3, [pc, #44]	@ (800c964 <xTimerGenericCommand+0x98>)
 800c936:	6818      	ldr	r0, [r3, #0]
 800c938:	f107 0110 	add.w	r1, r7, #16
 800c93c:	2300      	movs	r3, #0
 800c93e:	2200      	movs	r2, #0
 800c940:	f7fe fbd2 	bl	800b0e8 <xQueueGenericSend>
 800c944:	6278      	str	r0, [r7, #36]	@ 0x24
 800c946:	e008      	b.n	800c95a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c948:	4b06      	ldr	r3, [pc, #24]	@ (800c964 <xTimerGenericCommand+0x98>)
 800c94a:	6818      	ldr	r0, [r3, #0]
 800c94c:	f107 0110 	add.w	r1, r7, #16
 800c950:	2300      	movs	r3, #0
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	f7fe fcca 	bl	800b2ec <xQueueGenericSendFromISR>
 800c958:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3728      	adds	r7, #40	@ 0x28
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	20000fb0 	.word	0x20000fb0

0800c968 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af02      	add	r7, sp, #8
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c972:	4b23      	ldr	r3, [pc, #140]	@ (800ca00 <prvProcessExpiredTimer+0x98>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	3304      	adds	r3, #4
 800c980:	4618      	mov	r0, r3
 800c982:	f7fe fa41 	bl	800ae08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c98c:	f003 0304 	and.w	r3, r3, #4
 800c990:	2b00      	cmp	r3, #0
 800c992:	d023      	beq.n	800c9dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	699a      	ldr	r2, [r3, #24]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	18d1      	adds	r1, r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	683a      	ldr	r2, [r7, #0]
 800c9a0:	6978      	ldr	r0, [r7, #20]
 800c9a2:	f000 f8d5 	bl	800cb50 <prvInsertTimerInActiveList>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d020      	beq.n	800c9ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	6978      	ldr	r0, [r7, #20]
 800c9b8:	f7ff ff88 	bl	800c8cc <xTimerGenericCommand>
 800c9bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d114      	bne.n	800c9ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	60fb      	str	r3, [r7, #12]
}
 800c9d6:	bf00      	nop
 800c9d8:	bf00      	nop
 800c9da:	e7fd      	b.n	800c9d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9e2:	f023 0301 	bic.w	r3, r3, #1
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	6978      	ldr	r0, [r7, #20]
 800c9f4:	4798      	blx	r3
}
 800c9f6:	bf00      	nop
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20000fa8 	.word	0x20000fa8

0800ca04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca0c:	f107 0308 	add.w	r3, r7, #8
 800ca10:	4618      	mov	r0, r3
 800ca12:	f000 f859 	bl	800cac8 <prvGetNextExpireTime>
 800ca16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f000 f805 	bl	800ca2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ca22:	f000 f8d7 	bl	800cbd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca26:	bf00      	nop
 800ca28:	e7f0      	b.n	800ca0c <prvTimerTask+0x8>
	...

0800ca2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ca36:	f7ff fa0f 	bl	800be58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca3a:	f107 0308 	add.w	r3, r7, #8
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f000 f866 	bl	800cb10 <prvSampleTimeNow>
 800ca44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d130      	bne.n	800caae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d10a      	bne.n	800ca68 <prvProcessTimerOrBlockTask+0x3c>
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d806      	bhi.n	800ca68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca5a:	f7ff fa0b 	bl	800be74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca5e:	68f9      	ldr	r1, [r7, #12]
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7ff ff81 	bl	800c968 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca66:	e024      	b.n	800cab2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d008      	beq.n	800ca80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca6e:	4b13      	ldr	r3, [pc, #76]	@ (800cabc <prvProcessTimerOrBlockTask+0x90>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <prvProcessTimerOrBlockTask+0x50>
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e000      	b.n	800ca7e <prvProcessTimerOrBlockTask+0x52>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca80:	4b0f      	ldr	r3, [pc, #60]	@ (800cac0 <prvProcessTimerOrBlockTask+0x94>)
 800ca82:	6818      	ldr	r0, [r3, #0]
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	f7fe ff69 	bl	800b964 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca92:	f7ff f9ef 	bl	800be74 <xTaskResumeAll>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10a      	bne.n	800cab2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca9c:	4b09      	ldr	r3, [pc, #36]	@ (800cac4 <prvProcessTimerOrBlockTask+0x98>)
 800ca9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	f3bf 8f6f 	isb	sy
}
 800caac:	e001      	b.n	800cab2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800caae:	f7ff f9e1 	bl	800be74 <xTaskResumeAll>
}
 800cab2:	bf00      	nop
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	20000fac 	.word	0x20000fac
 800cac0:	20000fb0 	.word	0x20000fb0
 800cac4:	e000ed04 	.word	0xe000ed04

0800cac8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cad0:	4b0e      	ldr	r3, [pc, #56]	@ (800cb0c <prvGetNextExpireTime+0x44>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <prvGetNextExpireTime+0x16>
 800cada:	2201      	movs	r2, #1
 800cadc:	e000      	b.n	800cae0 <prvGetNextExpireTime+0x18>
 800cade:	2200      	movs	r2, #0
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d105      	bne.n	800caf8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800caec:	4b07      	ldr	r3, [pc, #28]	@ (800cb0c <prvGetNextExpireTime+0x44>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	e001      	b.n	800cafc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800caf8:	2300      	movs	r3, #0
 800cafa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cafc:	68fb      	ldr	r3, [r7, #12]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3714      	adds	r7, #20
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	20000fa8 	.word	0x20000fa8

0800cb10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cb18:	f7ff fa4a 	bl	800bfb0 <xTaskGetTickCount>
 800cb1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cb1e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb4c <prvSampleTimeNow+0x3c>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d205      	bcs.n	800cb34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cb28:	f000 f93a 	bl	800cda0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	601a      	str	r2, [r3, #0]
 800cb32:	e002      	b.n	800cb3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cb3a:	4a04      	ldr	r2, [pc, #16]	@ (800cb4c <prvSampleTimeNow+0x3c>)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cb40:	68fb      	ldr	r3, [r7, #12]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	20000fb8 	.word	0x20000fb8

0800cb50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b086      	sub	sp, #24
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
 800cb5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d812      	bhi.n	800cb9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	1ad2      	subs	r2, r2, r3
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d302      	bcc.n	800cb8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb84:	2301      	movs	r3, #1
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	e01b      	b.n	800cbc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb8a:	4b10      	ldr	r3, [pc, #64]	@ (800cbcc <prvInsertTimerInActiveList+0x7c>)
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3304      	adds	r3, #4
 800cb92:	4619      	mov	r1, r3
 800cb94:	4610      	mov	r0, r2
 800cb96:	f7fe f8fe 	bl	800ad96 <vListInsert>
 800cb9a:	e012      	b.n	800cbc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d206      	bcs.n	800cbb2 <prvInsertTimerInActiveList+0x62>
 800cba4:	68ba      	ldr	r2, [r7, #8]
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d302      	bcc.n	800cbb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cbac:	2301      	movs	r3, #1
 800cbae:	617b      	str	r3, [r7, #20]
 800cbb0:	e007      	b.n	800cbc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbb2:	4b07      	ldr	r3, [pc, #28]	@ (800cbd0 <prvInsertTimerInActiveList+0x80>)
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3304      	adds	r3, #4
 800cbba:	4619      	mov	r1, r3
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	f7fe f8ea 	bl	800ad96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cbc2:	697b      	ldr	r3, [r7, #20]
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3718      	adds	r7, #24
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	20000fac 	.word	0x20000fac
 800cbd0:	20000fa8 	.word	0x20000fa8

0800cbd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08e      	sub	sp, #56	@ 0x38
 800cbd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbda:	e0ce      	b.n	800cd7a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	da19      	bge.n	800cc16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cbe2:	1d3b      	adds	r3, r7, #4
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10b      	bne.n	800cc06 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	61fb      	str	r3, [r7, #28]
}
 800cc00:	bf00      	nop
 800cc02:	bf00      	nop
 800cc04:	e7fd      	b.n	800cc02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc0c:	6850      	ldr	r0, [r2, #4]
 800cc0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc10:	6892      	ldr	r2, [r2, #8]
 800cc12:	4611      	mov	r1, r2
 800cc14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f2c0 80ae 	blt.w	800cd7a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc24:	695b      	ldr	r3, [r3, #20]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d004      	beq.n	800cc34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe f8ea 	bl	800ae08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc34:	463b      	mov	r3, r7
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff ff6a 	bl	800cb10 <prvSampleTimeNow>
 800cc3c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b09      	cmp	r3, #9
 800cc42:	f200 8097 	bhi.w	800cd74 <prvProcessReceivedCommands+0x1a0>
 800cc46:	a201      	add	r2, pc, #4	@ (adr r2, 800cc4c <prvProcessReceivedCommands+0x78>)
 800cc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4c:	0800cc75 	.word	0x0800cc75
 800cc50:	0800cc75 	.word	0x0800cc75
 800cc54:	0800cc75 	.word	0x0800cc75
 800cc58:	0800cceb 	.word	0x0800cceb
 800cc5c:	0800ccff 	.word	0x0800ccff
 800cc60:	0800cd4b 	.word	0x0800cd4b
 800cc64:	0800cc75 	.word	0x0800cc75
 800cc68:	0800cc75 	.word	0x0800cc75
 800cc6c:	0800cceb 	.word	0x0800cceb
 800cc70:	0800ccff 	.word	0x0800ccff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc7a:	f043 0301 	orr.w	r3, r3, #1
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	18d1      	adds	r1, r2, r3
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc94:	f7ff ff5c 	bl	800cb50 <prvInsertTimerInActiveList>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d06c      	beq.n	800cd78 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca0:	6a1b      	ldr	r3, [r3, #32]
 800cca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cca4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccac:	f003 0304 	and.w	r3, r3, #4
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d061      	beq.n	800cd78 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	441a      	add	r2, r3
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccc6:	f7ff fe01 	bl	800c8cc <xTimerGenericCommand>
 800ccca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cccc:	6a3b      	ldr	r3, [r7, #32]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d152      	bne.n	800cd78 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	61bb      	str	r3, [r7, #24]
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop
 800cce8:	e7fd      	b.n	800cce6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccf0:	f023 0301 	bic.w	r3, r3, #1
 800ccf4:	b2da      	uxtb	r2, r3
 800ccf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ccfc:	e03d      	b.n	800cd7a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ccfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd04:	f043 0301 	orr.w	r3, r3, #1
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cd10:	68ba      	ldr	r2, [r7, #8]
 800cd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd18:	699b      	ldr	r3, [r3, #24]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10b      	bne.n	800cd36 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	617b      	str	r3, [r7, #20]
}
 800cd30:	bf00      	nop
 800cd32:	bf00      	nop
 800cd34:	e7fd      	b.n	800cd32 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd38:	699a      	ldr	r2, [r3, #24]
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3c:	18d1      	adds	r1, r2, r3
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd44:	f7ff ff04 	bl	800cb50 <prvInsertTimerInActiveList>
					break;
 800cd48:	e017      	b.n	800cd7a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd50:	f003 0302 	and.w	r3, r3, #2
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d103      	bne.n	800cd60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cd58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd5a:	f000 fbeb 	bl	800d534 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd5e:	e00c      	b.n	800cd7a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd66:	f023 0301 	bic.w	r3, r3, #1
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cd72:	e002      	b.n	800cd7a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cd74:	bf00      	nop
 800cd76:	e000      	b.n	800cd7a <prvProcessReceivedCommands+0x1a6>
					break;
 800cd78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd7a:	4b08      	ldr	r3, [pc, #32]	@ (800cd9c <prvProcessReceivedCommands+0x1c8>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	1d39      	adds	r1, r7, #4
 800cd80:	2200      	movs	r2, #0
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe fb50 	bl	800b428 <xQueueReceive>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f47f af26 	bne.w	800cbdc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cd90:	bf00      	nop
 800cd92:	bf00      	nop
 800cd94:	3730      	adds	r7, #48	@ 0x30
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20000fb0 	.word	0x20000fb0

0800cda0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cda6:	e049      	b.n	800ce3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cda8:	4b2e      	ldr	r3, [pc, #184]	@ (800ce64 <prvSwitchTimerLists+0xc4>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdb2:	4b2c      	ldr	r3, [pc, #176]	@ (800ce64 <prvSwitchTimerLists+0xc4>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fe f821 	bl	800ae08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6a1b      	ldr	r3, [r3, #32]
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdd4:	f003 0304 	and.w	r3, r3, #4
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d02f      	beq.n	800ce3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	693a      	ldr	r2, [r7, #16]
 800cde2:	4413      	add	r3, r2
 800cde4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cde6:	68ba      	ldr	r2, [r7, #8]
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d90e      	bls.n	800ce0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdfa:	4b1a      	ldr	r3, [pc, #104]	@ (800ce64 <prvSwitchTimerLists+0xc4>)
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	3304      	adds	r3, #4
 800ce02:	4619      	mov	r1, r3
 800ce04:	4610      	mov	r0, r2
 800ce06:	f7fd ffc6 	bl	800ad96 <vListInsert>
 800ce0a:	e017      	b.n	800ce3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	2300      	movs	r3, #0
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	2100      	movs	r1, #0
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f7ff fd58 	bl	800c8cc <xTimerGenericCommand>
 800ce1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d10b      	bne.n	800ce3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ce24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce28:	f383 8811 	msr	BASEPRI, r3
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f3bf 8f4f 	dsb	sy
 800ce34:	603b      	str	r3, [r7, #0]
}
 800ce36:	bf00      	nop
 800ce38:	bf00      	nop
 800ce3a:	e7fd      	b.n	800ce38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce3c:	4b09      	ldr	r3, [pc, #36]	@ (800ce64 <prvSwitchTimerLists+0xc4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d1b0      	bne.n	800cda8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ce46:	4b07      	ldr	r3, [pc, #28]	@ (800ce64 <prvSwitchTimerLists+0xc4>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ce4c:	4b06      	ldr	r3, [pc, #24]	@ (800ce68 <prvSwitchTimerLists+0xc8>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a04      	ldr	r2, [pc, #16]	@ (800ce64 <prvSwitchTimerLists+0xc4>)
 800ce52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce54:	4a04      	ldr	r2, [pc, #16]	@ (800ce68 <prvSwitchTimerLists+0xc8>)
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	6013      	str	r3, [r2, #0]
}
 800ce5a:	bf00      	nop
 800ce5c:	3718      	adds	r7, #24
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20000fa8 	.word	0x20000fa8
 800ce68:	20000fac 	.word	0x20000fac

0800ce6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce72:	f000 f969 	bl	800d148 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce76:	4b15      	ldr	r3, [pc, #84]	@ (800cecc <prvCheckForValidListAndQueue+0x60>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d120      	bne.n	800cec0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce7e:	4814      	ldr	r0, [pc, #80]	@ (800ced0 <prvCheckForValidListAndQueue+0x64>)
 800ce80:	f7fd ff38 	bl	800acf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce84:	4813      	ldr	r0, [pc, #76]	@ (800ced4 <prvCheckForValidListAndQueue+0x68>)
 800ce86:	f7fd ff35 	bl	800acf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce8a:	4b13      	ldr	r3, [pc, #76]	@ (800ced8 <prvCheckForValidListAndQueue+0x6c>)
 800ce8c:	4a10      	ldr	r2, [pc, #64]	@ (800ced0 <prvCheckForValidListAndQueue+0x64>)
 800ce8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce90:	4b12      	ldr	r3, [pc, #72]	@ (800cedc <prvCheckForValidListAndQueue+0x70>)
 800ce92:	4a10      	ldr	r2, [pc, #64]	@ (800ced4 <prvCheckForValidListAndQueue+0x68>)
 800ce94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce96:	2300      	movs	r3, #0
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	4b11      	ldr	r3, [pc, #68]	@ (800cee0 <prvCheckForValidListAndQueue+0x74>)
 800ce9c:	4a11      	ldr	r2, [pc, #68]	@ (800cee4 <prvCheckForValidListAndQueue+0x78>)
 800ce9e:	2110      	movs	r1, #16
 800cea0:	200a      	movs	r0, #10
 800cea2:	f7fe f845 	bl	800af30 <xQueueGenericCreateStatic>
 800cea6:	4603      	mov	r3, r0
 800cea8:	4a08      	ldr	r2, [pc, #32]	@ (800cecc <prvCheckForValidListAndQueue+0x60>)
 800ceaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ceac:	4b07      	ldr	r3, [pc, #28]	@ (800cecc <prvCheckForValidListAndQueue+0x60>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d005      	beq.n	800cec0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ceb4:	4b05      	ldr	r3, [pc, #20]	@ (800cecc <prvCheckForValidListAndQueue+0x60>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	490b      	ldr	r1, [pc, #44]	@ (800cee8 <prvCheckForValidListAndQueue+0x7c>)
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fe fd28 	bl	800b910 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cec0:	f000 f974 	bl	800d1ac <vPortExitCritical>
}
 800cec4:	bf00      	nop
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	20000fb0 	.word	0x20000fb0
 800ced0:	20000f80 	.word	0x20000f80
 800ced4:	20000f94 	.word	0x20000f94
 800ced8:	20000fa8 	.word	0x20000fa8
 800cedc:	20000fac 	.word	0x20000fac
 800cee0:	2000105c 	.word	0x2000105c
 800cee4:	20000fbc 	.word	0x20000fbc
 800cee8:	0800e0a4 	.word	0x0800e0a4

0800ceec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ceec:	b480      	push	{r7}
 800ceee:	b085      	sub	sp, #20
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	3b04      	subs	r3, #4
 800cefc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cf04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3b04      	subs	r3, #4
 800cf0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	f023 0201 	bic.w	r2, r3, #1
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	3b04      	subs	r3, #4
 800cf1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf1c:	4a0c      	ldr	r2, [pc, #48]	@ (800cf50 <pxPortInitialiseStack+0x64>)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	3b14      	subs	r3, #20
 800cf26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	3b04      	subs	r3, #4
 800cf32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f06f 0202 	mvn.w	r2, #2
 800cf3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	3b20      	subs	r3, #32
 800cf40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf42:	68fb      	ldr	r3, [r7, #12]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr
 800cf50:	0800cf55 	.word	0x0800cf55

0800cf54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf5e:	4b13      	ldr	r3, [pc, #76]	@ (800cfac <prvTaskExitError+0x58>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf66:	d00b      	beq.n	800cf80 <prvTaskExitError+0x2c>
	__asm volatile
 800cf68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6c:	f383 8811 	msr	BASEPRI, r3
 800cf70:	f3bf 8f6f 	isb	sy
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	60fb      	str	r3, [r7, #12]
}
 800cf7a:	bf00      	nop
 800cf7c:	bf00      	nop
 800cf7e:	e7fd      	b.n	800cf7c <prvTaskExitError+0x28>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	60bb      	str	r3, [r7, #8]
}
 800cf92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf94:	bf00      	nop
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d0fc      	beq.n	800cf96 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf9c:	bf00      	nop
 800cf9e:	bf00      	nop
 800cfa0:	3714      	adds	r7, #20
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	2000002c 	.word	0x2000002c

0800cfb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cfb0:	4b07      	ldr	r3, [pc, #28]	@ (800cfd0 <pxCurrentTCBConst2>)
 800cfb2:	6819      	ldr	r1, [r3, #0]
 800cfb4:	6808      	ldr	r0, [r1, #0]
 800cfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfba:	f380 8809 	msr	PSP, r0
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f04f 0000 	mov.w	r0, #0
 800cfc6:	f380 8811 	msr	BASEPRI, r0
 800cfca:	4770      	bx	lr
 800cfcc:	f3af 8000 	nop.w

0800cfd0 <pxCurrentTCBConst2>:
 800cfd0:	20000a80 	.word	0x20000a80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop

0800cfd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cfd8:	4808      	ldr	r0, [pc, #32]	@ (800cffc <prvPortStartFirstTask+0x24>)
 800cfda:	6800      	ldr	r0, [r0, #0]
 800cfdc:	6800      	ldr	r0, [r0, #0]
 800cfde:	f380 8808 	msr	MSP, r0
 800cfe2:	f04f 0000 	mov.w	r0, #0
 800cfe6:	f380 8814 	msr	CONTROL, r0
 800cfea:	b662      	cpsie	i
 800cfec:	b661      	cpsie	f
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	df00      	svc	0
 800cff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cffa:	bf00      	nop
 800cffc:	e000ed08 	.word	0xe000ed08

0800d000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d006:	4b47      	ldr	r3, [pc, #284]	@ (800d124 <xPortStartScheduler+0x124>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a47      	ldr	r2, [pc, #284]	@ (800d128 <xPortStartScheduler+0x128>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d10b      	bne.n	800d028 <xPortStartScheduler+0x28>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	60fb      	str	r3, [r7, #12]
}
 800d022:	bf00      	nop
 800d024:	bf00      	nop
 800d026:	e7fd      	b.n	800d024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d028:	4b3e      	ldr	r3, [pc, #248]	@ (800d124 <xPortStartScheduler+0x124>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a3f      	ldr	r2, [pc, #252]	@ (800d12c <xPortStartScheduler+0x12c>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d10b      	bne.n	800d04a <xPortStartScheduler+0x4a>
	__asm volatile
 800d032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	613b      	str	r3, [r7, #16]
}
 800d044:	bf00      	nop
 800d046:	bf00      	nop
 800d048:	e7fd      	b.n	800d046 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d04a:	4b39      	ldr	r3, [pc, #228]	@ (800d130 <xPortStartScheduler+0x130>)
 800d04c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	b2db      	uxtb	r3, r3
 800d054:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	22ff      	movs	r2, #255	@ 0xff
 800d05a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	b2db      	uxtb	r3, r3
 800d062:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d064:	78fb      	ldrb	r3, [r7, #3]
 800d066:	b2db      	uxtb	r3, r3
 800d068:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	4b31      	ldr	r3, [pc, #196]	@ (800d134 <xPortStartScheduler+0x134>)
 800d070:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d072:	4b31      	ldr	r3, [pc, #196]	@ (800d138 <xPortStartScheduler+0x138>)
 800d074:	2207      	movs	r2, #7
 800d076:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d078:	e009      	b.n	800d08e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d07a:	4b2f      	ldr	r3, [pc, #188]	@ (800d138 <xPortStartScheduler+0x138>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	3b01      	subs	r3, #1
 800d080:	4a2d      	ldr	r2, [pc, #180]	@ (800d138 <xPortStartScheduler+0x138>)
 800d082:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d084:	78fb      	ldrb	r3, [r7, #3]
 800d086:	b2db      	uxtb	r3, r3
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d08e:	78fb      	ldrb	r3, [r7, #3]
 800d090:	b2db      	uxtb	r3, r3
 800d092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d096:	2b80      	cmp	r3, #128	@ 0x80
 800d098:	d0ef      	beq.n	800d07a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d09a:	4b27      	ldr	r3, [pc, #156]	@ (800d138 <xPortStartScheduler+0x138>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f1c3 0307 	rsb	r3, r3, #7
 800d0a2:	2b04      	cmp	r3, #4
 800d0a4:	d00b      	beq.n	800d0be <xPortStartScheduler+0xbe>
	__asm volatile
 800d0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0aa:	f383 8811 	msr	BASEPRI, r3
 800d0ae:	f3bf 8f6f 	isb	sy
 800d0b2:	f3bf 8f4f 	dsb	sy
 800d0b6:	60bb      	str	r3, [r7, #8]
}
 800d0b8:	bf00      	nop
 800d0ba:	bf00      	nop
 800d0bc:	e7fd      	b.n	800d0ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d0be:	4b1e      	ldr	r3, [pc, #120]	@ (800d138 <xPortStartScheduler+0x138>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	021b      	lsls	r3, r3, #8
 800d0c4:	4a1c      	ldr	r2, [pc, #112]	@ (800d138 <xPortStartScheduler+0x138>)
 800d0c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d0c8:	4b1b      	ldr	r3, [pc, #108]	@ (800d138 <xPortStartScheduler+0x138>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d0d0:	4a19      	ldr	r2, [pc, #100]	@ (800d138 <xPortStartScheduler+0x138>)
 800d0d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d0dc:	4b17      	ldr	r3, [pc, #92]	@ (800d13c <xPortStartScheduler+0x13c>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a16      	ldr	r2, [pc, #88]	@ (800d13c <xPortStartScheduler+0x13c>)
 800d0e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d0e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d0e8:	4b14      	ldr	r3, [pc, #80]	@ (800d13c <xPortStartScheduler+0x13c>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a13      	ldr	r2, [pc, #76]	@ (800d13c <xPortStartScheduler+0x13c>)
 800d0ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d0f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0f4:	f000 f8da 	bl	800d2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0f8:	4b11      	ldr	r3, [pc, #68]	@ (800d140 <xPortStartScheduler+0x140>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0fe:	f000 f8f9 	bl	800d2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d102:	4b10      	ldr	r3, [pc, #64]	@ (800d144 <xPortStartScheduler+0x144>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a0f      	ldr	r2, [pc, #60]	@ (800d144 <xPortStartScheduler+0x144>)
 800d108:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d10c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d10e:	f7ff ff63 	bl	800cfd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d112:	f7ff f817 	bl	800c144 <vTaskSwitchContext>
	prvTaskExitError();
 800d116:	f7ff ff1d 	bl	800cf54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3718      	adds	r7, #24
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	e000ed00 	.word	0xe000ed00
 800d128:	410fc271 	.word	0x410fc271
 800d12c:	410fc270 	.word	0x410fc270
 800d130:	e000e400 	.word	0xe000e400
 800d134:	200010ac 	.word	0x200010ac
 800d138:	200010b0 	.word	0x200010b0
 800d13c:	e000ed20 	.word	0xe000ed20
 800d140:	2000002c 	.word	0x2000002c
 800d144:	e000ef34 	.word	0xe000ef34

0800d148 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d148:	b480      	push	{r7}
 800d14a:	b083      	sub	sp, #12
 800d14c:	af00      	add	r7, sp, #0
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	607b      	str	r3, [r7, #4]
}
 800d160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d162:	4b10      	ldr	r3, [pc, #64]	@ (800d1a4 <vPortEnterCritical+0x5c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	3301      	adds	r3, #1
 800d168:	4a0e      	ldr	r2, [pc, #56]	@ (800d1a4 <vPortEnterCritical+0x5c>)
 800d16a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d16c:	4b0d      	ldr	r3, [pc, #52]	@ (800d1a4 <vPortEnterCritical+0x5c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2b01      	cmp	r3, #1
 800d172:	d110      	bne.n	800d196 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d174:	4b0c      	ldr	r3, [pc, #48]	@ (800d1a8 <vPortEnterCritical+0x60>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00b      	beq.n	800d196 <vPortEnterCritical+0x4e>
	__asm volatile
 800d17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d182:	f383 8811 	msr	BASEPRI, r3
 800d186:	f3bf 8f6f 	isb	sy
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	603b      	str	r3, [r7, #0]
}
 800d190:	bf00      	nop
 800d192:	bf00      	nop
 800d194:	e7fd      	b.n	800d192 <vPortEnterCritical+0x4a>
	}
}
 800d196:	bf00      	nop
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	2000002c 	.word	0x2000002c
 800d1a8:	e000ed04 	.word	0xe000ed04

0800d1ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d1b2:	4b12      	ldr	r3, [pc, #72]	@ (800d1fc <vPortExitCritical+0x50>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d10b      	bne.n	800d1d2 <vPortExitCritical+0x26>
	__asm volatile
 800d1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1be:	f383 8811 	msr	BASEPRI, r3
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	607b      	str	r3, [r7, #4]
}
 800d1cc:	bf00      	nop
 800d1ce:	bf00      	nop
 800d1d0:	e7fd      	b.n	800d1ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d1d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d1fc <vPortExitCritical+0x50>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	4a08      	ldr	r2, [pc, #32]	@ (800d1fc <vPortExitCritical+0x50>)
 800d1da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d1dc:	4b07      	ldr	r3, [pc, #28]	@ (800d1fc <vPortExitCritical+0x50>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d105      	bne.n	800d1f0 <vPortExitCritical+0x44>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	f383 8811 	msr	BASEPRI, r3
}
 800d1ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	2000002c 	.word	0x2000002c

0800d200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d200:	f3ef 8009 	mrs	r0, PSP
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	4b15      	ldr	r3, [pc, #84]	@ (800d260 <pxCurrentTCBConst>)
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	f01e 0f10 	tst.w	lr, #16
 800d210:	bf08      	it	eq
 800d212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21a:	6010      	str	r0, [r2, #0]
 800d21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d224:	f380 8811 	msr	BASEPRI, r0
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	f3bf 8f6f 	isb	sy
 800d230:	f7fe ff88 	bl	800c144 <vTaskSwitchContext>
 800d234:	f04f 0000 	mov.w	r0, #0
 800d238:	f380 8811 	msr	BASEPRI, r0
 800d23c:	bc09      	pop	{r0, r3}
 800d23e:	6819      	ldr	r1, [r3, #0]
 800d240:	6808      	ldr	r0, [r1, #0]
 800d242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d246:	f01e 0f10 	tst.w	lr, #16
 800d24a:	bf08      	it	eq
 800d24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d250:	f380 8809 	msr	PSP, r0
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	f3af 8000 	nop.w

0800d260 <pxCurrentTCBConst>:
 800d260:	20000a80 	.word	0x20000a80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop

0800d268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	607b      	str	r3, [r7, #4]
}
 800d280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d282:	f7fe fea5 	bl	800bfd0 <xTaskIncrementTick>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d003      	beq.n	800d294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d28c:	4b06      	ldr	r3, [pc, #24]	@ (800d2a8 <xPortSysTickHandler+0x40>)
 800d28e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	2300      	movs	r3, #0
 800d296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	f383 8811 	msr	BASEPRI, r3
}
 800d29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	e000ed04 	.word	0xe000ed04

0800d2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d2b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d2e0 <vPortSetupTimerInterrupt+0x34>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800d2e4 <vPortSetupTimerInterrupt+0x38>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d2bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d2e8 <vPortSetupTimerInterrupt+0x3c>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a0a      	ldr	r2, [pc, #40]	@ (800d2ec <vPortSetupTimerInterrupt+0x40>)
 800d2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2c6:	099b      	lsrs	r3, r3, #6
 800d2c8:	4a09      	ldr	r2, [pc, #36]	@ (800d2f0 <vPortSetupTimerInterrupt+0x44>)
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d2ce:	4b04      	ldr	r3, [pc, #16]	@ (800d2e0 <vPortSetupTimerInterrupt+0x34>)
 800d2d0:	2207      	movs	r2, #7
 800d2d2:	601a      	str	r2, [r3, #0]
}
 800d2d4:	bf00      	nop
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	e000e010 	.word	0xe000e010
 800d2e4:	e000e018 	.word	0xe000e018
 800d2e8:	20000000 	.word	0x20000000
 800d2ec:	10624dd3 	.word	0x10624dd3
 800d2f0:	e000e014 	.word	0xe000e014

0800d2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d304 <vPortEnableVFP+0x10>
 800d2f8:	6801      	ldr	r1, [r0, #0]
 800d2fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d2fe:	6001      	str	r1, [r0, #0]
 800d300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d302:	bf00      	nop
 800d304:	e000ed88 	.word	0xe000ed88

0800d308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d30e:	f3ef 8305 	mrs	r3, IPSR
 800d312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2b0f      	cmp	r3, #15
 800d318:	d915      	bls.n	800d346 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d31a:	4a18      	ldr	r2, [pc, #96]	@ (800d37c <vPortValidateInterruptPriority+0x74>)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	4413      	add	r3, r2
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d324:	4b16      	ldr	r3, [pc, #88]	@ (800d380 <vPortValidateInterruptPriority+0x78>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	7afa      	ldrb	r2, [r7, #11]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d20b      	bcs.n	800d346 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	607b      	str	r3, [r7, #4]
}
 800d340:	bf00      	nop
 800d342:	bf00      	nop
 800d344:	e7fd      	b.n	800d342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d346:	4b0f      	ldr	r3, [pc, #60]	@ (800d384 <vPortValidateInterruptPriority+0x7c>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d34e:	4b0e      	ldr	r3, [pc, #56]	@ (800d388 <vPortValidateInterruptPriority+0x80>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	429a      	cmp	r2, r3
 800d354:	d90b      	bls.n	800d36e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35a:	f383 8811 	msr	BASEPRI, r3
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	603b      	str	r3, [r7, #0]
}
 800d368:	bf00      	nop
 800d36a:	bf00      	nop
 800d36c:	e7fd      	b.n	800d36a <vPortValidateInterruptPriority+0x62>
	}
 800d36e:	bf00      	nop
 800d370:	3714      	adds	r7, #20
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	e000e3f0 	.word	0xe000e3f0
 800d380:	200010ac 	.word	0x200010ac
 800d384:	e000ed0c 	.word	0xe000ed0c
 800d388:	200010b0 	.word	0x200010b0

0800d38c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08a      	sub	sp, #40	@ 0x28
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d394:	2300      	movs	r3, #0
 800d396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d398:	f7fe fd5e 	bl	800be58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d39c:	4b5f      	ldr	r3, [pc, #380]	@ (800d51c <pvPortMalloc+0x190>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3a4:	f000 f92a 	bl	800d5fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3a8:	4b5d      	ldr	r3, [pc, #372]	@ (800d520 <pvPortMalloc+0x194>)
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f040 8095 	bne.w	800d4e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d01e      	beq.n	800d3fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d3bc:	2208      	movs	r2, #8
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f003 0307 	and.w	r3, r3, #7
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d015      	beq.n	800d3fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f023 0307 	bic.w	r3, r3, #7
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f003 0307 	and.w	r3, r3, #7
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00b      	beq.n	800d3fa <pvPortMalloc+0x6e>
	__asm volatile
 800d3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e6:	f383 8811 	msr	BASEPRI, r3
 800d3ea:	f3bf 8f6f 	isb	sy
 800d3ee:	f3bf 8f4f 	dsb	sy
 800d3f2:	617b      	str	r3, [r7, #20]
}
 800d3f4:	bf00      	nop
 800d3f6:	bf00      	nop
 800d3f8:	e7fd      	b.n	800d3f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d06f      	beq.n	800d4e0 <pvPortMalloc+0x154>
 800d400:	4b48      	ldr	r3, [pc, #288]	@ (800d524 <pvPortMalloc+0x198>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	429a      	cmp	r2, r3
 800d408:	d86a      	bhi.n	800d4e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d40a:	4b47      	ldr	r3, [pc, #284]	@ (800d528 <pvPortMalloc+0x19c>)
 800d40c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d40e:	4b46      	ldr	r3, [pc, #280]	@ (800d528 <pvPortMalloc+0x19c>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d414:	e004      	b.n	800d420 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d418:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	429a      	cmp	r2, r3
 800d428:	d903      	bls.n	800d432 <pvPortMalloc+0xa6>
 800d42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1f1      	bne.n	800d416 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d432:	4b3a      	ldr	r3, [pc, #232]	@ (800d51c <pvPortMalloc+0x190>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d438:	429a      	cmp	r2, r3
 800d43a:	d051      	beq.n	800d4e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2208      	movs	r2, #8
 800d442:	4413      	add	r3, r2
 800d444:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	6a3b      	ldr	r3, [r7, #32]
 800d44c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d450:	685a      	ldr	r2, [r3, #4]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	1ad2      	subs	r2, r2, r3
 800d456:	2308      	movs	r3, #8
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d920      	bls.n	800d4a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d45e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4413      	add	r3, r2
 800d464:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	f003 0307 	and.w	r3, r3, #7
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00b      	beq.n	800d488 <pvPortMalloc+0xfc>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	613b      	str	r3, [r7, #16]
}
 800d482:	bf00      	nop
 800d484:	bf00      	nop
 800d486:	e7fd      	b.n	800d484 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48a:	685a      	ldr	r2, [r3, #4]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	1ad2      	subs	r2, r2, r3
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d49a:	69b8      	ldr	r0, [r7, #24]
 800d49c:	f000 f910 	bl	800d6c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d4a0:	4b20      	ldr	r3, [pc, #128]	@ (800d524 <pvPortMalloc+0x198>)
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	1ad3      	subs	r3, r2, r3
 800d4aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d524 <pvPortMalloc+0x198>)
 800d4ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d4ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d524 <pvPortMalloc+0x198>)
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	4b1e      	ldr	r3, [pc, #120]	@ (800d52c <pvPortMalloc+0x1a0>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d203      	bcs.n	800d4c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d4ba:	4b1a      	ldr	r3, [pc, #104]	@ (800d524 <pvPortMalloc+0x198>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4a1b      	ldr	r2, [pc, #108]	@ (800d52c <pvPortMalloc+0x1a0>)
 800d4c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c4:	685a      	ldr	r2, [r3, #4]
 800d4c6:	4b16      	ldr	r3, [pc, #88]	@ (800d520 <pvPortMalloc+0x194>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	431a      	orrs	r2, r3
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d4d6:	4b16      	ldr	r3, [pc, #88]	@ (800d530 <pvPortMalloc+0x1a4>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	4a14      	ldr	r2, [pc, #80]	@ (800d530 <pvPortMalloc+0x1a4>)
 800d4de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4e0:	f7fe fcc8 	bl	800be74 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d101      	bne.n	800d4ee <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d4ea:	f7f3 f829 	bl	8000540 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	f003 0307 	and.w	r3, r3, #7
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00b      	beq.n	800d510 <pvPortMalloc+0x184>
	__asm volatile
 800d4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	60fb      	str	r3, [r7, #12]
}
 800d50a:	bf00      	nop
 800d50c:	bf00      	nop
 800d50e:	e7fd      	b.n	800d50c <pvPortMalloc+0x180>
	return pvReturn;
 800d510:	69fb      	ldr	r3, [r7, #28]
}
 800d512:	4618      	mov	r0, r3
 800d514:	3728      	adds	r7, #40	@ 0x28
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	200090bc 	.word	0x200090bc
 800d520:	200090d0 	.word	0x200090d0
 800d524:	200090c0 	.word	0x200090c0
 800d528:	200090b4 	.word	0x200090b4
 800d52c:	200090c4 	.word	0x200090c4
 800d530:	200090c8 	.word	0x200090c8

0800d534 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b086      	sub	sp, #24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d04f      	beq.n	800d5e6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d546:	2308      	movs	r3, #8
 800d548:	425b      	negs	r3, r3
 800d54a:	697a      	ldr	r2, [r7, #20]
 800d54c:	4413      	add	r3, r2
 800d54e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	4b25      	ldr	r3, [pc, #148]	@ (800d5f0 <vPortFree+0xbc>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4013      	ands	r3, r2
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10b      	bne.n	800d57a <vPortFree+0x46>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	60fb      	str	r3, [r7, #12]
}
 800d574:	bf00      	nop
 800d576:	bf00      	nop
 800d578:	e7fd      	b.n	800d576 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d00b      	beq.n	800d59a <vPortFree+0x66>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	60bb      	str	r3, [r7, #8]
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop
 800d598:	e7fd      	b.n	800d596 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	685a      	ldr	r2, [r3, #4]
 800d59e:	4b14      	ldr	r3, [pc, #80]	@ (800d5f0 <vPortFree+0xbc>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4013      	ands	r3, r2
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d01e      	beq.n	800d5e6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d11a      	bne.n	800d5e6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	685a      	ldr	r2, [r3, #4]
 800d5b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d5f0 <vPortFree+0xbc>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	43db      	mvns	r3, r3
 800d5ba:	401a      	ands	r2, r3
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d5c0:	f7fe fc4a 	bl	800be58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f4 <vPortFree+0xc0>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	4a09      	ldr	r2, [pc, #36]	@ (800d5f4 <vPortFree+0xc0>)
 800d5d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d5d2:	6938      	ldr	r0, [r7, #16]
 800d5d4:	f000 f874 	bl	800d6c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d5d8:	4b07      	ldr	r3, [pc, #28]	@ (800d5f8 <vPortFree+0xc4>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	4a06      	ldr	r2, [pc, #24]	@ (800d5f8 <vPortFree+0xc4>)
 800d5e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d5e2:	f7fe fc47 	bl	800be74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d5e6:	bf00      	nop
 800d5e8:	3718      	adds	r7, #24
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	200090d0 	.word	0x200090d0
 800d5f4:	200090c0 	.word	0x200090c0
 800d5f8:	200090cc 	.word	0x200090cc

0800d5fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b085      	sub	sp, #20
 800d600:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d606:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d608:	4b27      	ldr	r3, [pc, #156]	@ (800d6a8 <prvHeapInit+0xac>)
 800d60a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f003 0307 	and.w	r3, r3, #7
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00c      	beq.n	800d630 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3307      	adds	r3, #7
 800d61a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f023 0307 	bic.w	r3, r3, #7
 800d622:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d624:	68ba      	ldr	r2, [r7, #8]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	4a1f      	ldr	r2, [pc, #124]	@ (800d6a8 <prvHeapInit+0xac>)
 800d62c:	4413      	add	r3, r2
 800d62e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d634:	4a1d      	ldr	r2, [pc, #116]	@ (800d6ac <prvHeapInit+0xb0>)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d63a:	4b1c      	ldr	r3, [pc, #112]	@ (800d6ac <prvHeapInit+0xb0>)
 800d63c:	2200      	movs	r2, #0
 800d63e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	4413      	add	r3, r2
 800d646:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d648:	2208      	movs	r2, #8
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	1a9b      	subs	r3, r3, r2
 800d64e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f023 0307 	bic.w	r3, r3, #7
 800d656:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	4a15      	ldr	r2, [pc, #84]	@ (800d6b0 <prvHeapInit+0xb4>)
 800d65c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d65e:	4b14      	ldr	r3, [pc, #80]	@ (800d6b0 <prvHeapInit+0xb4>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2200      	movs	r2, #0
 800d664:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d666:	4b12      	ldr	r3, [pc, #72]	@ (800d6b0 <prvHeapInit+0xb4>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2200      	movs	r2, #0
 800d66c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	1ad2      	subs	r2, r2, r3
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d67c:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b0 <prvHeapInit+0xb4>)
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	4a0a      	ldr	r2, [pc, #40]	@ (800d6b4 <prvHeapInit+0xb8>)
 800d68a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	4a09      	ldr	r2, [pc, #36]	@ (800d6b8 <prvHeapInit+0xbc>)
 800d692:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d694:	4b09      	ldr	r3, [pc, #36]	@ (800d6bc <prvHeapInit+0xc0>)
 800d696:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d69a:	601a      	str	r2, [r3, #0]
}
 800d69c:	bf00      	nop
 800d69e:	3714      	adds	r7, #20
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr
 800d6a8:	200010b4 	.word	0x200010b4
 800d6ac:	200090b4 	.word	0x200090b4
 800d6b0:	200090bc 	.word	0x200090bc
 800d6b4:	200090c4 	.word	0x200090c4
 800d6b8:	200090c0 	.word	0x200090c0
 800d6bc:	200090d0 	.word	0x200090d0

0800d6c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d6c8:	4b28      	ldr	r3, [pc, #160]	@ (800d76c <prvInsertBlockIntoFreeList+0xac>)
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	e002      	b.n	800d6d4 <prvInsertBlockIntoFreeList+0x14>
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	60fb      	str	r3, [r7, #12]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d8f7      	bhi.n	800d6ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	685b      	ldr	r3, [r3, #4]
 800d6e6:	68ba      	ldr	r2, [r7, #8]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d108      	bne.n	800d702 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	685a      	ldr	r2, [r3, #4]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	441a      	add	r2, r3
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	68ba      	ldr	r2, [r7, #8]
 800d70c:	441a      	add	r2, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	429a      	cmp	r2, r3
 800d714:	d118      	bne.n	800d748 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	4b15      	ldr	r3, [pc, #84]	@ (800d770 <prvInsertBlockIntoFreeList+0xb0>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d00d      	beq.n	800d73e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	685a      	ldr	r2, [r3, #4]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	441a      	add	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	601a      	str	r2, [r3, #0]
 800d73c:	e008      	b.n	800d750 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d73e:	4b0c      	ldr	r3, [pc, #48]	@ (800d770 <prvInsertBlockIntoFreeList+0xb0>)
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	e003      	b.n	800d750 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	429a      	cmp	r2, r3
 800d756:	d002      	beq.n	800d75e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d75e:	bf00      	nop
 800d760:	3714      	adds	r7, #20
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	200090b4 	.word	0x200090b4
 800d770:	200090bc 	.word	0x200090bc

0800d774 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800d778:	2200      	movs	r2, #0
 800d77a:	490e      	ldr	r1, [pc, #56]	@ (800d7b4 <MX_USB_HOST_Init+0x40>)
 800d77c:	480e      	ldr	r0, [pc, #56]	@ (800d7b8 <MX_USB_HOST_Init+0x44>)
 800d77e:	f7fb f905 	bl	800898c <USBH_Init>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d001      	beq.n	800d78c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d788:	f7f3 fae6 	bl	8000d58 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800d78c:	490b      	ldr	r1, [pc, #44]	@ (800d7bc <MX_USB_HOST_Init+0x48>)
 800d78e:	480a      	ldr	r0, [pc, #40]	@ (800d7b8 <MX_USB_HOST_Init+0x44>)
 800d790:	f7fb f9cb 	bl	8008b2a <USBH_RegisterClass>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d001      	beq.n	800d79e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d79a:	f7f3 fadd 	bl	8000d58 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d79e:	4806      	ldr	r0, [pc, #24]	@ (800d7b8 <MX_USB_HOST_Init+0x44>)
 800d7a0:	f7fb fa4f 	bl	8008c42 <USBH_Start>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d7aa:	f7f3 fad5 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d7ae:	bf00      	nop
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	0800d7c1 	.word	0x0800d7c1
 800d7b8:	200090d4 	.word	0x200090d4
 800d7bc:	2000000c 	.word	0x2000000c

0800d7c0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d7cc:	78fb      	ldrb	r3, [r7, #3]
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	2b04      	cmp	r3, #4
 800d7d2:	d819      	bhi.n	800d808 <USBH_UserProcess+0x48>
 800d7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d7dc <USBH_UserProcess+0x1c>)
 800d7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7da:	bf00      	nop
 800d7dc:	0800d809 	.word	0x0800d809
 800d7e0:	0800d7f9 	.word	0x0800d7f9
 800d7e4:	0800d809 	.word	0x0800d809
 800d7e8:	0800d801 	.word	0x0800d801
 800d7ec:	0800d7f1 	.word	0x0800d7f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d7f0:	4b09      	ldr	r3, [pc, #36]	@ (800d818 <USBH_UserProcess+0x58>)
 800d7f2:	2203      	movs	r2, #3
 800d7f4:	701a      	strb	r2, [r3, #0]
  break;
 800d7f6:	e008      	b.n	800d80a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d7f8:	4b07      	ldr	r3, [pc, #28]	@ (800d818 <USBH_UserProcess+0x58>)
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	701a      	strb	r2, [r3, #0]
  break;
 800d7fe:	e004      	b.n	800d80a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d800:	4b05      	ldr	r3, [pc, #20]	@ (800d818 <USBH_UserProcess+0x58>)
 800d802:	2201      	movs	r2, #1
 800d804:	701a      	strb	r2, [r3, #0]
  break;
 800d806:	e000      	b.n	800d80a <USBH_UserProcess+0x4a>

  default:
  break;
 800d808:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d80a:	bf00      	nop
 800d80c:	370c      	adds	r7, #12
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	200094b8 	.word	0x200094b8

0800d81c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b08a      	sub	sp, #40	@ 0x28
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d824:	f107 0314 	add.w	r3, r7, #20
 800d828:	2200      	movs	r2, #0
 800d82a:	601a      	str	r2, [r3, #0]
 800d82c:	605a      	str	r2, [r3, #4]
 800d82e:	609a      	str	r2, [r3, #8]
 800d830:	60da      	str	r2, [r3, #12]
 800d832:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a24      	ldr	r2, [pc, #144]	@ (800d8cc <HAL_HCD_MspInit+0xb0>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d141      	bne.n	800d8c2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d83e:	2300      	movs	r3, #0
 800d840:	613b      	str	r3, [r7, #16]
 800d842:	4b23      	ldr	r3, [pc, #140]	@ (800d8d0 <HAL_HCD_MspInit+0xb4>)
 800d844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d846:	4a22      	ldr	r2, [pc, #136]	@ (800d8d0 <HAL_HCD_MspInit+0xb4>)
 800d848:	f043 0302 	orr.w	r3, r3, #2
 800d84c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d84e:	4b20      	ldr	r3, [pc, #128]	@ (800d8d0 <HAL_HCD_MspInit+0xb4>)
 800d850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d852:	f003 0302 	and.w	r3, r3, #2
 800d856:	613b      	str	r3, [r7, #16]
 800d858:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d85a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800d85e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d860:	2302      	movs	r3, #2
 800d862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d864:	2300      	movs	r3, #0
 800d866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d868:	2300      	movs	r3, #0
 800d86a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d86c:	230c      	movs	r3, #12
 800d86e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d870:	f107 0314 	add.w	r3, r7, #20
 800d874:	4619      	mov	r1, r3
 800d876:	4817      	ldr	r0, [pc, #92]	@ (800d8d4 <HAL_HCD_MspInit+0xb8>)
 800d878:	f7f4 fa54 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d87c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d882:	2300      	movs	r3, #0
 800d884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d886:	2300      	movs	r3, #0
 800d888:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d88a:	f107 0314 	add.w	r3, r7, #20
 800d88e:	4619      	mov	r1, r3
 800d890:	4810      	ldr	r0, [pc, #64]	@ (800d8d4 <HAL_HCD_MspInit+0xb8>)
 800d892:	f7f4 fa47 	bl	8001d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d896:	2300      	movs	r3, #0
 800d898:	60fb      	str	r3, [r7, #12]
 800d89a:	4b0d      	ldr	r3, [pc, #52]	@ (800d8d0 <HAL_HCD_MspInit+0xb4>)
 800d89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d89e:	4a0c      	ldr	r2, [pc, #48]	@ (800d8d0 <HAL_HCD_MspInit+0xb4>)
 800d8a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d8a4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d8a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d8d0 <HAL_HCD_MspInit+0xb4>)
 800d8a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d8ae:	60fb      	str	r3, [r7, #12]
 800d8b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	2105      	movs	r1, #5
 800d8b6:	204d      	movs	r0, #77	@ 0x4d
 800d8b8:	f7f4 f802 	bl	80018c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d8bc:	204d      	movs	r0, #77	@ 0x4d
 800d8be:	f7f4 f81b 	bl	80018f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d8c2:	bf00      	nop
 800d8c4:	3728      	adds	r7, #40	@ 0x28
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	40040000 	.word	0x40040000
 800d8d0:	40023800 	.word	0x40023800
 800d8d4:	40020400 	.word	0x40020400

0800d8d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fb fe5d 	bl	80095a6 <USBH_LL_IncTimer>
}
 800d8ec:	bf00      	nop
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d902:	4618      	mov	r0, r3
 800d904:	f7fb fea1 	bl	800964a <USBH_LL_Connect>
}
 800d908:	bf00      	nop
 800d90a:	3708      	adds	r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fb feb6 	bl	8009690 <USBH_LL_Disconnect>
}
 800d924:	bf00      	nop
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	460b      	mov	r3, r1
 800d936:	70fb      	strb	r3, [r7, #3]
 800d938:	4613      	mov	r3, r2
 800d93a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d942:	4618      	mov	r0, r3
 800d944:	f7fb feed 	bl	8009722 <USBH_LL_NotifyURBChange>
#endif
}
 800d948:	bf00      	nop
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fb fe4b 	bl	80095fa <USBH_LL_PortEnabled>
}
 800d964:	bf00      	nop
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fb fe57 	bl	800962e <USBH_LL_PortDisabled>
}
 800d980:	bf00      	nop
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d996:	2b00      	cmp	r3, #0
 800d998:	d132      	bne.n	800da00 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d99a:	4a1c      	ldr	r2, [pc, #112]	@ (800da0c <USBH_LL_Init+0x84>)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4a19      	ldr	r2, [pc, #100]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9a6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d9aa:	4b18      	ldr	r3, [pc, #96]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9ac:	4a18      	ldr	r2, [pc, #96]	@ (800da10 <USBH_LL_Init+0x88>)
 800d9ae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d9b0:	4b16      	ldr	r3, [pc, #88]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9b2:	220c      	movs	r2, #12
 800d9b4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d9b6:	4b15      	ldr	r3, [pc, #84]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d9bc:	4b13      	ldr	r3, [pc, #76]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d9c2:	4b12      	ldr	r3, [pc, #72]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9c4:	2202      	movs	r2, #2
 800d9c6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d9c8:	4b10      	ldr	r3, [pc, #64]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d9ce:	4b0f      	ldr	r3, [pc, #60]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d9d4:	4b0d      	ldr	r3, [pc, #52]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d9da:	4b0c      	ldr	r3, [pc, #48]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d9e0:	480a      	ldr	r0, [pc, #40]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9e2:	f7f4 fb7e 	bl	80020e2 <HAL_HCD_Init>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d001      	beq.n	800d9f0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d9ec:	f7f3 f9b4 	bl	8000d58 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d9f0:	4806      	ldr	r0, [pc, #24]	@ (800da0c <USBH_LL_Init+0x84>)
 800d9f2:	f7f4 ffdf 	bl	80029b4 <HAL_HCD_GetCurrentFrame>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7fb fdc4 	bl	8009588 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3708      	adds	r7, #8
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	200094bc 	.word	0x200094bc
 800da10:	40040000 	.word	0x40040000

0800da14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da20:	2300      	movs	r3, #0
 800da22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7f4 ff4a 	bl	80028c4 <HAL_HCD_Start>
 800da30:	4603      	mov	r3, r0
 800da32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da34:	7bfb      	ldrb	r3, [r7, #15]
 800da36:	4618      	mov	r0, r3
 800da38:	f000 f95e 	bl	800dcf8 <USBH_Get_USB_Status>
 800da3c:	4603      	mov	r3, r0
 800da3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da40:	7bbb      	ldrb	r3, [r7, #14]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b084      	sub	sp, #16
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da52:	2300      	movs	r3, #0
 800da54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800da60:	4618      	mov	r0, r3
 800da62:	f7f4 ff52 	bl	800290a <HAL_HCD_Stop>
 800da66:	4603      	mov	r3, r0
 800da68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 f943 	bl	800dcf8 <USBH_Get_USB_Status>
 800da72:	4603      	mov	r3, r0
 800da74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da76:	7bbb      	ldrb	r3, [r7, #14]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800da88:	2301      	movs	r3, #1
 800da8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800da92:	4618      	mov	r0, r3
 800da94:	f7f4 ff9c 	bl	80029d0 <HAL_HCD_GetCurrentSpeed>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d00c      	beq.n	800dab8 <USBH_LL_GetSpeed+0x38>
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	d80d      	bhi.n	800dabe <USBH_LL_GetSpeed+0x3e>
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d002      	beq.n	800daac <USBH_LL_GetSpeed+0x2c>
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d003      	beq.n	800dab2 <USBH_LL_GetSpeed+0x32>
 800daaa:	e008      	b.n	800dabe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800daac:	2300      	movs	r3, #0
 800daae:	73fb      	strb	r3, [r7, #15]
    break;
 800dab0:	e008      	b.n	800dac4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dab2:	2301      	movs	r3, #1
 800dab4:	73fb      	strb	r3, [r7, #15]
    break;
 800dab6:	e005      	b.n	800dac4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dab8:	2302      	movs	r3, #2
 800daba:	73fb      	strb	r3, [r7, #15]
    break;
 800dabc:	e002      	b.n	800dac4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800dabe:	2301      	movs	r3, #1
 800dac0:	73fb      	strb	r3, [r7, #15]
    break;
 800dac2:	bf00      	nop
  }
  return  speed;
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b084      	sub	sp, #16
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dad6:	2300      	movs	r3, #0
 800dad8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7f4 ff2d 	bl	8002944 <HAL_HCD_ResetPort>
 800daea:	4603      	mov	r3, r0
 800daec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800daee:	7bfb      	ldrb	r3, [r7, #15]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f000 f901 	bl	800dcf8 <USBH_Get_USB_Status>
 800daf6:	4603      	mov	r3, r0
 800daf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dafa:	7bbb      	ldrb	r3, [r7, #14]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800db16:	78fa      	ldrb	r2, [r7, #3]
 800db18:	4611      	mov	r1, r2
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7f4 ff35 	bl	800298a <HAL_HCD_HC_GetXferCount>
 800db20:	4603      	mov	r3, r0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3708      	adds	r7, #8
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800db2a:	b590      	push	{r4, r7, lr}
 800db2c:	b089      	sub	sp, #36	@ 0x24
 800db2e:	af04      	add	r7, sp, #16
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	4608      	mov	r0, r1
 800db34:	4611      	mov	r1, r2
 800db36:	461a      	mov	r2, r3
 800db38:	4603      	mov	r3, r0
 800db3a:	70fb      	strb	r3, [r7, #3]
 800db3c:	460b      	mov	r3, r1
 800db3e:	70bb      	strb	r3, [r7, #2]
 800db40:	4613      	mov	r3, r2
 800db42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db44:	2300      	movs	r3, #0
 800db46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800db52:	787c      	ldrb	r4, [r7, #1]
 800db54:	78ba      	ldrb	r2, [r7, #2]
 800db56:	78f9      	ldrb	r1, [r7, #3]
 800db58:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800db5a:	9302      	str	r3, [sp, #8]
 800db5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800db60:	9301      	str	r3, [sp, #4]
 800db62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	4623      	mov	r3, r4
 800db6a:	f7f4 fb21 	bl	80021b0 <HAL_HCD_HC_Init>
 800db6e:	4603      	mov	r3, r0
 800db70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800db72:	7bfb      	ldrb	r3, [r7, #15]
 800db74:	4618      	mov	r0, r3
 800db76:	f000 f8bf 	bl	800dcf8 <USBH_Get_USB_Status>
 800db7a:	4603      	mov	r3, r0
 800db7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	bd90      	pop	{r4, r7, pc}

0800db88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	460b      	mov	r3, r1
 800db92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db94:	2300      	movs	r3, #0
 800db96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db98:	2300      	movs	r3, #0
 800db9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dba2:	78fa      	ldrb	r2, [r7, #3]
 800dba4:	4611      	mov	r1, r2
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7f4 fbba 	bl	8002320 <HAL_HCD_HC_Halt>
 800dbac:	4603      	mov	r3, r0
 800dbae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f000 f8a0 	bl	800dcf8 <USBH_Get_USB_Status>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dbc6:	b590      	push	{r4, r7, lr}
 800dbc8:	b089      	sub	sp, #36	@ 0x24
 800dbca:	af04      	add	r7, sp, #16
 800dbcc:	6078      	str	r0, [r7, #4]
 800dbce:	4608      	mov	r0, r1
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	70fb      	strb	r3, [r7, #3]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70bb      	strb	r3, [r7, #2]
 800dbdc:	4613      	mov	r3, r2
 800dbde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800dbee:	787c      	ldrb	r4, [r7, #1]
 800dbf0:	78ba      	ldrb	r2, [r7, #2]
 800dbf2:	78f9      	ldrb	r1, [r7, #3]
 800dbf4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dbf8:	9303      	str	r3, [sp, #12]
 800dbfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dbfc:	9302      	str	r3, [sp, #8]
 800dbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc00:	9301      	str	r3, [sp, #4]
 800dc02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc06:	9300      	str	r3, [sp, #0]
 800dc08:	4623      	mov	r3, r4
 800dc0a:	f7f4 fbad 	bl	8002368 <HAL_HCD_HC_SubmitRequest>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dc12:	7bfb      	ldrb	r3, [r7, #15]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f000 f86f 	bl	800dcf8 <USBH_Get_USB_Status>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3714      	adds	r7, #20
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd90      	pop	{r4, r7, pc}

0800dc28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	460b      	mov	r3, r1
 800dc32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dc3a:	78fa      	ldrb	r2, [r7, #3]
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f4 fe8e 	bl	8002960 <HAL_HCD_HC_GetURBState>
 800dc44:	4603      	mov	r3, r0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b082      	sub	sp, #8
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
 800dc56:	460b      	mov	r3, r1
 800dc58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d103      	bne.n	800dc6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800dc64:	78fb      	ldrb	r3, [r7, #3]
 800dc66:	4618      	mov	r0, r3
 800dc68:	f000 f872 	bl	800dd50 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800dc6c:	20c8      	movs	r0, #200	@ 0xc8
 800dc6e:	f7f3 fd4b 	bl	8001708 <HAL_Delay>
  return USBH_OK;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	460b      	mov	r3, r1
 800dc86:	70fb      	strb	r3, [r7, #3]
 800dc88:	4613      	mov	r3, r2
 800dc8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dc92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dc94:	78fa      	ldrb	r2, [r7, #3]
 800dc96:	68f9      	ldr	r1, [r7, #12]
 800dc98:	4613      	mov	r3, r2
 800dc9a:	011b      	lsls	r3, r3, #4
 800dc9c:	1a9b      	subs	r3, r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	440b      	add	r3, r1
 800dca2:	3317      	adds	r3, #23
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00a      	beq.n	800dcc0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dcaa:	78fa      	ldrb	r2, [r7, #3]
 800dcac:	68f9      	ldr	r1, [r7, #12]
 800dcae:	4613      	mov	r3, r2
 800dcb0:	011b      	lsls	r3, r3, #4
 800dcb2:	1a9b      	subs	r3, r3, r2
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	440b      	add	r3, r1
 800dcb8:	333c      	adds	r3, #60	@ 0x3c
 800dcba:	78ba      	ldrb	r2, [r7, #2]
 800dcbc:	701a      	strb	r2, [r3, #0]
 800dcbe:	e009      	b.n	800dcd4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800dcc0:	78fa      	ldrb	r2, [r7, #3]
 800dcc2:	68f9      	ldr	r1, [r7, #12]
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	011b      	lsls	r3, r3, #4
 800dcc8:	1a9b      	subs	r3, r3, r2
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	440b      	add	r3, r1
 800dcce:	333d      	adds	r3, #61	@ 0x3d
 800dcd0:	78ba      	ldrb	r2, [r7, #2]
 800dcd2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3714      	adds	r7, #20
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr

0800dce2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b082      	sub	sp, #8
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7f3 fd0c 	bl	8001708 <HAL_Delay>
}
 800dcf0:	bf00      	nop
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b085      	sub	sp, #20
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd02:	2300      	movs	r3, #0
 800dd04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd06:	79fb      	ldrb	r3, [r7, #7]
 800dd08:	2b03      	cmp	r3, #3
 800dd0a:	d817      	bhi.n	800dd3c <USBH_Get_USB_Status+0x44>
 800dd0c:	a201      	add	r2, pc, #4	@ (adr r2, 800dd14 <USBH_Get_USB_Status+0x1c>)
 800dd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd12:	bf00      	nop
 800dd14:	0800dd25 	.word	0x0800dd25
 800dd18:	0800dd2b 	.word	0x0800dd2b
 800dd1c:	0800dd31 	.word	0x0800dd31
 800dd20:	0800dd37 	.word	0x0800dd37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	73fb      	strb	r3, [r7, #15]
    break;
 800dd28:	e00b      	b.n	800dd42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd2e:	e008      	b.n	800dd42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dd30:	2301      	movs	r3, #1
 800dd32:	73fb      	strb	r3, [r7, #15]
    break;
 800dd34:	e005      	b.n	800dd42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dd36:	2302      	movs	r3, #2
 800dd38:	73fb      	strb	r3, [r7, #15]
    break;
 800dd3a:	e002      	b.n	800dd42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd40:	bf00      	nop
  }
  return usb_status;
 800dd42:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3714      	adds	r7, #20
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b084      	sub	sp, #16
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	4603      	mov	r3, r0
 800dd58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800dd5a:	79fb      	ldrb	r3, [r7, #7]
 800dd5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800dd5e:	79fb      	ldrb	r3, [r7, #7]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d102      	bne.n	800dd6a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800dd64:	2301      	movs	r3, #1
 800dd66:	73fb      	strb	r3, [r7, #15]
 800dd68:	e001      	b.n	800dd6e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800dd6e:	7bfb      	ldrb	r3, [r7, #15]
 800dd70:	461a      	mov	r2, r3
 800dd72:	2110      	movs	r1, #16
 800dd74:	4803      	ldr	r0, [pc, #12]	@ (800dd84 <MX_DriverVbusHS+0x34>)
 800dd76:	f7f4 f981 	bl	800207c <HAL_GPIO_WritePin>
}
 800dd7a:	bf00      	nop
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	40020800 	.word	0x40020800

0800dd88 <malloc>:
 800dd88:	4b02      	ldr	r3, [pc, #8]	@ (800dd94 <malloc+0xc>)
 800dd8a:	4601      	mov	r1, r0
 800dd8c:	6818      	ldr	r0, [r3, #0]
 800dd8e:	f000 b82d 	b.w	800ddec <_malloc_r>
 800dd92:	bf00      	nop
 800dd94:	20000030 	.word	0x20000030

0800dd98 <free>:
 800dd98:	4b02      	ldr	r3, [pc, #8]	@ (800dda4 <free+0xc>)
 800dd9a:	4601      	mov	r1, r0
 800dd9c:	6818      	ldr	r0, [r3, #0]
 800dd9e:	f000 b903 	b.w	800dfa8 <_free_r>
 800dda2:	bf00      	nop
 800dda4:	20000030 	.word	0x20000030

0800dda8 <sbrk_aligned>:
 800dda8:	b570      	push	{r4, r5, r6, lr}
 800ddaa:	4e0f      	ldr	r6, [pc, #60]	@ (800dde8 <sbrk_aligned+0x40>)
 800ddac:	460c      	mov	r4, r1
 800ddae:	6831      	ldr	r1, [r6, #0]
 800ddb0:	4605      	mov	r5, r0
 800ddb2:	b911      	cbnz	r1, 800ddba <sbrk_aligned+0x12>
 800ddb4:	f000 f8ae 	bl	800df14 <_sbrk_r>
 800ddb8:	6030      	str	r0, [r6, #0]
 800ddba:	4621      	mov	r1, r4
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	f000 f8a9 	bl	800df14 <_sbrk_r>
 800ddc2:	1c43      	adds	r3, r0, #1
 800ddc4:	d103      	bne.n	800ddce <sbrk_aligned+0x26>
 800ddc6:	f04f 34ff 	mov.w	r4, #4294967295
 800ddca:	4620      	mov	r0, r4
 800ddcc:	bd70      	pop	{r4, r5, r6, pc}
 800ddce:	1cc4      	adds	r4, r0, #3
 800ddd0:	f024 0403 	bic.w	r4, r4, #3
 800ddd4:	42a0      	cmp	r0, r4
 800ddd6:	d0f8      	beq.n	800ddca <sbrk_aligned+0x22>
 800ddd8:	1a21      	subs	r1, r4, r0
 800ddda:	4628      	mov	r0, r5
 800dddc:	f000 f89a 	bl	800df14 <_sbrk_r>
 800dde0:	3001      	adds	r0, #1
 800dde2:	d1f2      	bne.n	800ddca <sbrk_aligned+0x22>
 800dde4:	e7ef      	b.n	800ddc6 <sbrk_aligned+0x1e>
 800dde6:	bf00      	nop
 800dde8:	2000989c 	.word	0x2000989c

0800ddec <_malloc_r>:
 800ddec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddf0:	1ccd      	adds	r5, r1, #3
 800ddf2:	f025 0503 	bic.w	r5, r5, #3
 800ddf6:	3508      	adds	r5, #8
 800ddf8:	2d0c      	cmp	r5, #12
 800ddfa:	bf38      	it	cc
 800ddfc:	250c      	movcc	r5, #12
 800ddfe:	2d00      	cmp	r5, #0
 800de00:	4606      	mov	r6, r0
 800de02:	db01      	blt.n	800de08 <_malloc_r+0x1c>
 800de04:	42a9      	cmp	r1, r5
 800de06:	d904      	bls.n	800de12 <_malloc_r+0x26>
 800de08:	230c      	movs	r3, #12
 800de0a:	6033      	str	r3, [r6, #0]
 800de0c:	2000      	movs	r0, #0
 800de0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dee8 <_malloc_r+0xfc>
 800de16:	f000 f869 	bl	800deec <__malloc_lock>
 800de1a:	f8d8 3000 	ldr.w	r3, [r8]
 800de1e:	461c      	mov	r4, r3
 800de20:	bb44      	cbnz	r4, 800de74 <_malloc_r+0x88>
 800de22:	4629      	mov	r1, r5
 800de24:	4630      	mov	r0, r6
 800de26:	f7ff ffbf 	bl	800dda8 <sbrk_aligned>
 800de2a:	1c43      	adds	r3, r0, #1
 800de2c:	4604      	mov	r4, r0
 800de2e:	d158      	bne.n	800dee2 <_malloc_r+0xf6>
 800de30:	f8d8 4000 	ldr.w	r4, [r8]
 800de34:	4627      	mov	r7, r4
 800de36:	2f00      	cmp	r7, #0
 800de38:	d143      	bne.n	800dec2 <_malloc_r+0xd6>
 800de3a:	2c00      	cmp	r4, #0
 800de3c:	d04b      	beq.n	800ded6 <_malloc_r+0xea>
 800de3e:	6823      	ldr	r3, [r4, #0]
 800de40:	4639      	mov	r1, r7
 800de42:	4630      	mov	r0, r6
 800de44:	eb04 0903 	add.w	r9, r4, r3
 800de48:	f000 f864 	bl	800df14 <_sbrk_r>
 800de4c:	4581      	cmp	r9, r0
 800de4e:	d142      	bne.n	800ded6 <_malloc_r+0xea>
 800de50:	6821      	ldr	r1, [r4, #0]
 800de52:	1a6d      	subs	r5, r5, r1
 800de54:	4629      	mov	r1, r5
 800de56:	4630      	mov	r0, r6
 800de58:	f7ff ffa6 	bl	800dda8 <sbrk_aligned>
 800de5c:	3001      	adds	r0, #1
 800de5e:	d03a      	beq.n	800ded6 <_malloc_r+0xea>
 800de60:	6823      	ldr	r3, [r4, #0]
 800de62:	442b      	add	r3, r5
 800de64:	6023      	str	r3, [r4, #0]
 800de66:	f8d8 3000 	ldr.w	r3, [r8]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	bb62      	cbnz	r2, 800dec8 <_malloc_r+0xdc>
 800de6e:	f8c8 7000 	str.w	r7, [r8]
 800de72:	e00f      	b.n	800de94 <_malloc_r+0xa8>
 800de74:	6822      	ldr	r2, [r4, #0]
 800de76:	1b52      	subs	r2, r2, r5
 800de78:	d420      	bmi.n	800debc <_malloc_r+0xd0>
 800de7a:	2a0b      	cmp	r2, #11
 800de7c:	d917      	bls.n	800deae <_malloc_r+0xc2>
 800de7e:	1961      	adds	r1, r4, r5
 800de80:	42a3      	cmp	r3, r4
 800de82:	6025      	str	r5, [r4, #0]
 800de84:	bf18      	it	ne
 800de86:	6059      	strne	r1, [r3, #4]
 800de88:	6863      	ldr	r3, [r4, #4]
 800de8a:	bf08      	it	eq
 800de8c:	f8c8 1000 	streq.w	r1, [r8]
 800de90:	5162      	str	r2, [r4, r5]
 800de92:	604b      	str	r3, [r1, #4]
 800de94:	4630      	mov	r0, r6
 800de96:	f000 f82f 	bl	800def8 <__malloc_unlock>
 800de9a:	f104 000b 	add.w	r0, r4, #11
 800de9e:	1d23      	adds	r3, r4, #4
 800dea0:	f020 0007 	bic.w	r0, r0, #7
 800dea4:	1ac2      	subs	r2, r0, r3
 800dea6:	bf1c      	itt	ne
 800dea8:	1a1b      	subne	r3, r3, r0
 800deaa:	50a3      	strne	r3, [r4, r2]
 800deac:	e7af      	b.n	800de0e <_malloc_r+0x22>
 800deae:	6862      	ldr	r2, [r4, #4]
 800deb0:	42a3      	cmp	r3, r4
 800deb2:	bf0c      	ite	eq
 800deb4:	f8c8 2000 	streq.w	r2, [r8]
 800deb8:	605a      	strne	r2, [r3, #4]
 800deba:	e7eb      	b.n	800de94 <_malloc_r+0xa8>
 800debc:	4623      	mov	r3, r4
 800debe:	6864      	ldr	r4, [r4, #4]
 800dec0:	e7ae      	b.n	800de20 <_malloc_r+0x34>
 800dec2:	463c      	mov	r4, r7
 800dec4:	687f      	ldr	r7, [r7, #4]
 800dec6:	e7b6      	b.n	800de36 <_malloc_r+0x4a>
 800dec8:	461a      	mov	r2, r3
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	42a3      	cmp	r3, r4
 800dece:	d1fb      	bne.n	800dec8 <_malloc_r+0xdc>
 800ded0:	2300      	movs	r3, #0
 800ded2:	6053      	str	r3, [r2, #4]
 800ded4:	e7de      	b.n	800de94 <_malloc_r+0xa8>
 800ded6:	230c      	movs	r3, #12
 800ded8:	6033      	str	r3, [r6, #0]
 800deda:	4630      	mov	r0, r6
 800dedc:	f000 f80c 	bl	800def8 <__malloc_unlock>
 800dee0:	e794      	b.n	800de0c <_malloc_r+0x20>
 800dee2:	6005      	str	r5, [r0, #0]
 800dee4:	e7d6      	b.n	800de94 <_malloc_r+0xa8>
 800dee6:	bf00      	nop
 800dee8:	200098a0 	.word	0x200098a0

0800deec <__malloc_lock>:
 800deec:	4801      	ldr	r0, [pc, #4]	@ (800def4 <__malloc_lock+0x8>)
 800deee:	f000 b84b 	b.w	800df88 <__retarget_lock_acquire_recursive>
 800def2:	bf00      	nop
 800def4:	200099e0 	.word	0x200099e0

0800def8 <__malloc_unlock>:
 800def8:	4801      	ldr	r0, [pc, #4]	@ (800df00 <__malloc_unlock+0x8>)
 800defa:	f000 b846 	b.w	800df8a <__retarget_lock_release_recursive>
 800defe:	bf00      	nop
 800df00:	200099e0 	.word	0x200099e0

0800df04 <memset>:
 800df04:	4402      	add	r2, r0
 800df06:	4603      	mov	r3, r0
 800df08:	4293      	cmp	r3, r2
 800df0a:	d100      	bne.n	800df0e <memset+0xa>
 800df0c:	4770      	bx	lr
 800df0e:	f803 1b01 	strb.w	r1, [r3], #1
 800df12:	e7f9      	b.n	800df08 <memset+0x4>

0800df14 <_sbrk_r>:
 800df14:	b538      	push	{r3, r4, r5, lr}
 800df16:	4d06      	ldr	r5, [pc, #24]	@ (800df30 <_sbrk_r+0x1c>)
 800df18:	2300      	movs	r3, #0
 800df1a:	4604      	mov	r4, r0
 800df1c:	4608      	mov	r0, r1
 800df1e:	602b      	str	r3, [r5, #0]
 800df20:	f7f3 fb3e 	bl	80015a0 <_sbrk>
 800df24:	1c43      	adds	r3, r0, #1
 800df26:	d102      	bne.n	800df2e <_sbrk_r+0x1a>
 800df28:	682b      	ldr	r3, [r5, #0]
 800df2a:	b103      	cbz	r3, 800df2e <_sbrk_r+0x1a>
 800df2c:	6023      	str	r3, [r4, #0]
 800df2e:	bd38      	pop	{r3, r4, r5, pc}
 800df30:	200099dc 	.word	0x200099dc

0800df34 <__errno>:
 800df34:	4b01      	ldr	r3, [pc, #4]	@ (800df3c <__errno+0x8>)
 800df36:	6818      	ldr	r0, [r3, #0]
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	20000030 	.word	0x20000030

0800df40 <__libc_init_array>:
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	4d0d      	ldr	r5, [pc, #52]	@ (800df78 <__libc_init_array+0x38>)
 800df44:	4c0d      	ldr	r4, [pc, #52]	@ (800df7c <__libc_init_array+0x3c>)
 800df46:	1b64      	subs	r4, r4, r5
 800df48:	10a4      	asrs	r4, r4, #2
 800df4a:	2600      	movs	r6, #0
 800df4c:	42a6      	cmp	r6, r4
 800df4e:	d109      	bne.n	800df64 <__libc_init_array+0x24>
 800df50:	4d0b      	ldr	r5, [pc, #44]	@ (800df80 <__libc_init_array+0x40>)
 800df52:	4c0c      	ldr	r4, [pc, #48]	@ (800df84 <__libc_init_array+0x44>)
 800df54:	f000 f872 	bl	800e03c <_init>
 800df58:	1b64      	subs	r4, r4, r5
 800df5a:	10a4      	asrs	r4, r4, #2
 800df5c:	2600      	movs	r6, #0
 800df5e:	42a6      	cmp	r6, r4
 800df60:	d105      	bne.n	800df6e <__libc_init_array+0x2e>
 800df62:	bd70      	pop	{r4, r5, r6, pc}
 800df64:	f855 3b04 	ldr.w	r3, [r5], #4
 800df68:	4798      	blx	r3
 800df6a:	3601      	adds	r6, #1
 800df6c:	e7ee      	b.n	800df4c <__libc_init_array+0xc>
 800df6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800df72:	4798      	blx	r3
 800df74:	3601      	adds	r6, #1
 800df76:	e7f2      	b.n	800df5e <__libc_init_array+0x1e>
 800df78:	0800e114 	.word	0x0800e114
 800df7c:	0800e114 	.word	0x0800e114
 800df80:	0800e114 	.word	0x0800e114
 800df84:	0800e118 	.word	0x0800e118

0800df88 <__retarget_lock_acquire_recursive>:
 800df88:	4770      	bx	lr

0800df8a <__retarget_lock_release_recursive>:
 800df8a:	4770      	bx	lr

0800df8c <memcpy>:
 800df8c:	440a      	add	r2, r1
 800df8e:	4291      	cmp	r1, r2
 800df90:	f100 33ff 	add.w	r3, r0, #4294967295
 800df94:	d100      	bne.n	800df98 <memcpy+0xc>
 800df96:	4770      	bx	lr
 800df98:	b510      	push	{r4, lr}
 800df9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfa2:	4291      	cmp	r1, r2
 800dfa4:	d1f9      	bne.n	800df9a <memcpy+0xe>
 800dfa6:	bd10      	pop	{r4, pc}

0800dfa8 <_free_r>:
 800dfa8:	b538      	push	{r3, r4, r5, lr}
 800dfaa:	4605      	mov	r5, r0
 800dfac:	2900      	cmp	r1, #0
 800dfae:	d041      	beq.n	800e034 <_free_r+0x8c>
 800dfb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfb4:	1f0c      	subs	r4, r1, #4
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	bfb8      	it	lt
 800dfba:	18e4      	addlt	r4, r4, r3
 800dfbc:	f7ff ff96 	bl	800deec <__malloc_lock>
 800dfc0:	4a1d      	ldr	r2, [pc, #116]	@ (800e038 <_free_r+0x90>)
 800dfc2:	6813      	ldr	r3, [r2, #0]
 800dfc4:	b933      	cbnz	r3, 800dfd4 <_free_r+0x2c>
 800dfc6:	6063      	str	r3, [r4, #4]
 800dfc8:	6014      	str	r4, [r2, #0]
 800dfca:	4628      	mov	r0, r5
 800dfcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfd0:	f7ff bf92 	b.w	800def8 <__malloc_unlock>
 800dfd4:	42a3      	cmp	r3, r4
 800dfd6:	d908      	bls.n	800dfea <_free_r+0x42>
 800dfd8:	6820      	ldr	r0, [r4, #0]
 800dfda:	1821      	adds	r1, r4, r0
 800dfdc:	428b      	cmp	r3, r1
 800dfde:	bf01      	itttt	eq
 800dfe0:	6819      	ldreq	r1, [r3, #0]
 800dfe2:	685b      	ldreq	r3, [r3, #4]
 800dfe4:	1809      	addeq	r1, r1, r0
 800dfe6:	6021      	streq	r1, [r4, #0]
 800dfe8:	e7ed      	b.n	800dfc6 <_free_r+0x1e>
 800dfea:	461a      	mov	r2, r3
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	b10b      	cbz	r3, 800dff4 <_free_r+0x4c>
 800dff0:	42a3      	cmp	r3, r4
 800dff2:	d9fa      	bls.n	800dfea <_free_r+0x42>
 800dff4:	6811      	ldr	r1, [r2, #0]
 800dff6:	1850      	adds	r0, r2, r1
 800dff8:	42a0      	cmp	r0, r4
 800dffa:	d10b      	bne.n	800e014 <_free_r+0x6c>
 800dffc:	6820      	ldr	r0, [r4, #0]
 800dffe:	4401      	add	r1, r0
 800e000:	1850      	adds	r0, r2, r1
 800e002:	4283      	cmp	r3, r0
 800e004:	6011      	str	r1, [r2, #0]
 800e006:	d1e0      	bne.n	800dfca <_free_r+0x22>
 800e008:	6818      	ldr	r0, [r3, #0]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	6053      	str	r3, [r2, #4]
 800e00e:	4408      	add	r0, r1
 800e010:	6010      	str	r0, [r2, #0]
 800e012:	e7da      	b.n	800dfca <_free_r+0x22>
 800e014:	d902      	bls.n	800e01c <_free_r+0x74>
 800e016:	230c      	movs	r3, #12
 800e018:	602b      	str	r3, [r5, #0]
 800e01a:	e7d6      	b.n	800dfca <_free_r+0x22>
 800e01c:	6820      	ldr	r0, [r4, #0]
 800e01e:	1821      	adds	r1, r4, r0
 800e020:	428b      	cmp	r3, r1
 800e022:	bf04      	itt	eq
 800e024:	6819      	ldreq	r1, [r3, #0]
 800e026:	685b      	ldreq	r3, [r3, #4]
 800e028:	6063      	str	r3, [r4, #4]
 800e02a:	bf04      	itt	eq
 800e02c:	1809      	addeq	r1, r1, r0
 800e02e:	6021      	streq	r1, [r4, #0]
 800e030:	6054      	str	r4, [r2, #4]
 800e032:	e7ca      	b.n	800dfca <_free_r+0x22>
 800e034:	bd38      	pop	{r3, r4, r5, pc}
 800e036:	bf00      	nop
 800e038:	200098a0 	.word	0x200098a0

0800e03c <_init>:
 800e03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03e:	bf00      	nop
 800e040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e042:	bc08      	pop	{r3}
 800e044:	469e      	mov	lr, r3
 800e046:	4770      	bx	lr

0800e048 <_fini>:
 800e048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04a:	bf00      	nop
 800e04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e04e:	bc08      	pop	{r3}
 800e050:	469e      	mov	lr, r3
 800e052:	4770      	bx	lr
