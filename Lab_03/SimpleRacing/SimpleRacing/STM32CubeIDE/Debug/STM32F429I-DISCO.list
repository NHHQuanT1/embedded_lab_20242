
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cf0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016c8  08010ea0  08010ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08012568  08012568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08012710  08012710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000000e  08012728  08012728  00013728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 000d1b60  08012738  08012738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080e4298  080e4298  000e60f0  2**0
                  CONTENTS
  8 .ARM          00000008  080e4298  080e4298  000e5298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080e42a0  080e42a0  000e60f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080e42a0  080e42a0  000e52a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080e42b4  080e42b4  000e52b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f0  20000000  080e42bc  000e6000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000126b8  200000f0  080e43ac  000e60f0  2**2
                  ALLOC
 14 ._user_heap_stack 00001400  200127a8  080e43ac  000e67a8  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000e60f0  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000e7000  2**2
                  ALLOC
 17 .debug_line   000498d3  00000000  00000000  000e6120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000070  00000000  00000000  0012f9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   0009a9e0  00000000  00000000  0012fa63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00012c41  00000000  00000000  001ca443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00002cb0  00000000  00000000  001dd088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0010db57  00000000  00000000  001dfd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00002f86  00000000  00000000  002ed88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0001675b  00000000  00000000  002f0815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  0002f61a  00000000  00000000  00306f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0033658a  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00007cf0  00000000  00000000  0033664c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010e88 	.word	0x08010e88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	08010e88 	.word	0x08010e88

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005b8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000584:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000586:	e003      	b.n	8000590 <LoopCopyDataInit>

08000588 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800058a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800058c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800058e:	3104      	adds	r1, #4

08000590 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000594:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000596:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000598:	d3f6      	bcc.n	8000588 <CopyDataInit>
  ldr  r2, =_sbss
 800059a:	4a0b      	ldr	r2, [pc, #44]	@ (80005c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800059c:	e002      	b.n	80005a4 <LoopFillZerobss>

0800059e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800059e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005a0:	f842 3b04 	str.w	r3, [r2], #4

080005a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005a8:	d3f9      	bcc.n	800059e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005aa:	f003 fa25 	bl	80039f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f00f fefb 	bl	80103a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b2:	f000 feb7 	bl	8001324 <main>
  bx  lr    
 80005b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005bc:	080e42bc 	.word	0x080e42bc
  ldr  r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005c4:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 80005c8:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 80005cc:	200127a8 	.word	0x200127a8

080005d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC_IRQHandler>

080005d2 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80005d2:	f000 bcb9 	b.w	8000f48 <touchgfx_init>

080005d6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80005d6:	f000 bd27 	b.w	8001028 <touchgfx_taskEntry>

080005da <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80005da:	4770      	bx	lr

080005dc <_ZN20STM32TouchControllerD0Ev>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2104      	movs	r1, #4
 80005e0:	4604      	mov	r4, r0
 80005e2:	f00f fc03 	bl	800fdec <_ZdlPvj>
 80005e6:	4620      	mov	r0, r4
 80005e8:	bd10      	pop	{r4, pc}
	...

080005ec <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005f0:	4c0c      	ldr	r4, [pc, #48]	@ (8000624 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 80005f2:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005f6:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 80005f8:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	4798      	blx	r3
 80005fe:	f640 0311 	movw	r3, #2065	@ 0x811
 8000602:	4298      	cmp	r0, r3
 8000604:	d10a      	bne.n	800061c <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8000606:	4d09      	ldr	r5, [pc, #36]	@ (800062c <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8000608:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 800060a:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 800060c:	2082      	movs	r0, #130	@ 0x82
 800060e:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 8000610:	682b      	ldr	r3, [r5, #0]
 8000612:	2082      	movs	r0, #130	@ 0x82
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	4798      	blx	r3
 8000618:	2000      	movs	r0, #0
    }

    return ret;
}
 800061a:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 800061c:	2001      	movs	r0, #1
 800061e:	e7fc      	b.n	800061a <_Z11BSP_TS_Inittt+0x2e>
 8000620:	20000116 	.word	0x20000116
 8000624:	2000004c 	.word	0x2000004c
 8000628:	20000114 	.word	0x20000114
 800062c:	20000118 	.word	0x20000118

08000630 <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 8000630:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000634:	20f0      	movs	r0, #240	@ 0xf0
 8000636:	f7ff bfd9 	b.w	80005ec <_Z11BSP_TS_Inittt>
	...

0800063c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800063c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800063e:	4d33      	ldr	r5, [pc, #204]	@ (800070c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd0>)
 8000640:	682b      	ldr	r3, [r5, #0]
{
 8000642:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	2082      	movs	r0, #130	@ 0x82
 8000648:	4798      	blx	r3
 800064a:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 800064c:	2800      	cmp	r0, #0
 800064e:	d04a      	beq.n	80006e6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xaa>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8000650:	682b      	ldr	r3, [r5, #0]
 8000652:	f10d 0206 	add.w	r2, sp, #6
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	a901      	add	r1, sp, #4
 800065a:	2082      	movs	r0, #130	@ 0x82
 800065c:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 800065e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000662:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000666:	4293      	cmp	r3, r2
 8000668:	d93f      	bls.n	80006ea <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xae>
        {
            y = 3700;
 800066a:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 800066e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000672:	1ad2      	subs	r2, r2, r3
 8000674:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 8000676:	2a0a      	cmp	r2, #10
 8000678:	d93d      	bls.n	80006f6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xba>
        yr = y / 11;
 800067a:	230b      	movs	r3, #11
 800067c:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd4>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d901      	bls.n	800068c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 8000688:	3b01      	subs	r3, #1
 800068a:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 800068c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000690:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000694:	428b      	cmp	r3, r1
 8000696:	d830      	bhi.n	80006fa <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbe>
        {
            x = 3870 - x;
 8000698:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 800069c:	330e      	adds	r3, #14
 800069e:	b29b      	uxth	r3, r3
        {
            x = 3800 - x;
        }

        /* X value second correction */
        xr = x / 15;
 80006a0:	210f      	movs	r1, #15
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
        /* Return X position value */
        if (xr <= 0)
        {
            xr = 0;
        }
        else if (xr > TsXBoundary)
 80006a6:	491b      	ldr	r1, [pc, #108]	@ (8000714 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 80006a8:	8809      	ldrh	r1, [r1, #0]
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d901      	bls.n	80006b2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x76>
        {
            xr = TsXBoundary - 1;
 80006ae:	3901      	subs	r1, #1
 80006b0:	b28b      	uxth	r3, r1
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006b2:	4e19      	ldr	r6, [pc, #100]	@ (8000718 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006b4:	4d19      	ldr	r5, [pc, #100]	@ (800071c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006b6:	6830      	ldr	r0, [r6, #0]
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006b8:	682f      	ldr	r7, [r5, #0]
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006ba:	4283      	cmp	r3, r0
 80006bc:	b281      	uxth	r1, r0
 80006be:	bf8c      	ite	hi
 80006c0:	1a59      	subhi	r1, r3, r1
 80006c2:	1ac9      	subls	r1, r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006c4:	b2b8      	uxth	r0, r7
 80006c6:	42ba      	cmp	r2, r7
 80006c8:	bf8c      	ite	hi
 80006ca:	1a10      	subhi	r0, r2, r0
 80006cc:	1a80      	subls	r0, r0, r2
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006ce:	b289      	uxth	r1, r1
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006d0:	b280      	uxth	r0, r0

        if (xDiff + yDiff > 5)
 80006d2:	4401      	add	r1, r0
 80006d4:	2905      	cmp	r1, #5
        {
            _x = x;
 80006d6:	bfc8      	it	gt
 80006d8:	6033      	strgt	r3, [r6, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 80006da:	6833      	ldr	r3, [r6, #0]
            _y = y;
 80006dc:	bfc8      	it	gt
 80006de:	602a      	strgt	r2, [r5, #0]
        TsState->X = _x;
 80006e0:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 80006e2:	682b      	ldr	r3, [r5, #0]
 80006e4:	80a3      	strh	r3, [r4, #4]
    }
}
 80006e6:	b003      	add	sp, #12
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 80006ea:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 80006ec:	bf9c      	itt	ls
 80006ee:	23b4      	movls	r3, #180	@ 0xb4
 80006f0:	f8ad 3006 	strhls.w	r3, [sp, #6]
 80006f4:	e7bb      	b.n	800066e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 80006f6:	2200      	movs	r2, #0
 80006f8:	e7c8      	b.n	800068c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 80006fa:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80006fe:	3308      	adds	r3, #8
 8000700:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8000702:	2b0e      	cmp	r3, #14
 8000704:	d8cc      	bhi.n	80006a0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x64>
            xr = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	e7d3      	b.n	80006b2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x76>
 800070a:	bf00      	nop
 800070c:	20000118 	.word	0x20000118
 8000710:	20000114 	.word	0x20000114
 8000714:	20000116 	.word	0x20000116
 8000718:	20000110 	.word	0x20000110
 800071c:	2000010c 	.word	0x2000010c

08000720 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000720:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8000722:	4668      	mov	r0, sp
{
 8000724:	460d      	mov	r5, r1
 8000726:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 8000728:	f7ff ff88 	bl	800063c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 800072c:	f8bd 0000 	ldrh.w	r0, [sp]
 8000730:	b130      	cbz	r0, 8000740 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8000732:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000736:	602b      	str	r3, [r5, #0]
        y = state.Y;
 8000738:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800073c:	6023      	str	r3, [r4, #0]
        return true;
 800073e:	2001      	movs	r0, #1
}
 8000740:	b003      	add	sp, #12
 8000742:	bd30      	pop	{r4, r5, pc}

08000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000744:	2803      	cmp	r0, #3
 8000746:	d821      	bhi.n	800078c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 8000748:	e8df f000 	tbb	[pc, r0]
 800074c:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	0952      	lsrs	r2, r2, #5
 800075a:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 800075e:	f003 bbe1 	b.w	8003f24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	fab2 f282 	clz	r2, r2
 800076a:	0952      	lsrs	r2, r2, #5
 800076c:	2108      	movs	r1, #8
 800076e:	e7f5      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	fab2 f282 	clz	r2, r2
 8000778:	0952      	lsrs	r2, r2, #5
 800077a:	2110      	movs	r1, #16
 800077c:	e7ee      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000780:	68da      	ldr	r2, [r3, #12]
 8000782:	fab2 f282 	clz	r2, r2
 8000786:	0952      	lsrs	r2, r2, #5
 8000788:	2120      	movs	r1, #32
 800078a:	e7e7      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	2000011c 	.word	0x2000011c
 8000794:	40021000 	.word	0x40021000

08000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000798:	2803      	cmp	r0, #3
 800079a:	d821      	bhi.n	80007e0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 800079c:	e8df f000 	tbb	[pc, r0]
 80007a0:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	3a00      	subs	r2, #0
 80007aa:	bf18      	it	ne
 80007ac:	2201      	movne	r2, #1
 80007ae:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007b0:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007b2:	f003 bbb7 	b.w	8003f24 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	3a00      	subs	r2, #0
 80007bc:	bf18      	it	ne
 80007be:	2201      	movne	r2, #1
 80007c0:	2108      	movs	r1, #8
 80007c2:	e7f5      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	3a00      	subs	r2, #0
 80007ca:	bf18      	it	ne
 80007cc:	2201      	movne	r2, #1
 80007ce:	2110      	movs	r1, #16
 80007d0:	e7ee      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007d2:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	3a00      	subs	r2, #0
 80007d8:	bf18      	it	ne
 80007da:	2201      	movne	r2, #1
 80007dc:	2120      	movs	r1, #32
 80007de:	e7e7      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	2000011c 	.word	0x2000011c
 80007e8:	40021000 	.word	0x40021000

080007ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80007ec:	2803      	cmp	r0, #3
 80007ee:	d80d      	bhi.n	800080c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 80007f0:	e8df f000 	tbb	[pc, r0]
 80007f4:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80007f8:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 80007fc:	f003 bb97 	b.w	8003f2e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000800:	2108      	movs	r1, #8
 8000802:	e7fa      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000804:	2110      	movs	r1, #16
 8000806:	e7f8      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000808:	2120      	movs	r1, #32
 800080a:	e7f6      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000814:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000816:	2803      	cmp	r0, #3
 8000818:	d811      	bhi.n	800083e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 800081a:	e8df f000 	tbb	[pc, r0]
 800081e:	0a02      	.short	0x0a02
 8000820:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000822:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000824:	4807      	ldr	r0, [pc, #28]	@ (8000844 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 8000826:	f003 fb77 	bl	8003f18 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800082a:	1e43      	subs	r3, r0, #1
 800082c:	4258      	negs	r0, r3
 800082e:	4158      	adcs	r0, r3
 8000830:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000832:	2108      	movs	r1, #8
 8000834:	e7f6      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000836:	2110      	movs	r1, #16
 8000838:	e7f4      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800083a:	2120      	movs	r1, #32
 800083c:	e7f2      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 800083e:	2000      	movs	r0, #0
 8000840:	e7f3      	b.n	800082a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <_ZN8touchgfx4GPIO4initEv>:
{
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	4d08      	ldr	r5, [pc, #32]	@ (800086c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 800084c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800084e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000850:	b2e0      	uxtb	r0, r4
 8000852:	f7ff ffdf 	bl	8000814 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000856:	b118      	cbz	r0, 8000860 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 800085c:	bf18      	it	ne
 800085e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000860:	3401      	adds	r4, #1
 8000862:	2c05      	cmp	r4, #5
 8000864:	f105 0504 	add.w	r5, r5, #4
 8000868:	d1f2      	bne.n	8000850 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	2000011c 	.word	0x2000011c

08000870 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000870:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000872:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8000876:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 800087a:	4770      	bx	lr

0800087c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800087c:	2000      	movs	r0, #0
 800087e:	4770      	bx	lr

08000880 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000882:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000884:	3900      	subs	r1, #0
 8000886:	bf18      	it	ne
 8000888:	2101      	movne	r1, #1
 800088a:	7019      	strb	r1, [r3, #0]
    }
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20012433 	.word	0x20012433

08000894 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000894:	2000      	movs	r0, #0
 8000896:	4770      	bx	lr

08000898 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000898:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800089a:	b10b      	cbz	r3, 80008a0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800089c:	4608      	mov	r0, r1
 800089e:	4718      	bx	r3
        }
    }
 80008a0:	4770      	bx	lr

080008a2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80008a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008a6:	4770      	bx	lr

080008a8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80008a8:	6840      	ldr	r0, [r0, #4]
 80008aa:	6803      	ldr	r3, [r0, #0]
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4718      	bx	r3

080008b0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80008b0:	4770      	bx	lr

080008b2 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80008b2:	4770      	bx	lr

080008b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80008b4:	4770      	bx	lr
	...

080008b8 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80008bc:	f000 fc54 	bl	8001168 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 80008c8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 80008cc:	4620      	mov	r0, r4
 80008ce:	46ac      	mov	ip, r5
}
 80008d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 80008d4:	4760      	bx	ip
 80008d6:	bf00      	nop
 80008d8:	d0000000 	.word	0xd0000000

080008dc <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80008dc:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 80008de:	6803      	ldr	r3, [r0, #0]
{
 80008e0:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80008e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008e6:	4798      	blx	r3
    enableInterrupts();
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	4620      	mov	r0, r4
 80008ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80008ee:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80008f0:	f000 f8ec 	bl	8000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	4620      	mov	r0, r4
 80008f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80008fa:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 80008fc:	2029      	movs	r0, #41	@ 0x29
 80008fe:	f000 ff8f 	bl	8001820 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000902:	f000 f8e3 	bl	8000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	4620      	mov	r0, r4
 800090a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800090c:	4798      	blx	r3
    for (;;)
 800090e:	e7f8      	b.n	8000902 <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08000910 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000910:	b510      	push	{r4, lr}
 8000912:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000914:	f008 fc02 	bl	800911c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	4620      	mov	r0, r4
 800091c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8000920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000924:	4718      	bx	r3

08000926 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000926:	f000 bc11 	b.w	800114c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800092a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800092a:	f000 bc15 	b.w	8001158 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800092e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800092e:	f000 bc41 	b.w	80011b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08000932 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000932:	f000 bbe7 	b.w	8001104 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08000936 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000936:	f000 bc41 	b.w	80011bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800093a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800093a:	f000 bc49 	b.w	80011d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800093e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800093e:	f000 bbeb 	b.w	8001118 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08000942 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000942:	f007 be4b 	b.w	80085dc <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000946 <_ZN11TouchGFXHALD0Ev>:
 8000946:	b510      	push	{r4, lr}
 8000948:	217c      	movs	r1, #124	@ 0x7c
 800094a:	4604      	mov	r4, r0
 800094c:	f00f fa4e 	bl	800fdec <_ZdlPvj>
 8000950:	4620      	mov	r0, r4
 8000952:	bd10      	pop	{r4, pc}

08000954 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8000954:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000956:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 800095a:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8000960:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8000962:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000964:	d009      	beq.n	800097a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000966:	b93a      	cbnz	r2, 8000978 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000968:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 800096a:	490b      	ldr	r1, [pc, #44]	@ (8000998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800096c:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 800096e:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8000970:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000972:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8000974:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 8000976:	701a      	strb	r2, [r3, #0]
    }
 8000978:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 800097a:	2a00      	cmp	r2, #0
 800097c:	d0fc      	beq.n	8000978 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000980:	4905      	ldr	r1, [pc, #20]	@ (8000998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000982:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000984:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000986:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000988:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 800098a:	2200      	movs	r2, #0
 800098c:	e7f3      	b.n	8000976 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800098e:	bf00      	nop
 8000990:	2001242c 	.word	0x2001242c
 8000994:	20012428 	.word	0x20012428
 8000998:	2001242a 	.word	0x2001242a

0800099c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	460d      	mov	r5, r1
 80009a0:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80009a2:	b935      	cbnz	r5, 80009b2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80009a8:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80009aa:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80009ae:	f00f fa4b 	bl	800fe48 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80009b2:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80009b8:	3a00      	subs	r2, #0
 80009ba:	bf18      	it	ne
 80009bc:	2201      	movne	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80009c0:	6803      	ldr	r3, [r0, #0]
    }
 80009c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 80009c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ca:	4718      	bx	r3
 80009cc:	08010ef8 	.word	0x08010ef8
 80009d0:	08010f30 	.word	0x08010f30
 80009d4:	08010f7e 	.word	0x08010f7e
 80009d8:	20012432 	.word	0x20012432

080009dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80009dc:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d803      	bhi.n	80009ee <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d905      	bls.n	80009fa <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80009f2:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80009f4:	219e      	movs	r1, #158	@ 0x9e
 80009f6:	f00f fa27 	bl	800fe48 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80009fa:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80009fc:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000a00:	801a      	strh	r2, [r3, #0]
    }
 8000a02:	bd08      	pop	{r3, pc}
 8000a04:	20012428 	.word	0x20012428
 8000a08:	2001242a 	.word	0x2001242a
 8000a0c:	08010fc3 	.word	0x08010fc3
 8000a10:	08011026 	.word	0x08011026
 8000a14:	08010f7e 	.word	0x08010f7e
 8000a18:	2001242e 	.word	0x2001242e
 8000a1c:	20012430 	.word	0x20012430

08000a20 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8000a20:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8000a22:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8000a26:	b118      	cbz	r0, 8000a30 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8000a28:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8000a2a:	6803      	ldr	r3, [r0, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4718      	bx	r3
    }
 8000a30:	4770      	bx	lr
	...

08000a34 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a34:	2101      	movs	r1, #1
{
 8000a36:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	f005 fa93 	bl	8005f66 <osSemaphoreNew>
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8000a42:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000a44:	b928      	cbnz	r0, 8000a52 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a4a:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a4c:	480a      	ldr	r0, [pc, #40]	@ (8000a78 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8000a4e:	f00f f9fb 	bl	800fe48 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2104      	movs	r1, #4
 8000a56:	2001      	movs	r0, #1
 8000a58:	f005 fb2d 	bl	80060b6 <osMessageQueueNew>
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000a5e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a60:	b918      	cbnz	r0, 8000a6a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8000a62:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000a64:	4a03      	ldr	r2, [pc, #12]	@ (8000a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a66:	212c      	movs	r1, #44	@ 0x2c
 8000a68:	e7f0      	b.n	8000a4c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8000a6a:	bd08      	pop	{r3, pc}
 8000a6c:	20000130 	.word	0x20000130
 8000a70:	08011144 	.word	0x08011144
 8000a74:	0801118d 	.word	0x0801118d
 8000a78:	080111bc 	.word	0x080111bc
 8000a7c:	2000012c 	.word	0x2000012c
 8000a80:	08011213 	.word	0x08011213

08000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000a84:	4b02      	ldr	r3, [pc, #8]	@ (8000a90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8000a86:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	f005 bab5 	b.w	8005ffa <osSemaphoreAcquire>
 8000a90:	20000130 	.word	0x20000130

08000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8000a94:	4b01      	ldr	r3, [pc, #4]	@ (8000a9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f005 badb 	b.w	8006052 <osSemaphoreRelease>
 8000a9c:	20000130 	.word	0x20000130

08000aa0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000aa0:	4b02      	ldr	r3, [pc, #8]	@ (8000aac <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	f005 baa8 	b.w	8005ffa <osSemaphoreAcquire>
 8000aaa:	bf00      	nop
 8000aac:	20000130 	.word	0x20000130

08000ab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8000ab0:	f7ff bff0 	b.w	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08000ab4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000ab4:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8000ab6:	4904      	ldr	r1, [pc, #16]	@ (8000ac8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8000ab8:	6800      	ldr	r0, [r0, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	461a      	mov	r2, r3
 8000abe:	f005 bb35 	b.w	800612c <osMessageQueuePut>
 8000ac2:	bf00      	nop
 8000ac4:	2000012c 	.word	0x2000012c
 8000ac8:	20000004 	.word	0x20000004

08000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000acc:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000ace:	4c08      	ldr	r4, [pc, #32]	@ (8000af0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	a901      	add	r1, sp, #4
 8000ad6:	6820      	ldr	r0, [r4, #0]
 8000ad8:	f005 fb59 	bl	800618e <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000adc:	6820      	ldr	r0, [r4, #0]
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	a901      	add	r1, sp, #4
 8000ae6:	f005 fb52 	bl	800618e <osMessageQueueGet>
}
 8000aea:	b002      	add	sp, #8
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	bf00      	nop
 8000af0:	2000012c 	.word	0x2000012c

08000af4 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8000af4:	6803      	ldr	r3, [r0, #0]
 8000af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af8:	4718      	bx	r3

08000afa <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000afa:	2001      	movs	r0, #1
 8000afc:	4770      	bx	lr

08000afe <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8000afe:	6803      	ldr	r3, [r0, #0]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b02:	4718      	bx	r3

08000b04 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8000b04:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <_ZN8STM32DMA10initializeEv+0x3c>)
 8000b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b0e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b16:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8000b1a:	9201      	str	r2, [sp, #4]
 8000b1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b24:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8000b2c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <_ZN8STM32DMA10initializeEv+0x40>)
 8000b30:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <_ZN8STM32DMA10initializeEv+0x44>)
 8000b32:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <_ZN8STM32DMA10initializeEv+0x48>)
 8000b36:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b3a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8000b3c:	b002      	add	sp, #8
 8000b3e:	4770      	bx	lr
 8000b40:	40023800 	.word	0x40023800
 8000b44:	20001588 	.word	0x20001588
 8000b48:	08000ddd 	.word	0x08000ddd
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000b50:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8000b54:	4770      	bx	lr
	...

08000b58 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <_ZN8STM32DMAD1Ev+0x18>)
 8000b5a:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <_ZN8STM32DMAD1Ev+0x1c>)
 8000b5e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b6a:	f3bf 8f6f 	isb	sy
}
 8000b6e:	4770      	bx	lr
 8000b70:	080113bc 	.word	0x080113bc
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	4604      	mov	r4, r0
}
 8000b7c:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8000b80:	f7ff ffea 	bl	8000b58 <_ZN8STM32DMAD1Ev>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f00f f931 	bl	800fdec <_ZdlPvj>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	bd10      	pop	{r4, pc}
	...

08000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8000b90:	b508      	push	{r3, lr}
    switch (format)
 8000b92:	280a      	cmp	r0, #10
 8000b94:	d809      	bhi.n	8000baa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8000b96:	e8df f000 	tbb	[pc, r0]
 8000b9a:	1006      	.short	0x1006
 8000b9c:	0808080e 	.word	0x0808080e
 8000ba0:	10101008 	.word	0x10101008
 8000ba4:	10          	.byte	0x10
 8000ba5:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000ba6:	2002      	movs	r0, #2
}
 8000ba8:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8000bac:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000bae:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000bb0:	2187      	movs	r1, #135	@ 0x87
 8000bb2:	f00f f949 	bl	800fe48 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	e7f6      	b.n	8000ba8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000bba:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000bbc:	e7f4      	b.n	8000ba8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000bbe:	bf00      	nop
 8000bc0:	08011255 	.word	0x08011255
 8000bc4:	08011270 	.word	0x08011270
 8000bc8:	080112bb 	.word	0x080112bb

08000bcc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000bcc:	b538      	push	{r3, r4, r5, lr}
 8000bce:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000bd0:	7f88      	ldrb	r0, [r1, #30]
 8000bd2:	f7ff ffdd 	bl	8000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000bd6:	8aa5      	ldrh	r5, [r4, #20]
 8000bd8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bdc:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000bde:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000be0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8000be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000be6:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000be8:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bea:	1b52      	subs	r2, r2, r5
 8000bec:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000bee:	6825      	ldr	r5, [r4, #0]
 8000bf0:	2d08      	cmp	r5, #8
 8000bf2:	d10e      	bne.n	8000c12 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bf4:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bf6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf8:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000bfa:	7f20      	ldrb	r0, [r4, #28]
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8000bfe:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000c02:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000c04:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c06:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000c08:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0a:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0c:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c0e:	601a      	str	r2, [r3, #0]
    }
}
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8000c12:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000c14:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8000c1a:	0a0a      	lsrs	r2, r1, #8
 8000c1c:	0948      	lsrs	r0, r1, #5
 8000c1e:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8000c22:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8000c26:	4302      	orrs	r2, r0
 8000c28:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c30:	4a03      	ldr	r2, [pc, #12]	@ (8000c40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8000c32:	e7ec      	b.n	8000c0e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8000c34:	4002b000 	.word	0x4002b000
 8000c38:	00010009 	.word	0x00010009
 8000c3c:	00020201 	.word	0x00020201
 8000c40:	00030201 	.word	0x00030201

08000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8000c44:	b508      	push	{r3, lr}
    switch (format)
 8000c46:	280b      	cmp	r0, #11
 8000c48:	d80b      	bhi.n	8000c62 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8000c4a:	e8df f000 	tbb	[pc, r0]
 8000c4e:	1206      	.short	0x1206
 8000c50:	0a0a0a10 	.word	0x0a0a0a10
 8000c54:	0808080a 	.word	0x0808080a
 8000c58:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000c5a:	2002      	movs	r0, #2
}
 8000c5c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8000c5e:	2005      	movs	r0, #5
        break;
 8000c60:	e7fc      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000c64:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000c66:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8000c68:	2166      	movs	r1, #102	@ 0x66
 8000c6a:	f00f f8ed 	bl	800fe48 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e7f4      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000c72:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000c74:	e7f2      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000c76:	bf00      	nop
 8000c78:	08011255 	.word	0x08011255
 8000c7c:	08011310 	.word	0x08011310
 8000c80:	080112bb 	.word	0x080112bb

08000c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c88:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8000c8c:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c8e:	4640      	mov	r0, r8
 8000c90:	f7ff ffd8 	bl	8000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c94:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c96:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f7ff ffd3 	bl	8000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8000c9e:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	f7ff ff75 	bl	8000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000ca6:	8aa1      	ldrh	r1, [r4, #20]
 8000ca8:	8b62      	ldrh	r2, [r4, #26]
 8000caa:	4b44      	ldr	r3, [pc, #272]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000cac:	1a52      	subs	r2, r2, r1
 8000cae:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000cb0:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000cb2:	8b22      	ldrh	r2, [r4, #24]
 8000cb4:	1a52      	subs	r2, r2, r1
 8000cb6:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000cb8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000cba:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000cbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cc2:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000cc4:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cc6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000cc8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000cca:	6820      	ldr	r0, [r4, #0]
 8000ccc:	2880      	cmp	r0, #128	@ 0x80
 8000cce:	d028      	beq.n	8000d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8000cd0:	7f22      	ldrb	r2, [r4, #28]
 8000cd2:	d80f      	bhi.n	8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8000cd4:	2820      	cmp	r0, #32
 8000cd6:	d067      	beq.n	8000da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000cd8:	2840      	cmp	r0, #64	@ 0x40
 8000cda:	d065      	beq.n	8000da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000cdc:	2804      	cmp	r0, #4
 8000cde:	d01a      	beq.n	8000d16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000ce0:	4b36      	ldr	r3, [pc, #216]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000ce2:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000ce6:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cea:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cec:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cee:	d061      	beq.n	8000db4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cf0:	4a33      	ldr	r2, [pc, #204]	@ (8000dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8000cf2:	e044      	b.n	8000d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8000cf4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8000cf8:	d004      	beq.n	8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8000cfa:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8000cfe:	d1ef      	bne.n	8000ce0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d00:	4830      	ldr	r0, [pc, #192]	@ (8000dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8000d02:	e000      	b.n	8000d06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d04:	4830      	ldr	r0, [pc, #192]	@ (8000dc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d06:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8000d0a:	61da      	str	r2, [r3, #28]
 8000d0c:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000d0e:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d10:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d12:	6159      	str	r1, [r3, #20]
 8000d14:	e032      	b.n	8000d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d16:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000d1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d1e:	61da      	str	r2, [r3, #28]
 8000d20:	e7f6      	b.n	8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000d22:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000d24:	1d02      	adds	r2, r0, #4
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d28:	7f22      	ldrb	r2, [r4, #28]
 8000d2a:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000d2e:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8000d32:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d34:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d36:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8000d38:	7801      	ldrb	r1, [r0, #0]
 8000d3a:	b141      	cbz	r1, 8000d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8000d3c:	2901      	cmp	r1, #1
 8000d3e:	d021      	beq.n	8000d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8000d40:	4b22      	ldr	r3, [pc, #136]	@ (8000dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8000d42:	4a23      	ldr	r2, [pc, #140]	@ (8000dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8000d44:	4823      	ldr	r0, [pc, #140]	@ (8000dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8000d46:	f240 1111 	movw	r1, #273	@ 0x111
 8000d4a:	f00f f87d 	bl	800fe48 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d4e:	69da      	ldr	r2, [r3, #28]
 8000d50:	8841      	ldrh	r1, [r0, #2]
 8000d52:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000d56:	3901      	subs	r1, #1
 8000d58:	f022 0210 	bic.w	r2, r2, #16
 8000d5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d60:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8000d62:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000d66:	69da      	ldr	r2, [r3, #28]
 8000d68:	f042 0220 	orr.w	r2, r2, #32
 8000d6c:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000d6e:	69da      	ldr	r2, [r3, #28]
 8000d70:	0692      	lsls	r2, r2, #26
 8000d72:	d4fc      	bmi.n	8000d6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000d74:	2210      	movs	r2, #16
 8000d76:	609a      	str	r2, [r3, #8]
            if (blend)
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d0b9      	beq.n	8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000d7c:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8000d84:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d88:	69da      	ldr	r2, [r3, #28]
 8000d8a:	8840      	ldrh	r0, [r0, #2]
 8000d8c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000d90:	f100 30ff 	add.w	r0, r0, #4294967295
 8000d94:	f022 0210 	bic.w	r2, r2, #16
 8000d98:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000d9c:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 8000da0:	bf18      	it	ne
 8000da2:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000da4:	61da      	str	r2, [r3, #28]
                break;
 8000da6:	e7dd      	b.n	8000d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000da8:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000dae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000db2:	e7b4      	b.n	8000d1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000db4:	f240 2201 	movw	r2, #513	@ 0x201
 8000db8:	e7e1      	b.n	8000d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8000dba:	bf00      	nop
 8000dbc:	4002b000 	.word	0x4002b000
 8000dc0:	00010201 	.word	0x00010201
 8000dc4:	00020009 	.word	0x00020009
 8000dc8:	0002000a 	.word	0x0002000a
 8000dcc:	0801135a 	.word	0x0801135a
 8000dd0:	08011374 	.word	0x08011374
 8000dd4:	080112bb 	.word	0x080112bb
 8000dd8:	00020201 	.word	0x00020201

08000ddc <DMA2D_XferCpltCallback>:
        return instance;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	@ (8000de8 <DMA2D_XferCpltCallback+0xc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8000de2:	6803      	ldr	r3, [r0, #0]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4718      	bx	r3
 8000de8:	20012434 	.word	0x20012434

08000dec <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000df0:	4625      	mov	r5, r4
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <_ZN8STM32DMAC1Ev+0x30>)
 8000df4:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000df6:	2600      	movs	r6, #0
 8000df8:	6060      	str	r0, [r4, #4]
 8000dfa:	7226      	strb	r6, [r4, #8]
 8000dfc:	7266      	strb	r6, [r4, #9]
 8000dfe:	f845 3b20 	str.w	r3, [r5], #32
 8000e02:	2260      	movs	r2, #96	@ 0x60
 8000e04:	4629      	mov	r1, r5
 8000e06:	f008 fac7 	bl	8009398 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000e0a:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8000e0e:	60ee      	str	r6, [r5, #12]
 8000e10:	3524      	adds	r5, #36	@ 0x24
 8000e12:	429d      	cmp	r5, r3
 8000e14:	d1fb      	bne.n	8000e0e <_ZN8STM32DMAC1Ev+0x22>
}
 8000e16:	4620      	mov	r0, r4
 8000e18:	bd70      	pop	{r4, r5, r6, pc}
 8000e1a:	bf00      	nop
 8000e1c:	080113bc 	.word	0x080113bc

08000e20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e20:	2001      	movs	r0, #1
 8000e22:	4770      	bx	lr

08000e24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e24:	2038      	movs	r0, #56	@ 0x38
 8000e26:	4770      	bx	lr

08000e28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e28:	2338      	movs	r3, #56	@ 0x38
 8000e2a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e2e:	3008      	adds	r0, #8
 8000e30:	4770      	bx	lr

08000e32 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e32:	2338      	movs	r3, #56	@ 0x38
 8000e34:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e38:	3008      	adds	r0, #8
 8000e3a:	4770      	bx	lr

08000e3c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	4770      	bx	lr

08000e40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e40:	f44f 7009 	mov.w	r0, #548	@ 0x224
 8000e44:	4770      	bx	lr

08000e46 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e46:	f44f 7309 	mov.w	r3, #548	@ 0x224
 8000e4a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e4e:	3008      	adds	r0, #8
 8000e50:	4770      	bx	lr

08000e52 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e52:	f44f 7309 	mov.w	r3, #548	@ 0x224
 8000e56:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e5a:	3008      	adds	r0, #8
 8000e5c:	4770      	bx	lr

08000e5e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4770      	bx	lr

08000e62 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e62:	2010      	movs	r0, #16
 8000e64:	4770      	bx	lr

08000e66 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e66:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000e6a:	3008      	adds	r0, #8
 8000e6c:	4770      	bx	lr

08000e6e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e6e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000e72:	3008      	adds	r0, #8
 8000e74:	4770      	bx	lr

08000e76 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8000e76:	4608      	mov	r0, r1
 8000e78:	f001 bc90 	b.w	800279c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8000e80:	6003      	str	r3, [r0, #0]
 8000e82:	4604      	mov	r4, r0
 8000e84:	f007 f901 	bl	800808a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000e88:	4620      	mov	r0, r4
 8000e8a:	bd10      	pop	{r4, pc}
 8000e8c:	08011474 	.word	0x08011474

08000e90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8000e90:	b510      	push	{r4, lr}
 8000e92:	4604      	mov	r4, r0
 8000e94:	f7ff fff2 	bl	8000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	2140      	movs	r1, #64	@ 0x40
 8000e9c:	f00e ffa6 	bl	800fdec <_ZdlPvj>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	bd10      	pop	{r4, pc}

08000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000ea8:	6003      	str	r3, [r0, #0]
 8000eaa:	4604      	mov	r4, r0
 8000eac:	f007 f8ed 	bl	800808a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	bd10      	pop	{r4, pc}
 8000eb4:	08011440 	.word	0x08011440

08000eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	4604      	mov	r4, r0
 8000ebc:	f7ff fff2 	bl	8000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8000ec6:	f00e ff91 	bl	800fdec <_ZdlPvj>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	bd10      	pop	{r4, pc}
	...

08000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000ed4:	6003      	str	r3, [r0, #0]
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	f007 f8d7 	bl	800808a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000edc:	4620      	mov	r0, r4
 8000ede:	bd10      	pop	{r4, pc}
 8000ee0:	0801140c 	.word	0x0801140c

08000ee4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	f7ff fff2 	bl	8000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000eec:	4620      	mov	r0, r4
 8000eee:	2118      	movs	r1, #24
 8000ef0:	f00e ff7c 	bl	800fdec <_ZdlPvj>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_ZN12FrontendHeapD1Ev+0x24>)
 8000efc:	6003      	str	r3, [r0, #0]
 8000efe:	4604      	mov	r4, r0
 8000f00:	f500 7016 	add.w	r0, r0, #600	@ 0x258
 8000f04:	f7ff ffba 	bl	8000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000f08:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8000f0c:	f7ff ffca 	bl	8000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f10:	f104 0014 	add.w	r0, r4, #20
 8000f14:	f7ff ffdc 	bl	8000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f18:	4620      	mov	r0, r4
 8000f1a:	bd10      	pop	{r4, pc}
 8000f1c:	080114a8 	.word	0x080114a8

08000f20 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8000f20:	b508      	push	{r3, lr}
 8000f22:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <__tcf_0+0xc>)
 8000f24:	f7ff ffe8 	bl	8000ef8 <_ZN12FrontendHeapD1Ev>
 8000f28:	bd08      	pop	{r3, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000fe8 	.word	0x20000fe8

08000f30 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
 8000f34:	f7ff ffe0 	bl	8000ef8 <_ZN12FrontendHeapD1Ev>
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f3e:	f00e ff55 	bl	800fdec <_ZdlPvj>
 8000f42:	4620      	mov	r0, r4
 8000f44:	bd10      	pop	{r4, pc}
	...

08000f48 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8000f48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8000f4c:	f000 ffd6 	bl	8001efc <_ZN14BitmapDatabase11getInstanceEv>
 8000f50:	4605      	mov	r5, r0
 8000f52:	f000 ffd7 	bl	8001f04 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8000f56:	2400      	movs	r4, #0
 8000f58:	4601      	mov	r1, r0
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	4622      	mov	r2, r4
 8000f60:	9400      	str	r4, [sp, #0]
 8000f62:	f00c f8b1 	bl	800d0c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <touchgfx_init+0xb4>)
 8000f68:	4a25      	ldr	r2, [pc, #148]	@ (8001000 <touchgfx_init+0xb8>)
        static FrontendHeap instance;
 8000f6a:	4d26      	ldr	r5, [pc, #152]	@ (8001004 <touchgfx_init+0xbc>)
 8000f6c:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f002 f89e 	bl	80030b0 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8000f74:	4824      	ldr	r0, [pc, #144]	@ (8001008 <touchgfx_init+0xc0>)
 8000f76:	f00c f80f 	bl	800cf98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8000f7a:	682b      	ldr	r3, [r5, #0]
 8000f7c:	f3bf 8f5b 	dmb	ish
 8000f80:	07db      	lsls	r3, r3, #31
 8000f82:	d435      	bmi.n	8000ff0 <touchgfx_init+0xa8>
 8000f84:	4628      	mov	r0, r5
 8000f86:	f00e ff33 	bl	800fdf0 <__cxa_guard_acquire>
 8000f8a:	b388      	cbz	r0, 8000ff0 <touchgfx_init+0xa8>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8000f8c:	4c1f      	ldr	r4, [pc, #124]	@ (800100c <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <touchgfx_init+0xc8>)
 8000f90:	6023      	str	r3, [r4, #0]
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8000f92:	f504 7629 	add.w	r6, r4, #676	@ 0x2a4
        : presenterStorage(pres),
 8000f96:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8000f9a:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8000f9e:	f504 7716 	add.w	r7, r4, #600	@ 0x258
        : presenterStorage(pres),
 8000fa2:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8000fa4:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8000fa8:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8000faa:	6126      	str	r6, [r4, #16]
 8000fac:	f007 f86e 	bl	800808c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <touchgfx_init+0xcc>)
 8000fb2:	6163      	str	r3, [r4, #20]
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	f007 f869 	bl	800808c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <touchgfx_init+0xd0>)
 8000fbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f007 f864 	bl	800808c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <touchgfx_init+0xd4>)
 8000fc6:	f8c4 3258 	str.w	r3, [r4, #600]	@ 0x258
 8000fca:	f504 7026 	add.w	r0, r4, #664	@ 0x298
 8000fce:	f002 f8dd 	bl	800318c <_ZN5ModelC1Ev>
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f002 f8cd 	bl	8003178 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f001 fbdc 	bl	800279c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8000fe4:	480e      	ldr	r0, [pc, #56]	@ (8001020 <touchgfx_init+0xd8>)
 8000fe6:	f00e ff4d 	bl	800fe84 <atexit>
 8000fea:	4628      	mov	r0, r5
 8000fec:	f00e ff0c 	bl	800fe08 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <touchgfx_init+0xdc>)
}
 8000ff2:	b002      	add	sp, #8
 8000ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8000ff8:	f7ff bc5e 	b.w	80008b8 <_ZN11TouchGFXHAL10initializeEv>
 8000ffc:	20012490 	.word	0x20012490
 8001000:	200001b0 	.word	0x200001b0
 8001004:	20000fe4 	.word	0x20000fe4
 8001008:	20000008 	.word	0x20000008
 800100c:	20000fe8 	.word	0x20000fe8
 8001010:	080114a8 	.word	0x080114a8
 8001014:	0801140c 	.word	0x0801140c
 8001018:	08011440 	.word	0x08011440
 800101c:	08011474 	.word	0x08011474
 8001020:	08000f21 	.word	0x08000f21
 8001024:	20000134 	.word	0x20000134

08001028 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001028:	4801      	ldr	r0, [pc, #4]	@ (8001030 <touchgfx_taskEntry+0x8>)
 800102a:	f7ff bc57 	b.w	80008dc <_ZN11TouchGFXHAL9taskEntryEv>
 800102e:	bf00      	nop
 8001030:	20000134 	.word	0x20000134

08001034 <_GLOBAL__sub_I_touchgfx_init>:
}
 8001034:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8001036:	4e22      	ldr	r6, [pc, #136]	@ (80010c0 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 8001038:	4c22      	ldr	r4, [pc, #136]	@ (80010c4 <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 800103a:	4d23      	ldr	r5, [pc, #140]	@ (80010c8 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <_GLOBAL__sub_I_touchgfx_init+0x98>)
 800103e:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8001040:	4630      	mov	r0, r6
 8001042:	f7ff fed3 	bl	8000dec <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8001046:	4628      	mov	r0, r5
 8001048:	f00c fe9e 	bl	800dd88 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 800104c:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800104e:	4821      	ldr	r0, [pc, #132]	@ (80010d4 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 8001050:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 8001052:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001054:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 8001058:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 800105c:	491e      	ldr	r1, [pc, #120]	@ (80010d8 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 800105e:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 8001060:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001064:	491d      	ldr	r1, [pc, #116]	@ (80010dc <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8001066:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 8001068:	491d      	ldr	r1, [pc, #116]	@ (80010e0 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 800106a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        instance = this;
 800106e:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001070:	21f0      	movs	r1, #240	@ 0xf0
 8001072:	8001      	strh	r1, [r0, #0]
 8001074:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 8001076:	665a      	str	r2, [r3, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001078:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800107a:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 800107c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001080:	f44f 71a0 	mov.w	r1, #320	@ 0x140
          buttonController(0),
 8001084:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8001088:	e9c3 2206 	strd	r2, r2, [r3, #24]
 800108c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8001090:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 8001094:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8001098:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800109c:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 80010a0:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          cc_begin(0),
 80010a4:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 80010a6:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80010aa:	8001      	strh	r1, [r0, #0]
 80010ac:	480f      	ldr	r0, [pc, #60]	@ (80010ec <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80010ae:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80010b0:	490f      	ldr	r1, [pc, #60]	@ (80010f0 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80010b2:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80010ba:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 80010bc:	601a      	str	r2, [r3, #0]
}
 80010be:	bd70      	pop	{r4, r5, r6, pc}
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000fe0 	.word	0x20000fe0
 80010c8:	200001b4 	.word	0x200001b4
 80010cc:	08010ee8 	.word	0x08010ee8
 80010d0:	20000134 	.word	0x20000134
 80010d4:	20012428 	.word	0x20012428
 80010d8:	01000001 	.word	0x01000001
 80010dc:	01010000 	.word	0x01010000
 80010e0:	20012434 	.word	0x20012434
 80010e4:	2001242e 	.word	0x2001242e
 80010e8:	2001242a 	.word	0x2001242a
 80010ec:	20012430 	.word	0x20012430
 80010f0:	2001242c 	.word	0x2001242c
 80010f4:	08011074 	.word	0x08011074

080010f8 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80010f8:	4801      	ldr	r0, [pc, #4]	@ (8001100 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80010fa:	f7ff bd2d 	b.w	8000b58 <_ZN8STM32DMAD1Ev>
 80010fe:	bf00      	nop
 8001100:	20000240 	.word	0x20000240

08001104 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001106:	2290      	movs	r2, #144	@ 0x90
 8001108:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 800110c:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001118:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800111a:	490a      	ldr	r1, [pc, #40]	@ (8001144 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800111c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800111e:	480a      	ldr	r0, [pc, #40]	@ (8001148 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001120:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001124:	3b01      	subs	r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800112a:	6911      	ldr	r1, [r2, #16]
 800112c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001130:	3901      	subs	r1, #1
 8001132:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001136:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800113e:	4770      	bx	lr
 8001140:	40016800 	.word	0x40016800
 8001144:	200013ea 	.word	0x200013ea
 8001148:	200013e8 	.word	0x200013e8

0800114c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800114c:	4b01      	ldr	r3, [pc, #4]	@ (8001154 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800114e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8001152:	4770      	bx	lr
 8001154:	40016800 	.word	0x40016800

08001158 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001158:	4b02      	ldr	r3, [pc, #8]	@ (8001164 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800115a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800115c:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001162:	4770      	bx	lr
 8001164:	40016800 	.word	0x40016800

08001168 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001168:	b570      	push	{r4, r5, r6, lr}
 800116a:	4604      	mov	r4, r0
    HAL::initialize();
 800116c:	f007 fa8b 	bl	8008686 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8001174:	f009 fae6 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
 8001178:	4601      	mov	r1, r0
 800117a:	4620      	mov	r0, r4
 800117c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8001182:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8001186:	4620      	mov	r0, r4
 8001188:	46ac      	mov	ip, r5
 800118a:	2300      	movs	r3, #0
}
 800118c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8001190:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 8001194:	4760      	bx	ip
 8001196:	bf00      	nop
 8001198:	d004b000 	.word	0xd004b000

0800119c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 800119c:	f007 ba5a 	b.w	8008654 <_ZN8touchgfx3HAL10beginFrameEv>

080011a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80011a0:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 80011a4:	b113      	cbz	r3, 80011ac <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80011a6:	4b02      	ldr	r3, [pc, #8]	@ (80011b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80011ac:	f007 ba5e 	b.w	800866c <_ZN8touchgfx3HAL8endFrameEv>
 80011b0:	200013ec 	.word	0x200013ec

080011b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80011b4:	f007 ba18 	b.w	80085e8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080011b8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80011b8:	f007 bb79 	b.w	80088ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080011bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80011be:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011c8:	609a      	str	r2, [r3, #8]
}
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80011d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80011da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011de:	f3bf 8f6f 	isb	sy
 80011e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80011ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011ee:	f3bf 8f6f 	isb	sy
}
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80011f8:	b510      	push	{r4, lr}
        return instance;
 80011fa:	4c14      	ldr	r4, [pc, #80]	@ (800124c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	b323      	cbz	r3, 800124a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_LTDC_LineEventCallback+0x58>)
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <HAL_LTDC_LineEventCallback+0x5c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	8811      	ldrh	r1, [r2, #0]
 8001208:	428b      	cmp	r3, r1
 800120a:	d113      	bne.n	8001234 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_LTDC_LineEventCallback+0x60>)
 800120e:	8819      	ldrh	r1, [r3, #0]
 8001210:	f003 fc80 	bl	8004b14 <HAL_LTDC_ProgramLineEvent>
 8001214:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8001216:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800121a:	3301      	adds	r3, #1
 800121c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8001220:	f7ff fc48 	bl	8000ab4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8001224:	6820      	ldr	r0, [r4, #0]
 8001226:	f007 ff79 	bl	800911c <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800122a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ba88 	b.w	8000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8001234:	f003 fc6e 	bl	8004b14 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8001238:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800123a:	6803      	ldr	r3, [r0, #0]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4798      	blx	r3
    }
 8001240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff baa7 	b.w	8000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800124a:	bd10      	pop	{r4, pc}
 800124c:	20012434 	.word	0x20012434
 8001250:	40016800 	.word	0x40016800
 8001254:	200013ea 	.word	0x200013ea
 8001258:	200013e8 	.word	0x200013e8

0800125c <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 800125c:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <SPI5_Write+0x1c>)
{
 8001260:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <SPI5_Write+0x20>)
 8001268:	2201      	movs	r2, #1
 800126a:	f10d 0106 	add.w	r1, sp, #6
 800126e:	f004 f99f 	bl	80055b0 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 8001272:	b003      	add	sp, #12
 8001274:	f85d fb04 	ldr.w	pc, [sp], #4
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20001434 	.word	0x20001434

08001280 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001280:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	osDelay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f004 fe63 	bl	8005f4e <osDelay>
  for(;;)
 8001288:	e7fb      	b.n	8001282 <StartDefaultTask+0x2>
	...

0800128c <SystemClock_Config>:
{
 800128c:	b530      	push	{r4, r5, lr}
 800128e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001290:	2210      	movs	r2, #16
 8001292:	2100      	movs	r1, #0
 8001294:	a80a      	add	r0, sp, #40	@ 0x28
 8001296:	f00e ffde 	bl	8010256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129a:	2214      	movs	r2, #20
 800129c:	2100      	movs	r1, #0
 800129e:	a803      	add	r0, sp, #12
 80012a0:	f00e ffd9 	bl	8010256 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	2400      	movs	r4, #0
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <SystemClock_Config+0x90>)
 80012a8:	9401      	str	r4, [sp, #4]
 80012aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <SystemClock_Config+0x94>)
 80012be:	9402      	str	r4, [sp, #8]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012ce:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d0:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012dc:	2502      	movs	r5, #2
 80012de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012e2:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012e6:	2108      	movs	r1, #8
 80012e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012ec:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f2:	2304      	movs	r3, #4
 80012f4:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f6:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f8:	f003 fc2a 	bl	8004b50 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001302:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130a:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800130e:	2105      	movs	r1, #5
 8001310:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001312:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001314:	f003 fdf8 	bl	8004f08 <HAL_RCC_ClockConfig>
}
 8001318:	b015      	add	sp, #84	@ 0x54
 800131a:	bd30      	pop	{r4, r5, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <main>:
{
 8001324:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001328:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 800132a:	f002 fb73 	bl	8003a14 <HAL_Init>
  SystemClock_Config();
 800132e:	f7ff ffad 	bl	800128c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	2214      	movs	r2, #20
 8001334:	2100      	movs	r1, #0
 8001336:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001338:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f00e ff8c 	bl	8010256 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800133e:	4bc4      	ldr	r3, [pc, #784]	@ (8001650 <main+0x32c>)
 8001340:	9400      	str	r4, [sp, #0]
 8001342:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001344:	48c3      	ldr	r0, [pc, #780]	@ (8001654 <main+0x330>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001346:	f042 0210 	orr.w	r2, r2, #16
 800134a:	631a      	str	r2, [r3, #48]	@ 0x30
 800134c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800134e:	f002 0210 	and.w	r2, r2, #16
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001356:	9401      	str	r4, [sp, #4]
 8001358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800135a:	f042 0220 	orr.w	r2, r2, #32
 800135e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001362:	f002 0220 	and.w	r2, r2, #32
 8001366:	9201      	str	r2, [sp, #4]
 8001368:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136a:	9402      	str	r4, [sp, #8]
 800136c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800136e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
 8001374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001376:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800137a:	9202      	str	r2, [sp, #8]
 800137c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	9403      	str	r4, [sp, #12]
 8001380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001382:	f042 0204 	orr.w	r2, r2, #4
 8001386:	631a      	str	r2, [r3, #48]	@ 0x30
 8001388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800138a:	f002 0204 	and.w	r2, r2, #4
 800138e:	9203      	str	r2, [sp, #12]
 8001390:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	9404      	str	r4, [sp, #16]
 8001394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001396:	f042 0201 	orr.w	r2, r2, #1
 800139a:	631a      	str	r2, [r3, #48]	@ 0x30
 800139c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800139e:	f002 0201 	and.w	r2, r2, #1
 80013a2:	9204      	str	r2, [sp, #16]
 80013a4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	9405      	str	r4, [sp, #20]
 80013a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013aa:	f042 0202 	orr.w	r2, r2, #2
 80013ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80013b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013b2:	f002 0202 	and.w	r2, r2, #2
 80013b6:	9205      	str	r2, [sp, #20]
 80013b8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ba:	9406      	str	r4, [sp, #24]
 80013bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80013c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013c6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80013ca:	9206      	str	r2, [sp, #24]
 80013cc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	9407      	str	r4, [sp, #28]
 80013d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d2:	f042 0208 	orr.w	r2, r2, #8
 80013d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80013e0:	4622      	mov	r2, r4
 80013e2:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e4:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80013e6:	f002 fd9d 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80013ea:	489b      	ldr	r0, [pc, #620]	@ (8001658 <main+0x334>)
 80013ec:	4622      	mov	r2, r4
 80013ee:	2104      	movs	r1, #4
 80013f0:	f002 fd98 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80013f4:	4622      	mov	r2, r4
 80013f6:	4899      	ldr	r0, [pc, #612]	@ (800165c <main+0x338>)
 80013f8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80013fc:	f002 fd92 	bl	8003f24 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2501      	movs	r5, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001402:	2702      	movs	r7, #2
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001408:	4894      	ldr	r0, [pc, #592]	@ (800165c <main+0x338>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	940f      	str	r4, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	f04f 0803 	mov.w	r8, #3
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	e9cd 650d 	strd	r6, r5, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001416:	9710      	str	r7, [sp, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	f002 fc9a 	bl	8003d50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin;
 800141c:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141e:	488d      	ldr	r0, [pc, #564]	@ (8001654 <main+0x330>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001424:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001426:	f04f 0a04 	mov.w	sl, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001430:	f002 fc8e 	bl	8003d50 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001434:	4888      	ldr	r0, [pc, #544]	@ (8001658 <main+0x334>)
 8001436:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	e9cd a50d 	strd	sl, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143c:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001440:	f002 fc86 	bl	8003d50 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001444:	4885      	ldr	r0, [pc, #532]	@ (800165c <main+0x338>)
 8001446:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	e9cd 650d 	strd	r6, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144c:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001450:	f002 fc7e 	bl	8003d50 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	4882      	ldr	r0, [pc, #520]	@ (8001660 <main+0x33c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	e9cd 540d 	strd	r5, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f002 fc77 	bl	8003d50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001462:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001464:	487f      	ldr	r0, [pc, #508]	@ (8001664 <main+0x340>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	950f      	str	r5, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001468:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146a:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800146e:	f002 fc6f 	bl	8003d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8001472:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001476:	487b      	ldr	r0, [pc, #492]	@ (8001664 <main+0x340>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001478:	950f      	str	r5, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800147a:	a90d      	add	r1, sp, #52	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001480:	f002 fc66 	bl	8003d50 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001484:	a90d      	add	r1, sp, #52	@ 0x34
 8001486:	4875      	ldr	r0, [pc, #468]	@ (800165c <main+0x338>)
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	e9cd 650d 	strd	r6, r5, [sp, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148c:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001490:	f002 fc5e 	bl	8003d50 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001494:	4874      	ldr	r0, [pc, #464]	@ (8001668 <main+0x344>)
 8001496:	4b75      	ldr	r3, [pc, #468]	@ (800166c <main+0x348>)
  hi2c3.Instance = I2C3;
 8001498:	4e75      	ldr	r6, [pc, #468]	@ (8001670 <main+0x34c>)
  hcrc.Instance = CRC;
 800149a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800149c:	f002 fb4c 	bl	8003b38 <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 80014a0:	4a74      	ldr	r2, [pc, #464]	@ (8001674 <main+0x350>)
 80014a2:	4b75      	ldr	r3, [pc, #468]	@ (8001678 <main+0x354>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a4:	6234      	str	r4, [r6, #32]
  hi2c3.Init.ClockSpeed = 100000;
 80014a6:	e9c6 2300 	strd	r2, r3, [r6]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014aa:	4630      	mov	r0, r6
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b0:	e9c6 3404 	strd	r3, r4, [r6, #16]
  hi2c3.Init.OwnAddress1 = 0;
 80014b4:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b8:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014bc:	f002 ff2e 	bl	800431c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80014c0:	2110      	movs	r1, #16
 80014c2:	4630      	mov	r0, r6
 80014c4:	f003 f96a 	bl	800479c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014c8:	4621      	mov	r1, r4
 80014ca:	4630      	mov	r0, r6
 80014cc:	f003 f985 	bl	80047da <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 80014d0:	486a      	ldr	r0, [pc, #424]	@ (800167c <main+0x358>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014d2:	496b      	ldr	r1, [pc, #428]	@ (8001680 <main+0x35c>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014d6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80014da:	e9c0 1300 	strd	r1, r3, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014de:	f44f 7600 	mov.w	r6, #512	@ 0x200
 80014e2:	2318      	movs	r3, #24
 80014e4:	e9c0 6306 	strd	r6, r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 80014e8:	230a      	movs	r3, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014ea:	4e66      	ldr	r6, [pc, #408]	@ (8001684 <main+0x360>)
  hspi5.Init.CRCPolynomial = 10;
 80014ec:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f6:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80014fa:	f003 fffd 	bl	80054f8 <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014fe:	4b62      	ldr	r3, [pc, #392]	@ (8001688 <main+0x364>)
  SdramTiming.LoadToActiveDelay = 2;
 8001500:	970d      	str	r7, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001502:	f04f 0c10 	mov.w	ip, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001506:	e9c6 3500 	strd	r3, r5, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800150a:	2340      	movs	r3, #64	@ 0x40
 800150c:	e9c6 c304 	strd	ip, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001510:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001514:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001518:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800151c:	e9c6 3408 	strd	r3, r4, [r6, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001520:	f44f 5b00 	mov.w	fp, #8192	@ 0x2000
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001524:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001526:	a90d      	add	r1, sp, #52	@ 0x34
 8001528:	4630      	mov	r0, r6
  SdramTiming.SelfRefreshTime = 4;
 800152a:	e9cd 3a0e 	strd	r3, sl, [sp, #56]	@ 0x38
  SdramTiming.WriteRecoveryTime = 3;
 800152e:	e9cd 3810 	strd	r3, r8, [sp, #64]	@ 0x40
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001532:	f04f 0908 	mov.w	r9, #8
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001536:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800153a:	f8c6 b028 	str.w	fp, [r6, #40]	@ 0x28
  SdramTiming.RCDDelay = 2;
 800153e:	e9cd 7712 	strd	r7, r7, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001542:	f003 fed5 	bl	80052f0 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001546:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800154a:	a909      	add	r1, sp, #36	@ 0x24
 800154c:	4630      	mov	r0, r6
  Command->AutoRefreshNumber       = 1;
 800154e:	e9cd 950a 	strd	r9, r5, [sp, #40]	@ 0x28
 __IO uint32_t tmpmrd =0;
 8001552:	9408      	str	r4, [sp, #32]
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001554:	9509      	str	r5, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001556:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001558:	f003 feea 	bl	8005330 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 800155c:	4628      	mov	r0, r5
 800155e:	f002 fa85 	bl	8003a6c <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001562:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001566:	a909      	add	r1, sp, #36	@ 0x24
 8001568:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800156a:	e9cd 7909 	strd	r7, r9, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 800156e:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001572:	f003 fedd 	bl	8005330 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001576:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800157a:	a909      	add	r1, sp, #36	@ 0x24
 800157c:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800157e:	e9cd 8909 	strd	r8, r9, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001582:	e9cd a40b 	strd	sl, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001586:	f003 fed3 	bl	8005330 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800158a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800158e:	9308      	str	r3, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 8001590:	9b08      	ldr	r3, [sp, #32]
 8001592:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001594:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001598:	a909      	add	r1, sp, #36	@ 0x24
 800159a:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800159c:	e9cd a909 	strd	sl, r9, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 80015a0:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015a2:	f003 fec5 	bl	8005330 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80015a6:	f240 516a 	movw	r1, #1386	@ 0x56a
 80015aa:	4630      	mov	r0, r6
 80015ac:	f003 fede 	bl	800536c <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015b0:	2234      	movs	r2, #52	@ 0x34
 80015b2:	4621      	mov	r1, r4
 80015b4:	eb0d 0002 	add.w	r0, sp, r2
 80015b8:	f00e fe4d 	bl	8010256 <memset>
  hltdc.Instance = LTDC;
 80015bc:	4e33      	ldr	r6, [pc, #204]	@ (800168c <main+0x368>)
 80015be:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <main+0x36c>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015c0:	6134      	str	r4, [r6, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015c2:	e9c6 3400 	strd	r3, r4, [r6]
  hltdc.Init.HorizontalSync = 9;
 80015c6:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 80015c8:	e9c6 3505 	strd	r3, r5, [r6, #20]
  hltdc.Init.AccumulatedHBP = 29;
 80015cc:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 80015ce:	f240 1e0d 	movw	lr, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 80015d2:	e9c6 3807 	strd	r3, r8, [r6, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 80015d6:	f240 1343 	movw	r3, #323	@ 0x143
 80015da:	e9c6 e309 	strd	lr, r3, [r6, #36]	@ 0x24
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015de:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 327;
 80015e0:	f240 1347 	movw	r3, #327	@ 0x147
 80015e4:	f240 1817 	movw	r8, #279	@ 0x117
 80015e8:	e9c6 830b 	strd	r8, r3, [r6, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015ec:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.Backcolor.Blue = 0;
 80015f0:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 80015f2:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80015f6:	f003 f995 	bl	8004924 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80015fa:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 80015fc:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 80015fe:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001602:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 8001606:	2105      	movs	r1, #5
  pLayerCfg.WindowY1 = 320;
 8001608:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 800160c:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001610:	e9cd a114 	strd	sl, r1, [sp, #80]	@ 0x50
  pLayerCfg.ImageWidth = 240;
 8001614:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001618:	a90d      	add	r1, sp, #52	@ 0x34
 800161a:	4622      	mov	r2, r4
 800161c:	4630      	mov	r0, r6
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800161e:	e9cd 3710 	strd	r3, r7, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 8001622:	4e1c      	ldr	r6, [pc, #112]	@ (8001694 <main+0x370>)
  pLayerCfg.ImageHeight = 320;
 8001624:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.WindowX0 = 0;
 8001626:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Blue = 0;
 8001628:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 800162c:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001630:	f003 fa43 	bl	8004aba <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <main+0x374>)
 8001636:	6033      	str	r3, [r6, #0]
  LcdDrv->Init();
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4798      	blx	r3
  LcdDrv->DisplayOff();
 800163c:	6833      	ldr	r3, [r6, #0]
  hdma2d.Instance = DMA2D;
 800163e:	4e17      	ldr	r6, [pc, #92]	@ (800169c <main+0x378>)
  LcdDrv->DisplayOff();
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <main+0x37c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001646:	4630      	mov	r0, r6
  hdma2d.Init.Mode = DMA2D_M2M;
 8001648:	e9c6 3400 	strd	r3, r4, [r6]
 800164c:	e02a      	b.n	80016a4 <main+0x380>
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40021000 	.word	0x40021000
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40020000 	.word	0x40020000
 8001664:	40021800 	.word	0x40021800
 8001668:	200015c8 	.word	0x200015c8
 800166c:	40023000 	.word	0x40023000
 8001670:	20001534 	.word	0x20001534
 8001674:	40005c00 	.word	0x40005c00
 8001678:	000186a0 	.word	0x000186a0
 800167c:	20001434 	.word	0x20001434
 8001680:	40015000 	.word	0x40015000
 8001684:	20001400 	.word	0x20001400
 8001688:	a0000140 	.word	0xa0000140
 800168c:	2000148c 	.word	0x2000148c
 8001690:	40016800 	.word	0x40016800
 8001694:	200013f0 	.word	0x200013f0
 8001698:	20000014 	.word	0x20000014
 800169c:	20001588 	.word	0x20001588
 80016a0:	4002b000 	.word	0x4002b000
  hdma2d.Init.OutputOffset = 0;
 80016a4:	e9c6 7402 	strd	r7, r4, [r6, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80016a8:	e9c6 470a 	strd	r4, r7, [r6, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80016ac:	e9c6 440c 	strd	r4, r4, [r6, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80016b0:	f002 fa52 	bl	8003b58 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80016b4:	4629      	mov	r1, r5
 80016b6:	4630      	mov	r0, r6
 80016b8:	f002 fb06 	bl	8003cc8 <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 80016bc:	f7fe ff89 	bl	80005d2 <MX_TouchGFX_Init>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // LED xanh lá
 80016c0:	4812      	ldr	r0, [pc, #72]	@ (800170c <main+0x3e8>)
 80016c2:	462a      	mov	r2, r5
 80016c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016c8:	f002 fc2c 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // LED cam
 80016cc:	462a      	mov	r2, r5
 80016ce:	4659      	mov	r1, fp
 80016d0:	480e      	ldr	r0, [pc, #56]	@ (800170c <main+0x3e8>)
 80016d2:	f002 fc27 	bl	8003f24 <HAL_GPIO_WritePin>
  osKernelInitialize();
 80016d6:	f004 fbc7 	bl	8005e68 <osKernelInitialize>
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 80016da:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <main+0x3ec>)
 80016dc:	4629      	mov	r1, r5
 80016de:	4648      	mov	r0, r9
 80016e0:	f004 fce9 	bl	80060b6 <osMessageQueueNew>
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <main+0x3f0>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001718 <main+0x3f4>)
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 80016e8:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016ea:	4621      	mov	r1, r4
 80016ec:	480b      	ldr	r0, [pc, #44]	@ (800171c <main+0x3f8>)
 80016ee:	f004 fbe7 	bl	8005ec0 <osThreadNew>
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <main+0x3fc>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80016f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <main+0x400>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016f6:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80016f8:	4621      	mov	r1, r4
 80016fa:	480b      	ldr	r0, [pc, #44]	@ (8001728 <main+0x404>)
 80016fc:	f004 fbe0 	bl	8005ec0 <osThreadNew>
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <main+0x408>)
 8001702:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001704:	f004 fbc2 	bl	8005e8c <osKernelStart>
  while (1)
 8001708:	e7fe      	b.n	8001708 <main+0x3e4>
 800170a:	bf00      	nop
 800170c:	40020c00 	.word	0x40020c00
 8001710:	080114d0 	.word	0x080114d0
 8001714:	200013f4 	.word	0x200013f4
 8001718:	0801150c 	.word	0x0801150c
 800171c:	08001281 	.word	0x08001281
 8001720:	200013fc 	.word	0x200013fc
 8001724:	080114e8 	.word	0x080114e8
 8001728:	080005d7 	.word	0x080005d7
 800172c:	200013f8 	.word	0x200013f8

08001730 <IOE_Init>:
void IOE_Init(void)
 8001730:	4770      	bx	lr

08001732 <IOE_ITConfig>:
void IOE_ITConfig(void)
 8001732:	4770      	bx	lr

08001734 <IOE_Write>:
{
 8001734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <IOE_Write+0x28>)
 8001738:	f88d 2017 	strb.w	r2, [sp, #23]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	f10d 0217 	add.w	r2, sp, #23
 8001744:	2301      	movs	r3, #1
 8001746:	9200      	str	r2, [sp, #0]
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	460a      	mov	r2, r1
 800174c:	4601      	mov	r1, r0
 800174e:	4804      	ldr	r0, [pc, #16]	@ (8001760 <IOE_Write+0x2c>)
 8001750:	f002 fe8c 	bl	800446c <HAL_I2C_Mem_Write>
}
 8001754:	b007      	add	sp, #28
 8001756:	f85d fb04 	ldr.w	pc, [sp], #4
 800175a:	bf00      	nop
 800175c:	20000010 	.word	0x20000010
 8001760:	20001534 	.word	0x20001534

08001764 <IOE_Read>:
{
 8001764:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <IOE_Read+0x2c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	9302      	str	r3, [sp, #8]
{
 8001772:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8001774:	2301      	movs	r3, #1
 8001776:	f10d 0117 	add.w	r1, sp, #23
 800177a:	9100      	str	r1, [sp, #0]
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	4601      	mov	r1, r0
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <IOE_Read+0x30>)
 8001782:	f002 ff03 	bl	800458c <HAL_I2C_Mem_Read>
}
 8001786:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800178a:	b007      	add	sp, #28
 800178c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001790:	20000010 	.word	0x20000010
 8001794:	20001534 	.word	0x20001534

08001798 <IOE_ReadMultiple>:
{
 8001798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 800179a:	4c08      	ldr	r4, [pc, #32]	@ (80017bc <IOE_ReadMultiple+0x24>)
 800179c:	6824      	ldr	r4, [r4, #0]
 800179e:	9200      	str	r2, [sp, #0]
 80017a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80017a4:	460a      	mov	r2, r1
 80017a6:	2301      	movs	r3, #1
 80017a8:	4601      	mov	r1, r0
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <IOE_ReadMultiple+0x28>)
 80017ac:	f002 feee 	bl	800458c <HAL_I2C_Mem_Read>
}
 80017b0:	3800      	subs	r0, #0
 80017b2:	bf18      	it	ne
 80017b4:	2001      	movne	r0, #1
 80017b6:	b004      	add	sp, #16
 80017b8:	bd10      	pop	{r4, pc}
 80017ba:	bf00      	nop
 80017bc:	20000010 	.word	0x20000010
 80017c0:	20001534 	.word	0x20001534

080017c4 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 80017c4:	f002 b952 	b.w	8003a6c <HAL_Delay>

080017c8 <LCD_IO_Init>:
{
 80017c8:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80017ca:	4c06      	ldr	r4, [pc, #24]	@ (80017e4 <LCD_IO_Init+0x1c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	4620      	mov	r0, r4
 80017d0:	2104      	movs	r1, #4
 80017d2:	f002 fba7 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80017d6:	4620      	mov	r0, r4
 80017d8:	2201      	movs	r2, #1
}
 80017da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80017de:	2104      	movs	r1, #4
 80017e0:	f002 bba0 	b.w	8003f24 <HAL_GPIO_WritePin>
 80017e4:	40020800 	.word	0x40020800

080017e8 <LCD_IO_WriteData>:
{
 80017e8:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80017ea:	4d0b      	ldr	r5, [pc, #44]	@ (8001818 <LCD_IO_WriteData+0x30>)
{
 80017ec:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	480a      	ldr	r0, [pc, #40]	@ (800181c <LCD_IO_WriteData+0x34>)
 80017f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f6:	f002 fb95 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2104      	movs	r1, #4
 80017fe:	4628      	mov	r0, r5
 8001800:	f002 fb90 	bl	8003f24 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff fd29 	bl	800125c <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800180a:	4628      	mov	r0, r5
 800180c:	2201      	movs	r2, #1
}
 800180e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001812:	2104      	movs	r1, #4
 8001814:	f002 bb86 	b.w	8003f24 <HAL_GPIO_WritePin>
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00

08001820 <LCD_IO_WriteReg>:
{
 8001820:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001822:	4d0b      	ldr	r5, [pc, #44]	@ (8001850 <LCD_IO_WriteReg+0x30>)
{
 8001824:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	480a      	ldr	r0, [pc, #40]	@ (8001854 <LCD_IO_WriteReg+0x34>)
 800182a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800182e:	f002 fb79 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	2104      	movs	r1, #4
 8001836:	4628      	mov	r0, r5
 8001838:	f002 fb74 	bl	8003f24 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff fd0d 	bl	800125c <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001842:	4628      	mov	r0, r5
 8001844:	2201      	movs	r2, #1
}
 8001846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800184a:	2104      	movs	r1, #4
 800184c:	f002 bb6a 	b.w	8003f24 <HAL_GPIO_WritePin>
 8001850:	40020800 	.word	0x40020800
 8001854:	40020c00 	.word	0x40020c00

08001858 <LCD_IO_ReadData>:
{
 8001858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800185a:	4e14      	ldr	r6, [pc, #80]	@ (80018ac <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800185c:	4f14      	ldr	r7, [pc, #80]	@ (80018b0 <LCD_IO_ReadData+0x58>)
{
 800185e:	4605      	mov	r5, r0
 8001860:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001862:	4630      	mov	r0, r6
 8001864:	2200      	movs	r2, #0
 8001866:	2104      	movs	r1, #4
 8001868:	f002 fb5c 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001872:	4638      	mov	r0, r7
 8001874:	f002 fb56 	bl	8003f24 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001878:	4628      	mov	r0, r5
 800187a:	f7ff fcef 	bl	800125c <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <LCD_IO_ReadData+0x5c>)
 8001880:	480d      	ldr	r0, [pc, #52]	@ (80018b8 <LCD_IO_ReadData+0x60>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4622      	mov	r2, r4
 8001886:	a901      	add	r1, sp, #4
 8001888:	f004 f831 	bl	80058ee <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800188c:	4638      	mov	r0, r7
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 8001894:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001896:	f002 fb45 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800189a:	4630      	mov	r0, r6
 800189c:	2201      	movs	r2, #1
 800189e:	2104      	movs	r1, #4
 80018a0:	f002 fb40 	bl	8003f24 <HAL_GPIO_WritePin>
}
 80018a4:	4620      	mov	r0, r4
 80018a6:	b003      	add	sp, #12
 80018a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	2000000c 	.word	0x2000000c
 80018b8:	20001434 	.word	0x20001434

080018bc <LCD_Delay>:
  HAL_Delay(Delay);
 80018bc:	f002 b8d6 	b.w	8003a6c <HAL_Delay>

080018c0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018c0:	6802      	ldr	r2, [r0, #0]
 80018c2:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d101      	bne.n	80018cc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80018c8:	f002 b8be 	b.w	8003a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40001000 	.word	0x40001000

080018d4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <HAL_MspInit+0x3c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	9200      	str	r2, [sp, #0]
 80018e0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018e2:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80018e6:	6459      	str	r1, [r3, #68]	@ 0x44
 80018e8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018ea:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80018ee:	9100      	str	r1, [sp, #0]
 80018f0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	9201      	str	r2, [sp, #4]
 80018f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80018f6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80018fa:	6419      	str	r1, [r3, #64]	@ 0x40
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001906:	210f      	movs	r1, #15
 8001908:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800190e:	f002 b8d3 	b.w	8003ab8 <HAL_NVIC_SetPriority>
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001918:	6802      	ldr	r2, [r0, #0]
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_CRC_MspInit+0x28>)
 800191c:	429a      	cmp	r2, r3
{
 800191e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001920:	d10b      	bne.n	800193a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <HAL_CRC_MspInit+0x2c>)
 8001928:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800192a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800192e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800193a:	b002      	add	sp, #8
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023000 	.word	0x40023000
 8001944:	40023800 	.word	0x40023800

08001948 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001948:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <HAL_DMA2D_MspInit+0x40>)
 800194c:	6802      	ldr	r2, [r0, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d116      	bne.n	8001980 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001952:	2200      	movs	r2, #0
 8001954:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 8001958:	9201      	str	r2, [sp, #4]
 800195a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800195c:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001960:	6319      	str	r1, [r3, #48]	@ 0x30
 8001962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001964:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001968:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800196a:	2105      	movs	r1, #5
 800196c:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800196e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001970:	f002 f8a2 	bl	8003ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001974:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001976:	b003      	add	sp, #12
 8001978:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800197c:	f002 b8ce 	b.w	8003b1c <HAL_NVIC_EnableIRQ>
}
 8001980:	b003      	add	sp, #12
 8001982:	f85d fb04 	ldr.w	pc, [sp], #4
 8001986:	bf00      	nop
 8001988:	4002b000 	.word	0x4002b000

0800198c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800198c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001990:	4604      	mov	r4, r0
 8001992:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	2214      	movs	r2, #20
 8001996:	2100      	movs	r1, #0
 8001998:	a803      	add	r0, sp, #12
 800199a:	f00e fc5c 	bl	8010256 <memset>
  if(hi2c->Instance==I2C3)
 800199e:	6822      	ldr	r2, [r4, #0]
 80019a0:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_I2C_MspInit+0xa8>)
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d143      	bne.n	8001a2e <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4c24      	ldr	r4, [pc, #144]	@ (8001a38 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a8:	4824      	ldr	r0, [pc, #144]	@ (8001a3c <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	2500      	movs	r5, #0
 80019ac:	9500      	str	r5, [sp, #0]
 80019ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80019b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	9501      	str	r5, [sp, #4]
 80019c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80019ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d4:	f04f 0912 	mov.w	r9, #18
 80019d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	f04f 0801 	mov.w	r8, #1
 80019e0:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019e2:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e6:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019ee:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f0:	f002 f9ae 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019fa:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fe:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f002 f9a3 	bl	8003d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a0a:	9502      	str	r5, [sp, #8]
 8001a0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a12:	6423      	str	r3, [r4, #64]	@ 0x40
 8001a14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 8001a1e:	6a23      	ldr	r3, [r4, #32]
 8001a20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a24:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 8001a26:	6a23      	ldr	r3, [r4, #32]
 8001a28:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a2c:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a2e:	b009      	add	sp, #36	@ 0x24
 8001a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a34:	40005c00 	.word	0x40005c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020000 	.word	0x40020000

08001a44 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a46:	b099      	sub	sp, #100	@ 0x64
 8001a48:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	2214      	movs	r2, #20
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	a807      	add	r0, sp, #28
 8001a50:	f00e fc01 	bl	8010256 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a54:	2230      	movs	r2, #48	@ 0x30
 8001a56:	eb0d 0002 	add.w	r0, sp, r2
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	f00e fbfb 	bl	8010256 <memset>
  if(hltdc->Instance==LTDC)
 8001a60:	6822      	ldr	r2, [r4, #0]
 8001a62:	4b5e      	ldr	r3, [pc, #376]	@ (8001bdc <HAL_LTDC_MspInit+0x198>)
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f040 80b7 	bne.w	8001bd8 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001a6e:	23c0      	movs	r3, #192	@ 0xc0
 8001a70:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001a72:	2304      	movs	r3, #4
 8001a74:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a76:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a7c:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a7e:	f003 fb0b 	bl	8005098 <HAL_RCCEx_PeriphCLKConfig>
 8001a82:	b108      	cbz	r0, 8001a88 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8001a84:	f7ff ff26 	bl	80018d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a88:	4b55      	ldr	r3, [pc, #340]	@ (8001be0 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a8a:	4856      	ldr	r0, [pc, #344]	@ (8001be4 <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a8c:	2400      	movs	r4, #0
 8001a8e:	9400      	str	r4, [sp, #0]
 8001a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a92:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a96:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a9a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001a9e:	9200      	str	r2, [sp, #0]
 8001aa0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aa2:	9401      	str	r4, [sp, #4]
 8001aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aa6:	f042 0220 	orr.w	r2, r2, #32
 8001aaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aae:	f002 0220 	and.w	r2, r2, #32
 8001ab2:	9201      	str	r2, [sp, #4]
 8001ab4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	9402      	str	r4, [sp, #8]
 8001ab8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ac0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ac2:	f002 0201 	and.w	r2, r2, #1
 8001ac6:	9202      	str	r2, [sp, #8]
 8001ac8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	9403      	str	r4, [sp, #12]
 8001acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ace:	f042 0202 	orr.w	r2, r2, #2
 8001ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ad6:	f002 0202 	and.w	r2, r2, #2
 8001ada:	9203      	str	r2, [sp, #12]
 8001adc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ade:	9404      	str	r4, [sp, #16]
 8001ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ae6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001aea:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001aee:	9204      	str	r2, [sp, #16]
 8001af0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	9405      	str	r4, [sp, #20]
 8001af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001af6:	f042 0204 	orr.w	r2, r2, #4
 8001afa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001afe:	f002 0204 	and.w	r2, r2, #4
 8001b02:	9205      	str	r2, [sp, #20]
 8001b04:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b06:	9406      	str	r4, [sp, #24]
 8001b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b0a:	f042 0208 	orr.w	r2, r2, #8
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b1a:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b1e:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b24:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b2e:	f002 f90f 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001b32:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	482c      	ldr	r0, [pc, #176]	@ (8001be8 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b38:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b40:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b42:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f002 f903 	bl	8003d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b4a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	4827      	ldr	r0, [pc, #156]	@ (8001bec <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b4e:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b56:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f002 f8f9 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001b5e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	4822      	ldr	r0, [pc, #136]	@ (8001bec <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b64:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6c:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	f002 f8ee 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001b74:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b78:	481d      	ldr	r0, [pc, #116]	@ (8001bf0 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b7a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b7c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b82:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b86:	f002 f8e3 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8a:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	4819      	ldr	r0, [pc, #100]	@ (8001bf4 <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b8e:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b90:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b96:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9a:	f002 f8d9 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b9e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba0:	4815      	ldr	r0, [pc, #84]	@ (8001bf8 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ba2:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001baa:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bae:	f002 f8cf 	bl	8003d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001bb2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb6:	480e      	ldr	r0, [pc, #56]	@ (8001bf0 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bb8:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bba:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc0:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc4:	f002 f8c4 	bl	8003d50 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001bc8:	2058      	movs	r0, #88	@ 0x58
 8001bca:	4622      	mov	r2, r4
 8001bcc:	2105      	movs	r1, #5
 8001bce:	f001 ff73 	bl	8003ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001bd2:	2058      	movs	r0, #88	@ 0x58
 8001bd4:	f001 ffa2 	bl	8003b1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001bd8:	b019      	add	sp, #100	@ 0x64
 8001bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bdc:	40016800 	.word	0x40016800
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40021800 	.word	0x40021800
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020c00 	.word	0x40020c00

08001bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	4604      	mov	r4, r0
 8001c00:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	2214      	movs	r2, #20
 8001c04:	2100      	movs	r1, #0
 8001c06:	a803      	add	r0, sp, #12
 8001c08:	f00e fb25 	bl	8010256 <memset>
  if(hspi->Instance==SPI5)
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_SPI_MspInit+0x64>)
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d123      	bne.n	8001c5c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c14:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 8001c18:	2100      	movs	r1, #0
 8001c1a:	9101      	str	r1, [sp, #4]
 8001c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c1e:	4811      	ldr	r0, [pc, #68]	@ (8001c64 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c20:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c28:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001c2c:	9201      	str	r2, [sp, #4]
 8001c2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c30:	9102      	str	r1, [sp, #8]
 8001c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c34:	f042 0220 	orr.w	r2, r2, #32
 8001c38:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	9302      	str	r3, [sp, #8]
 8001c42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001c48:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c4a:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c50:	2305      	movs	r3, #5
 8001c52:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c56:	a903      	add	r1, sp, #12
 8001c58:	f002 f87a 	bl	8003d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001c5c:	b008      	add	sp, #32
 8001c5e:	bd10      	pop	{r4, pc}
 8001c60:	40015000 	.word	0x40015000
 8001c64:	40021400 	.word	0x40021400

08001c68 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c6c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001c72:	4b2b      	ldr	r3, [pc, #172]	@ (8001d20 <HAL_SDRAM_MspInit+0xb8>)
 8001c74:	681c      	ldr	r4, [r3, #0]
 8001c76:	2c00      	cmp	r4, #0
 8001c78:	d14f      	bne.n	8001d1a <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8001c7a:	f04f 0801 	mov.w	r8, #1
 8001c7e:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c82:	4b28      	ldr	r3, [pc, #160]	@ (8001d24 <HAL_SDRAM_MspInit+0xbc>)
 8001c84:	9400      	str	r4, [sp, #0]
 8001c86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c88:	4827      	ldr	r0, [pc, #156]	@ (8001d28 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c8a:	ea42 0208 	orr.w	r2, r2, r8
 8001c8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c92:	ea03 0308 	and.w	r3, r3, r8
 8001c96:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c9a:	2603      	movs	r6, #3
 8001c9c:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c9e:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ca0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001ca6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001caa:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cae:	f002 f84f 	bl	8003d50 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb2:	481e      	ldr	r0, [pc, #120]	@ (8001d2c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cb4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	f002 f846 	bl	8003d50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001cc4:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cc8:	4819      	ldr	r0, [pc, #100]	@ (8001d30 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cca:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ccc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cd6:	f002 f83b 	bl	8003d50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001cda:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cde:	4815      	ldr	r0, [pc, #84]	@ (8001d34 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ce0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ce2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cec:	f002 f830 	bl	8003d50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001cf0:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf4:	4810      	ldr	r0, [pc, #64]	@ (8001d38 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cf6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfe:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d02:	f002 f825 	bl	8003d50 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d06:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d0a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f002 f81b 	bl	8003d50 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001d1a:	b006      	add	sp, #24
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d20:	200015d0 	.word	0x200015d0
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40020400 	.word	0x40020400

08001d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d40:	b530      	push	{r4, r5, lr}
 8001d42:	4601      	mov	r1, r0
 8001d44:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2036      	movs	r0, #54	@ 0x36
 8001d4a:	f001 feb5 	bl	8003ab8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d4e:	2036      	movs	r0, #54	@ 0x36
 8001d50:	f001 fee4 	bl	8003b1c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d54:	2500      	movs	r5, #0
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <HAL_InitTick+0x6c>)
 8001d58:	9502      	str	r5, [sp, #8]
 8001d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d5c:	4c14      	ldr	r4, [pc, #80]	@ (8001db0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d5e:	f042 0210 	orr.w	r2, r2, #16
 8001d62:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d6c:	a901      	add	r1, sp, #4
 8001d6e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d70:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d72:	f003 f973 	bl	800505c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d76:	f003 f961 	bl	800503c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <HAL_InitTick+0x74>)
 8001d7c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d7e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001d82:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d84:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d86:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <HAL_InitTick+0x78>)
 8001d88:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d8c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d8e:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d90:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001d92:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d96:	f003 ff8f 	bl	8005cb8 <HAL_TIM_Base_Init>
 8001d9a:	b920      	cbnz	r0, 8001da6 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f003 fe45 	bl	8005a2c <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001da2:	b009      	add	sp, #36	@ 0x24
 8001da4:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001da6:	2001      	movs	r0, #1
 8001da8:	e7fb      	b.n	8001da2 <HAL_InitTick+0x62>
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	200015d4 	.word	0x200015d4
 8001db4:	40001000 	.word	0x40001000
 8001db8:	000f4240 	.word	0x000f4240

08001dbc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dbc:	4770      	bx	lr

08001dbe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <HardFault_Handler>

08001dc0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <MemManage_Handler>

08001dc2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <BusFault_Handler>

08001dc4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <UsageFault_Handler>

08001dc6 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001dc6:	4770      	bx	lr

08001dc8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dc8:	4801      	ldr	r0, [pc, #4]	@ (8001dd0 <TIM6_DAC_IRQHandler+0x8>)
 8001dca:	f003 be6d 	b.w	8005aa8 <HAL_TIM_IRQHandler>
 8001dce:	bf00      	nop
 8001dd0:	200015d4 	.word	0x200015d4

08001dd4 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001dd4:	4801      	ldr	r0, [pc, #4]	@ (8001ddc <LTDC_IRQHandler+0x8>)
 8001dd6:	f002 be13 	b.w	8004a00 <HAL_LTDC_IRQHandler>
 8001dda:	bf00      	nop
 8001ddc:	2000148c 	.word	0x2000148c

08001de0 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001de0:	4801      	ldr	r0, [pc, #4]	@ (8001de8 <DMA2D_IRQHandler+0x8>)
 8001de2:	f001 bee7 	b.w	8003bb4 <HAL_DMA2D_IRQHandler>
 8001de6:	bf00      	nop
 8001de8:	20001588 	.word	0x20001588

08001dec <EXTI0_IRQHandler>:
  /* USER CODE END DMA2D_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001dec:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint32_t count = osMessageQueueGetCount(Queue1Handle);
 8001dee:	4c0b      	ldr	r4, [pc, #44]	@ (8001e1c <EXTI0_IRQHandler+0x30>)
 8001df0:	6820      	ldr	r0, [r4, #0]
 8001df2:	f004 f9fc 	bl	80061ee <osMessageQueueGetCount>
	if (count < 2)
 8001df6:	2801      	cmp	r0, #1
 8001df8:	d809      	bhi.n	8001e0e <EXTI0_IRQHandler+0x22>
	{
		uint8_t x = 'A';
 8001dfa:	2341      	movs	r3, #65	@ 0x41
 8001dfc:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(Queue1Handle, &x, 0, 200);
 8001e00:	6820      	ldr	r0, [r4, #0]
 8001e02:	23c8      	movs	r3, #200	@ 0xc8
 8001e04:	2200      	movs	r2, #0
 8001e06:	f10d 0107 	add.w	r1, sp, #7
 8001e0a:	f004 f98f 	bl	800612c <osMessageQueuePut>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e0e:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e10:	b002      	add	sp, #8
 8001e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e16:	f002 b895 	b.w	8003f44 <HAL_GPIO_EXTI_IRQHandler>
 8001e1a:	bf00      	nop
 8001e1c:	200013f4 	.word	0x200013f4

08001e20 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001e20:	2001      	movs	r0, #1
 8001e22:	4770      	bx	lr

08001e24 <_kill>:

int _kill(int pid, int sig)
{
 8001e24:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e26:	f00e fab9 	bl	801039c <__errno>
 8001e2a:	2316      	movs	r3, #22
 8001e2c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e32:	bd08      	pop	{r3, pc}

08001e34 <_exit>:

void _exit (int status)
{
 8001e34:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e36:	f00e fab1 	bl	801039c <__errno>
 8001e3a:	2316      	movs	r3, #22
 8001e3c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001e3e:	e7fe      	b.n	8001e3e <_exit+0xa>

08001e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	460d      	mov	r5, r1
 8001e44:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	460e      	mov	r6, r1
 8001e48:	1b73      	subs	r3, r6, r5
 8001e4a:	429c      	cmp	r4, r3
 8001e4c:	dc01      	bgt.n	8001e52 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001e4e:	4620      	mov	r0, r4
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001e52:	f3af 8000 	nop.w
 8001e56:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	e7f5      	b.n	8001e48 <_read+0x8>

08001e5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	460d      	mov	r5, r1
 8001e60:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	460e      	mov	r6, r1
 8001e64:	1b73      	subs	r3, r6, r5
 8001e66:	429c      	cmp	r4, r3
 8001e68:	dc01      	bgt.n	8001e6e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001e6e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001e72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	e7f5      	b.n	8001e64 <_write+0x8>

08001e78 <_close>:

int _close(int file)
{
	return -1;
}
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	4770      	bx	lr

08001e7e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001e7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e82:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001e84:	2000      	movs	r0, #0
 8001e86:	4770      	bx	lr

08001e88 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001e88:	2001      	movs	r0, #1
 8001e8a:	4770      	bx	lr

08001e8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	4770      	bx	lr

08001e90 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e90:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <_sbrk+0x2c>)
 8001e92:	6811      	ldr	r1, [r2, #0]
{
 8001e94:	b508      	push	{r3, lr}
 8001e96:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001e98:	b909      	cbnz	r1, 8001e9e <_sbrk+0xe>
		heap_end = &end;
 8001e9a:	4909      	ldr	r1, [pc, #36]	@ (8001ec0 <_sbrk+0x30>)
 8001e9c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001e9e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001ea0:	4669      	mov	r1, sp
 8001ea2:	4403      	add	r3, r0
 8001ea4:	428b      	cmp	r3, r1
 8001ea6:	d906      	bls.n	8001eb6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001ea8:	f00e fa78 	bl	801039c <__errno>
 8001eac:	230c      	movs	r3, #12
 8001eae:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001eb4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001eb6:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001eb8:	e7fc      	b.n	8001eb4 <_sbrk+0x24>
 8001eba:	bf00      	nop
 8001ebc:	2000161c 	.word	0x2000161c
 8001ec0:	200127a8 	.word	0x200127a8

08001ec4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001ec4:	4770      	bx	lr

08001ec6 <_ZN23ApplicationFontProviderD0Ev>:
 8001ec6:	b510      	push	{r4, lr}
 8001ec8:	2104      	movs	r1, #4
 8001eca:	4604      	mov	r4, r0
 8001ecc:	f00d ff8e 	bl	800fdec <_ZdlPvj>
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	bd10      	pop	{r4, pc}

08001ed4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8001ed4:	2901      	cmp	r1, #1
{
 8001ed6:	b508      	push	{r3, lr}
    switch (typography)
 8001ed8:	d006      	beq.n	8001ee8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8001eda:	2902      	cmp	r1, #2
 8001edc:	d008      	beq.n	8001ef0 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8001ede:	b959      	cbnz	r1, 8001ef8 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8001ee0:	f001 f924 	bl	800312c <_ZN17TypedTextDatabase8getFontsEv>
 8001ee4:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8001ee6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8001ee8:	f001 f920 	bl	800312c <_ZN17TypedTextDatabase8getFontsEv>
 8001eec:	6840      	ldr	r0, [r0, #4]
 8001eee:	e7fa      	b.n	8001ee6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8001ef0:	f001 f91c 	bl	800312c <_ZN17TypedTextDatabase8getFontsEv>
 8001ef4:	6880      	ldr	r0, [r0, #8]
 8001ef6:	e7f6      	b.n	8001ee6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8001ef8:	2000      	movs	r0, #0
 8001efa:	e7f4      	b.n	8001ee6 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08001efc <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8001efc:	4800      	ldr	r0, [pc, #0]	@ (8001f00 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8001efe:	4770      	bx	lr
 8001f00:	08011544 	.word	0x08011544

08001f04 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8001f04:	2009      	movs	r0, #9
 8001f06:	4770      	bx	lr

08001f08 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8001f08:	b513      	push	{r0, r1, r4, lr}
 8001f0a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8001f0c:	b151      	cbz	r1, 8001f24 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001f0e:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8001f10:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8001f12:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001f16:	aa01      	add	r2, sp, #4
 8001f18:	689c      	ldr	r4, [r3, #8]
 8001f1a:	f10d 0303 	add.w	r3, sp, #3
 8001f1e:	47a0      	blx	r4
        return glyph;
    }
 8001f20:	b002      	add	sp, #8
 8001f22:	bd10      	pop	{r4, pc}
            return 0;
 8001f24:	4608      	mov	r0, r1
 8001f26:	e7fb      	b.n	8001f20 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08001f28 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8001f28:	89c0      	ldrh	r0, [r0, #14]
 8001f2a:	4770      	bx	lr

08001f2c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8001f2c:	8a00      	ldrh	r0, [r0, #16]
 8001f2e:	4770      	bx	lr

08001f30 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8001f30:	88c0      	ldrh	r0, [r0, #6]
 8001f32:	4770      	bx	lr

08001f34 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8001f34:	8880      	ldrh	r0, [r0, #4]
 8001f36:	4770      	bx	lr

08001f38 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8001f38:	7a80      	ldrb	r0, [r0, #10]
    }
 8001f3a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001f3e:	4770      	bx	lr

08001f40 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8001f40:	7a80      	ldrb	r0, [r0, #10]
    }
 8001f42:	09c0      	lsrs	r0, r0, #7
 8001f44:	4770      	bx	lr

08001f46 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8001f46:	2000      	movs	r0, #0
 8001f48:	4770      	bx	lr
	...

08001f4c <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8001f4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8001f54 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	00000000 	.word	0x00000000

08001f58 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8001f58:	2000      	movs	r0, #0
 8001f5a:	4770      	bx	lr

08001f5c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8001f5c:	8081      	strh	r1, [r0, #4]
    }
 8001f5e:	4770      	bx	lr

08001f60 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8001f60:	80c1      	strh	r1, [r0, #6]
    }
 8001f62:	4770      	bx	lr

08001f64 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8001f64:	8101      	strh	r1, [r0, #8]
    }
 8001f66:	4770      	bx	lr

08001f68 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8001f68:	8141      	strh	r1, [r0, #10]
    }
 8001f6a:	4770      	bx	lr

08001f6c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8001f6c:	4770      	bx	lr

08001f6e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8001f6e:	4770      	bx	lr

08001f70 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8001f70:	4770      	bx	lr

08001f72 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8001f72:	4770      	bx	lr

08001f74 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8001f74:	4770      	bx	lr

08001f76 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8001f76:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8001f78:	88c4      	ldrh	r4, [r0, #6]
 8001f7a:	6803      	ldr	r3, [r0, #0]
 8001f7c:	1b12      	subs	r2, r2, r4
 8001f7e:	8884      	ldrh	r4, [r0, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f82:	1b09      	subs	r1, r1, r4
 8001f84:	b212      	sxth	r2, r2
    }
 8001f86:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8001f8a:	b209      	sxth	r1, r1
 8001f8c:	4718      	bx	r3

08001f8e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8001f8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f92:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
 8001f98:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8001f9a:	6813      	ldr	r3, [r2, #0]
 8001f9c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8001f9e:	6010      	str	r0, [r2, #0]
    }
 8001fa0:	4770      	bx	lr

08001fa2 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8001fa2:	4770      	bx	lr

08001fa4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8001fa4:	4770      	bx	lr

08001fa6 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8001fa6:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8001faa:	6808      	ldr	r0, [r1, #0]
 8001fac:	6849      	ldr	r1, [r1, #4]
 8001fae:	c303      	stmia	r3!, {r0, r1}
    }
 8001fb0:	4770      	bx	lr

08001fb2 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8001fb2:	4770      	bx	lr

08001fb4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8001fb4:	4770      	bx	lr

08001fb6 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8001fb6:	6041      	str	r1, [r0, #4]
    }
 8001fb8:	4770      	bx	lr

08001fba <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 8001fba:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001fbc:	2200      	movs	r2, #0
        {
            return Rect(0, 0, rect.width, rect.height);
 8001fbe:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8001fc2:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8001fc6:	8002      	strh	r2, [r0, #0]
 8001fc8:	8042      	strh	r2, [r0, #2]
 8001fca:	8084      	strh	r4, [r0, #4]
 8001fcc:	80c1      	strh	r1, [r0, #6]
        }
 8001fce:	bd10      	pop	{r4, pc}

08001fd0 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 8001fd0:	4770      	bx	lr

08001fd2 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8001fd2:	4770      	bx	lr

08001fd4 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8001fd6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8001fe0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8001fe4:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8001fe8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	0800228d 	.word	0x0800228d

08001ff4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	7203      	strb	r3, [r0, #8]
    }
 8001ff8:	4770      	bx	lr

08001ffa <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 8001ffa:	4770      	bx	lr

08001ffc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 8001ffc:	4770      	bx	lr

08001ffe <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 8001ffe:	4770      	bx	lr

08002000 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8002000:	4770      	bx	lr

08002002 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8002002:	4770      	bx	lr

08002004 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
        }
    }

    virtual void tearDown()
 8002004:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 8002006:	6840      	ldr	r0, [r0, #4]
 8002008:	6803      	ldr	r3, [r0, #0]
 800200a:	3110      	adds	r1, #16
 800200c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800200e:	4718      	bx	r3

08002010 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 8002010:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 8002012:	6840      	ldr	r0, [r0, #4]
 8002014:	6803      	ldr	r3, [r0, #0]
 8002016:	3110      	adds	r1, #16
 8002018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201a:	4718      	bx	r3

0800201c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 800201c:	4770      	bx	lr

0800201e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 800201e:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 8002020:	6840      	ldr	r0, [r0, #4]
 8002022:	6803      	ldr	r3, [r0, #0]
 8002024:	3110      	adds	r1, #16
 8002026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002028:	4718      	bx	r3

0800202a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 800202a:	b570      	push	{r4, r5, r6, lr}
 800202c:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 800202e:	6840      	ldr	r0, [r0, #4]
 8002030:	6803      	ldr	r3, [r0, #0]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	4798      	blx	r3
 8002036:	4604      	mov	r4, r0
        while (d)
 8002038:	b93c      	cbnz	r4, 800204a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x20>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 800203a:	6868      	ldr	r0, [r5, #4]
 800203c:	6803      	ldr	r3, [r0, #0]
 800203e:	f105 0110 	add.w	r1, r5, #16
 8002042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    }
 8002044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 8002048:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 800204a:	88a1      	ldrh	r1, [r4, #4]
 800204c:	89ab      	ldrh	r3, [r5, #12]
 800204e:	1ac9      	subs	r1, r1, r3
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	4620      	mov	r0, r4
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	b209      	sxth	r1, r1
 8002058:	4798      	blx	r3
        return nextSibling;
 800205a:	69a4      	ldr	r4, [r4, #24]
 800205c:	e7ec      	b.n	8002038 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

0800205e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Cover transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 800205e:	4770      	bx	lr

08002060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002060:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002062:	68c2      	ldr	r2, [r0, #12]
 8002064:	6841      	ldr	r1, [r0, #4]
 8002066:	1054      	asrs	r4, r2, #1
    virtual void execute()
 8002068:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 800206a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800206e:	07d2      	lsls	r2, r2, #31
 8002070:	bf48      	it	mi
 8002072:	590a      	ldrmi	r2, [r1, r4]
 8002074:	689b      	ldr	r3, [r3, #8]
    }
 8002076:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800207a:	bf48      	it	mi
 800207c:	58d3      	ldrmi	r3, [r2, r3]
 800207e:	4718      	bx	r3

08002080 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8002080:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8002082:	6840      	ldr	r0, [r0, #4]
 8002084:	b130      	cbz	r0, 8002094 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	b91a      	cbnz	r2, 8002092 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 800208a:	68d8      	ldr	r0, [r3, #12]
 800208c:	f000 0001 	and.w	r0, r0, #1
 8002090:	4770      	bx	lr
 8002092:	2001      	movs	r0, #1
    }
 8002094:	4770      	bx	lr

08002096 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002096:	b510      	push	{r4, lr}
 8002098:	210c      	movs	r1, #12
 800209a:	4604      	mov	r4, r0
 800209c:	f00d fea6 	bl	800fdec <_ZdlPvj>
 80020a0:	4620      	mov	r0, r4
 80020a2:	bd10      	pop	{r4, pc}

080020a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80020a4:	b510      	push	{r4, lr}
 80020a6:	2110      	movs	r1, #16
 80020a8:	4604      	mov	r4, r0
 80020aa:	f00d fe9f 	bl	800fdec <_ZdlPvj>
 80020ae:	4620      	mov	r0, r4
 80020b0:	bd10      	pop	{r4, pc}

080020b2 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80020b2:	b510      	push	{r4, lr}
 80020b4:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80020b8:	4604      	mov	r4, r0
 80020ba:	f00d fe97 	bl	800fdec <_ZdlPvj>
 80020be:	4620      	mov	r0, r4
 80020c0:	bd10      	pop	{r4, pc}

080020c2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 80020c2:	b510      	push	{r4, lr}
 80020c4:	2138      	movs	r1, #56	@ 0x38
 80020c6:	4604      	mov	r4, r0
 80020c8:	f00d fe90 	bl	800fdec <_ZdlPvj>
 80020cc:	4620      	mov	r0, r4
 80020ce:	bd10      	pop	{r4, pc}

080020d0 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 80020d0:	b510      	push	{r4, lr}
 80020d2:	2128      	movs	r1, #40	@ 0x28
 80020d4:	4604      	mov	r4, r0
 80020d6:	f00d fe89 	bl	800fdec <_ZdlPvj>
 80020da:	4620      	mov	r0, r4
 80020dc:	bd10      	pop	{r4, pc}

080020de <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
class CoverTransition : public Transition
 80020de:	b510      	push	{r4, lr}
 80020e0:	2138      	movs	r1, #56	@ 0x38
 80020e2:	4604      	mov	r4, r0
 80020e4:	f00d fe82 	bl	800fdec <_ZdlPvj>
 80020e8:	4620      	mov	r0, r4
 80020ea:	bd10      	pop	{r4, pc}

080020ec <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80020ec:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80020ee:	f008 fb29 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
 80020f2:	6803      	ldr	r3, [r0, #0]
    }
 80020f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80020f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020fa:	4718      	bx	r3

080020fc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80020fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020fe:	4605      	mov	r5, r0
        animationCounter++;
 8002100:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 8002102:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 8002104:	3001      	adds	r0, #1
 8002106:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8002108:	4298      	cmp	r0, r3
        animationCounter++;
 800210a:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 800210c:	d905      	bls.n	800211a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800210e:	2301      	movs	r3, #1
 8002110:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	72ab      	strb	r3, [r5, #10]
    }
 8002116:	b003      	add	sp, #12
 8002118:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800211a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
        const int16_t oldValue = calculatedValue;
 800211e:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8002122:	2100      	movs	r1, #0
 8002124:	f00a f806 	bl	800c134 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8002128:	07c3      	lsls	r3, r0, #31
 800212a:	d506      	bpl.n	800213a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3e>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800212c:	2800      	cmp	r0, #0
 800212e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002132:	bfc8      	it	gt
 8002134:	2301      	movgt	r3, #1
 8002136:	4418      	add	r0, r3
 8002138:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800213a:	7aab      	ldrb	r3, [r5, #10]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800213c:	81e8      	strh	r0, [r5, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 800213e:	1b04      	subs	r4, r0, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8002140:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 8002142:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8002144:	d106      	bne.n	8002154 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
 8002146:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa8>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b11b      	cbz	r3, 8002154 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x58>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800214c:	f008 fafa 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
 8002150:	f008 fafe 	bl	800a750 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8002154:	4a14      	ldr	r2, [pc, #80]	@ (80021a8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xac>)
        : x(0), y(0), width(0), height(0)
 8002156:	2300      	movs	r3, #0
 8002158:	8812      	ldrh	r2, [r2, #0]
 800215a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800215e:	89eb      	ldrh	r3, [r5, #14]
 8002160:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 8002162:	425b      	negs	r3, r3
 8002164:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 8002168:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 800216a:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 8002174:	f008 fae6 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
 8002178:	6803      	ldr	r3, [r0, #0]
 800217a:	aa02      	add	r2, sp, #8
 800217c:	e912 0006 	ldmdb	r2, {r1, r2}
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 8002184:	6868      	ldr	r0, [r5, #4]
 8002186:	6803      	ldr	r3, [r0, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4798      	blx	r3
 800218c:	4605      	mov	r5, r0
        while (d)
 800218e:	2d00      	cmp	r5, #0
 8002190:	d0c1      	beq.n	8002116 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 8002192:	88a9      	ldrh	r1, [r5, #4]
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	4421      	add	r1, r4
 8002198:	4628      	mov	r0, r5
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	b209      	sxth	r1, r1
 800219e:	4798      	blx	r3
 80021a0:	69ad      	ldr	r5, [r5, #24]
 80021a2:	e7f4      	b.n	800218e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x92>
 80021a4:	20012432 	.word	0x20012432
 80021a8:	20012428 	.word	0x20012428
 80021ac:	2001242a 	.word	0x2001242a

080021b0 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80021b0:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80021b4:	b112      	cbz	r2, 80021bc <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80021b6:	6803      	ldr	r3, [r0, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4718      	bx	r3
    }
 80021bc:	4770      	bx	lr
	...

080021c0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80021c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021c2:	4604      	mov	r4, r0
        animationCounter++;
 80021c4:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 80021c6:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 80021c8:	3001      	adds	r0, #1
 80021ca:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80021cc:	4298      	cmp	r0, r3
        animationCounter++;
 80021ce:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 80021d0:	d905      	bls.n	80021de <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80021d2:	2301      	movs	r3, #1
 80021d4:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	72a3      	strb	r3, [r4, #10]
    }
 80021da:	b003      	add	sp, #12
 80021dc:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80021de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021e2:	2100      	movs	r1, #0
 80021e4:	f009 ffa6 	bl	800c134 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80021e8:	07c3      	lsls	r3, r0, #31
 80021ea:	d506      	bpl.n	80021fa <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3a>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80021ec:	2800      	cmp	r0, #0
 80021ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021f2:	bfc8      	it	gt
 80021f4:	2301      	movgt	r3, #1
 80021f6:	4418      	add	r0, r3
 80021f8:	b200      	sxth	r0, r0
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80021fa:	4b14      	ldr	r3, [pc, #80]	@ (800224c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8c>)
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80021fc:	81e0      	strh	r0, [r4, #14]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80021fe:	8819      	ldrh	r1, [r3, #0]
                const uint16_t prevSolidWidth = solid.getWidth();
 8002200:	8b25      	ldrh	r5, [r4, #24]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002202:	b283      	uxth	r3, r0
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 8002204:	4812      	ldr	r0, [pc, #72]	@ (8002250 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
 8002206:	f9b0 0000 	ldrsh.w	r0, [r0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800220a:	f8ad 0006 	strh.w	r0, [sp, #6]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800220e:	1aca      	subs	r2, r1, r3
                screenContainer->invalidateRect(r);
 8002210:	6860      	ldr	r0, [r4, #4]
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 8002212:	442b      	add	r3, r5
 8002214:	1a5b      	subs	r3, r3, r1
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002216:	b212      	sxth	r2, r2
 8002218:	f8ad 3004 	strh.w	r3, [sp, #4]
                screenContainer->invalidateRect(r);
 800221c:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 800221e:	8322      	strh	r2, [r4, #24]
 8002220:	f8ad 2000 	strh.w	r2, [sp]
 8002224:	2200      	movs	r2, #0
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f8ad 2002 	strh.w	r2, [sp, #2]
 800222c:	4669      	mov	r1, sp
 800222e:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8002230:	7aa3      	ldrb	r3, [r4, #10]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d1d1      	bne.n	80021da <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 8002236:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0cd      	beq.n	80021da <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 800223e:	f008 fa81 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002242:	b003      	add	sp, #12
 8002244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8002248:	f008 ba82 	b.w	800a750 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 800224c:	20012428 	.word	0x20012428
 8002250:	2001242a 	.word	0x2001242a
 8002254:	20012432 	.word	0x20012432

08002258 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002258:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800225c:	b11a      	cbz	r2, 8002266 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800225e:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002262:	b102      	cbz	r2, 8002266 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002264:	6018      	str	r0, [r3, #0]
        }
    }
 8002266:	4770      	bx	lr

08002268 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002268:	b510      	push	{r4, lr}
 800226a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800226c:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8002270:	b158      	cbz	r0, 800228a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002272:	6803      	ldr	r3, [r0, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4798      	blx	r3
 8002278:	b138      	cbz	r0, 800228a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800227a:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 800227e:	6803      	ldr	r3, [r0, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 800228a:	bd10      	pop	{r4, pc}

0800228c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800228c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002290:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002294:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002296:	68b0      	ldr	r0, [r6, #8]
 8002298:	6803      	ldr	r3, [r0, #0]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4798      	blx	r3
 800229e:	28b3      	cmp	r0, #179	@ 0xb3
 80022a0:	d805      	bhi.n	80022ae <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 80022a2:	4b44      	ldr	r3, [pc, #272]	@ (80023b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>)
 80022a4:	4a44      	ldr	r2, [pc, #272]	@ (80023b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 80022a6:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80022a8:	4844      	ldr	r0, [pc, #272]	@ (80023bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80022aa:	f00d fdcd 	bl	800fe48 <__assert_func>
 80022ae:	6870      	ldr	r0, [r6, #4]
 80022b0:	6803      	ldr	r3, [r0, #0]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4798      	blx	r3
 80022b6:	280f      	cmp	r0, #15
 80022b8:	d803      	bhi.n	80022c2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 80022ba:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80022bc:	4a3e      	ldr	r2, [pc, #248]	@ (80023b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 80022be:	21a4      	movs	r1, #164	@ 0xa4
 80022c0:	e7f2      	b.n	80022a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80022c2:	68f0      	ldr	r0, [r6, #12]
 80022c4:	6803      	ldr	r3, [r0, #0]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4798      	blx	r3
 80022ca:	280b      	cmp	r0, #11
 80022cc:	d803      	bhi.n	80022d6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 80022ce:	4b3d      	ldr	r3, [pc, #244]	@ (80023c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80022d0:	4a39      	ldr	r2, [pc, #228]	@ (80023b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 80022d2:	21a5      	movs	r1, #165	@ 0xa5
 80022d4:	e7e8      	b.n	80022a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    Application::getInstance()->clearAllTimerWidgets();
 80022d6:	f008 fa35 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80022da:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 80023cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80022de:	3004      	adds	r0, #4
 80022e0:	f008 fa7d 	bl	800a7de <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80022e4:	f8d9 0000 	ldr.w	r0, [r9]
 80022e8:	b110      	cbz	r0, 80022f0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 80022ea:	6803      	ldr	r3, [r0, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4798      	blx	r3
    if (*currentTrans)
 80022f0:	f8d9 0000 	ldr.w	r0, [r9]
 80022f4:	b110      	cbz	r0, 80022fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 80022f6:	6803      	ldr	r3, [r0, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4798      	blx	r3
    if (*currentScreen)
 80022fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 80023d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 8002300:	f8d8 0000 	ldr.w	r0, [r8]
 8002304:	b110      	cbz	r0, 800230c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8002306:	6803      	ldr	r3, [r0, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	4798      	blx	r3
    if (*currentPresenter)
 800230c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002310:	b110      	cbz	r0, 8002318 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8002312:	6803      	ldr	r3, [r0, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4798      	blx	r3
    if (*currentScreen)
 8002318:	f8d8 0000 	ldr.w	r0, [r8]
 800231c:	b110      	cbz	r0, 8002324 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 800231e:	6803      	ldr	r3, [r0, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4798      	blx	r3
    if (*currentPresenter)
 8002324:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002328:	b110      	cbz	r0, 8002330 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 800232a:	6803      	ldr	r3, [r0, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002330:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002332:	6803      	ldr	r3, [r0, #0]
 8002334:	2100      	movs	r1, #0
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	4798      	blx	r3
        : screenContainer(0), done(false)
 800233a:	f04f 0b00 	mov.w	fp, #0
 800233e:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002340:	f8c0 b004 	str.w	fp, [r0, #4]
 8002344:	4604      	mov	r4, r0
 8002346:	f880 b008 	strb.w	fp, [r0, #8]
 800234a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800234c:	68b0      	ldr	r0, [r6, #8]
 800234e:	6803      	ldr	r3, [r0, #0]
 8002350:	4659      	mov	r1, fp
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	4798      	blx	r3
 8002356:	4605      	mov	r5, r0
 8002358:	f000 ff5c 	bl	8003214 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800235c:	6870      	ldr	r0, [r6, #4]
 800235e:	6803      	ldr	r3, [r0, #0]
 8002360:	4659      	mov	r1, fp
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	4798      	blx	r3
 8002366:	4629      	mov	r1, r5
 8002368:	4606      	mov	r6, r0
 800236a:	f000 ff2d 	bl	80031c8 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 800236e:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002370:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002374:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002378:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800237a:	f8c6 a008 	str.w	sl, [r6, #8]
 800237e:	4628      	mov	r0, r5
 8002380:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002382:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002386:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800238a:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 800238c:	4798      	blx	r3
    newPresenter->activate();
 800238e:	6833      	ldr	r3, [r6, #0]
 8002390:	4630      	mov	r0, r6
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002396:	4621      	mov	r1, r4
 8002398:	4628      	mov	r0, r5
 800239a:	f009 fec5 	bl	800c128 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800239e:	6823      	ldr	r3, [r4, #0]
 80023a0:	4620      	mov	r0, r4
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	4798      	blx	r3
    newTransition->invalidate();
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	4620      	mov	r0, r4
}
 80023ac:	b001      	add	sp, #4
 80023ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b2:	4718      	bx	r3
 80023b4:	080115f8 	.word	0x080115f8
 80023b8:	08011686 	.word	0x08011686
 80023bc:	08011758 	.word	0x08011758
 80023c0:	0801179f 	.word	0x0801179f
 80023c4:	08011842 	.word	0x08011842
 80023c8:	08011b8c 	.word	0x08011b8c
 80023cc:	20012474 	.word	0x20012474
 80023d0:	20012470 	.word	0x20012470

080023d4 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80023d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023d8:	461d      	mov	r5, r3
        setX(x);
 80023da:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80023dc:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80023e2:	4604      	mov	r4, r0
 80023e4:	4616      	mov	r6, r2
        setX(x);
 80023e6:	4798      	blx	r3
        setY(y);
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	4631      	mov	r1, r6
 80023ec:	4620      	mov	r0, r4
 80023ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f0:	4798      	blx	r3
        setWidth(width);
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	4629      	mov	r1, r5
 80023f6:	4620      	mov	r0, r4
 80023f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fa:	4798      	blx	r3
        setHeight(height);
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	4639      	mov	r1, r7
 8002400:	4620      	mov	r0, r4
 8002402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8002404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8002408:	4718      	bx	r3
	...

0800240c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl()
{
 800240c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002410:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002414:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002416:	f8db 0008 	ldr.w	r0, [fp, #8]
 800241a:	6803      	ldr	r3, [r0, #0]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4798      	blx	r3
 8002420:	28b3      	cmp	r0, #179	@ 0xb3
 8002422:	d805      	bhi.n	8002430 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x24>
 8002424:	4b54      	ldr	r3, [pc, #336]	@ (8002578 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x16c>)
 8002426:	4a55      	ldr	r2, [pc, #340]	@ (800257c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002428:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800242a:	4855      	ldr	r0, [pc, #340]	@ (8002580 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 800242c:	f00d fd0c 	bl	800fe48 <__assert_func>
 8002430:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002434:	6803      	ldr	r3, [r0, #0]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4798      	blx	r3
 800243a:	280f      	cmp	r0, #15
 800243c:	d803      	bhi.n	8002446 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3a>
 800243e:	4b51      	ldr	r3, [pc, #324]	@ (8002584 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x178>)
 8002440:	4a4e      	ldr	r2, [pc, #312]	@ (800257c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002442:	21a4      	movs	r1, #164	@ 0xa4
 8002444:	e7f1      	b.n	800242a <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002446:	f8db 000c 	ldr.w	r0, [fp, #12]
 800244a:	6803      	ldr	r3, [r0, #0]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4798      	blx	r3
 8002450:	2837      	cmp	r0, #55	@ 0x37
 8002452:	d803      	bhi.n	800245c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x50>
 8002454:	4b4c      	ldr	r3, [pc, #304]	@ (8002588 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x17c>)
 8002456:	4a49      	ldr	r2, [pc, #292]	@ (800257c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002458:	21a5      	movs	r1, #165	@ 0xa5
 800245a:	e7e6      	b.n	800242a <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 800245c:	f008 f972 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002460:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 800259c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x190>
 8002464:	3004      	adds	r0, #4
 8002466:	f008 f9ba 	bl	800a7de <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800246a:	f8d9 0000 	ldr.w	r0, [r9]
 800246e:	b110      	cbz	r0, 8002476 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6a>
        (*currentTrans)->tearDown();
 8002470:	6803      	ldr	r3, [r0, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4798      	blx	r3
    if (*currentTrans)
 8002476:	f8d9 0000 	ldr.w	r0, [r9]
 800247a:	b110      	cbz	r0, 8002482 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x76>
        (*currentTrans)->~Transition();
 800247c:	6803      	ldr	r3, [r0, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4798      	blx	r3
    if (*currentScreen)
 8002482:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 80025a0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x194>
 8002486:	f8d8 0000 	ldr.w	r0, [r8]
 800248a:	b110      	cbz	r0, 8002492 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x86>
        (*currentScreen)->tearDownScreen();
 800248c:	6803      	ldr	r3, [r0, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	4798      	blx	r3
    if (*currentPresenter)
 8002492:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002496:	b110      	cbz	r0, 800249e <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x92>
        (*currentPresenter)->deactivate();
 8002498:	6803      	ldr	r3, [r0, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4798      	blx	r3
    if (*currentScreen)
 800249e:	f8d8 0000 	ldr.w	r0, [r8]
 80024a2:	b110      	cbz	r0, 80024aa <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x9e>
        (*currentScreen)->~Screen();
 80024a4:	6803      	ldr	r3, [r0, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4798      	blx	r3
    if (*currentPresenter)
 80024aa:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80024ae:	b110      	cbz	r0, 80024b6 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xaa>
        (*currentPresenter)->~Presenter();
 80024b0:	6803      	ldr	r3, [r0, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80024b6:	f8db 000c 	ldr.w	r0, [fp, #12]
 80024ba:	6803      	ldr	r3, [r0, #0]
 80024bc:	2100      	movs	r1, #0
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	4798      	blx	r3
          solid()
 80024c2:	4b32      	ldr	r3, [pc, #200]	@ (800258c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x180>)
 80024c4:	6003      	str	r3, [r0, #0]
 80024c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024ca:	8103      	strh	r3, [r0, #8]
 80024cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d0:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 80024d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002590 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x184>)
 80024d4:	6103      	str	r3, [r0, #16]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80024d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002594 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x188>)
            targetValue = HAL::DISPLAY_WIDTH;
 80024d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002598 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x18c>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80024da:	f9b2 2000 	ldrsh.w	r2, [r2]
            targetValue = HAL::DISPLAY_WIDTH;
 80024de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e2:	8183      	strh	r3, [r0, #12]
        : screenContainer(0), done(false)
 80024e4:	2500      	movs	r5, #0
 80024e6:	4604      	mov	r4, r0
 80024e8:	6045      	str	r5, [r0, #4]
          animationCounter(0),
 80024ea:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 80024ec:	81c5      	strh	r5, [r0, #14]
          solid()
 80024ee:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80024f2:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80024f6:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 80024fa:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80024fe:	4629      	mov	r1, r5
 8002500:	9200      	str	r2, [sp, #0]
 8002502:	3010      	adds	r0, #16
 8002504:	462a      	mov	r2, r5
 8002506:	f7ff ff65 	bl	80023d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800250a:	f8db 0008 	ldr.w	r0, [fp, #8]
 800250e:	6803      	ldr	r3, [r0, #0]
 8002510:	4629      	mov	r1, r5
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	4798      	blx	r3
 8002516:	4606      	mov	r6, r0
 8002518:	f000 fe7c 	bl	8003214 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800251c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002520:	6803      	ldr	r3, [r0, #0]
 8002522:	4629      	mov	r1, r5
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	4798      	blx	r3
 8002528:	4631      	mov	r1, r6
 800252a:	4605      	mov	r5, r0
 800252c:	f000 fe4c 	bl	80031c8 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8002530:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 8002532:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 8002536:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 800253a:	6833      	ldr	r3, [r6, #0]
 800253c:	f8c5 a008 	str.w	sl, [r5, #8]
 8002540:	4630      	mov	r0, r6
 8002542:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002544:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002548:	f8c8 6000 	str.w	r6, [r8]
 800254c:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 800254e:	4798      	blx	r3
    newPresenter->activate();
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	4628      	mov	r0, r5
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002558:	4621      	mov	r1, r4
 800255a:	4630      	mov	r0, r6
 800255c:	f009 fde4 	bl	800c128 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	4620      	mov	r0, r4
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	4798      	blx	r3
    newTransition->invalidate();
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	4620      	mov	r0, r4
}
 800256e:	b003      	add	sp, #12
 8002570:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002574:	4718      	bx	r3
 8002576:	bf00      	nop
 8002578:	080115f8 	.word	0x080115f8
 800257c:	080118e5 	.word	0x080118e5
 8002580:	08011758 	.word	0x08011758
 8002584:	0801179f 	.word	0x0801179f
 8002588:	08011842 	.word	0x08011842
 800258c:	08011bd4 	.word	0x08011bd4
 8002590:	08011ab8 	.word	0x08011ab8
 8002594:	2001242a 	.word	0x2001242a
 8002598:	20012428 	.word	0x20012428
 800259c:	20012474 	.word	0x20012474
 80025a0:	20012470 	.word	0x20012470

080025a4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 80025a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80025a8:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 80025ac:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80025ae:	f8db 0008 	ldr.w	r0, [fp, #8]
 80025b2:	6803      	ldr	r3, [r0, #0]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4798      	blx	r3
 80025b8:	f5b0 7f09 	cmp.w	r0, #548	@ 0x224
 80025bc:	d205      	bcs.n	80025ca <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x26>
 80025be:	4b55      	ldr	r3, [pc, #340]	@ (8002714 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>)
 80025c0:	4a55      	ldr	r2, [pc, #340]	@ (8002718 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 80025c2:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80025c4:	4855      	ldr	r0, [pc, #340]	@ (800271c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 80025c6:	f00d fc3f 	bl	800fe48 <__assert_func>
 80025ca:	f8db 0004 	ldr.w	r0, [fp, #4]
 80025ce:	6803      	ldr	r3, [r0, #0]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4798      	blx	r3
 80025d4:	280f      	cmp	r0, #15
 80025d6:	d803      	bhi.n	80025e0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3c>
 80025d8:	4b51      	ldr	r3, [pc, #324]	@ (8002720 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 80025da:	4a4f      	ldr	r2, [pc, #316]	@ (8002718 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 80025dc:	21a4      	movs	r1, #164	@ 0xa4
 80025de:	e7f1      	b.n	80025c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80025e0:	f8db 000c 	ldr.w	r0, [fp, #12]
 80025e4:	6803      	ldr	r3, [r0, #0]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4798      	blx	r3
 80025ea:	2837      	cmp	r0, #55	@ 0x37
 80025ec:	d803      	bhi.n	80025f6 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x52>
 80025ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002724 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 80025f0:	4a49      	ldr	r2, [pc, #292]	@ (8002718 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 80025f2:	21a5      	movs	r1, #165	@ 0xa5
 80025f4:	e7e6      	b.n	80025c4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 80025f6:	f008 f8a5 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80025fa:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8002738 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>
 80025fe:	3004      	adds	r0, #4
 8002600:	f008 f8ed 	bl	800a7de <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002604:	f8d9 0000 	ldr.w	r0, [r9]
 8002608:	b110      	cbz	r0, 8002610 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 800260a:	6803      	ldr	r3, [r0, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	4798      	blx	r3
    if (*currentTrans)
 8002610:	f8d9 0000 	ldr.w	r0, [r9]
 8002614:	b110      	cbz	r0, 800261c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 8002616:	6803      	ldr	r3, [r0, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4798      	blx	r3
    if (*currentScreen)
 800261c:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800273c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
 8002620:	f8d8 0000 	ldr.w	r0, [r8]
 8002624:	b110      	cbz	r0, 800262c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 8002626:	6803      	ldr	r3, [r0, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4798      	blx	r3
    if (*currentPresenter)
 800262c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002630:	b110      	cbz	r0, 8002638 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 8002632:	6803      	ldr	r3, [r0, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4798      	blx	r3
    if (*currentScreen)
 8002638:	f8d8 0000 	ldr.w	r0, [r8]
 800263c:	b110      	cbz	r0, 8002644 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 800263e:	6803      	ldr	r3, [r0, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4798      	blx	r3
    if (*currentPresenter)
 8002644:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002648:	b110      	cbz	r0, 8002650 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 800264a:	6803      	ldr	r3, [r0, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002650:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002654:	6803      	ldr	r3, [r0, #0]
 8002656:	2100      	movs	r1, #0
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	4798      	blx	r3
          solid()
 800265c:	4b32      	ldr	r3, [pc, #200]	@ (8002728 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 800265e:	6003      	str	r3, [r0, #0]
 8002660:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002664:	8103      	strh	r3, [r0, #8]
 8002666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800266a:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 800266c:	4b2f      	ldr	r3, [pc, #188]	@ (800272c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 800266e:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 8002670:	4b2f      	ldr	r3, [pc, #188]	@ (8002730 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	425a      	negs	r2, r3
 8002676:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002678:	4a2e      	ldr	r2, [pc, #184]	@ (8002734 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
        : screenContainer(0), done(false)
 800267a:	2500      	movs	r5, #0
 800267c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002680:	6045      	str	r5, [r0, #4]
 8002682:	4604      	mov	r4, r0
          animationCounter(0),
 8002684:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002686:	81c5      	strh	r5, [r0, #14]
          solid()
 8002688:	e9c0 5505 	strd	r5, r5, [r0, #20]
 800268c:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002690:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002694:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002698:	4629      	mov	r1, r5
 800269a:	9200      	str	r2, [sp, #0]
 800269c:	b21b      	sxth	r3, r3
 800269e:	462a      	mov	r2, r5
 80026a0:	3010      	adds	r0, #16
 80026a2:	f7ff fe97 	bl	80023d4 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80026a6:	f8db 0008 	ldr.w	r0, [fp, #8]
 80026aa:	6803      	ldr	r3, [r0, #0]
 80026ac:	4629      	mov	r1, r5
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	4798      	blx	r3
 80026b2:	4606      	mov	r6, r0
 80026b4:	f000 fdf8 	bl	80032a8 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80026b8:	f8db 0004 	ldr.w	r0, [fp, #4]
 80026bc:	6803      	ldr	r3, [r0, #0]
 80026be:	4629      	mov	r1, r5
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	4798      	blx	r3
 80026c4:	4631      	mov	r1, r6
 80026c6:	4605      	mov	r5, r0
 80026c8:	f000 fdc2 	bl	8003250 <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 80026cc:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 80026ce:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 80026d2:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 80026d6:	6833      	ldr	r3, [r6, #0]
 80026d8:	f8c5 a008 	str.w	sl, [r5, #8]
 80026dc:	4630      	mov	r0, r6
 80026de:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 80026e0:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80026e4:	f8c8 6000 	str.w	r6, [r8]
 80026e8:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 80026ea:	4798      	blx	r3
    newPresenter->activate();
 80026ec:	682b      	ldr	r3, [r5, #0]
 80026ee:	4628      	mov	r0, r5
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80026f4:	4621      	mov	r1, r4
 80026f6:	4630      	mov	r0, r6
 80026f8:	f009 fd16 	bl	800c128 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	4620      	mov	r0, r4
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	4798      	blx	r3
    newTransition->invalidate();
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	4620      	mov	r0, r4
}
 800270a:	b003      	add	sp, #12
 800270c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002710:	4718      	bx	r3
 8002712:	bf00      	nop
 8002714:	080115f8 	.word	0x080115f8
 8002718:	080119c9 	.word	0x080119c9
 800271c:	08011758 	.word	0x08011758
 8002720:	0801179f 	.word	0x0801179f
 8002724:	08011842 	.word	0x08011842
 8002728:	08011bb0 	.word	0x08011bb0
 800272c:	08011ab8 	.word	0x08011ab8
 8002730:	20012428 	.word	0x20012428
 8002734:	2001242a 	.word	0x2001242a
 8002738:	20012474 	.word	0x20012474
 800273c:	20012470 	.word	0x20012470

08002740 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	4604      	mov	r4, r0
 8002744:	460d      	mov	r5, r1
 8002746:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8002748:	f008 f8e6 	bl	800a918 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 800274c:	4a0f      	ldr	r2, [pc, #60]	@ (800278c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x4c>)
        : currentPresenter(0),
 800274e:	2300      	movs	r3, #0
      model(m)
 8002750:	e9c4 6555 	strd	r6, r5, [r4, #340]	@ 0x154
        return instance;
 8002754:	4d0e      	ldr	r5, [pc, #56]	@ (8002790 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        instance = this;
 8002756:	6014      	str	r4, [r2, #0]
        : pobject(0), pmemfun(0)
 8002758:	e9c4 3353 	strd	r3, r3, [r4, #332]	@ 0x14c
 800275c:	4a0d      	ldr	r2, [pc, #52]	@ (8002794 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800275e:	6022      	str	r2, [r4, #0]
 8002760:	6828      	ldr	r0, [r5, #0]
 8002762:	4a0d      	ldr	r2, [pc, #52]	@ (8002798 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
          pendingScreenTransitionCallback(0)
 8002764:	e9c4 334f 	strd	r3, r3, [r4, #316]	@ 0x13c
 8002768:	e9c4 2351 	strd	r2, r3, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800276c:	6803      	ldr	r3, [r0, #0]
 800276e:	2101      	movs	r1, #1
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800277a:	b10a      	cbz	r2, 8002780 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>
 800277c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800277e:	b900      	cbnz	r0, 8002782 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x42>
        return instance->lcdRef;
 8002780:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 8002782:	f00c fde7 	bl	800f354 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 8002786:	4620      	mov	r0, r4
 8002788:	bd70      	pop	{r4, r5, r6, pc}
 800278a:	bf00      	nop
 800278c:	20012480 	.word	0x20012480
 8002790:	20012434 	.word	0x20012434
 8002794:	08011b38 	.word	0x08011b38
 8002798:	08011b20 	.word	0x08011b20

0800279c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800279e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80027a8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80027ac:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80027b0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	0800228d 	.word	0x0800228d

080027bc <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 80027be:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80027c8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80027cc:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80027d0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	0800240d 	.word	0x0800240d

080027dc <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 80027de:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80027e8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80027ec:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80027f0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	080025a5 	.word	0x080025a5

080027fc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80027fc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80027fe:	4770      	bx	lr

08002800 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002800:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002802:	4770      	bx	lr

08002804 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002804:	4770      	bx	lr

08002806 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002806:	888b      	ldrh	r3, [r1, #4]
 8002808:	69c0      	ldr	r0, [r0, #28]
 800280a:	680a      	ldr	r2, [r1, #0]
 800280c:	0adb      	lsrs	r3, r3, #11
 800280e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002812:	4410      	add	r0, r2
 8002814:	4770      	bx	lr

08002816 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002816:	b510      	push	{r4, lr}
 8002818:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 800281a:	b1ba      	cbz	r2, 800284c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800281c:	7b10      	ldrb	r0, [r2, #12]
 800281e:	b168      	cbz	r0, 800283c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002820:	7b53      	ldrb	r3, [r2, #13]
 8002822:	7ad2      	ldrb	r2, [r2, #11]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800282a:	431a      	orrs	r2, r3
 800282c:	6a23      	ldr	r3, [r4, #32]
 800282e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	428a      	cmp	r2, r1
 8002836:	d102      	bne.n	800283e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002838:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 800283c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800283e:	d805      	bhi.n	800284c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002840:	3801      	subs	r0, #1
 8002842:	b280      	uxth	r0, r0
 8002844:	3304      	adds	r3, #4
 8002846:	2800      	cmp	r0, #0
 8002848:	d1f3      	bne.n	8002832 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800284a:	e7f7      	b.n	800283c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800284c:	2000      	movs	r0, #0
 800284e:	e7f5      	b.n	800283c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002850 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002850:	b510      	push	{r4, lr}
 8002852:	212c      	movs	r1, #44	@ 0x2c
 8002854:	4604      	mov	r4, r0
 8002856:	f00d fac9 	bl	800fdec <_ZdlPvj>
 800285a:	4620      	mov	r0, r4
 800285c:	bd10      	pop	{r4, pc}
	...

08002860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002860:	b530      	push	{r4, r5, lr}
 8002862:	b08b      	sub	sp, #44	@ 0x2c
 8002864:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002866:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800286a:	9508      	str	r5, [sp, #32]
 800286c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8002870:	9507      	str	r5, [sp, #28]
 8002872:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8002876:	9506      	str	r5, [sp, #24]
 8002878:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 800287c:	9505      	str	r5, [sp, #20]
 800287e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8002882:	9504      	str	r5, [sp, #16]
 8002884:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8002888:	9503      	str	r5, [sp, #12]
 800288a:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 800288e:	9502      	str	r5, [sp, #8]
 8002890:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8002894:	9501      	str	r5, [sp, #4]
 8002896:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800289a:	9500      	str	r5, [sp, #0]
 800289c:	f009 f89e 	bl	800b9dc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80028a0:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 80028a2:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80028a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80028a6:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80028a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80028aa:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80028ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80028ae:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 80028b0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80028b2:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80028b4:	4620      	mov	r0, r4
 80028b6:	b00b      	add	sp, #44	@ 0x2c
 80028b8:	bd30      	pop	{r4, r5, pc}
 80028ba:	bf00      	nop
 80028bc:	08011bf8 	.word	0x08011bf8

080028c0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80028c0:	4770      	bx	lr

080028c2 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80028c2:	4770      	bx	lr

080028c4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80028c4:	4770      	bx	lr

080028c6 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80028c6:	4770      	bx	lr

080028c8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80028c8:	4770      	bx	lr

080028ca <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 80028ca:	4770      	bx	lr

080028cc <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 80028cc:	4770      	bx	lr

080028ce <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80028ce:	4770      	bx	lr

080028d0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80028d0:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80028d2:	68c2      	ldr	r2, [r0, #12]
 80028d4:	6844      	ldr	r4, [r0, #4]
 80028d6:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 80028d8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80028da:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80028de:	07d2      	lsls	r2, r2, #31
 80028e0:	bf48      	it	mi
 80028e2:	5962      	ldrmi	r2, [r4, r5]
 80028e4:	689b      	ldr	r3, [r3, #8]
    }
 80028e6:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80028e8:	bf48      	it	mi
 80028ea:	58d3      	ldrmi	r3, [r2, r3]
 80028ec:	4718      	bx	r3

080028ee <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80028ee:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80028f0:	6840      	ldr	r0, [r0, #4]
 80028f2:	b130      	cbz	r0, 8002902 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	b91a      	cbnz	r2, 8002900 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80028f8:	68d8      	ldr	r0, [r3, #12]
 80028fa:	f000 0001 	and.w	r0, r0, #1
 80028fe:	4770      	bx	lr
 8002900:	2001      	movs	r0, #1
    }
 8002902:	4770      	bx	lr

08002904 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002904:	b510      	push	{r4, lr}
 8002906:	2110      	movs	r1, #16
 8002908:	4604      	mov	r4, r0
 800290a:	f00d fa6f 	bl	800fdec <_ZdlPvj>
 800290e:	4620      	mov	r0, r4
 8002910:	bd10      	pop	{r4, pc}

08002912 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8002912:	b510      	push	{r4, lr}
}
 8002914:	21b0      	movs	r1, #176	@ 0xb0
Screen1ViewBase::~Screen1ViewBase()
 8002916:	4604      	mov	r4, r0
}
 8002918:	f00d fa68 	bl	800fdec <_ZdlPvj>
 800291c:	4620      	mov	r0, r4
 800291e:	bd10      	pop	{r4, pc}

08002920 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8002920:	306c      	adds	r0, #108	@ 0x6c
 8002922:	4288      	cmp	r0, r1
{
 8002924:	b508      	push	{r3, lr}
    if (&src == &button1)
 8002926:	d105      	bne.n	8002934 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002928:	f007 ff0c 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 800292c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 8002930:	f7ff bf54 	b.w	80027dc <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 8002934:	bd08      	pop	{r3, pc}

08002936 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8002936:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 8002938:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800293a:	4604      	mov	r4, r0
        setX(x);
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 800293e:	4615      	mov	r5, r2
        setX(x);
 8002940:	4798      	blx	r3
        setY(y);
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	4629      	mov	r1, r5
 8002946:	4620      	mov	r0, r4
 8002948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800294a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 800294e:	4718      	bx	r3

08002950 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8002950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002952:	4604      	mov	r4, r0
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002954:	4625      	mov	r5, r4
        : presenter(0)
 8002956:	f009 fa3b 	bl	800bdd0 <_ZN8touchgfx6ScreenC1Ev>
 800295a:	2200      	movs	r2, #0
 800295c:	4b33      	ldr	r3, [pc, #204]	@ (8002a2c <_ZN15Screen1ViewBaseC1Ev+0xdc>)
 800295e:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8002960:	f845 3b40 	str.w	r3, [r5], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002964:	4b32      	ldr	r3, [pc, #200]	@ (8002a30 <_ZN15Screen1ViewBaseC1Ev+0xe0>)
          cachedAbsX(0),
 8002966:	6622      	str	r2, [r4, #96]	@ 0x60
        : x(0), y(0), width(0), height(0)
 8002968:	e9c4 3210 	strd	r3, r2, [r4, #64]	@ 0x40
          touchable(false),
 800296c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002970:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 8002974:	23ff      	movs	r3, #255	@ 0xff
 8002976:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        touchable = touch;
 800297a:	f240 1301 	movw	r3, #257	@ 0x101
 800297e:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8002982:	4b2c      	ldr	r3, [pc, #176]	@ (8002a34 <_ZN15Screen1ViewBaseC1Ev+0xe4>)
 8002984:	66e3      	str	r3, [r4, #108]	@ 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002986:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800298a:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 800298e:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 8002992:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
        : pobject(pObject), pmemfun(pmemfun_1)
 8002996:	4b28      	ldr	r3, [pc, #160]	@ (8002a38 <_ZN15Screen1ViewBaseC1Ev+0xe8>)
        : color(col)
 8002998:	66a2      	str	r2, [r4, #104]	@ 0x68
 800299a:	e9c4 3428 	strd	r3, r4, [r4, #160]	@ 0xa0
 800299e:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <_ZN15Screen1ViewBaseC1Ev+0xec>)
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80029a0:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
        setXY(x, y);
 80029a4:	4611      	mov	r1, r2
 80029a6:	4628      	mov	r0, r5
        : x(0), y(0), width(0), height(0)
 80029a8:	e9c4 2212 	strd	r2, r2, [r4, #72]	@ 0x48
          parent(0),
 80029ac:	e9c4 2214 	strd	r2, r2, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 80029b0:	e9c4 2216 	strd	r2, r2, [r4, #88]	@ 0x58
 80029b4:	e9c4 221c 	strd	r2, r2, [r4, #112]	@ 0x70
 80029b8:	e9c4 221e 	strd	r2, r2, [r4, #120]	@ 0x78
          nextSibling(0),
 80029bc:	e9c4 2220 	strd	r2, r2, [r4, #128]	@ 0x80
          cachedAbsX(0),
 80029c0:	e9c4 2222 	strd	r2, r2, [r4, #136]	@ 0x88
 80029c4:	f884 2098 	strb.w	r2, [r4, #152]	@ 0x98
 80029c8:	e9c4 322a 	strd	r3, r2, [r4, #168]	@ 0xa8
        setXY(x, y);
 80029cc:	f7ff ffb3 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80029d0:	4628      	mov	r0, r5
 80029d2:	21f0      	movs	r1, #240	@ 0xf0
 80029d4:	f7ff fac6 	bl	8001f64 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 80029d8:	4628      	mov	r0, r5
 80029da:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80029de:	f7ff fac3 	bl	8001f68 <_ZN8touchgfx8Drawable9setHeightEs>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80029e2:	1d27      	adds	r7, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80029e4:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80029e8:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
 80029ec:	66a3      	str	r3, [r4, #104]	@ 0x68
 80029ee:	4629      	mov	r1, r5
 80029f0:	4638      	mov	r0, r7
 80029f2:	f005 fb5d 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 199);
 80029f6:	4630      	mov	r0, r6
 80029f8:	22c7      	movs	r2, #199	@ 0xc7
 80029fa:	2114      	movs	r1, #20
 80029fc:	f7ff ff9b 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 8002a00:	2303      	movs	r3, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 8002a02:	aa01      	add	r2, sp, #4
 8002a04:	4669      	mov	r1, sp
 8002a06:	4630      	mov	r0, r6
 8002a08:	f8ad 3000 	strh.w	r3, [sp]
 8002a0c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002a10:	f006 fd14 	bl	800943c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8002a14:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 8002a18:	4638      	mov	r0, r7
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8002a1a:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8002a1e:	4631      	mov	r1, r6
 8002a20:	f005 fb46 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002a24:	4620      	mov	r0, r4
 8002a26:	b003      	add	sp, #12
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	08011c78 	.word	0x08011c78
 8002a30:	080121ac 	.word	0x080121ac
 8002a34:	08012214 	.word	0x08012214
 8002a38:	08011c60 	.word	0x08011c60
 8002a3c:	08002921 	.word	0x08002921

08002a40 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002a40:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002a42:	4770      	bx	lr

08002a44 <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 8002a44:	4770      	bx	lr

08002a46 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8002a46:	4770      	bx	lr

08002a48 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8002a48:	4770      	bx	lr

08002a4a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002a4a:	4770      	bx	lr

08002a4c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 8002a4c:	4770      	bx	lr

08002a4e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002a4e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002a50:	68c2      	ldr	r2, [r0, #12]
 8002a52:	6844      	ldr	r4, [r0, #4]
 8002a54:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002a56:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002a58:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002a5c:	07d2      	lsls	r2, r2, #31
 8002a5e:	bf48      	it	mi
 8002a60:	5962      	ldrmi	r2, [r4, r5]
 8002a62:	689b      	ldr	r3, [r3, #8]
    }
 8002a64:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002a66:	bf48      	it	mi
 8002a68:	58d3      	ldrmi	r3, [r2, r3]
 8002a6a:	4718      	bx	r3

08002a6c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8002a6c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8002a6e:	6840      	ldr	r0, [r0, #4]
 8002a70:	b130      	cbz	r0, 8002a80 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	b91a      	cbnz	r2, 8002a7e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 8002a76:	68d8      	ldr	r0, [r3, #12]
 8002a78:	f000 0001 	and.w	r0, r0, #1
 8002a7c:	4770      	bx	lr
 8002a7e:	2001      	movs	r0, #1
    }
 8002a80:	4770      	bx	lr

08002a82 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002a82:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8002a86:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8002a8a:	4770      	bx	lr

08002a8c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8002a8c:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8002a8e:	3038      	adds	r0, #56	@ 0x38
 8002a90:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8002a94:	b113      	cbz	r3, 8002a9c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 8002a96:	3136      	adds	r1, #54	@ 0x36
 8002a98:	f006 bd9d 	b.w	80095d6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002a9c:	3134      	adds	r1, #52	@ 0x34
 8002a9e:	e7fb      	b.n	8002a98 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

08002aa0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 8002aa0:	b510      	push	{r4, lr}
 8002aa2:	2164      	movs	r1, #100	@ 0x64
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	f00d f9a1 	bl	800fdec <_ZdlPvj>
 8002aaa:	4620      	mov	r0, r4
 8002aac:	bd10      	pop	{r4, pc}

08002aae <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	f00d f99a 	bl	800fdec <_ZdlPvj>
 8002ab8:	4620      	mov	r0, r4
 8002aba:	bd10      	pop	{r4, pc}

08002abc <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8002abc:	b510      	push	{r4, lr}
}
 8002abe:	f44f 7105 	mov.w	r1, #532	@ 0x214
Screen2ViewBase::~Screen2ViewBase()
 8002ac2:	4604      	mov	r4, r0
}
 8002ac4:	f00d f992 	bl	800fdec <_ZdlPvj>
 8002ac8:	4620      	mov	r0, r4
 8002aca:	bd10      	pop	{r4, pc}

08002acc <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8002acc:	b510      	push	{r4, lr}
 8002ace:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8002ad0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002ad2:	b150      	cbz	r0, 8002aea <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8002ad4:	6803      	ldr	r3, [r0, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4798      	blx	r3
 8002ada:	b130      	cbz	r0, 8002aea <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8002adc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002ade:	6803      	ldr	r3, [r0, #0]
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	689b      	ldr	r3, [r3, #8]
        }
    }
 8002ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8002ae8:	4718      	bx	r3
    }
 8002aea:	bd10      	pop	{r4, pc}

08002aec <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8002aec:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002aee:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 8002af0:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8002af4:	4604      	mov	r4, r0
 8002af6:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002af8:	b90b      	cbnz	r3, 8002afe <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 8002afa:	b116      	cbz	r6, 8002b02 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8002afc:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002afe:	2e00      	cmp	r6, #0
 8002b00:	d0fc      	beq.n	8002afc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b14:	4798      	blx	r3
            invalidate();
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	4620      	mov	r0, r4
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8002b1e:	2e00      	cmp	r6, #0
 8002b20:	d0ec      	beq.n	8002afc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 8002b22:	792b      	ldrb	r3, [r5, #4]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d1e9      	bne.n	8002afc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8002b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8002b34:	4718      	bx	r3

08002b36 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8002b36:	f500 73ba 	add.w	r3, r0, #372	@ 0x174
 8002b3a:	428b      	cmp	r3, r1
{
 8002b3c:	b510      	push	{r4, lr}
 8002b3e:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 8002b40:	d109      	bne.n	8002b56 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002b42:	f007 fdff 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 8002b46:	f7ff fe39 	bl	80027bc <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 8002b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 8002b54:	4718      	bx	r3
}
 8002b56:	bd10      	pop	{r4, pc}

08002b58 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8002b58:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8002b5a:	6002      	str	r2, [r0, #0]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002b62:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8002b66:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8002b6a:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8002b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b72:	8482      	strh	r2, [r0, #36]	@ 0x24
    }
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	08012348 	.word	0x08012348

08002b7c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 8002b7c:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 8002b82:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 8002b84:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002b86:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 8002b8a:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002b8c:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002b8e:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002b90:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002b92:	f00a faad 	bl	800d0f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8002b96:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8002b9a:	4607      	mov	r7, r0
 8002b9c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8002ba0:	4640      	mov	r0, r8
 8002ba2:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8002ba6:	f00a fad7 	bl	800d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8002baa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bae:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8002bb2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002bb6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8002bba:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 8002bbe:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 8002bc2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002bc6:	b212      	sxth	r2, r2
 8002bc8:	b209      	sxth	r1, r1
 8002bca:	f7ff feb4 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8002bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8002bda:	4718      	bx	r3

08002bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8002bdc:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8002bde:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 8002be0:	4604      	mov	r4, r0
 8002be2:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8002be4:	2100      	movs	r1, #0
 8002be6:	f00d fb36 	bl	8010256 <memset>
class Widget : public Drawable
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7ff ffb4 	bl	8002b58 <_ZN8touchgfx8DrawableC1Ev>
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8002bf2:	6023      	str	r3, [r4, #0]
 8002bf4:	882b      	ldrh	r3, [r5, #0]
 8002bf6:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8002bf8:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 8002bfa:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 8002bfc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8002c00:	4629      	mov	r1, r5
 8002c02:	f006 fce8 	bl	80095d6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8002c06:	4620      	mov	r0, r4
 8002c08:	bd38      	pop	{r3, r4, r5, pc}
 8002c0a:	bf00      	nop
 8002c0c:	08012288 	.word	0x08012288

08002c10 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8002c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c14:	4604      	mov	r4, r0
 8002c16:	b089      	sub	sp, #36	@ 0x24
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 8002c18:	4627      	mov	r7, r4
 8002c1a:	2500      	movs	r5, #0
 8002c1c:	f009 f8d8 	bl	800bdd0 <_ZN8touchgfx6ScreenC1Ev>
 8002c20:	4b92      	ldr	r3, [pc, #584]	@ (8002e6c <_ZN15Screen2ViewBaseC1Ev+0x25c>)
 8002c22:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8002c24:	f847 3b40 	str.w	r3, [r7], #64
        : Widget(), alpha(255), color(0)
 8002c28:	2226      	movs	r2, #38	@ 0x26
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	4638      	mov	r0, r7
 8002c2e:	f00d fb12 	bl	8010256 <memset>
 8002c32:	4638      	mov	r0, r7
 8002c34:	f7ff ff90 	bl	8002b58 <_ZN8touchgfx8DrawableC1Ev>
 8002c38:	4b8d      	ldr	r3, [pc, #564]	@ (8002e70 <_ZN15Screen2ViewBaseC1Ev+0x260>)
 8002c3a:	6423      	str	r3, [r4, #64]	@ 0x40
 8002c3c:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8002c40:	23ff      	movs	r3, #255	@ 0xff
 8002c42:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8002c46:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8002c4a:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8002c4e:	a907      	add	r1, sp, #28
        : color(col)
 8002c50:	66a5      	str	r5, [r4, #104]	@ 0x68
 8002c52:	4658      	mov	r0, fp
 8002c54:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c58:	f7ff ffc0 	bl	8002bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002c5c:	a907      	add	r1, sp, #28
 8002c5e:	4650      	mov	r0, sl
 8002c60:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c64:	f7ff ffba 	bl	8002bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002c68:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 8002c6c:	a907      	add	r1, sp, #28
 8002c6e:	4618      	mov	r0, r3
 8002c70:	9302      	str	r3, [sp, #8]
 8002c72:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c76:	f7ff ffb1 	bl	8002bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002c7a:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8002c7e:	a907      	add	r1, sp, #28
 8002c80:	4618      	mov	r0, r3
 8002c82:	9303      	str	r3, [sp, #12]
 8002c84:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c88:	f7ff ffa8 	bl	8002bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002c8c:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8002c90:	a907      	add	r1, sp, #28
 8002c92:	4618      	mov	r0, r3
 8002c94:	9304      	str	r3, [sp, #16]
 8002c96:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002c9a:	f7ff ff9f 	bl	8002bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002c9e:	f504 73a4 	add.w	r3, r4, #328	@ 0x148
 8002ca2:	f504 78ba 	add.w	r8, r4, #372	@ 0x174
 8002ca6:	a907      	add	r1, sp, #28
 8002ca8:	4618      	mov	r0, r3
 8002caa:	9305      	str	r3, [sp, #20]
 8002cac:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002cb0:	f7ff ff94 	bl	8002bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
          firstChild(0)
 8002cb4:	4640      	mov	r0, r8
 8002cb6:	f7ff ff4f 	bl	8002b58 <_ZN8touchgfx8DrawableC1Ev>
        : pressed(false), alpha(255), action(0)
 8002cba:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8002cbe:	f8a4 31a0 	strh.w	r3, [r4, #416]	@ 0x1a0
        touchable = touch;
 8002cc2:	f04f 0301 	mov.w	r3, #1
 8002cc6:	f884 3198 	strb.w	r3, [r4, #408]	@ 0x198
        : T()
 8002cca:	4b6a      	ldr	r3, [pc, #424]	@ (8002e74 <_ZN15Screen2ViewBaseC1Ev+0x264>)
 8002ccc:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
 8002cd0:	f504 79d6 	add.w	r9, r4, #428	@ 0x1ac
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd8:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
 8002cdc:	a907      	add	r1, sp, #28
 8002cde:	f8c4 519c 	str.w	r5, [r4, #412]	@ 0x19c
 8002ce2:	f8c4 51a4 	str.w	r5, [r4, #420]	@ 0x1a4
 8002ce6:	4648      	mov	r0, r9
 8002ce8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002cec:	f7ff ff76 	bl	8002bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8002cf0:	4649      	mov	r1, r9
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	f504 79ec 	add.w	r9, r4, #472	@ 0x1d8
 8002cf8:	f005 f9da 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002cfc:	a907      	add	r1, sp, #28
 8002cfe:	4648      	mov	r0, r9
 8002d00:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002d04:	f7ff ff6a 	bl	8002bdc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 8002d08:	4b5b      	ldr	r3, [pc, #364]	@ (8002e78 <_ZN15Screen2ViewBaseC1Ev+0x268>)
 8002d0a:	e9c4 3481 	strd	r3, r4, [r4, #516]	@ 0x204
 8002d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e7c <_ZN15Screen2ViewBaseC1Ev+0x26c>)
 8002d10:	e9c4 3583 	strd	r3, r5, [r4, #524]	@ 0x20c
    __background.setPosition(0, 0, 240, 320);
 8002d14:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002d18:	462a      	mov	r2, r5
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	4638      	mov	r0, r7
 8002d20:	23f0      	movs	r3, #240	@ 0xf0
 8002d22:	1d26      	adds	r6, r4, #4
 8002d24:	f7ff fb56 	bl	80023d4 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8002d28:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8002d2c:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002d2e:	4639      	mov	r1, r7
 8002d30:	4630      	mov	r0, r6
 8002d32:	f005 f9bd 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track4.setXY(0, 0);
 8002d36:	462a      	mov	r2, r5
 8002d38:	4629      	mov	r1, r5
 8002d3a:	4658      	mov	r0, fp
 8002d3c:	f7ff fdfb 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 8002d40:	2308      	movs	r3, #8
    track4.setBitmap(touchgfx::Bitmap(BITMAP_TRACK4_ID));
 8002d42:	a907      	add	r1, sp, #28
 8002d44:	4658      	mov	r0, fp
 8002d46:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002d4a:	f006 fc44 	bl	80095d6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002d4e:	4659      	mov	r1, fp
 8002d50:	4630      	mov	r0, r6
        visible = vis;
 8002d52:	f884 5091 	strb.w	r5, [r4, #145]	@ 0x91
 8002d56:	f005 f9ab 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track3.setXY(0, 0);
 8002d5a:	462a      	mov	r2, r5
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	4650      	mov	r0, sl
 8002d60:	f7ff fde9 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 8002d64:	2307      	movs	r3, #7
    track3.setBitmap(touchgfx::Bitmap(BITMAP_TRACK3_ID));
 8002d66:	a907      	add	r1, sp, #28
 8002d68:	4650      	mov	r0, sl
 8002d6a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002d6e:	f006 fc32 	bl	80095d6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002d72:	4651      	mov	r1, sl
 8002d74:	4630      	mov	r0, r6
 8002d76:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 8002d7a:	f005 f999 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track2.setXY(0, 0);
 8002d7e:	462a      	mov	r2, r5
 8002d80:	9802      	ldr	r0, [sp, #8]
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7ff fdd7 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 8002d88:	2306      	movs	r3, #6
    track2.setBitmap(touchgfx::Bitmap(BITMAP_TRACK2_ID));
 8002d8a:	9802      	ldr	r0, [sp, #8]
 8002d8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002d90:	a907      	add	r1, sp, #28
 8002d92:	f006 fc20 	bl	80095d6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002d96:	9902      	ldr	r1, [sp, #8]
 8002d98:	f884 50e9 	strb.w	r5, [r4, #233]	@ 0xe9
 8002d9c:	4630      	mov	r0, r6
 8002d9e:	f005 f987 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 0);
 8002da2:	462a      	mov	r2, r5
 8002da4:	9803      	ldr	r0, [sp, #12]
 8002da6:	4629      	mov	r1, r5
 8002da8:	f7ff fdc5 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 8002dac:	2305      	movs	r3, #5
    track1.setBitmap(touchgfx::Bitmap(BITMAP_TRACK1_ID));
 8002dae:	9803      	ldr	r0, [sp, #12]
 8002db0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002db4:	a907      	add	r1, sp, #28
 8002db6:	f006 fc0e 	bl	80095d6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002dba:	9903      	ldr	r1, [sp, #12]
 8002dbc:	f884 5115 	strb.w	r5, [r4, #277]	@ 0x115
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	f005 f975 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 8002dc6:	462a      	mov	r2, r5
 8002dc8:	9804      	ldr	r0, [sp, #16]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	f7ff fdb3 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 8002dd0:	2304      	movs	r3, #4
    track0.setBitmap(touchgfx::Bitmap(BITMAP_TRACK0_ID));
 8002dd2:	9804      	ldr	r0, [sp, #16]
 8002dd4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002dd8:	a907      	add	r1, sp, #28
 8002dda:	f006 fbfc 	bl	80095d6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002dde:	9904      	ldr	r1, [sp, #16]
 8002de0:	f884 5141 	strb.w	r5, [r4, #321]	@ 0x141
 8002de4:	4630      	mov	r0, r6
 8002de6:	f005 f963 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(95, 160);
 8002dea:	22a0      	movs	r2, #160	@ 0xa0
 8002dec:	9805      	ldr	r0, [sp, #20]
 8002dee:	215f      	movs	r1, #95	@ 0x5f
 8002df0:	f7ff fda1 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 8002df4:	2302      	movs	r3, #2
    image1.setBitmap(touchgfx::Bitmap(BITMAP_REDCAR_ID));
 8002df6:	9805      	ldr	r0, [sp, #20]
 8002df8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002dfc:	a907      	add	r1, sp, #28
 8002dfe:	f006 fbea 	bl	80095d6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002e02:	9905      	ldr	r1, [sp, #20]
 8002e04:	4630      	mov	r0, r6
 8002e06:	f005 f953 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 8002e0a:	aa07      	add	r2, sp, #28
 8002e0c:	a906      	add	r1, sp, #24
 8002e0e:	4640      	mov	r0, r8
 8002e10:	f8ad 5018 	strh.w	r5, [sp, #24]
 8002e14:	f8ad 501c 	strh.w	r5, [sp, #28]
 8002e18:	f7ff feb0 	bl	8002b7c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 8002e1c:	f504 7301 	add.w	r3, r4, #516	@ 0x204
        action = &callback;
 8002e20:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
    flexButton1.setPosition(204, 282, 32, 32);
 8002e24:	2320      	movs	r3, #32
        rect.x = x;
 8002e26:	f8c4 51b0 	str.w	r5, [r4, #432]	@ 0x1b0
 8002e2a:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4640      	mov	r0, r8
 8002e32:	21cc      	movs	r1, #204	@ 0xcc
 8002e34:	f7ff face 	bl	80023d4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8002e38:	4641      	mov	r1, r8
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f005 f938 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lamb.setXY(63, 20);
 8002e40:	2214      	movs	r2, #20
 8002e42:	4648      	mov	r0, r9
 8002e44:	213f      	movs	r1, #63	@ 0x3f
 8002e46:	f7ff fd76 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 8002e4a:	f04f 0301 	mov.w	r3, #1
    lamb.setBitmap(touchgfx::Bitmap(BITMAP_LAMB_ID));
 8002e4e:	a907      	add	r1, sp, #28
 8002e50:	4648      	mov	r0, r9
 8002e52:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002e56:	f006 fbbe 	bl	80095d6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	f005 f927 	bl	80080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002e62:	4620      	mov	r0, r4
 8002e64:	b009      	add	sp, #36	@ 0x24
 8002e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08011d64 	.word	0x08011d64
 8002e70:	080121ac 	.word	0x080121ac
 8002e74:	08011cac 	.word	0x08011cac
 8002e78:	08011d4c 	.word	0x08011d4c
 8002e7c:	08002b37 	.word	0x08002b37

08002e80 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002e80:	4770      	bx	lr
	...

08002e84 <_Z23getFont_verdana_10_4bppv>:
{
 8002e84:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002e86:	4d16      	ldr	r5, [pc, #88]	@ (8002ee0 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8002e88:	682c      	ldr	r4, [r5, #0]
 8002e8a:	f3bf 8f5b 	dmb	ish
 8002e8e:	f014 0401 	ands.w	r4, r4, #1
{
 8002e92:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002e94:	d120      	bne.n	8002ed8 <_Z23getFont_verdana_10_4bppv+0x54>
 8002e96:	4628      	mov	r0, r5
 8002e98:	f00c ffaa 	bl	800fdf0 <__cxa_guard_acquire>
 8002e9c:	b1e0      	cbz	r0, 8002ed8 <_Z23getFont_verdana_10_4bppv+0x54>
 8002e9e:	233f      	movs	r3, #63	@ 0x3f
 8002ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ea2:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <_Z23getFont_verdana_10_4bppv+0x60>)
 8002ea4:	9308      	str	r3, [sp, #32]
 8002ea6:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <_Z23getFont_verdana_10_4bppv+0x64>)
 8002ea8:	4910      	ldr	r1, [pc, #64]	@ (8002eec <_Z23getFont_verdana_10_4bppv+0x68>)
 8002eaa:	4811      	ldr	r0, [pc, #68]	@ (8002ef0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002eac:	940a      	str	r4, [sp, #40]	@ 0x28
 8002eae:	2201      	movs	r2, #1
 8002eb0:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002eba:	230a      	movs	r3, #10
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8002ec2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002ec6:	9405      	str	r4, [sp, #20]
 8002ec8:	f7ff fcca 	bl	8002860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002ecc:	4809      	ldr	r0, [pc, #36]	@ (8002ef4 <_Z23getFont_verdana_10_4bppv+0x70>)
 8002ece:	f00c ffd9 	bl	800fe84 <atexit>
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f00c ff98 	bl	800fe08 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8002ed8:	4805      	ldr	r0, [pc, #20]	@ (8002ef0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002eda:	b00f      	add	sp, #60	@ 0x3c
 8002edc:	bd30      	pop	{r4, r5, pc}
 8002ede:	bf00      	nop
 8002ee0:	20001620 	.word	0x20001620
 8002ee4:	08012710 	.word	0x08012710
 8002ee8:	0801271c 	.word	0x0801271c
 8002eec:	080126e0 	.word	0x080126e0
 8002ef0:	20001624 	.word	0x20001624
 8002ef4:	08002e81 	.word	0x08002e81

08002ef8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002ef8:	4770      	bx	lr
	...

08002efc <_Z23getFont_verdana_20_4bppv>:
{
 8002efc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002efe:	4d16      	ldr	r5, [pc, #88]	@ (8002f58 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8002f00:	682c      	ldr	r4, [r5, #0]
 8002f02:	f3bf 8f5b 	dmb	ish
 8002f06:	f014 0401 	ands.w	r4, r4, #1
{
 8002f0a:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002f0c:	d120      	bne.n	8002f50 <_Z23getFont_verdana_20_4bppv+0x54>
 8002f0e:	4628      	mov	r0, r5
 8002f10:	f00c ff6e 	bl	800fdf0 <__cxa_guard_acquire>
 8002f14:	b1e0      	cbz	r0, 8002f50 <_Z23getFont_verdana_20_4bppv+0x54>
 8002f16:	233f      	movs	r3, #63	@ 0x3f
 8002f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f1a:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <_Z23getFont_verdana_20_4bppv+0x60>)
 8002f1c:	9308      	str	r3, [sp, #32]
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002f20:	4910      	ldr	r1, [pc, #64]	@ (8002f64 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002f22:	4811      	ldr	r0, [pc, #68]	@ (8002f68 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8002f24:	940a      	str	r4, [sp, #40]	@ 0x28
 8002f26:	2201      	movs	r2, #1
 8002f28:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002f32:	2314      	movs	r3, #20
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8002f3a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002f3e:	9405      	str	r4, [sp, #20]
 8002f40:	f7ff fc8e 	bl	8002860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002f44:	4809      	ldr	r0, [pc, #36]	@ (8002f6c <_Z23getFont_verdana_20_4bppv+0x70>)
 8002f46:	f00c ff9d 	bl	800fe84 <atexit>
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	f00c ff5c 	bl	800fe08 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8002f50:	4805      	ldr	r0, [pc, #20]	@ (8002f68 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8002f52:	b00f      	add	sp, #60	@ 0x3c
 8002f54:	bd30      	pop	{r4, r5, pc}
 8002f56:	bf00      	nop
 8002f58:	20001650 	.word	0x20001650
 8002f5c:	08012714 	.word	0x08012714
 8002f60:	08012720 	.word	0x08012720
 8002f64:	080126f0 	.word	0x080126f0
 8002f68:	20001654 	.word	0x20001654
 8002f6c:	08002ef9 	.word	0x08002ef9

08002f70 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002f70:	4770      	bx	lr
	...

08002f74 <_Z23getFont_verdana_40_4bppv>:
{
 8002f74:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002f76:	4d16      	ldr	r5, [pc, #88]	@ (8002fd0 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8002f78:	682c      	ldr	r4, [r5, #0]
 8002f7a:	f3bf 8f5b 	dmb	ish
 8002f7e:	f014 0401 	ands.w	r4, r4, #1
{
 8002f82:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002f84:	d120      	bne.n	8002fc8 <_Z23getFont_verdana_40_4bppv+0x54>
 8002f86:	4628      	mov	r0, r5
 8002f88:	f00c ff32 	bl	800fdf0 <__cxa_guard_acquire>
 8002f8c:	b1e0      	cbz	r0, 8002fc8 <_Z23getFont_verdana_40_4bppv+0x54>
 8002f8e:	233f      	movs	r3, #63	@ 0x3f
 8002f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002f94:	9308      	str	r3, [sp, #32]
 8002f96:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002f98:	4910      	ldr	r1, [pc, #64]	@ (8002fdc <_Z23getFont_verdana_40_4bppv+0x68>)
 8002f9a:	4811      	ldr	r0, [pc, #68]	@ (8002fe0 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002f9c:	940a      	str	r4, [sp, #40]	@ 0x28
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002faa:	2328      	movs	r3, #40	@ 0x28
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8002fb2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002fb6:	9405      	str	r4, [sp, #20]
 8002fb8:	f7ff fc52 	bl	8002860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002fbc:	4809      	ldr	r0, [pc, #36]	@ (8002fe4 <_Z23getFont_verdana_40_4bppv+0x70>)
 8002fbe:	f00c ff61 	bl	800fe84 <atexit>
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	f00c ff20 	bl	800fe08 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8002fc8:	4805      	ldr	r0, [pc, #20]	@ (8002fe0 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002fca:	b00f      	add	sp, #60	@ 0x3c
 8002fcc:	bd30      	pop	{r4, r5, pc}
 8002fce:	bf00      	nop
 8002fd0:	20001680 	.word	0x20001680
 8002fd4:	08012718 	.word	0x08012718
 8002fd8:	08012724 	.word	0x08012724
 8002fdc:	08012700 	.word	0x08012700
 8002fe0:	20001684 	.word	0x20001684
 8002fe4:	08002f71 	.word	0x08002f71

08002fe8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8002fe8:	2000      	movs	r0, #0
 8002fea:	4770      	bx	lr

08002fec <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8002fec:	2000      	movs	r0, #0
 8002fee:	4770      	bx	lr

08002ff0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002ff0:	b40e      	push	{r1, r2, r3}
 8002ff2:	b503      	push	{r0, r1, lr}
 8002ff4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002ff6:	2100      	movs	r1, #0
{
 8002ff8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8002ffc:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002ffe:	f008 fb15 	bl	800b62c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003002:	b002      	add	sp, #8
 8003004:	f85d eb04 	ldr.w	lr, [sp], #4
 8003008:	b003      	add	sp, #12
 800300a:	4770      	bx	lr

0800300c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800300c:	b40c      	push	{r2, r3}
 800300e:	b507      	push	{r0, r1, r2, lr}
 8003010:	ab04      	add	r3, sp, #16
 8003012:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003016:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003018:	f008 fb08 	bl	800b62c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800301c:	b003      	add	sp, #12
 800301e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003022:	b002      	add	sp, #8
 8003024:	4770      	bx	lr
	...

08003028 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003028:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 800302a:	b510      	push	{r4, lr}
 800302c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800302e:	b373      	cbz	r3, 800308e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003030:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003032:	b92b      	cbnz	r3, 8003040 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003034:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003036:	4a19      	ldr	r2, [pc, #100]	@ (800309c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 8003038:	21c5      	movs	r1, #197	@ 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800303a:	4819      	ldr	r0, [pc, #100]	@ (80030a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 800303c:	f00c ff04 	bl	800fe48 <__assert_func>
            return buffer[pos];
 8003040:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003042:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003046:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003048:	b30b      	cbz	r3, 800308e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800304a:	f009 fd6a 	bl	800cb22 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800304e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003050:	2b01      	cmp	r3, #1
 8003052:	d803      	bhi.n	800305c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003054:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003056:	4a14      	ldr	r2, [pc, #80]	@ (80030a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003058:	21cb      	movs	r1, #203	@ 0xcb
 800305a:	e7ee      	b.n	800303a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 800305c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800305e:	1c53      	adds	r3, r2, #1
 8003060:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003062:	2b09      	cmp	r3, #9
 8003064:	4619      	mov	r1, r3
 8003066:	bf88      	it	hi
 8003068:	f1a3 010a 	subhi.w	r1, r3, #10
 800306c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003070:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003074:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003076:	4281      	cmp	r1, r0
 8003078:	d109      	bne.n	800308e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800307a:	2b0a      	cmp	r3, #10
 800307c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003080:	bf28      	it	cs
 8003082:	2300      	movcs	r3, #0

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003084:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 8003088:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 800308a:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 800308c:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800308e:	4620      	mov	r0, r4
}
 8003090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003094:	f009 bc48 	b.w	800c928 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003098:	08011d94 	.word	0x08011d94
 800309c:	08011d9d 	.word	0x08011d9d
 80030a0:	08011e48 	.word	0x08011e48
 80030a4:	08011e92 	.word	0x08011e92
 80030a8:	08011ea0 	.word	0x08011ea0

080030ac <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80030ac:	f009 bc03 	b.w	800c8b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080030b0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80030b0:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80030b2:	bb18      	cbnz	r0, 80030fc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80030b4:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80030b6:	4813      	ldr	r0, [pc, #76]	@ (8003104 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80030b8:	681c      	ldr	r4, [r3, #0]
 80030ba:	4913      	ldr	r1, [pc, #76]	@ (8003108 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80030bc:	b1b4      	cbz	r4, 80030ec <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80030be:	6822      	ldr	r2, [r4, #0]
 80030c0:	4422      	add	r2, r4
 80030c2:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80030c4:	6862      	ldr	r2, [r4, #4]
 80030c6:	4422      	add	r2, r4
 80030c8:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80030ca:	68a2      	ldr	r2, [r4, #8]
 80030cc:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80030ce:	4b0f      	ldr	r3, [pc, #60]	@ (800310c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80030d4:	f000 f82a 	bl	800312c <_ZN17TypedTextDatabase8getFontsEv>
 80030d8:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80030da:	f000 f825 	bl	8003128 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80030de:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80030e0:	601c      	str	r4, [r3, #0]
        fonts = f;
 80030e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80030e4:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80030e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80030e8:	8018      	strh	r0, [r3, #0]
    }
}
 80030ea:	e007      	b.n	80030fc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80030ec:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80030ee:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80030f2:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80030f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80030f6:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80030f8:	2c00      	cmp	r4, #0
 80030fa:	d1e8      	bne.n	80030ce <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80030fc:	bd38      	pop	{r3, r4, r5, pc}
 80030fe:	bf00      	nop
 8003100:	200016bc 	.word	0x200016bc
 8003104:	200016b4 	.word	0x200016b4
 8003108:	200016b0 	.word	0x200016b0
 800310c:	200016b8 	.word	0x200016b8
 8003110:	20012484 	.word	0x20012484
 8003114:	2001248c 	.word	0x2001248c
 8003118:	20012488 	.word	0x20012488
 800311c:	0801272c 	.word	0x0801272c
 8003120:	08012728 	.word	0x08012728
 8003124:	08012730 	.word	0x08012730

08003128 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 8003128:	2000      	movs	r0, #0
 800312a:	4770      	bx	lr

0800312c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800312c:	4800      	ldr	r0, [pc, #0]	@ (8003130 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800312e:	4770      	bx	lr
 8003130:	200016c0 	.word	0x200016c0

08003134 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003134:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8003136:	f7ff fee1 	bl	8002efc <_Z23getFont_verdana_20_4bppv>
};
 800313a:	4c04      	ldr	r4, [pc, #16]	@ (800314c <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 800313c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800313e:	f7ff ff19 	bl	8002f74 <_Z23getFont_verdana_40_4bppv>
};
 8003142:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003144:	f7ff fe9e 	bl	8002e84 <_Z23getFont_verdana_10_4bppv>
};
 8003148:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800314a:	bd10      	pop	{r4, pc}
 800314c:	200016c0 	.word	0x200016c0

08003150 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003150:	4770      	bx	lr

08003152 <_ZN19FrontendApplicationD0Ev>:
 8003152:	b510      	push	{r4, lr}
 8003154:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003158:	4604      	mov	r4, r0
 800315a:	f00c fe47 	bl	800fdec <_ZdlPvj>
 800315e:	4620      	mov	r0, r4
 8003160:	bd10      	pop	{r4, pc}

08003162 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003162:	b510      	push	{r4, lr}
 8003164:	4604      	mov	r4, r0
    {
        model.tick();
 8003166:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800316a:	f000 f815 	bl	8003198 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800316e:	4620      	mov	r0, r4
    }
 8003170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003174:	f007 bb90 	b.w	800a898 <_ZN8touchgfx11Application15handleTickEventEv>

08003178 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003178:	b510      	push	{r4, lr}
 800317a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800317c:	f7ff fae0 	bl	8002740 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003180:	4b01      	ldr	r3, [pc, #4]	@ (8003188 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8003182:	6023      	str	r3, [r4, #0]
{

}
 8003184:	4620      	mov	r0, r4
 8003186:	bd10      	pop	{r4, pc}
 8003188:	08011f7c 	.word	0x08011f7c

0800318c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95), modelListener(0)
 800318c:	2200      	movs	r2, #0
 800318e:	215f      	movs	r1, #95	@ 0x5f
 8003190:	6002      	str	r2, [r0, #0]
 8003192:	8081      	strh	r1, [r0, #4]
 8003194:	6082      	str	r2, [r0, #8]
{
	modelTickCount = 0;
}
 8003196:	4770      	bx	lr

08003198 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 8003198:	6803      	ldr	r3, [r0, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	6003      	str	r3, [r0, #0]
}
 800319e:	4770      	bx	lr

080031a0 <_ZN5Model6updateEs>:

void Model::update(int16_t x)
{
	ImageX = x;
 80031a0:	8081      	strh	r1, [r0, #4]
}
 80031a2:	4770      	bx	lr

080031a4 <_ZN5Model9GetImageXEv>:

int16_t Model::GetImageX()
{
	return ImageX;
}
 80031a4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80031a8:	4770      	bx	lr

080031aa <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80031aa:	4770      	bx	lr

080031ac <_ZThn4_N16Screen1PresenterD1Ev>:
 80031ac:	3804      	subs	r0, #4
 80031ae:	4770      	bx	lr

080031b0 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80031b0:	4770      	bx	lr

080031b2 <_ZN16Screen1PresenterD0Ev>:
 80031b2:	b510      	push	{r4, lr}
 80031b4:	2110      	movs	r1, #16
 80031b6:	4604      	mov	r4, r0
 80031b8:	f00c fe18 	bl	800fdec <_ZdlPvj>
 80031bc:	4620      	mov	r0, r4
 80031be:	bd10      	pop	{r4, pc}

080031c0 <_ZThn4_N16Screen1PresenterD0Ev>:
 80031c0:	f1a0 0004 	sub.w	r0, r0, #4
 80031c4:	e7f5      	b.n	80031b2 <_ZN16Screen1PresenterD0Ev>
	...

080031c8 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80031c8:	2200      	movs	r2, #0
 80031ca:	6082      	str	r2, [r0, #8]
    : view(v)
 80031cc:	4a02      	ldr	r2, [pc, #8]	@ (80031d8 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 80031ce:	6002      	str	r2, [r0, #0]
 80031d0:	3218      	adds	r2, #24
 80031d2:	6042      	str	r2, [r0, #4]
 80031d4:	60c1      	str	r1, [r0, #12]
}
 80031d6:	4770      	bx	lr
 80031d8:	08011fd0 	.word	0x08011fd0

080031dc <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80031dc:	4770      	bx	lr

080031de <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 80031de:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 80031e2:	3301      	adds	r3, #1
 80031e4:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0

}
 80031e8:	4770      	bx	lr
	...

080031ec <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4b03      	ldr	r3, [pc, #12]	@ (80031fc <_ZN11Screen1ViewD1Ev+0x10>)
 80031f0:	6003      	str	r3, [r0, #0]
 80031f2:	4604      	mov	r4, r0
 80031f4:	f7ff fb69 	bl	80028ca <_ZN15Screen1ViewBaseD1Ev>
 80031f8:	4620      	mov	r0, r4
 80031fa:	bd10      	pop	{r4, pc}
 80031fc:	08011ff8 	.word	0x08011ff8

08003200 <_ZN11Screen1ViewD0Ev>:
 8003200:	b510      	push	{r4, lr}
 8003202:	4604      	mov	r4, r0
 8003204:	f7ff fff2 	bl	80031ec <_ZN11Screen1ViewD1Ev>
 8003208:	4620      	mov	r0, r4
 800320a:	21b4      	movs	r1, #180	@ 0xb4
 800320c:	f00c fdee 	bl	800fdec <_ZdlPvj>
 8003210:	4620      	mov	r0, r4
 8003212:	bd10      	pop	{r4, pc}

08003214 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003214:	b510      	push	{r4, lr}
 8003216:	4604      	mov	r4, r0
 8003218:	f7ff fb9a 	bl	8002950 <_ZN15Screen1ViewBaseC1Ev>
 800321c:	4b03      	ldr	r3, [pc, #12]	@ (800322c <_ZN11Screen1ViewC1Ev+0x18>)
 800321e:	6023      	str	r3, [r4, #0]
 8003220:	2300      	movs	r3, #0
 8003222:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
}
 8003226:	4620      	mov	r0, r4
 8003228:	bd10      	pop	{r4, pc}
 800322a:	bf00      	nop
 800322c:	08011ff8 	.word	0x08011ff8

08003230 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003230:	f7ff bb4c 	b.w	80028cc <_ZN15Screen1ViewBase11setupScreenEv>

08003234 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8003234:	4770      	bx	lr

08003236 <_ZThn4_N16Screen2PresenterD1Ev>:
 8003236:	3804      	subs	r0, #4
 8003238:	4770      	bx	lr

0800323a <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 800323a:	4770      	bx	lr

0800323c <_ZN16Screen2PresenterD0Ev>:
 800323c:	b510      	push	{r4, lr}
 800323e:	2110      	movs	r1, #16
 8003240:	4604      	mov	r4, r0
 8003242:	f00c fdd3 	bl	800fdec <_ZdlPvj>
 8003246:	4620      	mov	r0, r4
 8003248:	bd10      	pop	{r4, pc}

0800324a <_ZThn4_N16Screen2PresenterD0Ev>:
 800324a:	f1a0 0004 	sub.w	r0, r0, #4
 800324e:	e7f5      	b.n	800323c <_ZN16Screen2PresenterD0Ev>

08003250 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8003250:	2200      	movs	r2, #0
 8003252:	6082      	str	r2, [r0, #8]
    : view(v)
 8003254:	4a02      	ldr	r2, [pc, #8]	@ (8003260 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8003256:	6002      	str	r2, [r0, #0]
 8003258:	3218      	adds	r2, #24
 800325a:	6042      	str	r2, [r0, #4]
 800325c:	60c1      	str	r1, [r0, #12]
}
 800325e:	4770      	bx	lr
 8003260:	0801202c 	.word	0x0801202c

08003264 <_ZN16Screen2Presenter12UpdateImageXEs>:

}

void Screen2Presenter::UpdateImageX(int16_t x)
{
	model->update(x);
 8003264:	6880      	ldr	r0, [r0, #8]
 8003266:	f7ff bf9b 	b.w	80031a0 <_ZN5Model6updateEs>

0800326a <_ZN16Screen2Presenter9GetImageXEv>:
}

int16_t Screen2Presenter::GetImageX()
{
	return model->GetImageX();
 800326a:	6880      	ldr	r0, [r0, #8]
 800326c:	f7ff bf9a 	b.w	80031a4 <_ZN5Model9GetImageXEv>

08003270 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
    presenter->UpdateImageX(localImageX);
 8003270:	f9b0 1214 	ldrsh.w	r1, [r0, #532]	@ 0x214
 8003274:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003276:	f7ff bff5 	b.w	8003264 <_ZN16Screen2Presenter12UpdateImageXEs>
	...

0800327c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800327c:	b510      	push	{r4, lr}
 800327e:	4b03      	ldr	r3, [pc, #12]	@ (800328c <_ZN11Screen2ViewD1Ev+0x10>)
 8003280:	6003      	str	r3, [r0, #0]
 8003282:	4604      	mov	r4, r0
 8003284:	f7ff fbdf 	bl	8002a46 <_ZN15Screen2ViewBaseD1Ev>
 8003288:	4620      	mov	r0, r4
 800328a:	bd10      	pop	{r4, pc}
 800328c:	08012054 	.word	0x08012054

08003290 <_ZN11Screen2ViewD0Ev>:
 8003290:	b510      	push	{r4, lr}
 8003292:	4604      	mov	r4, r0
 8003294:	f7ff fff2 	bl	800327c <_ZN11Screen2ViewD1Ev>
 8003298:	4620      	mov	r0, r4
 800329a:	f44f 7109 	mov.w	r1, #548	@ 0x224
 800329e:	f00c fda5 	bl	800fdec <_ZdlPvj>
 80032a2:	4620      	mov	r0, r4
 80032a4:	bd10      	pop	{r4, pc}
	...

080032a8 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80032a8:	b510      	push	{r4, lr}
 80032aa:	4604      	mov	r4, r0
 80032ac:	f7ff fcb0 	bl	8002c10 <_ZN15Screen2ViewBaseC1Ev>
 80032b0:	4b04      	ldr	r3, [pc, #16]	@ (80032c4 <_ZN11Screen2ViewC1Ev+0x1c>)
    carX = 120;      // Vị trí ban đầu giữa màn hình
 80032b2:	4a05      	ldr	r2, [pc, #20]	@ (80032c8 <_ZN11Screen2ViewC1Ev+0x20>)
Screen2View::Screen2View()
 80032b4:	6023      	str	r3, [r4, #0]
    carX = 120;      // Vị trí ban đầu giữa màn hình
 80032b6:	2300      	movs	r3, #0
 80032b8:	e9c4 3286 	strd	r3, r2, [r4, #536]	@ 0x218
    score = 0;
 80032bc:	f8c4 3220 	str.w	r3, [r4, #544]	@ 0x220
}
 80032c0:	4620      	mov	r0, r4
 80032c2:	bd10      	pop	{r4, pc}
 80032c4:	08012054 	.word	0x08012054
 80032c8:	00fa0078 	.word	0x00fa0078

080032cc <_ZN11Screen2View16handleCarControlEv>:

    invalidate();
}

void Screen2View::handleCarControl()
{
 80032cc:	b510      	push	{r4, lr}
    // Đọc nút trái (PG2) - Di chuyển sang trái
    if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == GPIO_PIN_RESET)
 80032ce:	2104      	movs	r1, #4
{
 80032d0:	4604      	mov	r4, r0
    if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) == GPIO_PIN_RESET)
 80032d2:	481c      	ldr	r0, [pc, #112]	@ (8003344 <_ZN11Screen2View16handleCarControlEv+0x78>)
 80032d4:	f000 fe20 	bl	8003f18 <HAL_GPIO_ReadPin>
 80032d8:	bb28      	cbnz	r0, 8003326 <_ZN11Screen2View16handleCarControlEv+0x5a>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // LED test
 80032da:	481b      	ldr	r0, [pc, #108]	@ (8003348 <_ZN11Screen2View16handleCarControlEv+0x7c>)
 80032dc:	2201      	movs	r2, #1
 80032de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032e2:	f000 fe1f 	bl	8003f24 <HAL_GPIO_WritePin>

        if (carX > 15) {  // Giới hạn trái
 80032e6:	f9b4 321c 	ldrsh.w	r3, [r4, #540]	@ 0x21c
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	dd05      	ble.n	80032fa <_ZN11Screen2View16handleCarControlEv+0x2e>
            carX -= 5;    // Tốc độ di chuyển
 80032ee:	3b05      	subs	r3, #5
 80032f0:	b21b      	sxth	r3, r3
 80032f2:	f8a4 321c 	strh.w	r3, [r4, #540]	@ 0x21c
 80032f6:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
    else {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
    }

    // Đọc nút phải (PG3) - Di chuyển sang phải
    if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == GPIO_PIN_RESET)
 80032fa:	4812      	ldr	r0, [pc, #72]	@ (8003344 <_ZN11Screen2View16handleCarControlEv+0x78>)
 80032fc:	2108      	movs	r1, #8
 80032fe:	f000 fe0b 	bl	8003f18 <HAL_GPIO_ReadPin>
 8003302:	b9b8      	cbnz	r0, 8003334 <_ZN11Screen2View16handleCarControlEv+0x68>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // LED test
 8003304:	4810      	ldr	r0, [pc, #64]	@ (8003348 <_ZN11Screen2View16handleCarControlEv+0x7c>)
 8003306:	2201      	movs	r2, #1
 8003308:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800330c:	f000 fe0a 	bl	8003f24 <HAL_GPIO_WritePin>

        if (carX < 195) {  // Giới hạn phải (240 - 45)
 8003310:	f9b4 321c 	ldrsh.w	r3, [r4, #540]	@ 0x21c
 8003314:	2bc2      	cmp	r3, #194	@ 0xc2
 8003316:	dc05      	bgt.n	8003324 <_ZN11Screen2View16handleCarControlEv+0x58>
            carX += 5;     // Tốc độ di chuyển
 8003318:	3305      	adds	r3, #5
 800331a:	b21b      	sxth	r3, r3
 800331c:	f8a4 321c 	strh.w	r3, [r4, #540]	@ 0x21c
 8003320:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
        }
    }
    else {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
    }
}
 8003324:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8003326:	4808      	ldr	r0, [pc, #32]	@ (8003348 <_ZN11Screen2View16handleCarControlEv+0x7c>)
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800332e:	f000 fdf9 	bl	8003f24 <HAL_GPIO_WritePin>
 8003332:	e7e2      	b.n	80032fa <_ZN11Screen2View16handleCarControlEv+0x2e>
}
 8003334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8003338:	4803      	ldr	r0, [pc, #12]	@ (8003348 <_ZN11Screen2View16handleCarControlEv+0x7c>)
 800333a:	2200      	movs	r2, #0
 800333c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003340:	f000 bdf0 	b.w	8003f24 <HAL_GPIO_WritePin>
 8003344:	40021800 	.word	0x40021800
 8003348:	40020c00 	.word	0x40020c00

0800334c <_ZN11Screen2View8gameOverEv>:
        gameOver();
    }
}

void Screen2View::gameOver()
{
 800334c:	b507      	push	{r0, r1, r2, lr}
    // Reset game
    carX = 120;
 800334e:	2378      	movs	r3, #120	@ 0x78
 8003350:	f8a0 321c 	strh.w	r3, [r0, #540]	@ 0x21c
 8003354:	f8a0 314c 	strh.w	r3, [r0, #332]	@ 0x14c
    image1.setX(carX);
    score = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	f8c0 3220 	str.w	r3, [r0, #544]	@ 0x220
        rect.y = y;
 800335e:	f8a0 31de 	strh.w	r3, [r0, #478]	@ 0x1de
    // Ví dụ: Hiện text "Game Over"
    // gameOverText.setVisible(true);

    // Hoặc gửi message
    uint8_t msg = 'G';
    osMessageQueuePut(Queue1Handle, &msg, 0, 0);
 8003362:	4806      	ldr	r0, [pc, #24]	@ (800337c <_ZN11Screen2View8gameOverEv+0x30>)
    uint8_t msg = 'G';
 8003364:	2247      	movs	r2, #71	@ 0x47
 8003366:	f88d 2007 	strb.w	r2, [sp, #7]
    osMessageQueuePut(Queue1Handle, &msg, 0, 0);
 800336a:	f10d 0107 	add.w	r1, sp, #7
 800336e:	461a      	mov	r2, r3
 8003370:	6800      	ldr	r0, [r0, #0]
 8003372:	f002 fedb 	bl	800612c <osMessageQueuePut>
}
 8003376:	b003      	add	sp, #12
 8003378:	f85d fb04 	ldr.w	pc, [sp], #4
 800337c:	200013f4 	.word	0x200013f4

08003380 <_ZN11Screen2View14checkCollisionEv>:
    int lambLeft = lamb.getX();
 8003380:	f9b0 11dc 	ldrsh.w	r1, [r0, #476]	@ 0x1dc
    int carLeft = image1.getX();
 8003384:	f9b0 214c 	ldrsh.w	r2, [r0, #332]	@ 0x14c
{
 8003388:	b410      	push	{r4}
    int lambRight = lambLeft + 30;  // Giả sử lamb rộng 30px
 800338a:	f101 041e 	add.w	r4, r1, #30
    if (carLeft < lambRight && carRight > lambLeft &&
 800338e:	42a2      	cmp	r2, r4
 8003390:	da11      	bge.n	80033b6 <_ZN11Screen2View14checkCollisionEv+0x36>
    int carRight = carLeft + 30;   // Giả sử xe rộng 30px
 8003392:	321e      	adds	r2, #30
    if (carLeft < lambRight && carRight > lambLeft &&
 8003394:	428a      	cmp	r2, r1
 8003396:	dd0e      	ble.n	80033b6 <_ZN11Screen2View14checkCollisionEv+0x36>
    int lambTop = lamb.getY();
 8003398:	f9b0 31de 	ldrsh.w	r3, [r0, #478]	@ 0x1de
    int carTop = image1.getY();
 800339c:	f9b0 214e 	ldrsh.w	r2, [r0, #334]	@ 0x14e
    int lambBottom = lambTop + 30;  // Giả sử lamb cao 30px
 80033a0:	f103 011e 	add.w	r1, r3, #30
    if (carLeft < lambRight && carRight > lambLeft &&
 80033a4:	428a      	cmp	r2, r1
 80033a6:	da06      	bge.n	80033b6 <_ZN11Screen2View14checkCollisionEv+0x36>
    int carBottom = carTop + 40;   // Giả sử xe cao 40px
 80033a8:	3228      	adds	r2, #40	@ 0x28
        carTop < lambBottom && carBottom > lambTop)
 80033aa:	429a      	cmp	r2, r3
 80033ac:	dd03      	ble.n	80033b6 <_ZN11Screen2View14checkCollisionEv+0x36>
}
 80033ae:	f85d 4b04 	ldr.w	r4, [sp], #4
        gameOver();
 80033b2:	f7ff bfcb 	b.w	800334c <_ZN11Screen2View8gameOverEv>
}
 80033b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <_ZN11Screen2View11setupScreenEv>:
{
 80033bc:	b510      	push	{r4, lr}
 80033be:	4604      	mov	r4, r0
 80033c0:	b086      	sub	sp, #24
    localImageX = presenter->GetImageX();
 80033c2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80033c4:	f7ff ff51 	bl	800326a <_ZN16Screen2Presenter9GetImageXEv>
 80033c8:	f8a4 0214 	strh.w	r0, [r4, #532]	@ 0x214
    Screen2ViewBase::setupScreen();
 80033cc:	4620      	mov	r0, r4
 80033ce:	f7ff fb3b 	bl	8002a48 <_ZN15Screen2ViewBase11setupScreenEv>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033d2:	4b10      	ldr	r3, [pc, #64]	@ (8003414 <_ZN11Screen2View11setupScreenEv+0x58>)
 80033d4:	2100      	movs	r1, #0
 80033d6:	9100      	str	r1, [sp, #0]
 80033d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e6:	9300      	str	r3, [sp, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	2210      	movs	r2, #16
 80033ea:	a802      	add	r0, sp, #8
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033ec:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ee:	f00c ff32 	bl	8010256 <memset>
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80033f2:	230c      	movs	r3, #12
 80033f4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033f6:	4808      	ldr	r0, [pc, #32]	@ (8003418 <_ZN11Screen2View11setupScreenEv+0x5c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f8:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033fa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033fe:	f000 fca7 	bl	8003d50 <HAL_GPIO_Init>
        rect.x = x;
 8003402:	f8d4 321c 	ldr.w	r3, [r4, #540]	@ 0x21c
 8003406:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 800340a:	230e      	movs	r3, #14
 800340c:	f8c4 31dc 	str.w	r3, [r4, #476]	@ 0x1dc
}
 8003410:	b006      	add	sp, #24
 8003412:	bd10      	pop	{r4, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	40021800 	.word	0x40021800

0800341c <_ZN11Screen2View15handleTickEventEv>:
{
 800341c:	b538      	push	{r3, r4, r5, lr}
 800341e:	4604      	mov	r4, r0
    handleCarControl();
 8003420:	f7ff ff54 	bl	80032cc <_ZN11Screen2View16handleCarControlEv>
    tickCount++;
 8003424:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
    switch (tickCount % 5)
 8003428:	2205      	movs	r2, #5
    tickCount++;
 800342a:	3301      	adds	r3, #1
    switch (tickCount % 5)
 800342c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003430:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003434:	1a9a      	subs	r2, r3, r2
 8003436:	3a01      	subs	r2, #1
    tickCount++;
 8003438:	f8c4 3218 	str.w	r3, [r4, #536]	@ 0x218
    switch (tickCount % 5)
 800343c:	2001      	movs	r0, #1
 800343e:	2100      	movs	r1, #0
 8003440:	2a03      	cmp	r2, #3
 8003442:	d803      	bhi.n	800344c <_ZN11Screen2View15handleTickEventEv+0x30>
 8003444:	e8df f002 	tbb	[pc, r2]
 8003448:	332e2924 	.word	0x332e2924
        visible = vis;
 800344c:	f884 0141 	strb.w	r0, [r4, #321]	@ 0x141
 8003450:	f884 1091 	strb.w	r1, [r4, #145]	@ 0x91
    int lambY = tickCount * 2 % 320;
 8003454:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003458:	005a      	lsls	r2, r3, #1
 800345a:	fbb2 f3f1 	udiv	r3, r2, r1
 800345e:	fb01 2213 	mls	r2, r1, r3, r2
    lamb.setX(lane * 60 + 15);
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	330f      	adds	r3, #15
        rect.x = x;
 800346e:	f8a4 31dc 	strh.w	r3, [r4, #476]	@ 0x1dc
    checkCollision();
 8003472:	4620      	mov	r0, r4
    lamb.setY(lambY);
 8003474:	f8a4 21de 	strh.w	r2, [r4, #478]	@ 0x1de
    checkCollision();
 8003478:	f7ff ff82 	bl	8003380 <_ZN11Screen2View14checkCollisionEv>
    score++;
 800347c:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 8003480:	3301      	adds	r3, #1
 8003482:	f8c4 3220 	str.w	r3, [r4, #544]	@ 0x220
     *
     * @see Container::invalidate
     */
    void invalidate() const
    {
        container.invalidate();
 8003486:	1d20      	adds	r0, r4, #4
}
 8003488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800348c:	f008 b9f8 	b.w	800b880 <_ZNK8touchgfx8Drawable10invalidateEv>
        visible = vis;
 8003490:	f884 0115 	strb.w	r0, [r4, #277]	@ 0x115
 8003494:	f884 1141 	strb.w	r1, [r4, #321]	@ 0x141
    }
 8003498:	e7dc      	b.n	8003454 <_ZN11Screen2View15handleTickEventEv+0x38>
        visible = vis;
 800349a:	f884 00e9 	strb.w	r0, [r4, #233]	@ 0xe9
 800349e:	f884 1115 	strb.w	r1, [r4, #277]	@ 0x115
    }
 80034a2:	e7d7      	b.n	8003454 <_ZN11Screen2View15handleTickEventEv+0x38>
        visible = vis;
 80034a4:	f884 00bd 	strb.w	r0, [r4, #189]	@ 0xbd
 80034a8:	f884 10e9 	strb.w	r1, [r4, #233]	@ 0xe9
    }
 80034ac:	e7d2      	b.n	8003454 <_ZN11Screen2View15handleTickEventEv+0x38>
        visible = vis;
 80034ae:	f884 0091 	strb.w	r0, [r4, #145]	@ 0x91
 80034b2:	f884 10bd 	strb.w	r1, [r4, #189]	@ 0xbd
    }
 80034b6:	e7cd      	b.n	8003454 <_ZN11Screen2View15handleTickEventEv+0x38>

080034b8 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 80034b8:	20f0      	movs	r0, #240	@ 0xf0
 80034ba:	4770      	bx	lr

080034bc <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 80034bc:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80034c0:	4770      	bx	lr

080034c2 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 80034c2:	2029      	movs	r0, #41	@ 0x29
 80034c4:	f7fe b9ac 	b.w	8001820 <LCD_IO_WriteReg>

080034c8 <ili9341_DisplayOff>:
 80034c8:	2028      	movs	r0, #40	@ 0x28
 80034ca:	f7fe b9a9 	b.w	8001820 <LCD_IO_WriteReg>

080034ce <ili9341_Init>:
{
 80034ce:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80034d0:	f7fe f97a 	bl	80017c8 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 80034d4:	20ca      	movs	r0, #202	@ 0xca
 80034d6:	f7fe f9a3 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034da:	20c3      	movs	r0, #195	@ 0xc3
 80034dc:	f7fe f984 	bl	80017e8 <LCD_IO_WriteData>
 80034e0:	2008      	movs	r0, #8
 80034e2:	f7fe f981 	bl	80017e8 <LCD_IO_WriteData>
 80034e6:	2050      	movs	r0, #80	@ 0x50
 80034e8:	f7fe f97e 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80034ec:	20cf      	movs	r0, #207	@ 0xcf
 80034ee:	f7fe f997 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034f2:	2000      	movs	r0, #0
 80034f4:	f7fe f978 	bl	80017e8 <LCD_IO_WriteData>
 80034f8:	20c1      	movs	r0, #193	@ 0xc1
 80034fa:	f7fe f975 	bl	80017e8 <LCD_IO_WriteData>
 80034fe:	2030      	movs	r0, #48	@ 0x30
 8003500:	f7fe f972 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003504:	20ed      	movs	r0, #237	@ 0xed
 8003506:	f7fe f98b 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800350a:	2064      	movs	r0, #100	@ 0x64
 800350c:	f7fe f96c 	bl	80017e8 <LCD_IO_WriteData>
 8003510:	2003      	movs	r0, #3
 8003512:	f7fe f969 	bl	80017e8 <LCD_IO_WriteData>
 8003516:	2012      	movs	r0, #18
 8003518:	f7fe f966 	bl	80017e8 <LCD_IO_WriteData>
 800351c:	2081      	movs	r0, #129	@ 0x81
 800351e:	f7fe f963 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003522:	20e8      	movs	r0, #232	@ 0xe8
 8003524:	f7fe f97c 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003528:	2085      	movs	r0, #133	@ 0x85
 800352a:	f7fe f95d 	bl	80017e8 <LCD_IO_WriteData>
 800352e:	2000      	movs	r0, #0
 8003530:	f7fe f95a 	bl	80017e8 <LCD_IO_WriteData>
 8003534:	2078      	movs	r0, #120	@ 0x78
 8003536:	f7fe f957 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800353a:	20cb      	movs	r0, #203	@ 0xcb
 800353c:	f7fe f970 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003540:	2039      	movs	r0, #57	@ 0x39
 8003542:	f7fe f951 	bl	80017e8 <LCD_IO_WriteData>
 8003546:	202c      	movs	r0, #44	@ 0x2c
 8003548:	f7fe f94e 	bl	80017e8 <LCD_IO_WriteData>
 800354c:	2000      	movs	r0, #0
 800354e:	f7fe f94b 	bl	80017e8 <LCD_IO_WriteData>
 8003552:	2034      	movs	r0, #52	@ 0x34
 8003554:	f7fe f948 	bl	80017e8 <LCD_IO_WriteData>
 8003558:	2002      	movs	r0, #2
 800355a:	f7fe f945 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800355e:	20f7      	movs	r0, #247	@ 0xf7
 8003560:	f7fe f95e 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003564:	2020      	movs	r0, #32
 8003566:	f7fe f93f 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800356a:	20ea      	movs	r0, #234	@ 0xea
 800356c:	f7fe f958 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003570:	2000      	movs	r0, #0
 8003572:	f7fe f939 	bl	80017e8 <LCD_IO_WriteData>
 8003576:	2000      	movs	r0, #0
 8003578:	f7fe f936 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800357c:	20b1      	movs	r0, #177	@ 0xb1
 800357e:	f7fe f94f 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fe f930 	bl	80017e8 <LCD_IO_WriteData>
 8003588:	201b      	movs	r0, #27
 800358a:	f7fe f92d 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800358e:	20b6      	movs	r0, #182	@ 0xb6
 8003590:	f7fe f946 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003594:	200a      	movs	r0, #10
 8003596:	f7fe f927 	bl	80017e8 <LCD_IO_WriteData>
 800359a:	20a2      	movs	r0, #162	@ 0xa2
 800359c:	f7fe f924 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035a0:	20c0      	movs	r0, #192	@ 0xc0
 80035a2:	f7fe f93d 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035a6:	2010      	movs	r0, #16
 80035a8:	f7fe f91e 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035ac:	20c1      	movs	r0, #193	@ 0xc1
 80035ae:	f7fe f937 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035b2:	2010      	movs	r0, #16
 80035b4:	f7fe f918 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035b8:	20c5      	movs	r0, #197	@ 0xc5
 80035ba:	f7fe f931 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035be:	2045      	movs	r0, #69	@ 0x45
 80035c0:	f7fe f912 	bl	80017e8 <LCD_IO_WriteData>
 80035c4:	2015      	movs	r0, #21
 80035c6:	f7fe f90f 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035ca:	20c7      	movs	r0, #199	@ 0xc7
 80035cc:	f7fe f928 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035d0:	2090      	movs	r0, #144	@ 0x90
 80035d2:	f7fe f909 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035d6:	2036      	movs	r0, #54	@ 0x36
 80035d8:	f7fe f922 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035dc:	20c8      	movs	r0, #200	@ 0xc8
 80035de:	f7fe f903 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035e2:	20f2      	movs	r0, #242	@ 0xf2
 80035e4:	f7fe f91c 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035e8:	2000      	movs	r0, #0
 80035ea:	f7fe f8fd 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035ee:	20b0      	movs	r0, #176	@ 0xb0
 80035f0:	f7fe f916 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035f4:	20c2      	movs	r0, #194	@ 0xc2
 80035f6:	f7fe f8f7 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035fa:	20b6      	movs	r0, #182	@ 0xb6
 80035fc:	f7fe f910 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003600:	200a      	movs	r0, #10
 8003602:	f7fe f8f1 	bl	80017e8 <LCD_IO_WriteData>
 8003606:	20a7      	movs	r0, #167	@ 0xa7
 8003608:	f7fe f8ee 	bl	80017e8 <LCD_IO_WriteData>
 800360c:	2027      	movs	r0, #39	@ 0x27
 800360e:	f7fe f8eb 	bl	80017e8 <LCD_IO_WriteData>
 8003612:	2004      	movs	r0, #4
 8003614:	f7fe f8e8 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003618:	202a      	movs	r0, #42	@ 0x2a
 800361a:	f7fe f901 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800361e:	2000      	movs	r0, #0
 8003620:	f7fe f8e2 	bl	80017e8 <LCD_IO_WriteData>
 8003624:	2000      	movs	r0, #0
 8003626:	f7fe f8df 	bl	80017e8 <LCD_IO_WriteData>
 800362a:	2000      	movs	r0, #0
 800362c:	f7fe f8dc 	bl	80017e8 <LCD_IO_WriteData>
 8003630:	20ef      	movs	r0, #239	@ 0xef
 8003632:	f7fe f8d9 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003636:	202b      	movs	r0, #43	@ 0x2b
 8003638:	f7fe f8f2 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800363c:	2000      	movs	r0, #0
 800363e:	f7fe f8d3 	bl	80017e8 <LCD_IO_WriteData>
 8003642:	2000      	movs	r0, #0
 8003644:	f7fe f8d0 	bl	80017e8 <LCD_IO_WriteData>
 8003648:	2001      	movs	r0, #1
 800364a:	f7fe f8cd 	bl	80017e8 <LCD_IO_WriteData>
 800364e:	203f      	movs	r0, #63	@ 0x3f
 8003650:	f7fe f8ca 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003654:	20f6      	movs	r0, #246	@ 0xf6
 8003656:	f7fe f8e3 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800365a:	2001      	movs	r0, #1
 800365c:	f7fe f8c4 	bl	80017e8 <LCD_IO_WriteData>
 8003660:	2000      	movs	r0, #0
 8003662:	f7fe f8c1 	bl	80017e8 <LCD_IO_WriteData>
 8003666:	2006      	movs	r0, #6
 8003668:	f7fe f8be 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800366c:	202c      	movs	r0, #44	@ 0x2c
 800366e:	f7fe f8d7 	bl	8001820 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003672:	20c8      	movs	r0, #200	@ 0xc8
 8003674:	f7fe f922 	bl	80018bc <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003678:	2026      	movs	r0, #38	@ 0x26
 800367a:	f7fe f8d1 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800367e:	2001      	movs	r0, #1
 8003680:	f7fe f8b2 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003684:	20e0      	movs	r0, #224	@ 0xe0
 8003686:	f7fe f8cb 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800368a:	200f      	movs	r0, #15
 800368c:	f7fe f8ac 	bl	80017e8 <LCD_IO_WriteData>
 8003690:	2029      	movs	r0, #41	@ 0x29
 8003692:	f7fe f8a9 	bl	80017e8 <LCD_IO_WriteData>
 8003696:	2024      	movs	r0, #36	@ 0x24
 8003698:	f7fe f8a6 	bl	80017e8 <LCD_IO_WriteData>
 800369c:	200c      	movs	r0, #12
 800369e:	f7fe f8a3 	bl	80017e8 <LCD_IO_WriteData>
 80036a2:	200e      	movs	r0, #14
 80036a4:	f7fe f8a0 	bl	80017e8 <LCD_IO_WriteData>
 80036a8:	2009      	movs	r0, #9
 80036aa:	f7fe f89d 	bl	80017e8 <LCD_IO_WriteData>
 80036ae:	204e      	movs	r0, #78	@ 0x4e
 80036b0:	f7fe f89a 	bl	80017e8 <LCD_IO_WriteData>
 80036b4:	2078      	movs	r0, #120	@ 0x78
 80036b6:	f7fe f897 	bl	80017e8 <LCD_IO_WriteData>
 80036ba:	203c      	movs	r0, #60	@ 0x3c
 80036bc:	f7fe f894 	bl	80017e8 <LCD_IO_WriteData>
 80036c0:	2009      	movs	r0, #9
 80036c2:	f7fe f891 	bl	80017e8 <LCD_IO_WriteData>
 80036c6:	2013      	movs	r0, #19
 80036c8:	f7fe f88e 	bl	80017e8 <LCD_IO_WriteData>
 80036cc:	2005      	movs	r0, #5
 80036ce:	f7fe f88b 	bl	80017e8 <LCD_IO_WriteData>
 80036d2:	2017      	movs	r0, #23
 80036d4:	f7fe f888 	bl	80017e8 <LCD_IO_WriteData>
 80036d8:	2011      	movs	r0, #17
 80036da:	f7fe f885 	bl	80017e8 <LCD_IO_WriteData>
 80036de:	2000      	movs	r0, #0
 80036e0:	f7fe f882 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80036e4:	20e1      	movs	r0, #225	@ 0xe1
 80036e6:	f7fe f89b 	bl	8001820 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7fe f87c 	bl	80017e8 <LCD_IO_WriteData>
 80036f0:	2016      	movs	r0, #22
 80036f2:	f7fe f879 	bl	80017e8 <LCD_IO_WriteData>
 80036f6:	201b      	movs	r0, #27
 80036f8:	f7fe f876 	bl	80017e8 <LCD_IO_WriteData>
 80036fc:	2004      	movs	r0, #4
 80036fe:	f7fe f873 	bl	80017e8 <LCD_IO_WriteData>
 8003702:	2011      	movs	r0, #17
 8003704:	f7fe f870 	bl	80017e8 <LCD_IO_WriteData>
 8003708:	2007      	movs	r0, #7
 800370a:	f7fe f86d 	bl	80017e8 <LCD_IO_WriteData>
 800370e:	2031      	movs	r0, #49	@ 0x31
 8003710:	f7fe f86a 	bl	80017e8 <LCD_IO_WriteData>
 8003714:	2033      	movs	r0, #51	@ 0x33
 8003716:	f7fe f867 	bl	80017e8 <LCD_IO_WriteData>
 800371a:	2042      	movs	r0, #66	@ 0x42
 800371c:	f7fe f864 	bl	80017e8 <LCD_IO_WriteData>
 8003720:	2005      	movs	r0, #5
 8003722:	f7fe f861 	bl	80017e8 <LCD_IO_WriteData>
 8003726:	200c      	movs	r0, #12
 8003728:	f7fe f85e 	bl	80017e8 <LCD_IO_WriteData>
 800372c:	200a      	movs	r0, #10
 800372e:	f7fe f85b 	bl	80017e8 <LCD_IO_WriteData>
 8003732:	2028      	movs	r0, #40	@ 0x28
 8003734:	f7fe f858 	bl	80017e8 <LCD_IO_WriteData>
 8003738:	202f      	movs	r0, #47	@ 0x2f
 800373a:	f7fe f855 	bl	80017e8 <LCD_IO_WriteData>
 800373e:	200f      	movs	r0, #15
 8003740:	f7fe f852 	bl	80017e8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003744:	2011      	movs	r0, #17
 8003746:	f7fe f86b 	bl	8001820 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800374a:	20c8      	movs	r0, #200	@ 0xc8
 800374c:	f7fe f8b6 	bl	80018bc <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003750:	2029      	movs	r0, #41	@ 0x29
 8003752:	f7fe f865 	bl	8001820 <LCD_IO_WriteReg>
}
 8003756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 800375a:	202c      	movs	r0, #44	@ 0x2c
 800375c:	f7fe b860 	b.w	8001820 <LCD_IO_WriteReg>

08003760 <ili9341_ReadID>:
{
 8003760:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003762:	f7fe f831 	bl	80017c8 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003766:	2103      	movs	r1, #3
 8003768:	20d3      	movs	r0, #211	@ 0xd3
 800376a:	f7fe f875 	bl	8001858 <LCD_IO_ReadData>
}
 800376e:	b280      	uxth	r0, r0
 8003770:	bd08      	pop	{r3, pc}

08003772 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003772:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8003774:	b2c4      	uxtb	r4, r0
 8003776:	2202      	movs	r2, #2
 8003778:	2103      	movs	r1, #3
 800377a:	4620      	mov	r0, r4
 800377c:	f7fd ffda 	bl	8001734 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003780:	200a      	movs	r0, #10
 8003782:	f7fe f81f 	bl	80017c4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8003786:	4620      	mov	r0, r4
 8003788:	2200      	movs	r2, #0
 800378a:	2103      	movs	r1, #3
 800378c:	f7fd ffd2 	bl	8001734 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 8003790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8003794:	2002      	movs	r0, #2
 8003796:	f7fe b815 	b.w	80017c4 <IOE_Delay>

0800379a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800379a:	b538      	push	{r3, r4, r5, lr}
 800379c:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800379e:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 80037a0:	f7fd ffc6 	bl	8001730 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80037a4:	2100      	movs	r1, #0
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7fd ffdc 	bl	8001764 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80037ac:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80037ae:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7fd ffd7 	bl	8001764 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80037b6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 80037ba:	b280      	uxth	r0, r0
 80037bc:	bd38      	pop	{r3, r4, r5, pc}

080037be <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80037be:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80037c0:	b2c4      	uxtb	r4, r0
 80037c2:	2140      	movs	r1, #64	@ 0x40
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7fd ffcd 	bl	8001764 <IOE_Read>
  
  if(state > 0)
 80037ca:	0603      	lsls	r3, r0, #24
 80037cc:	d507      	bpl.n	80037de <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80037ce:	214c      	movs	r1, #76	@ 0x4c
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7fd ffc7 	bl	8001764 <IOE_Read>
 80037d6:	3800      	subs	r0, #0
 80037d8:	bf18      	it	ne
 80037da:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 80037dc:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80037de:	2201      	movs	r2, #1
 80037e0:	214b      	movs	r1, #75	@ 0x4b
 80037e2:	4620      	mov	r0, r4
 80037e4:	f7fd ffa6 	bl	8001734 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80037e8:	4620      	mov	r0, r4
 80037ea:	2200      	movs	r2, #0
 80037ec:	214b      	movs	r1, #75	@ 0x4b
 80037ee:	f7fd ffa1 	bl	8001734 <IOE_Write>
  uint8_t ret = 0;
 80037f2:	2000      	movs	r0, #0
 80037f4:	e7f2      	b.n	80037dc <stmpe811_TS_DetectTouch+0x1e>

080037f6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80037f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80037f8:	2304      	movs	r3, #4
 80037fa:	b2c4      	uxtb	r4, r0
{
 80037fc:	460e      	mov	r6, r1
 80037fe:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003800:	21d7      	movs	r1, #215	@ 0xd7
 8003802:	eb0d 0203 	add.w	r2, sp, r3
 8003806:	4620      	mov	r0, r4
 8003808:	f7fd ffc6 	bl	8001798 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800380c:	9b01      	ldr	r3, [sp, #4]
 800380e:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003810:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003812:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003816:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003818:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800381a:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800381c:	2201      	movs	r2, #1
 800381e:	214b      	movs	r1, #75	@ 0x4b
 8003820:	f7fd ff88 	bl	8001734 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003824:	2200      	movs	r2, #0
 8003826:	214b      	movs	r1, #75	@ 0x4b
 8003828:	4620      	mov	r0, r4
 800382a:	f7fd ff83 	bl	8001734 <IOE_Write>
}
 800382e:	b002      	add	sp, #8
 8003830:	bd70      	pop	{r4, r5, r6, pc}
	...

08003834 <stmpe811_Init>:
{
 8003834:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8003836:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <stmpe811_Init+0x2c>)
 8003838:	7813      	ldrb	r3, [r2, #0]
 800383a:	4298      	cmp	r0, r3
{
 800383c:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 800383e:	d00d      	beq.n	800385c <stmpe811_Init+0x28>
 8003840:	7851      	ldrb	r1, [r2, #1]
 8003842:	4288      	cmp	r0, r1
 8003844:	d00a      	beq.n	800385c <stmpe811_Init+0x28>
 8003846:	b10b      	cbz	r3, 800384c <stmpe811_Init+0x18>
 8003848:	b941      	cbnz	r1, 800385c <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800384a:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 800384c:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 800384e:	f7fd ff6f 	bl	8001730 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8003852:	4620      	mov	r0, r4
}
 8003854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8003858:	f7ff bf8b 	b.w	8003772 <stmpe811_Reset>
}
 800385c:	bd10      	pop	{r4, pc}
 800385e:	bf00      	nop
 8003860:	200016cc 	.word	0x200016cc

08003864 <stmpe811_EnableGlobalIT>:
{
 8003864:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003866:	b2c4      	uxtb	r4, r0
 8003868:	2109      	movs	r1, #9
 800386a:	4620      	mov	r0, r4
 800386c:	f7fd ff7a 	bl	8001764 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8003870:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	4620      	mov	r0, r4
 8003878:	2109      	movs	r1, #9
}
 800387a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800387e:	f7fd bf59 	b.w	8001734 <IOE_Write>

08003882 <stmpe811_DisableGlobalIT>:
{
 8003882:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003884:	b2c4      	uxtb	r4, r0
 8003886:	2109      	movs	r1, #9
 8003888:	4620      	mov	r0, r4
 800388a:	f7fd ff6b 	bl	8001764 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800388e:	2109      	movs	r1, #9
 8003890:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 8003894:	4620      	mov	r0, r4
}
 8003896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800389a:	f7fd bf4b 	b.w	8001734 <IOE_Write>

0800389e <stmpe811_EnableITSource>:
{
 800389e:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80038a0:	b2c4      	uxtb	r4, r0
{
 80038a2:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80038a4:	4620      	mov	r0, r4
 80038a6:	210a      	movs	r1, #10
 80038a8:	f7fd ff5c 	bl	8001764 <IOE_Read>
  tmp |= Source; 
 80038ac:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	4620      	mov	r0, r4
 80038b4:	210a      	movs	r1, #10
}
 80038b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80038ba:	f7fd bf3b 	b.w	8001734 <IOE_Write>

080038be <stmpe811_TS_EnableIT>:
{
 80038be:	b510      	push	{r4, lr}
 80038c0:	4604      	mov	r4, r0
  IOE_ITConfig();
 80038c2:	f7fd ff36 	bl	8001732 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80038c6:	4620      	mov	r0, r4
 80038c8:	211f      	movs	r1, #31
 80038ca:	f7ff ffe8 	bl	800389e <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 80038ce:	4620      	mov	r0, r4
}
 80038d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 80038d4:	f7ff bfc6 	b.w	8003864 <stmpe811_EnableGlobalIT>

080038d8 <stmpe811_DisableITSource>:
{
 80038d8:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80038da:	b2c4      	uxtb	r4, r0
{
 80038dc:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80038de:	4620      	mov	r0, r4
 80038e0:	210a      	movs	r1, #10
 80038e2:	f7fd ff3f 	bl	8001764 <IOE_Read>
  tmp &= ~Source; 
 80038e6:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	4620      	mov	r0, r4
 80038ee:	210a      	movs	r1, #10
}
 80038f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80038f4:	f7fd bf1e 	b.w	8001734 <IOE_Write>

080038f8 <stmpe811_TS_DisableIT>:
{
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 80038fc:	f7ff ffc1 	bl	8003882 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003900:	4620      	mov	r0, r4
 8003902:	211f      	movs	r1, #31
}
 8003904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003908:	f7ff bfe6 	b.w	80038d8 <stmpe811_DisableITSource>

0800390c <stmpe811_ReadGITStatus>:
{
 800390c:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800390e:	b2c0      	uxtb	r0, r0
{
 8003910:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003912:	210b      	movs	r1, #11
 8003914:	f7fd ff26 	bl	8001764 <IOE_Read>
}
 8003918:	4020      	ands	r0, r4
 800391a:	bd10      	pop	{r4, pc}

0800391c <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800391c:	211f      	movs	r1, #31
 800391e:	f7ff bff5 	b.w	800390c <stmpe811_ReadGITStatus>

08003922 <stmpe811_ClearGlobalIT>:
{
 8003922:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003924:	b2c0      	uxtb	r0, r0
 8003926:	210b      	movs	r1, #11
 8003928:	f7fd bf04 	b.w	8001734 <IOE_Write>

0800392c <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800392c:	211f      	movs	r1, #31
 800392e:	f7ff bff8 	b.w	8003922 <stmpe811_ClearGlobalIT>

08003932 <stmpe811_IO_EnableAF>:
{
 8003932:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003934:	b2c4      	uxtb	r4, r0
{
 8003936:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003938:	4620      	mov	r0, r4
 800393a:	2117      	movs	r1, #23
 800393c:	f7fd ff12 	bl	8001764 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8003940:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	4620      	mov	r0, r4
 8003948:	2117      	movs	r1, #23
}
 800394a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800394e:	f7fd bef1 	b.w	8001734 <IOE_Write>

08003952 <stmpe811_TS_Start>:
{
 8003952:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003954:	b2c4      	uxtb	r4, r0
{
 8003956:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003958:	2104      	movs	r1, #4
 800395a:	4620      	mov	r0, r4
 800395c:	f7fd ff02 	bl	8001764 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003960:	2104      	movs	r1, #4
 8003962:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003966:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003968:	4620      	mov	r0, r4
 800396a:	f7fd fee3 	bl	8001734 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 800396e:	4630      	mov	r0, r6
 8003970:	21f0      	movs	r1, #240	@ 0xf0
 8003972:	f7ff ffde 	bl	8003932 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003976:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 800397a:	4620      	mov	r0, r4
 800397c:	2104      	movs	r1, #4
 800397e:	f7fd fed9 	bl	8001734 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8003982:	2249      	movs	r2, #73	@ 0x49
 8003984:	2120      	movs	r1, #32
 8003986:	4620      	mov	r0, r4
 8003988:	f7fd fed4 	bl	8001734 <IOE_Write>
  IOE_Delay(2); 
 800398c:	2002      	movs	r0, #2
 800398e:	f7fd ff19 	bl	80017c4 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8003992:	4620      	mov	r0, r4
 8003994:	2201      	movs	r2, #1
 8003996:	2121      	movs	r1, #33	@ 0x21
 8003998:	f7fd fecc 	bl	8001734 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 800399c:	4620      	mov	r0, r4
 800399e:	229a      	movs	r2, #154	@ 0x9a
 80039a0:	2141      	movs	r1, #65	@ 0x41
 80039a2:	f7fd fec7 	bl	8001734 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80039a6:	4620      	mov	r0, r4
 80039a8:	2201      	movs	r2, #1
 80039aa:	214a      	movs	r1, #74	@ 0x4a
 80039ac:	f7fd fec2 	bl	8001734 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80039b0:	4620      	mov	r0, r4
 80039b2:	2201      	movs	r2, #1
 80039b4:	214b      	movs	r1, #75	@ 0x4b
 80039b6:	f7fd febd 	bl	8001734 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80039ba:	4620      	mov	r0, r4
 80039bc:	2200      	movs	r2, #0
 80039be:	214b      	movs	r1, #75	@ 0x4b
 80039c0:	f7fd feb8 	bl	8001734 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80039c4:	4620      	mov	r0, r4
 80039c6:	2201      	movs	r2, #1
 80039c8:	2156      	movs	r1, #86	@ 0x56
 80039ca:	f7fd feb3 	bl	8001734 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80039ce:	4620      	mov	r0, r4
 80039d0:	2201      	movs	r2, #1
 80039d2:	2158      	movs	r1, #88	@ 0x58
 80039d4:	f7fd feae 	bl	8001734 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80039d8:	4620      	mov	r0, r4
 80039da:	2201      	movs	r2, #1
 80039dc:	2140      	movs	r1, #64	@ 0x40
 80039de:	f7fd fea9 	bl	8001734 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80039e2:	4620      	mov	r0, r4
 80039e4:	22ff      	movs	r2, #255	@ 0xff
 80039e6:	210b      	movs	r1, #11
 80039e8:	f7fd fea4 	bl	8001734 <IOE_Write>
}
 80039ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 80039f0:	2002      	movs	r0, #2
 80039f2:	f7fd bee7 	b.w	80017c4 <IOE_Delay>
	...

080039f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039f8:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <SystemInit+0x18>)
 80039fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80039fe:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8003a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a0a:	609a      	str	r2, [r3, #8]
#endif
}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a14:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a16:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <HAL_Init+0x30>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a26:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a30:	2003      	movs	r0, #3
 8003a32:	f000 f82f 	bl	8003a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7fe f982 	bl	8001d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a3c:	f7fd ff4c 	bl	80018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003a40:	2000      	movs	r0, #0
 8003a42:	bd08      	pop	{r3, pc}
 8003a44:	40023c00 	.word	0x40023c00

08003a48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003a48:	4a03      	ldr	r2, [pc, #12]	@ (8003a58 <HAL_IncTick+0x10>)
 8003a4a:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <HAL_IncTick+0x14>)
 8003a4c:	6811      	ldr	r1, [r2, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	440b      	add	r3, r1
 8003a52:	6013      	str	r3, [r2, #0]
}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	200016d0 	.word	0x200016d0
 8003a5c:	20000078 	.word	0x20000078

08003a60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003a60:	4b01      	ldr	r3, [pc, #4]	@ (8003a68 <HAL_GetTick+0x8>)
 8003a62:	6818      	ldr	r0, [r3, #0]
}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	200016d0 	.word	0x200016d0

08003a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff fff6 	bl	8003a60 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a74:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003a76:	bf1c      	itt	ne
 8003a78:	4b05      	ldrne	r3, [pc, #20]	@ (8003a90 <HAL_Delay+0x24>)
 8003a7a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003a7c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8003a7e:	bf18      	it	ne
 8003a80:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a82:	f7ff ffed 	bl	8003a60 <HAL_GetTick>
 8003a86:	1b43      	subs	r3, r0, r5
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	d3fa      	bcc.n	8003a82 <HAL_Delay+0x16>
  {
  }
}
 8003a8c:	bd38      	pop	{r3, r4, r5, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000078 	.word	0x20000078

08003a94 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a94:	4907      	ldr	r1, [pc, #28]	@ (8003ab4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003a96:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a9c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a9e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aa4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003ab0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003ab2:	4770      	bx	lr
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab8:	4b16      	ldr	r3, [pc, #88]	@ (8003b14 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aba:	b530      	push	{r4, r5, lr}
 8003abc:	68dc      	ldr	r4, [r3, #12]
 8003abe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ac2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	bf28      	it	cs
 8003acc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ace:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ad4:	bf8c      	ite	hi
 8003ad6:	3c03      	subhi	r4, #3
 8003ad8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ada:	fa05 f303 	lsl.w	r3, r5, r3
 8003ade:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae2:	40a5      	lsls	r5, r4
 8003ae4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003aea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af0:	bfac      	ite	ge
 8003af2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af6:	4a08      	ldrlt	r2, [pc, #32]	@ (8003b18 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afc:	bfb8      	it	lt
 8003afe:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	bfaa      	itet	ge
 8003b06:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003b10:	bd30      	pop	{r4, r5, pc}
 8003b12:	bf00      	nop
 8003b14:	e000ed00 	.word	0xe000ed00
 8003b18:	e000ed14 	.word	0xe000ed14

08003b1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	db07      	blt.n	8003b30 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b20:	0941      	lsrs	r1, r0, #5
 8003b22:	4a04      	ldr	r2, [pc, #16]	@ (8003b34 <HAL_NVIC_EnableIRQ+0x18>)
 8003b24:	f000 001f 	and.w	r0, r0, #31
 8003b28:	2301      	movs	r3, #1
 8003b2a:	4083      	lsls	r3, r0
 8003b2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	e000e100 	.word	0xe000e100

08003b38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b38:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	b150      	cbz	r0, 8003b54 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b3e:	7943      	ldrb	r3, [r0, #5]
 8003b40:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003b44:	b913      	cbnz	r3, 8003b4c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003b46:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003b48:	f7fd fee6 	bl	8001918 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8003b50:	2000      	movs	r0, #0
}
 8003b52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003b54:	2001      	movs	r0, #1
 8003b56:	e7fc      	b.n	8003b52 <HAL_CRC_Init+0x1a>

08003b58 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003b58:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	b330      	cbz	r0, 8003bac <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b5e:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8003b62:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003b66:	b91b      	cbnz	r3, 8003b70 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b68:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b6c:	f7fd feec 	bl	8001948 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b70:	6822      	ldr	r2, [r4, #0]
 8003b72:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b74:	2302      	movs	r3, #2
 8003b76:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b84:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003b86:	68a1      	ldr	r1, [r4, #8]
 8003b88:	f023 0307 	bic.w	r3, r3, #7
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6353      	str	r3, [r2, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b90:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003b92:	68e1      	ldr	r1, [r4, #12]
 8003b94:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003b98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ba0:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ba2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ba4:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ba6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 8003baa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003bac:	2001      	movs	r0, #1
 8003bae:	e7fc      	b.n	8003baa <HAL_DMA2D_Init+0x52>

08003bb0 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bb4:	6803      	ldr	r3, [r0, #0]
{
 8003bb6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bb8:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003bba:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003bbc:	07f2      	lsls	r2, r6, #31
{
 8003bbe:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003bc0:	d514      	bpl.n	8003bec <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003bc2:	05e9      	lsls	r1, r5, #23
 8003bc4:	d512      	bpl.n	8003bec <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bcc:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003bce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003bda:	2304      	movs	r3, #4
 8003bdc:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003be0:	2300      	movs	r3, #0
 8003be2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003be6:	6943      	ldr	r3, [r0, #20]
 8003be8:	b103      	cbz	r3, 8003bec <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8003bea:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003bec:	06b2      	lsls	r2, r6, #26
 8003bee:	d516      	bpl.n	8003c1e <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003bf0:	04ab      	lsls	r3, r5, #18
 8003bf2:	d514      	bpl.n	8003c1e <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bfc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003bfe:	2220      	movs	r2, #32
 8003c00:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c02:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c0a:	2304      	movs	r3, #4
 8003c0c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003c10:	2300      	movs	r3, #0
 8003c12:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003c16:	6963      	ldr	r3, [r4, #20]
 8003c18:	b10b      	cbz	r3, 8003c1e <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003c1e:	0730      	lsls	r0, r6, #28
 8003c20:	d516      	bpl.n	8003c50 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003c22:	0529      	lsls	r1, r5, #20
 8003c24:	d514      	bpl.n	8003c50 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003c30:	2208      	movs	r2, #8
 8003c32:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003c34:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003c42:	2300      	movs	r3, #0
 8003c44:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003c48:	6963      	ldr	r3, [r4, #20]
 8003c4a:	b10b      	cbz	r3, 8003c50 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003c50:	0772      	lsls	r2, r6, #29
 8003c52:	d50b      	bpl.n	8003c6c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003c54:	056b      	lsls	r3, r5, #21
 8003c56:	d509      	bpl.n	8003c6c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c60:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003c62:	2204      	movs	r2, #4
 8003c64:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003c66:	4620      	mov	r0, r4
 8003c68:	f7ff ffa2 	bl	8003bb0 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003c6c:	07b0      	lsls	r0, r6, #30
 8003c6e:	d514      	bpl.n	8003c9a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003c70:	05a9      	lsls	r1, r5, #22
 8003c72:	d512      	bpl.n	8003c9a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003c7e:	2202      	movs	r2, #2
 8003c80:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003c82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003c84:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	b10b      	cbz	r3, 8003c9a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8003c96:	4620      	mov	r0, r4
 8003c98:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003c9a:	06f2      	lsls	r2, r6, #27
 8003c9c:	d513      	bpl.n	8003cc6 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003c9e:	04eb      	lsls	r3, r5, #19
 8003ca0:	d511      	bpl.n	8003cc6 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003caa:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003cac:	2210      	movs	r2, #16
 8003cae:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003cb0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003cb2:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f7ff ff76 	bl	8003bb2 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}

08003cc8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cca:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8003cce:	2a01      	cmp	r2, #1
{
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8003cd6:	d02b      	beq.n	8003d30 <HAL_DMA2D_ConfigLayer+0x68>
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003cde:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ce2:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8003ce6:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8003cea:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8003cec:	4f17      	ldr	r7, [pc, #92]	@ (8003d4c <HAL_DMA2D_ConfigLayer+0x84>)
 8003cee:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cf2:	3c09      	subs	r4, #9
 8003cf4:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003cf6:	bf9c      	itt	ls
 8003cf8:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 8003cfc:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003cfe:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d02:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d04:	bf88      	it	hi
 8003d06:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d0a:	b991      	cbnz	r1, 8003d32 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d0c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8003d0e:	4039      	ands	r1, r7
 8003d10:	4301      	orrs	r1, r0
 8003d12:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d14:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d16:	6999      	ldr	r1, [r3, #24]
 8003d18:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d1a:	d803      	bhi.n	8003d24 <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003d1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8003d22:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d24:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d26:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8003d2c:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 8003d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d32:	69d1      	ldr	r1, [r2, #28]
 8003d34:	4039      	ands	r1, r7
 8003d36:	4301      	orrs	r1, r0
 8003d38:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d3a:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d3c:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d3e:	6989      	ldr	r1, [r1, #24]
 8003d40:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d42:	bf9c      	itt	ls
 8003d44:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 8003d48:	6215      	strls	r5, [r2, #32]
 8003d4a:	e7eb      	b.n	8003d24 <HAL_DMA2D_ConfigLayer+0x5c>
 8003d4c:	00fcfff0 	.word	0x00fcfff0

08003d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d54:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8003f14 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d58:	4a6c      	ldr	r2, [pc, #432]	@ (8003f0c <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d5a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d5c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8003d5e:	2401      	movs	r4, #1
 8003d60:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d62:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8003d66:	43ac      	bics	r4, r5
 8003d68:	f040 80b7 	bne.w	8003eda <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d6c:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d6e:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d70:	f005 0403 	and.w	r4, r5, #3
 8003d74:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d78:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d7c:	1e67      	subs	r7, r4, #1
 8003d7e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d80:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d84:	d834      	bhi.n	8003df0 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8003d86:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d88:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d8c:	68cf      	ldr	r7, [r1, #12]
 8003d8e:	fa07 f708 	lsl.w	r7, r7, r8
 8003d92:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003d96:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003d98:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d9a:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d9e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003da2:	409f      	lsls	r7, r3
 8003da4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003da8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003daa:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dac:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003db0:	688f      	ldr	r7, [r1, #8]
 8003db2:	fa07 f708 	lsl.w	r7, r7, r8
 8003db6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dba:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8003dbc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbe:	d119      	bne.n	8003df4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8003dc0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003dc4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dc8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003dcc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dd0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003dd4:	f04f 0e0f 	mov.w	lr, #15
 8003dd8:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003ddc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003de0:	690f      	ldr	r7, [r1, #16]
 8003de2:	fa07 f70b 	lsl.w	r7, r7, fp
 8003de6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003dea:	f8ca 7020 	str.w	r7, [sl, #32]
 8003dee:	e001      	b.n	8003df4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df0:	2c03      	cmp	r4, #3
 8003df2:	d1da      	bne.n	8003daa <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8003df4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df6:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dfa:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dfe:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e00:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003e04:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e06:	d068      	beq.n	8003eda <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e08:	2400      	movs	r4, #0
 8003e0a:	9401      	str	r4, [sp, #4]
 8003e0c:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8003e10:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8003e14:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8003e18:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8003e1c:	f023 0703 	bic.w	r7, r3, #3
 8003e20:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003e24:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8003e28:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8003e2c:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e2e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e32:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003e34:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e38:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003e3c:	240f      	movs	r4, #15
 8003e3e:	fa04 f40c 	lsl.w	r4, r4, ip
 8003e42:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e46:	4c32      	ldr	r4, [pc, #200]	@ (8003f10 <HAL_GPIO_Init+0x1c0>)
 8003e48:	42a0      	cmp	r0, r4
 8003e4a:	d04d      	beq.n	8003ee8 <HAL_GPIO_Init+0x198>
 8003e4c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e50:	42a0      	cmp	r0, r4
 8003e52:	d04b      	beq.n	8003eec <HAL_GPIO_Init+0x19c>
 8003e54:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e58:	42a0      	cmp	r0, r4
 8003e5a:	d049      	beq.n	8003ef0 <HAL_GPIO_Init+0x1a0>
 8003e5c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e60:	42a0      	cmp	r0, r4
 8003e62:	d047      	beq.n	8003ef4 <HAL_GPIO_Init+0x1a4>
 8003e64:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e68:	42a0      	cmp	r0, r4
 8003e6a:	d045      	beq.n	8003ef8 <HAL_GPIO_Init+0x1a8>
 8003e6c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e70:	42a0      	cmp	r0, r4
 8003e72:	d043      	beq.n	8003efc <HAL_GPIO_Init+0x1ac>
 8003e74:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e78:	42a0      	cmp	r0, r4
 8003e7a:	d041      	beq.n	8003f00 <HAL_GPIO_Init+0x1b0>
 8003e7c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e80:	42a0      	cmp	r0, r4
 8003e82:	d03f      	beq.n	8003f04 <HAL_GPIO_Init+0x1b4>
 8003e84:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e88:	42a0      	cmp	r0, r4
 8003e8a:	d03d      	beq.n	8003f08 <HAL_GPIO_Init+0x1b8>
 8003e8c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e90:	42a0      	cmp	r0, r4
 8003e92:	bf14      	ite	ne
 8003e94:	240a      	movne	r4, #10
 8003e96:	2409      	moveq	r4, #9
 8003e98:	fa04 f40c 	lsl.w	r4, r4, ip
 8003e9c:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea0:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8003ea2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003ea4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ea6:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8003eaa:	bf0c      	ite	eq
 8003eac:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003eae:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8003eb0:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8003eb2:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eb4:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8003eb8:	bf0c      	ite	eq
 8003eba:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003ebc:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8003ebe:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8003ec0:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ec2:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003ec6:	bf0c      	ite	eq
 8003ec8:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003eca:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8003ecc:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ece:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ed0:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8003ed2:	bf54      	ite	pl
 8003ed4:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8003ed6:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8003ed8:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eda:	3301      	adds	r3, #1
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	f47f af3d 	bne.w	8003d5c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8003ee2:	b003      	add	sp, #12
 8003ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ee8:	2400      	movs	r4, #0
 8003eea:	e7d5      	b.n	8003e98 <HAL_GPIO_Init+0x148>
 8003eec:	2401      	movs	r4, #1
 8003eee:	e7d3      	b.n	8003e98 <HAL_GPIO_Init+0x148>
 8003ef0:	2402      	movs	r4, #2
 8003ef2:	e7d1      	b.n	8003e98 <HAL_GPIO_Init+0x148>
 8003ef4:	2403      	movs	r4, #3
 8003ef6:	e7cf      	b.n	8003e98 <HAL_GPIO_Init+0x148>
 8003ef8:	2404      	movs	r4, #4
 8003efa:	e7cd      	b.n	8003e98 <HAL_GPIO_Init+0x148>
 8003efc:	2405      	movs	r4, #5
 8003efe:	e7cb      	b.n	8003e98 <HAL_GPIO_Init+0x148>
 8003f00:	2406      	movs	r4, #6
 8003f02:	e7c9      	b.n	8003e98 <HAL_GPIO_Init+0x148>
 8003f04:	2407      	movs	r4, #7
 8003f06:	e7c7      	b.n	8003e98 <HAL_GPIO_Init+0x148>
 8003f08:	2408      	movs	r4, #8
 8003f0a:	e7c5      	b.n	8003e98 <HAL_GPIO_Init+0x148>
 8003f0c:	40013c00 	.word	0x40013c00
 8003f10:	40020000 	.word	0x40020000
 8003f14:	40023800 	.word	0x40023800

08003f18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f18:	6903      	ldr	r3, [r0, #16]
 8003f1a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003f1c:	bf14      	ite	ne
 8003f1e:	2001      	movne	r0, #1
 8003f20:	2000      	moveq	r0, #0
 8003f22:	4770      	bx	lr

08003f24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f24:	b10a      	cbz	r2, 8003f2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f26:	6181      	str	r1, [r0, #24]
  }
}
 8003f28:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f2a:	0409      	lsls	r1, r1, #16
 8003f2c:	e7fb      	b.n	8003f26 <HAL_GPIO_WritePin+0x2>

08003f2e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f2e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f30:	ea01 0203 	and.w	r2, r1, r3
 8003f34:	ea21 0103 	bic.w	r1, r1, r3
 8003f38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003f3c:	6181      	str	r1, [r0, #24]
}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f44:	4a04      	ldr	r2, [pc, #16]	@ (8003f58 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003f46:	6951      	ldr	r1, [r2, #20]
 8003f48:	4201      	tst	r1, r0
{
 8003f4a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f4c:	d002      	beq.n	8003f54 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f4e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f50:	f7ff fff6 	bl	8003f40 <HAL_GPIO_EXTI_Callback>
}
 8003f54:	bd08      	pop	{r3, pc}
 8003f56:	bf00      	nop
 8003f58:	40013c00 	.word	0x40013c00

08003f5c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f5c:	6801      	ldr	r1, [r0, #0]
 8003f5e:	694b      	ldr	r3, [r1, #20]
 8003f60:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	d010      	beq.n	8003f8c <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003f6e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f70:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f72:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f74:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f78:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f7c:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8003f88:	2001      	movs	r0, #1
 8003f8a:	4770      	bx	lr
  }
  return HAL_OK;
 8003f8c:	4618      	mov	r0, r3
}
 8003f8e:	4770      	bx	lr

08003f90 <I2C_WaitOnFlagUntilTimeout>:
{
 8003f90:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8003f94:	4606      	mov	r6, r0
 8003f96:	460f      	mov	r7, r1
 8003f98:	4691      	mov	r9, r2
 8003f9a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003fa0:	6833      	ldr	r3, [r6, #0]
 8003fa2:	f1ba 0f01 	cmp.w	sl, #1
 8003fa6:	bf0c      	ite	eq
 8003fa8:	695c      	ldreq	r4, [r3, #20]
 8003faa:	699c      	ldrne	r4, [r3, #24]
 8003fac:	ea27 0404 	bic.w	r4, r7, r4
 8003fb0:	b2a4      	uxth	r4, r4
 8003fb2:	fab4 f484 	clz	r4, r4
 8003fb6:	0964      	lsrs	r4, r4, #5
 8003fb8:	45a1      	cmp	r9, r4
 8003fba:	d001      	beq.n	8003fc0 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e017      	b.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8003fc0:	1c6a      	adds	r2, r5, #1
 8003fc2:	d0ee      	beq.n	8003fa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7ff fd4c 	bl	8003a60 <HAL_GetTick>
 8003fc8:	9b08      	ldr	r3, [sp, #32]
 8003fca:	1ac0      	subs	r0, r0, r3
 8003fcc:	42a8      	cmp	r0, r5
 8003fce:	d801      	bhi.n	8003fd4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	d1e5      	bne.n	8003fa0 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fd6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd8:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fda:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fde:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe2:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003fe4:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe8:	f042 0220 	orr.w	r2, r2, #32
 8003fec:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8003fee:	2001      	movs	r0, #1
}
 8003ff0:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	460f      	mov	r7, r1
 8003ffc:	4616      	mov	r6, r2
 8003ffe:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004000:	6825      	ldr	r5, [r4, #0]
 8004002:	6968      	ldr	r0, [r5, #20]
 8004004:	ea27 0000 	bic.w	r0, r7, r0
 8004008:	b280      	uxth	r0, r0
 800400a:	b1c0      	cbz	r0, 800403e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800400c:	696b      	ldr	r3, [r5, #20]
 800400e:	055a      	lsls	r2, r3, #21
 8004010:	d517      	bpl.n	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004012:	682b      	ldr	r3, [r5, #0]
 8004014:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004018:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800401e:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004020:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	2300      	movs	r3, #0
 8004024:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004026:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800402e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004030:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004034:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800403c:	2001      	movs	r0, #1
}
 800403e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004042:	1c73      	adds	r3, r6, #1
 8004044:	d0dd      	beq.n	8004002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004046:	f7ff fd0b 	bl	8003a60 <HAL_GetTick>
 800404a:	eba0 0008 	sub.w	r0, r0, r8
 800404e:	42b0      	cmp	r0, r6
 8004050:	d801      	bhi.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8004052:	2e00      	cmp	r6, #0
 8004054:	d1d4      	bne.n	8004000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004056:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004058:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800405a:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800405c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004060:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004064:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004066:	4313      	orrs	r3, r2
 8004068:	e7e4      	b.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800406a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800406a:	b570      	push	{r4, r5, r6, lr}
 800406c:	4604      	mov	r4, r0
 800406e:	460d      	mov	r5, r1
 8004070:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	d501      	bpl.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800407a:	2000      	movs	r0, #0
 800407c:	e01a      	b.n	80040b4 <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800407e:	4620      	mov	r0, r4
 8004080:	f7ff ff6c 	bl	8003f5c <I2C_IsAcknowledgeFailed>
 8004084:	b9a8      	cbnz	r0, 80040b2 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8004086:	1c6a      	adds	r2, r5, #1
 8004088:	d0f3      	beq.n	8004072 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7ff fce9 	bl	8003a60 <HAL_GetTick>
 800408e:	1b80      	subs	r0, r0, r6
 8004090:	42a8      	cmp	r0, r5
 8004092:	d801      	bhi.n	8004098 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004094:	2d00      	cmp	r5, #0
 8004096:	d1ec      	bne.n	8004072 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004098:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800409a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800409c:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800409e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80040a8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ac:	f042 0220 	orr.w	r2, r2, #32
 80040b0:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80040b2:	2001      	movs	r0, #1
}
 80040b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080040b8 <I2C_RequestMemoryWrite>:
{
 80040b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040bc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040be:	6802      	ldr	r2, [r0, #0]
{
 80040c0:	b085      	sub	sp, #20
 80040c2:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 80040c6:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040c8:	6813      	ldr	r3, [r2, #0]
 80040ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ce:	6013      	str	r3, [r2, #0]
{
 80040d0:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040d2:	463b      	mov	r3, r7
 80040d4:	f8cd 8000 	str.w	r8, [sp]
 80040d8:	2200      	movs	r2, #0
 80040da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 80040de:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e0:	f7ff ff56 	bl	8003f90 <I2C_WaitOnFlagUntilTimeout>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	b138      	cbz	r0, 80040f8 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	05db      	lsls	r3, r3, #23
 80040ec:	d502      	bpl.n	80040f4 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040f2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80040f4:	2603      	movs	r6, #3
 80040f6:	e020      	b.n	800413a <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040f8:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80040fc:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040fe:	491a      	ldr	r1, [pc, #104]	@ (8004168 <I2C_RequestMemoryWrite+0xb0>)
 8004100:	4643      	mov	r3, r8
 8004102:	463a      	mov	r2, r7
 8004104:	4620      	mov	r0, r4
 8004106:	f7ff ff75 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410a:	b9a8      	cbnz	r0, 8004138 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	9003      	str	r0, [sp, #12]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	9203      	str	r2, [sp, #12]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004118:	4642      	mov	r2, r8
 800411a:	4639      	mov	r1, r7
 800411c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004120:	f7ff ffa3 	bl	800406a <I2C_WaitOnTXEFlagUntilTimeout>
 8004124:	4606      	mov	r6, r0
 8004126:	b160      	cbz	r0, 8004142 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004128:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800412a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412c:	bf01      	itttt	eq
 800412e:	6822      	ldreq	r2, [r4, #0]
 8004130:	6813      	ldreq	r3, [r2, #0]
 8004132:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004136:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004138:	2601      	movs	r6, #1
}
 800413a:	4630      	mov	r0, r6
 800413c:	b005      	add	sp, #20
 800413e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004142:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004146:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004148:	d102      	bne.n	8004150 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800414a:	b2ed      	uxtb	r5, r5
 800414c:	611d      	str	r5, [r3, #16]
 800414e:	e7f4      	b.n	800413a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004150:	0a2a      	lsrs	r2, r5, #8
 8004152:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004154:	4639      	mov	r1, r7
 8004156:	4642      	mov	r2, r8
 8004158:	4620      	mov	r0, r4
 800415a:	f7ff ff86 	bl	800406a <I2C_WaitOnTXEFlagUntilTimeout>
 800415e:	2800      	cmp	r0, #0
 8004160:	d1e2      	bne.n	8004128 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	e7f1      	b.n	800414a <I2C_RequestMemoryWrite+0x92>
 8004166:	bf00      	nop
 8004168:	00010002 	.word	0x00010002

0800416c <I2C_RequestMemoryRead>:
{
 800416c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004170:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004172:	6803      	ldr	r3, [r0, #0]
{
 8004174:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800417c:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417e:	681a      	ldr	r2, [r3, #0]
{
 8004180:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004184:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004188:	601a      	str	r2, [r3, #0]
{
 800418a:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800418c:	463b      	mov	r3, r7
 800418e:	f8cd 8000 	str.w	r8, [sp]
 8004192:	2200      	movs	r2, #0
 8004194:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004198:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800419a:	f7ff fef9 	bl	8003f90 <I2C_WaitOnFlagUntilTimeout>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	b138      	cbz	r0, 80041b2 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a2:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a4:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a6:	bf44      	itt	mi
 80041a8:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 80041ac:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80041ae:	2003      	movs	r0, #3
 80041b0:	e021      	b.n	80041f6 <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041b2:	fa5f f986 	uxtb.w	r9, r6
 80041b6:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80041ba:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041bc:	492b      	ldr	r1, [pc, #172]	@ (800426c <I2C_RequestMemoryRead+0x100>)
 80041be:	4643      	mov	r3, r8
 80041c0:	463a      	mov	r2, r7
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7ff ff16 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c8:	b9a0      	cbnz	r0, 80041f4 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	9003      	str	r0, [sp, #12]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	9203      	str	r2, [sp, #12]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d6:	4642      	mov	r2, r8
 80041d8:	4639      	mov	r1, r7
 80041da:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041dc:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041de:	f7ff ff44 	bl	800406a <I2C_WaitOnTXEFlagUntilTimeout>
 80041e2:	b158      	cbz	r0, 80041fc <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041e6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	bf01      	itttt	eq
 80041ea:	6822      	ldreq	r2, [r4, #0]
 80041ec:	6813      	ldreq	r3, [r2, #0]
 80041ee:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80041f2:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 80041f4:	2001      	movs	r0, #1
}
 80041f6:	b004      	add	sp, #16
 80041f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041fc:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004200:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004202:	d11a      	bne.n	800423a <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004204:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004206:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004208:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800420a:	4639      	mov	r1, r7
 800420c:	4620      	mov	r0, r4
 800420e:	f7ff ff2c 	bl	800406a <I2C_WaitOnTXEFlagUntilTimeout>
 8004212:	4602      	mov	r2, r0
 8004214:	2800      	cmp	r0, #0
 8004216:	d1e5      	bne.n	80041e4 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004218:	6821      	ldr	r1, [r4, #0]
 800421a:	680b      	ldr	r3, [r1, #0]
 800421c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004220:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004222:	4620      	mov	r0, r4
 8004224:	f8cd 8000 	str.w	r8, [sp]
 8004228:	463b      	mov	r3, r7
 800422a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800422e:	f7ff feaf 	bl	8003f90 <I2C_WaitOnFlagUntilTimeout>
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	b160      	cbz	r0, 8004250 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	e7b4      	b.n	80041a4 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800423a:	0a2a      	lsrs	r2, r5, #8
 800423c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800423e:	4639      	mov	r1, r7
 8004240:	4642      	mov	r2, r8
 8004242:	4620      	mov	r0, r4
 8004244:	f7ff ff11 	bl	800406a <I2C_WaitOnTXEFlagUntilTimeout>
 8004248:	2800      	cmp	r0, #0
 800424a:	d1cb      	bne.n	80041e4 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	e7d9      	b.n	8004204 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004250:	f049 0301 	orr.w	r3, r9, #1
 8004254:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004256:	4905      	ldr	r1, [pc, #20]	@ (800426c <I2C_RequestMemoryRead+0x100>)
 8004258:	4643      	mov	r3, r8
 800425a:	463a      	mov	r2, r7
 800425c:	4620      	mov	r0, r4
 800425e:	f7ff fec9 	bl	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004262:	3800      	subs	r0, #0
 8004264:	bf18      	it	ne
 8004266:	2001      	movne	r0, #1
 8004268:	e7c5      	b.n	80041f6 <I2C_RequestMemoryRead+0x8a>
 800426a:	bf00      	nop
 800426c:	00010002 	.word	0x00010002

08004270 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4604      	mov	r4, r0
 8004274:	460d      	mov	r5, r1
 8004276:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	075b      	lsls	r3, r3, #29
 800427e:	d501      	bpl.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8004280:	2000      	movs	r0, #0
 8004282:	e01a      	b.n	80042ba <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004284:	4620      	mov	r0, r4
 8004286:	f7ff fe69 	bl	8003f5c <I2C_IsAcknowledgeFailed>
 800428a:	b9a8      	cbnz	r0, 80042b8 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800428c:	1c6a      	adds	r2, r5, #1
 800428e:	d0f3      	beq.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004290:	f7ff fbe6 	bl	8003a60 <HAL_GetTick>
 8004294:	1b80      	subs	r0, r0, r6
 8004296:	42a8      	cmp	r0, r5
 8004298:	d801      	bhi.n	800429e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800429a:	2d00      	cmp	r5, #0
 800429c:	d1ec      	bne.n	8004278 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800429e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80042a0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042a2:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042a4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80042ae:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b2:	f042 0220 	orr.w	r2, r2, #32
 80042b6:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80042b8:	2001      	movs	r0, #1
}
 80042ba:	bd70      	pop	{r4, r5, r6, pc}

080042bc <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4604      	mov	r4, r0
 80042c0:	460d      	mov	r5, r1
 80042c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042c4:	6821      	ldr	r1, [r4, #0]
 80042c6:	694b      	ldr	r3, [r1, #20]
 80042c8:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 80042cc:	d001      	beq.n	80042d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80042ce:	2000      	movs	r0, #0
 80042d0:	e011      	b.n	80042f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042d2:	694a      	ldr	r2, [r1, #20]
 80042d4:	06d2      	lsls	r2, r2, #27
 80042d6:	d50f      	bpl.n	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d8:	f06f 0210 	mvn.w	r2, #16
 80042dc:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80042de:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042e0:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80042ee:	2300      	movs	r3, #0
 80042f0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80042f4:	2001      	movs	r0, #1
}
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f8:	f7ff fbb2 	bl	8003a60 <HAL_GetTick>
 80042fc:	1b80      	subs	r0, r0, r6
 80042fe:	42a8      	cmp	r0, r5
 8004300:	d801      	bhi.n	8004306 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004302:	2d00      	cmp	r5, #0
 8004304:	d1de      	bne.n	80042c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004306:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004308:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800430a:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800430c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004310:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004316:	4313      	orrs	r3, r2
 8004318:	e7e8      	b.n	80042ec <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

0800431c <HAL_I2C_Init>:
{
 800431c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800431e:	4604      	mov	r4, r0
 8004320:	b908      	cbnz	r0, 8004326 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8004322:	2001      	movs	r0, #1
}
 8004324:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004326:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800432a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800432e:	b91b      	cbnz	r3, 8004338 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8004330:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004334:	f7fd fb2a 	bl	800198c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004338:	2324      	movs	r3, #36	@ 0x24
 800433a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800434e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004356:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004358:	f000 fe70 	bl	800503c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800435c:	4b3f      	ldr	r3, [pc, #252]	@ (800445c <HAL_I2C_Init+0x140>)
 800435e:	6865      	ldr	r5, [r4, #4]
 8004360:	429d      	cmp	r5, r3
 8004362:	bf94      	ite	ls
 8004364:	4b3e      	ldrls	r3, [pc, #248]	@ (8004460 <HAL_I2C_Init+0x144>)
 8004366:	4b3f      	ldrhi	r3, [pc, #252]	@ (8004464 <HAL_I2C_Init+0x148>)
 8004368:	4298      	cmp	r0, r3
 800436a:	bf8c      	ite	hi
 800436c:	2300      	movhi	r3, #0
 800436e:	2301      	movls	r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1d6      	bne.n	8004322 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004374:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004376:	4e39      	ldr	r6, [pc, #228]	@ (800445c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004378:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800437a:	4b3b      	ldr	r3, [pc, #236]	@ (8004468 <HAL_I2C_Init+0x14c>)
 800437c:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004380:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004384:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004386:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004388:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800438a:	bf88      	it	hi
 800438c:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 8004390:	6a11      	ldr	r1, [r2, #32]
 8004392:	bf88      	it	hi
 8004394:	4373      	mulhi	r3, r6
 8004396:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800439a:	bf84      	itt	hi
 800439c:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 80043a0:	fbb3 f3f6 	udivhi	r3, r3, r6
 80043a4:	3301      	adds	r3, #1
 80043a6:	430b      	orrs	r3, r1
 80043a8:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043aa:	69d1      	ldr	r1, [r2, #28]
 80043ac:	1e43      	subs	r3, r0, #1
 80043ae:	482b      	ldr	r0, [pc, #172]	@ (800445c <HAL_I2C_Init+0x140>)
 80043b0:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80043b4:	4285      	cmp	r5, r0
 80043b6:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80043ba:	d832      	bhi.n	8004422 <HAL_I2C_Init+0x106>
 80043bc:	006d      	lsls	r5, r5, #1
 80043be:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80043c2:	fbb3 f3f5 	udiv	r3, r3, r5
 80043c6:	3301      	adds	r3, #1
 80043c8:	4203      	tst	r3, r0
 80043ca:	d042      	beq.n	8004452 <HAL_I2C_Init+0x136>
 80043cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d0:	4319      	orrs	r1, r3
 80043d2:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043d4:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80043d8:	6811      	ldr	r1, [r2, #0]
 80043da:	4303      	orrs	r3, r0
 80043dc:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043e4:	6891      	ldr	r1, [r2, #8]
 80043e6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80043ea:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80043ee:	4303      	orrs	r3, r0
 80043f0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80043f4:	430b      	orrs	r3, r1
 80043f6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043f8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80043fc:	68d1      	ldr	r1, [r2, #12]
 80043fe:	4303      	orrs	r3, r0
 8004400:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004404:	430b      	orrs	r3, r1
 8004406:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004408:	6813      	ldr	r3, [r2, #0]
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004410:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004412:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004414:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004416:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800441a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800441c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8004420:	e780      	b.n	8004324 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004422:	68a0      	ldr	r0, [r4, #8]
 8004424:	b950      	cbnz	r0, 800443c <HAL_I2C_Init+0x120>
 8004426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800442a:	fbb3 f3f5 	udiv	r3, r3, r5
 800442e:	3301      	adds	r3, #1
 8004430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004434:	b17b      	cbz	r3, 8004456 <HAL_I2C_Init+0x13a>
 8004436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800443a:	e7c9      	b.n	80043d0 <HAL_I2C_Init+0xb4>
 800443c:	2019      	movs	r0, #25
 800443e:	4368      	muls	r0, r5
 8004440:	fbb3 f3f0 	udiv	r3, r3, r0
 8004444:	3301      	adds	r3, #1
 8004446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444a:	b123      	cbz	r3, 8004456 <HAL_I2C_Init+0x13a>
 800444c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004450:	e7be      	b.n	80043d0 <HAL_I2C_Init+0xb4>
 8004452:	2304      	movs	r3, #4
 8004454:	e7bc      	b.n	80043d0 <HAL_I2C_Init+0xb4>
 8004456:	2301      	movs	r3, #1
 8004458:	e7ba      	b.n	80043d0 <HAL_I2C_Init+0xb4>
 800445a:	bf00      	nop
 800445c:	000186a0 	.word	0x000186a0
 8004460:	001e847f 	.word	0x001e847f
 8004464:	003d08ff 	.word	0x003d08ff
 8004468:	000f4240 	.word	0x000f4240

0800446c <HAL_I2C_Mem_Write>:
{
 800446c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004470:	4604      	mov	r4, r0
 8004472:	4699      	mov	r9, r3
 8004474:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004476:	460f      	mov	r7, r1
 8004478:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800447a:	f7ff faf1 	bl	8003a60 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800447e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8004482:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8004484:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004486:	d003      	beq.n	8004490 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8004488:	2002      	movs	r0, #2
}
 800448a:	b003      	add	sp, #12
 800448c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004490:	9000      	str	r0, [sp, #0]
 8004492:	493c      	ldr	r1, [pc, #240]	@ (8004584 <HAL_I2C_Mem_Write+0x118>)
 8004494:	2319      	movs	r3, #25
 8004496:	2201      	movs	r2, #1
 8004498:	4620      	mov	r0, r4
 800449a:	f7ff fd79 	bl	8003f90 <I2C_WaitOnFlagUntilTimeout>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d1f2      	bne.n	8004488 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80044a2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d0ee      	beq.n	8004488 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044aa:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80044ac:	2301      	movs	r3, #1
 80044ae:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044b2:	6803      	ldr	r3, [r0, #0]
 80044b4:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80044b6:	bf5e      	ittt	pl
 80044b8:	6803      	ldrpl	r3, [r0, #0]
 80044ba:	f043 0301 	orrpl.w	r3, r3, #1
 80044be:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044c0:	6803      	ldr	r3, [r0, #0]
 80044c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044c6:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044c8:	2321      	movs	r3, #33	@ 0x21
 80044ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044ce:	2340      	movs	r3, #64	@ 0x40
 80044d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80044d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044da:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044dc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80044e0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80044e4:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e6:	4b28      	ldr	r3, [pc, #160]	@ (8004588 <HAL_I2C_Mem_Write+0x11c>)
 80044e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ea:	4642      	mov	r2, r8
 80044ec:	e9cd 6500 	strd	r6, r5, [sp]
 80044f0:	464b      	mov	r3, r9
 80044f2:	4639      	mov	r1, r7
 80044f4:	4620      	mov	r0, r4
 80044f6:	f7ff fddf 	bl	80040b8 <I2C_RequestMemoryWrite>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d02a      	beq.n	8004554 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 80044fe:	2001      	movs	r0, #1
 8004500:	e7c3      	b.n	800448a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004502:	f7ff fdb2 	bl	800406a <I2C_WaitOnTXEFlagUntilTimeout>
 8004506:	b140      	cbz	r0, 800451a <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800450a:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450c:	bf01      	itttt	eq
 800450e:	6822      	ldreq	r2, [r4, #0]
 8004510:	6813      	ldreq	r3, [r2, #0]
 8004512:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004516:	6013      	streq	r3, [r2, #0]
 8004518:	e7f1      	b.n	80044fe <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800451a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800451c:	6827      	ldr	r7, [r4, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004524:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8004526:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004528:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800452a:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800452c:	3a01      	subs	r2, #1
 800452e:	b292      	uxth	r2, r2
 8004530:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004532:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8004534:	1e48      	subs	r0, r1, #1
 8004536:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004538:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800453a:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800453c:	d50a      	bpl.n	8004554 <HAL_I2C_Mem_Write+0xe8>
 800453e:	b148      	cbz	r0, 8004554 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004540:	785a      	ldrb	r2, [r3, #1]
 8004542:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8004544:	3302      	adds	r3, #2
 8004546:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8004548:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800454a:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 800454c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800454e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8004550:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8004552:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004554:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004556:	462a      	mov	r2, r5
 8004558:	4631      	mov	r1, r6
 800455a:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1d0      	bne.n	8004502 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004560:	f7ff fe86 	bl	8004270 <I2C_WaitOnBTFFlagUntilTimeout>
 8004564:	2800      	cmp	r0, #0
 8004566:	d1cf      	bne.n	8004508 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	6822      	ldr	r2, [r4, #0]
 800456a:	6813      	ldr	r3, [r2, #0]
 800456c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004570:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004572:	2320      	movs	r3, #32
 8004574:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8004578:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800457c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8004580:	e783      	b.n	800448a <HAL_I2C_Mem_Write+0x1e>
 8004582:	bf00      	nop
 8004584:	00100002 	.word	0x00100002
 8004588:	ffff0000 	.word	0xffff0000

0800458c <HAL_I2C_Mem_Read>:
{
 800458c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004590:	4604      	mov	r4, r0
 8004592:	b087      	sub	sp, #28
 8004594:	4699      	mov	r9, r3
 8004596:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8004598:	460d      	mov	r5, r1
 800459a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800459c:	f7ff fa60 	bl	8003a60 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80045a4:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80045a6:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a8:	d004      	beq.n	80045b4 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 80045aa:	2502      	movs	r5, #2
}
 80045ac:	4628      	mov	r0, r5
 80045ae:	b007      	add	sp, #28
 80045b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045b4:	9000      	str	r0, [sp, #0]
 80045b6:	4976      	ldr	r1, [pc, #472]	@ (8004790 <HAL_I2C_Mem_Read+0x204>)
 80045b8:	2319      	movs	r3, #25
 80045ba:	2201      	movs	r2, #1
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff fce7 	bl	8003f90 <I2C_WaitOnFlagUntilTimeout>
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d1f1      	bne.n	80045aa <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80045c6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d0ed      	beq.n	80045aa <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045ce:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80045d0:	2301      	movs	r3, #1
 80045d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045d6:	6803      	ldr	r3, [r0, #0]
 80045d8:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80045da:	bf5e      	ittt	pl
 80045dc:	6803      	ldrpl	r3, [r0, #0]
 80045de:	f043 0301 	orrpl.w	r3, r3, #1
 80045e2:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045e4:	6803      	ldr	r3, [r0, #0]
 80045e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045ea:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045ec:	2322      	movs	r3, #34	@ 0x22
 80045ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045f2:	2340      	movs	r3, #64	@ 0x40
 80045f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80045fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045fe:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004600:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8004604:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004606:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004608:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800460a:	4b62      	ldr	r3, [pc, #392]	@ (8004794 <HAL_I2C_Mem_Read+0x208>)
 800460c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800460e:	4629      	mov	r1, r5
 8004610:	e9cd 7600 	strd	r7, r6, [sp]
 8004614:	464b      	mov	r3, r9
 8004616:	4642      	mov	r2, r8
 8004618:	4620      	mov	r0, r4
 800461a:	f7ff fda7 	bl	800416c <I2C_RequestMemoryRead>
 800461e:	4605      	mov	r5, r0
 8004620:	b108      	cbz	r0, 8004626 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8004622:	2501      	movs	r5, #1
 8004624:	e7c2      	b.n	80045ac <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8004626:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004628:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800462a:	b9b2      	cbnz	r2, 800465a <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800462c:	9002      	str	r0, [sp, #8]
 800462e:	695a      	ldr	r2, [r3, #20]
 8004630:	9202      	str	r2, [sp, #8]
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	9202      	str	r2, [sp, #8]
 8004636:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800463e:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004640:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 8004798 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8004644:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d12c      	bne.n	80046a4 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 800464a:	2220      	movs	r2, #32
 800464c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8004650:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004654:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8004658:	e7a8      	b.n	80045ac <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800465a:	2a01      	cmp	r2, #1
 800465c:	d10a      	bne.n	8004674 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004664:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004666:	9003      	str	r0, [sp, #12]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	9203      	str	r2, [sp, #12]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	9203      	str	r2, [sp, #12]
 8004670:	9a03      	ldr	r2, [sp, #12]
 8004672:	e7e1      	b.n	8004638 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8004674:	2a02      	cmp	r2, #2
 8004676:	d10e      	bne.n	8004696 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004686:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004688:	9004      	str	r0, [sp, #16]
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	9204      	str	r2, [sp, #16]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	9b04      	ldr	r3, [sp, #16]
 8004694:	e7d4      	b.n	8004640 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004696:	9005      	str	r0, [sp, #20]
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	9205      	str	r2, [sp, #20]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	9305      	str	r3, [sp, #20]
 80046a0:	9b05      	ldr	r3, [sp, #20]
 80046a2:	e7cd      	b.n	8004640 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d856      	bhi.n	8004756 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d115      	bne.n	80046d8 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ac:	4632      	mov	r2, r6
 80046ae:	4639      	mov	r1, r7
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff fe03 	bl	80042bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d1b3      	bne.n	8004622 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80046c0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80046c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80046c4:	3301      	adds	r3, #1
 80046c6:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80046c8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80046ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80046d6:	e7b5      	b.n	8004644 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 80046d8:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046da:	9600      	str	r6, [sp, #0]
 80046dc:	463b      	mov	r3, r7
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	4641      	mov	r1, r8
 80046e4:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80046e6:	d119      	bne.n	800471c <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046e8:	f7ff fc52 	bl	8003f90 <I2C_WaitOnFlagUntilTimeout>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d198      	bne.n	8004622 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80046fe:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004700:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004702:	1c53      	adds	r3, r2, #1
 8004704:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8004706:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004708:	3b01      	subs	r3, #1
 800470a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800470c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800470e:	3b01      	subs	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004714:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	7053      	strb	r3, [r2, #1]
 800471a:	e7d2      	b.n	80046c2 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800471c:	f7ff fc38 	bl	8003f90 <I2C_WaitOnFlagUntilTimeout>
 8004720:	4602      	mov	r2, r0
 8004722:	2800      	cmp	r0, #0
 8004724:	f47f af7d 	bne.w	8004622 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	6819      	ldr	r1, [r3, #0]
 800472c:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8004730:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004732:	6919      	ldr	r1, [r3, #16]
 8004734:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004736:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8004738:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800473a:	3301      	adds	r3, #1
 800473c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800473e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004740:	3b01      	subs	r3, #1
 8004742:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004744:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004746:	3b01      	subs	r3, #1
 8004748:	b29b      	uxth	r3, r3
 800474a:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800474c:	4641      	mov	r1, r8
 800474e:	9600      	str	r6, [sp, #0]
 8004750:	463b      	mov	r3, r7
 8004752:	4620      	mov	r0, r4
 8004754:	e7c8      	b.n	80046e8 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004756:	4632      	mov	r2, r6
 8004758:	4639      	mov	r1, r7
 800475a:	4620      	mov	r0, r4
 800475c:	f7ff fdae 	bl	80042bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004760:	2800      	cmp	r0, #0
 8004762:	f47f af5e 	bne.w	8004622 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800476c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800476e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004770:	1c53      	adds	r3, r2, #1
 8004772:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8004774:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800477a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800477c:	3b01      	subs	r3, #1
 800477e:	b29b      	uxth	r3, r3
 8004780:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	6959      	ldr	r1, [r3, #20]
 8004786:	0749      	lsls	r1, r1, #29
 8004788:	f57f af5c 	bpl.w	8004644 <HAL_I2C_Mem_Read+0xb8>
 800478c:	e7c3      	b.n	8004716 <HAL_I2C_Mem_Read+0x18a>
 800478e:	bf00      	nop
 8004790:	00100002 	.word	0x00100002
 8004794:	ffff0000 	.word	0xffff0000
 8004798:	00010004 	.word	0x00010004

0800479c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800479c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800479e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	b2dc      	uxtb	r4, r3
 80047a6:	d116      	bne.n	80047d6 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047a8:	2324      	movs	r3, #36	@ 0x24
 80047aa:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ae:	6803      	ldr	r3, [r0, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80047b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047ba:	f022 0210 	bic.w	r2, r2, #16
 80047be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80047c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047c2:	4311      	orrs	r1, r2
 80047c4:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ce:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 80047d2:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80047d4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80047d6:	2002      	movs	r0, #2
 80047d8:	e7fc      	b.n	80047d4 <HAL_I2CEx_ConfigAnalogFilter+0x38>

080047da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047da:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047dc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	b2dc      	uxtb	r4, r3
 80047e4:	d116      	bne.n	8004814 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e6:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e8:	2324      	movs	r3, #36	@ 0x24
 80047ea:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80047ee:	6813      	ldr	r3, [r2, #0]
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80047f6:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80047f8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80047fc:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80047fe:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004800:	b29b      	uxth	r3, r3
 8004802:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004804:	6813      	ldr	r3, [r2, #0]
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800480c:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8004810:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004812:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 8004814:	2002      	movs	r0, #2
 8004816:	e7fc      	b.n	8004812 <HAL_I2CEx_ConfigDigitalFilter+0x38>

08004818 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004818:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800481a:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800481e:	01d2      	lsls	r2, r2, #7
 8004820:	3284      	adds	r2, #132	@ 0x84
 8004822:	1883      	adds	r3, r0, r2
{
 8004824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004828:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800482a:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800482c:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800482e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004832:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8004836:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004838:	68c5      	ldr	r5, [r0, #12]
 800483a:	f10c 0701 	add.w	r7, ip, #1
 800483e:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004842:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004846:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004848:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800484a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800484e:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004850:	68c6      	ldr	r6, [r0, #12]
 8004852:	68cd      	ldr	r5, [r1, #12]
 8004854:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004858:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800485a:	689d      	ldr	r5, [r3, #8]
 800485c:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8004860:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004862:	68c7      	ldr	r7, [r0, #12]
 8004864:	688d      	ldr	r5, [r1, #8]
 8004866:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800486a:	3501      	adds	r5, #1
 800486c:	443d      	add	r5, r7
 800486e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8004872:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004874:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004876:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004878:	f025 0507 	bic.w	r5, r5, #7
 800487c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800487e:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004882:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004884:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004886:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800488a:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800488e:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004892:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8004896:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800489a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800489e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80048a2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80048a4:	695d      	ldr	r5, [r3, #20]
 80048a6:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80048aa:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80048ac:	694d      	ldr	r5, [r1, #20]
 80048ae:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048b0:	69dd      	ldr	r5, [r3, #28]
 80048b2:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80048b6:	f025 0507 	bic.w	r5, r5, #7
 80048ba:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80048bc:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80048c0:	433d      	orrs	r5, r7
 80048c2:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80048c4:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80048c6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80048c8:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80048cc:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80048ce:	b31e      	cbz	r6, 8004918 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80048d0:	2e01      	cmp	r6, #1
 80048d2:	d023      	beq.n	800491c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048d4:	1eb5      	subs	r5, r6, #2
 80048d6:	2d02      	cmp	r5, #2
 80048d8:	d922      	bls.n	8004920 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80048da:	2e07      	cmp	r6, #7
 80048dc:	bf14      	ite	ne
 80048de:	2501      	movne	r5, #1
 80048e0:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80048e2:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80048e4:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
 80048e8:	62de      	str	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80048ea:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80048ee:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80048f0:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80048f2:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80048f4:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80048f6:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80048f8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80048fc:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80048fe:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004900:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8004904:	f024 0407 	bic.w	r4, r4, #7
 8004908:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800490a:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800490c:	5883      	ldr	r3, [r0, r2]
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	5083      	str	r3, [r0, r2]
}
 8004914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8004918:	2504      	movs	r5, #4
 800491a:	e7e2      	b.n	80048e2 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800491c:	2503      	movs	r5, #3
 800491e:	e7e0      	b.n	80048e2 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8004920:	2502      	movs	r5, #2
 8004922:	e7de      	b.n	80048e2 <LTDC_SetConfig+0xca>

08004924 <HAL_LTDC_Init>:
{
 8004924:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004926:	4604      	mov	r4, r0
 8004928:	2800      	cmp	r0, #0
 800492a:	d063      	beq.n	80049f4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800492c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8004930:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004934:	b91b      	cbnz	r3, 800493e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004936:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800493a:	f7fd f883 	bl	8001a44 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800493e:	2302      	movs	r3, #2
 8004940:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	699a      	ldr	r2, [r3, #24]
 8004948:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800494c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800494e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004952:	4302      	orrs	r2, r0
 8004954:	68e0      	ldr	r0, [r4, #12]
 8004956:	6999      	ldr	r1, [r3, #24]
 8004958:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800495a:	6920      	ldr	r0, [r4, #16]
 800495c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800495e:	430a      	orrs	r2, r1
 8004960:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	4924      	ldr	r1, [pc, #144]	@ (80049f8 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004966:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004968:	400a      	ands	r2, r1
 800496a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004972:	69a0      	ldr	r0, [r4, #24]
 8004974:	4302      	orrs	r2, r0
 8004976:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004978:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800497a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800497c:	400a      	ands	r2, r1
 800497e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004986:	6a20      	ldr	r0, [r4, #32]
 8004988:	4302      	orrs	r2, r0
 800498a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800498c:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800498e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004990:	400a      	ands	r2, r1
 8004992:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800499a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800499c:	4302      	orrs	r2, r0
 800499e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	400a      	ands	r2, r1
 80049a4:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80049a6:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80049a8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80049aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80049ae:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80049b0:	430a      	orrs	r2, r1
 80049b2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80049b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80049b6:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80049ba:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80049be:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80049c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80049c4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80049c6:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 80049ca:	432a      	orrs	r2, r5
 80049cc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80049d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80049d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80049d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049d8:	f042 0206 	orr.w	r2, r2, #6
 80049dc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	f042 0201 	orr.w	r2, r2, #1
 80049e4:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80049e6:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80049e8:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80049ea:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80049ee:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80049f4:	2001      	movs	r0, #1
 80049f6:	e7fc      	b.n	80049f2 <HAL_LTDC_Init+0xce>
 80049f8:	f000f800 	.word	0xf000f800

080049fc <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 80049fc:	4770      	bx	lr

080049fe <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 80049fe:	4770      	bx	lr

08004a00 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004a00:	6803      	ldr	r3, [r0, #0]
{
 8004a02:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004a04:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004a06:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004a08:	0772      	lsls	r2, r6, #29
{
 8004a0a:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004a0c:	d514      	bpl.n	8004a38 <HAL_LTDC_IRQHandler+0x38>
 8004a0e:	0769      	lsls	r1, r5, #29
 8004a10:	d512      	bpl.n	8004a38 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a14:	f022 0204 	bic.w	r2, r2, #4
 8004a18:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004a1e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8004a2a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004a2c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004a30:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004a34:	f7ff ffe2 	bl	80049fc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004a38:	07b2      	lsls	r2, r6, #30
 8004a3a:	d516      	bpl.n	8004a6a <HAL_LTDC_IRQHandler+0x6a>
 8004a3c:	07ab      	lsls	r3, r5, #30
 8004a3e:	d514      	bpl.n	8004a6a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a44:	f022 0202 	bic.w	r2, r2, #2
 8004a48:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004a4e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004a58:	2304      	movs	r3, #4
 8004a5a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff ffc9 	bl	80049fc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004a6a:	07f0      	lsls	r0, r6, #31
 8004a6c:	d510      	bpl.n	8004a90 <HAL_LTDC_IRQHandler+0x90>
 8004a6e:	07e9      	lsls	r1, r5, #31
 8004a70:	d50e      	bpl.n	8004a90 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8004a80:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8004a82:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004a86:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f7fc fbb4 	bl	80011f8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004a90:	0732      	lsls	r2, r6, #28
 8004a92:	d511      	bpl.n	8004ab8 <HAL_LTDC_IRQHandler+0xb8>
 8004a94:	072b      	lsls	r3, r5, #28
 8004a96:	d50f      	bpl.n	8004ab8 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a9c:	f022 0208 	bic.w	r2, r2, #8
 8004aa0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004aac:	2300      	movs	r3, #0
 8004aae:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f7ff ffa3 	bl	80049fe <HAL_LTDC_ReloadEventCallback>
}
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}

08004aba <HAL_LTDC_ConfigLayer>:
{
 8004aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004abe:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8004ac2:	2b01      	cmp	r3, #1
{
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	460f      	mov	r7, r1
 8004ac8:	4694      	mov	ip, r2
 8004aca:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8004ace:	d01f      	beq.n	8004b10 <HAL_LTDC_ConfigLayer+0x56>
 8004ad0:	f04f 0801 	mov.w	r8, #1
 8004ad4:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ad8:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004adc:	2434      	movs	r4, #52	@ 0x34
 8004ade:	460d      	mov	r5, r1
 8004ae0:	fb04 6402 	mla	r4, r4, r2, r6
 8004ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ae6:	3438      	adds	r4, #56	@ 0x38
 8004ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af2:	682b      	ldr	r3, [r5, #0]
 8004af4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004af6:	4630      	mov	r0, r6
 8004af8:	4662      	mov	r2, ip
 8004afa:	4639      	mov	r1, r7
 8004afc:	f7ff fe8c 	bl	8004818 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b00:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004b02:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b04:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004b08:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8004b0c:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8004b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004b14 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8004b14:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 8004b18:	2a01      	cmp	r2, #1
{
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8004b20:	d012      	beq.n	8004b48 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004b22:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b24:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004b28:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8004b2a:	f020 0001 	bic.w	r0, r0, #1
 8004b2e:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8004b30:	4806      	ldr	r0, [pc, #24]	@ (8004b4c <HAL_LTDC_ProgramLineEvent+0x38>)
 8004b32:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004b34:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8004b36:	f041 0101 	orr.w	r1, r1, #1
 8004b3a:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 8004b3c:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8004b44:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40016800 	.word	0x40016800

08004b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b54:	4604      	mov	r4, r0
 8004b56:	b340      	cbz	r0, 8004baa <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b58:	6803      	ldr	r3, [r0, #0]
 8004b5a:	07de      	lsls	r6, r3, #31
 8004b5c:	d410      	bmi.n	8004b80 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	079d      	lsls	r5, r3, #30
 8004b62:	d45b      	bmi.n	8004c1c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	0719      	lsls	r1, r3, #28
 8004b68:	f100 809d 	bmi.w	8004ca6 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	075a      	lsls	r2, r3, #29
 8004b70:	f100 80bd 	bmi.w	8004cee <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b74:	69a3      	ldr	r3, [r4, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 8124 	bne.w	8004dc4 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e02c      	b.n	8004bda <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b80:	4b8d      	ldr	r3, [pc, #564]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	f002 020c 	and.w	r2, r2, #12
 8004b88:	2a04      	cmp	r2, #4
 8004b8a:	d007      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b92:	2a08      	cmp	r2, #8
 8004b94:	d10b      	bne.n	8004bae <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	0259      	lsls	r1, r3, #9
 8004b9a:	d508      	bpl.n	8004bae <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9c:	4b86      	ldr	r3, [pc, #536]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	039a      	lsls	r2, r3, #14
 8004ba2:	d5dc      	bpl.n	8004b5e <HAL_RCC_OscConfig+0xe>
 8004ba4:	6863      	ldr	r3, [r4, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1d9      	bne.n	8004b5e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8004baa:	2001      	movs	r0, #1
 8004bac:	e015      	b.n	8004bda <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	4d81      	ldr	r5, [pc, #516]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
 8004bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb6:	d113      	bne.n	8004be0 <HAL_RCC_OscConfig+0x90>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bbe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004bc0:	f7fe ff4e 	bl	8003a60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc4:	4e7c      	ldr	r6, [pc, #496]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8004bc6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc8:	6833      	ldr	r3, [r6, #0]
 8004bca:	039b      	lsls	r3, r3, #14
 8004bcc:	d4c7      	bmi.n	8004b5e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bce:	f7fe ff47 	bl	8003a60 <HAL_GetTick>
 8004bd2:	1b40      	subs	r0, r0, r5
 8004bd4:	2864      	cmp	r0, #100	@ 0x64
 8004bd6:	d9f7      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8004bd8:	2003      	movs	r0, #3
}
 8004bda:	b002      	add	sp, #8
 8004bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004be4:	d104      	bne.n	8004bf0 <HAL_RCC_OscConfig+0xa0>
 8004be6:	682b      	ldr	r3, [r5, #0]
 8004be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	e7e3      	b.n	8004bb8 <HAL_RCC_OscConfig+0x68>
 8004bf0:	682a      	ldr	r2, [r5, #0]
 8004bf2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004bf6:	602a      	str	r2, [r5, #0]
 8004bf8:	682a      	ldr	r2, [r5, #0]
 8004bfa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004bfe:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1dd      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8004c04:	f7fe ff2c 	bl	8003a60 <HAL_GetTick>
 8004c08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0a:	682b      	ldr	r3, [r5, #0]
 8004c0c:	039f      	lsls	r7, r3, #14
 8004c0e:	d5a6      	bpl.n	8004b5e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c10:	f7fe ff26 	bl	8003a60 <HAL_GetTick>
 8004c14:	1b80      	subs	r0, r0, r6
 8004c16:	2864      	cmp	r0, #100	@ 0x64
 8004c18:	d9f7      	bls.n	8004c0a <HAL_RCC_OscConfig+0xba>
 8004c1a:	e7dd      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c1c:	4b66      	ldr	r3, [pc, #408]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	f012 0f0c 	tst.w	r2, #12
 8004c24:	d007      	beq.n	8004c36 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c2c:	2a08      	cmp	r2, #8
 8004c2e:	d111      	bne.n	8004c54 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	025d      	lsls	r5, r3, #9
 8004c34:	d40e      	bmi.n	8004c54 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c36:	4a60      	ldr	r2, [pc, #384]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	0799      	lsls	r1, r3, #30
 8004c3c:	d502      	bpl.n	8004c44 <HAL_RCC_OscConfig+0xf4>
 8004c3e:	68e3      	ldr	r3, [r4, #12]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d1b2      	bne.n	8004baa <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c44:	6813      	ldr	r3, [r2, #0]
 8004c46:	6921      	ldr	r1, [r4, #16]
 8004c48:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004c4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c50:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	e787      	b.n	8004b64 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c54:	68e2      	ldr	r2, [r4, #12]
 8004c56:	4b59      	ldr	r3, [pc, #356]	@ (8004dbc <HAL_RCC_OscConfig+0x26c>)
 8004c58:	b1b2      	cbz	r2, 8004c88 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c5e:	f7fe feff 	bl	8003a60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c62:	4d55      	ldr	r5, [pc, #340]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8004c64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c66:	682b      	ldr	r3, [r5, #0]
 8004c68:	079b      	lsls	r3, r3, #30
 8004c6a:	d507      	bpl.n	8004c7c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	6922      	ldr	r2, [r4, #16]
 8004c70:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004c74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004c78:	602b      	str	r3, [r5, #0]
 8004c7a:	e773      	b.n	8004b64 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fe fef0 	bl	8003a60 <HAL_GetTick>
 8004c80:	1b80      	subs	r0, r0, r6
 8004c82:	2802      	cmp	r0, #2
 8004c84:	d9ef      	bls.n	8004c66 <HAL_RCC_OscConfig+0x116>
 8004c86:	e7a7      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8004c88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c8a:	f7fe fee9 	bl	8003a60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4e4a      	ldr	r6, [pc, #296]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8004c90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c92:	6833      	ldr	r3, [r6, #0]
 8004c94:	079f      	lsls	r7, r3, #30
 8004c96:	f57f af65 	bpl.w	8004b64 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c9a:	f7fe fee1 	bl	8003a60 <HAL_GetTick>
 8004c9e:	1b40      	subs	r0, r0, r5
 8004ca0:	2802      	cmp	r0, #2
 8004ca2:	d9f6      	bls.n	8004c92 <HAL_RCC_OscConfig+0x142>
 8004ca4:	e798      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ca6:	6962      	ldr	r2, [r4, #20]
 8004ca8:	4b44      	ldr	r3, [pc, #272]	@ (8004dbc <HAL_RCC_OscConfig+0x26c>)
 8004caa:	b182      	cbz	r2, 8004cce <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8004cac:	2201      	movs	r2, #1
 8004cae:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004cb2:	f7fe fed5 	bl	8003a60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb6:	4e40      	ldr	r6, [pc, #256]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8004cb8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cba:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004cbc:	079b      	lsls	r3, r3, #30
 8004cbe:	f53f af55 	bmi.w	8004b6c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cc2:	f7fe fecd 	bl	8003a60 <HAL_GetTick>
 8004cc6:	1b40      	subs	r0, r0, r5
 8004cc8:	2802      	cmp	r0, #2
 8004cca:	d9f6      	bls.n	8004cba <HAL_RCC_OscConfig+0x16a>
 8004ccc:	e784      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8004cce:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004cd2:	f7fe fec5 	bl	8003a60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd6:	4e38      	ldr	r6, [pc, #224]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8004cd8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cda:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004cdc:	079f      	lsls	r7, r3, #30
 8004cde:	f57f af45 	bpl.w	8004b6c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce2:	f7fe febd 	bl	8003a60 <HAL_GetTick>
 8004ce6:	1b40      	subs	r0, r0, r5
 8004ce8:	2802      	cmp	r0, #2
 8004cea:	d9f6      	bls.n	8004cda <HAL_RCC_OscConfig+0x18a>
 8004cec:	e774      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cee:	4b32      	ldr	r3, [pc, #200]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
 8004cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cf2:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8004cf6:	d128      	bne.n	8004d4a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf8:	9201      	str	r2, [sp, #4]
 8004cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cfc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d00:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d08:	9301      	str	r3, [sp, #4]
 8004d0a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d0c:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	4d2c      	ldr	r5, [pc, #176]	@ (8004dc0 <HAL_RCC_OscConfig+0x270>)
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	05d8      	lsls	r0, r3, #23
 8004d14:	d51b      	bpl.n	8004d4e <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d16:	68a3      	ldr	r3, [r4, #8]
 8004d18:	4d27      	ldr	r5, [pc, #156]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d127      	bne.n	8004d6e <HAL_RCC_OscConfig+0x21e>
 8004d1e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004d26:	f7fe fe9b 	bl	8003a60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2a:	4e23      	ldr	r6, [pc, #140]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8004d2c:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004d34:	079a      	lsls	r2, r3, #30
 8004d36:	d539      	bpl.n	8004dac <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8004d38:	2f00      	cmp	r7, #0
 8004d3a:	f43f af1b 	beq.w	8004b74 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004db8 <HAL_RCC_OscConfig+0x268>)
 8004d40:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d48:	e714      	b.n	8004b74 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2700      	movs	r7, #0
 8004d4c:	e7df      	b.n	8004d0e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d4e:	682b      	ldr	r3, [r5, #0]
 8004d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d54:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004d56:	f7fe fe83 	bl	8003a60 <HAL_GetTick>
 8004d5a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	05d9      	lsls	r1, r3, #23
 8004d60:	d4d9      	bmi.n	8004d16 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d62:	f7fe fe7d 	bl	8003a60 <HAL_GetTick>
 8004d66:	1b80      	subs	r0, r0, r6
 8004d68:	2802      	cmp	r0, #2
 8004d6a:	d9f7      	bls.n	8004d5c <HAL_RCC_OscConfig+0x20c>
 8004d6c:	e734      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	d104      	bne.n	8004d7c <HAL_RCC_OscConfig+0x22c>
 8004d72:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004d74:	f043 0304 	orr.w	r3, r3, #4
 8004d78:	672b      	str	r3, [r5, #112]	@ 0x70
 8004d7a:	e7d0      	b.n	8004d1e <HAL_RCC_OscConfig+0x1ce>
 8004d7c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8004d7e:	f022 0201 	bic.w	r2, r2, #1
 8004d82:	672a      	str	r2, [r5, #112]	@ 0x70
 8004d84:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ca      	bne.n	8004d26 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8004d90:	f7fe fe66 	bl	8003a60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d94:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004d98:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d9a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004d9c:	079b      	lsls	r3, r3, #30
 8004d9e:	d5cb      	bpl.n	8004d38 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da0:	f7fe fe5e 	bl	8003a60 <HAL_GetTick>
 8004da4:	1b80      	subs	r0, r0, r6
 8004da6:	4540      	cmp	r0, r8
 8004da8:	d9f7      	bls.n	8004d9a <HAL_RCC_OscConfig+0x24a>
 8004daa:	e715      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dac:	f7fe fe58 	bl	8003a60 <HAL_GetTick>
 8004db0:	1b40      	subs	r0, r0, r5
 8004db2:	4540      	cmp	r0, r8
 8004db4:	d9bd      	bls.n	8004d32 <HAL_RCC_OscConfig+0x1e2>
 8004db6:	e70f      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	42470000 	.word	0x42470000
 8004dc0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dc4:	4d37      	ldr	r5, [pc, #220]	@ (8004ea4 <HAL_RCC_OscConfig+0x354>)
 8004dc6:	68aa      	ldr	r2, [r5, #8]
 8004dc8:	f002 020c 	and.w	r2, r2, #12
 8004dcc:	2a08      	cmp	r2, #8
 8004dce:	d03e      	beq.n	8004e4e <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	4b35      	ldr	r3, [pc, #212]	@ (8004ea8 <HAL_RCC_OscConfig+0x358>)
 8004dd4:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8004dd8:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dda:	d12b      	bne.n	8004e34 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8004ddc:	f7fe fe40 	bl	8003a60 <HAL_GetTick>
 8004de0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de2:	682b      	ldr	r3, [r5, #0]
 8004de4:	0199      	lsls	r1, r3, #6
 8004de6:	d41f      	bmi.n	8004e28 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004de8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004df0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004df4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004df6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004dfa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004dfc:	0852      	lsrs	r2, r2, #1
 8004dfe:	3a01      	subs	r2, #1
 8004e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e04:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004e06:	4b28      	ldr	r3, [pc, #160]	@ (8004ea8 <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e08:	4d26      	ldr	r5, [pc, #152]	@ (8004ea4 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004e0e:	f7fe fe27 	bl	8003a60 <HAL_GetTick>
 8004e12:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	019a      	lsls	r2, r3, #6
 8004e18:	f53f aeb0 	bmi.w	8004b7c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fe fe20 	bl	8003a60 <HAL_GetTick>
 8004e20:	1b00      	subs	r0, r0, r4
 8004e22:	2802      	cmp	r0, #2
 8004e24:	d9f6      	bls.n	8004e14 <HAL_RCC_OscConfig+0x2c4>
 8004e26:	e6d7      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e28:	f7fe fe1a 	bl	8003a60 <HAL_GetTick>
 8004e2c:	1b80      	subs	r0, r0, r6
 8004e2e:	2802      	cmp	r0, #2
 8004e30:	d9d7      	bls.n	8004de2 <HAL_RCC_OscConfig+0x292>
 8004e32:	e6d1      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8004e34:	f7fe fe14 	bl	8003a60 <HAL_GetTick>
 8004e38:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3a:	682b      	ldr	r3, [r5, #0]
 8004e3c:	019b      	lsls	r3, r3, #6
 8004e3e:	f57f ae9d 	bpl.w	8004b7c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fe fe0d 	bl	8003a60 <HAL_GetTick>
 8004e46:	1b00      	subs	r0, r0, r4
 8004e48:	2802      	cmp	r0, #2
 8004e4a:	d9f6      	bls.n	8004e3a <HAL_RCC_OscConfig+0x2ea>
 8004e4c:	e6c4      	b.n	8004bd8 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	f43f aeab 	beq.w	8004baa <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8004e54:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e56:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e58:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5c:	4291      	cmp	r1, r2
 8004e5e:	f47f aea4 	bne.w	8004baa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e62:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e64:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e68:	428a      	cmp	r2, r1
 8004e6a:	f47f ae9e 	bne.w	8004baa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e6e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e70:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8004e74:	401a      	ands	r2, r3
 8004e76:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004e7a:	f47f ae96 	bne.w	8004baa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e7e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004e80:	0852      	lsrs	r2, r2, #1
 8004e82:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8004e86:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e88:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004e8c:	f47f ae8d 	bne.w	8004baa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e90:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004e92:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e96:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004e9a:	bf14      	ite	ne
 8004e9c:	2001      	movne	r0, #1
 8004e9e:	2000      	moveq	r0, #0
 8004ea0:	e69b      	b.n	8004bda <HAL_RCC_OscConfig+0x8a>
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	42470000 	.word	0x42470000

08004eac <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eac:	4913      	ldr	r1, [pc, #76]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004eae:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb0:	688b      	ldr	r3, [r1, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d01c      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x48>
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d11c      	bne.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ebe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec8:	bf14      	ite	ne
 8004eca:	480d      	ldrne	r0, [pc, #52]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ecc:	480d      	ldreq	r0, [pc, #52]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ece:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004ed2:	bf18      	it	ne
 8004ed4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ed6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eda:	fba1 0100 	umull	r0, r1, r1, r0
 8004ede:	f7fb f9d7 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ee2:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x50>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004eea:	3301      	adds	r3, #1
 8004eec:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004eee:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004ef2:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef4:	4802      	ldr	r0, [pc, #8]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x54>)
 8004ef6:	e7fc      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8004ef8:	4802      	ldr	r0, [pc, #8]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004efa:	e7fa      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x46>
 8004efc:	40023800 	.word	0x40023800
 8004f00:	007a1200 	.word	0x007a1200
 8004f04:	00f42400 	.word	0x00f42400

08004f08 <HAL_RCC_ClockConfig>:
{
 8004f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f0c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004f0e:	4604      	mov	r4, r0
 8004f10:	b910      	cbnz	r0, 8004f18 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004f12:	2001      	movs	r0, #1
}
 8004f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f18:	4b43      	ldr	r3, [pc, #268]	@ (8005028 <HAL_RCC_ClockConfig+0x120>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	f002 020f 	and.w	r2, r2, #15
 8004f20:	428a      	cmp	r2, r1
 8004f22:	d328      	bcc.n	8004f76 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f24:	6821      	ldr	r1, [r4, #0]
 8004f26:	078f      	lsls	r7, r1, #30
 8004f28:	d42d      	bmi.n	8004f86 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2a:	07c8      	lsls	r0, r1, #31
 8004f2c:	d440      	bmi.n	8004fb0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005028 <HAL_RCC_ClockConfig+0x120>)
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f002 020f 	and.w	r2, r2, #15
 8004f36:	42aa      	cmp	r2, r5
 8004f38:	d865      	bhi.n	8005006 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	0751      	lsls	r1, r2, #29
 8004f3e:	d46b      	bmi.n	8005018 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f40:	0713      	lsls	r3, r2, #28
 8004f42:	d507      	bpl.n	8004f54 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f44:	4a39      	ldr	r2, [pc, #228]	@ (800502c <HAL_RCC_ClockConfig+0x124>)
 8004f46:	6921      	ldr	r1, [r4, #16]
 8004f48:	6893      	ldr	r3, [r2, #8]
 8004f4a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004f4e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004f52:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f54:	f7ff ffaa 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004f58:	4b34      	ldr	r3, [pc, #208]	@ (800502c <HAL_RCC_ClockConfig+0x124>)
 8004f5a:	4a35      	ldr	r2, [pc, #212]	@ (8005030 <HAL_RCC_ClockConfig+0x128>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f62:	5cd3      	ldrb	r3, [r2, r3]
 8004f64:	40d8      	lsrs	r0, r3
 8004f66:	4b33      	ldr	r3, [pc, #204]	@ (8005034 <HAL_RCC_ClockConfig+0x12c>)
 8004f68:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004f6a:	4b33      	ldr	r3, [pc, #204]	@ (8005038 <HAL_RCC_ClockConfig+0x130>)
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	f7fc fee7 	bl	8001d40 <HAL_InitTick>
  return HAL_OK;
 8004f72:	2000      	movs	r0, #0
 8004f74:	e7ce      	b.n	8004f14 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	b2ca      	uxtb	r2, r1
 8004f78:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	428b      	cmp	r3, r1
 8004f82:	d1c6      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xa>
 8004f84:	e7ce      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f86:	4b29      	ldr	r3, [pc, #164]	@ (800502c <HAL_RCC_ClockConfig+0x124>)
 8004f88:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f8c:	bf1e      	ittt	ne
 8004f8e:	689a      	ldrne	r2, [r3, #8]
 8004f90:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8004f94:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f96:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f98:	bf42      	ittt	mi
 8004f9a:	689a      	ldrmi	r2, [r3, #8]
 8004f9c:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8004fa0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	68a0      	ldr	r0, [r4, #8]
 8004fa6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004faa:	4302      	orrs	r2, r0
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	e7bc      	b.n	8004f2a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb0:	6862      	ldr	r2, [r4, #4]
 8004fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800502c <HAL_RCC_ClockConfig+0x124>)
 8004fb4:	2a01      	cmp	r2, #1
 8004fb6:	d11c      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbe:	d0a8      	beq.n	8004f12 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fc0:	4e1a      	ldr	r6, [pc, #104]	@ (800502c <HAL_RCC_ClockConfig+0x124>)
 8004fc2:	68b3      	ldr	r3, [r6, #8]
 8004fc4:	f023 0303 	bic.w	r3, r3, #3
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004fcc:	f7fe fd48 	bl	8003a60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd0:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004fd4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd6:	68b3      	ldr	r3, [r6, #8]
 8004fd8:	6862      	ldr	r2, [r4, #4]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004fe2:	d0a4      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe4:	f7fe fd3c 	bl	8003a60 <HAL_GetTick>
 8004fe8:	1bc0      	subs	r0, r0, r7
 8004fea:	4540      	cmp	r0, r8
 8004fec:	d9f3      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8004fee:	2003      	movs	r0, #3
 8004ff0:	e790      	b.n	8004f14 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ff2:	1e91      	subs	r1, r2, #2
 8004ff4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ff8:	d802      	bhi.n	8005000 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffa:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004ffe:	e7de      	b.n	8004fbe <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005000:	f013 0f02 	tst.w	r3, #2
 8005004:	e7db      	b.n	8004fbe <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	b2ea      	uxtb	r2, r5
 8005008:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	42ab      	cmp	r3, r5
 8005012:	f47f af7e 	bne.w	8004f12 <HAL_RCC_ClockConfig+0xa>
 8005016:	e790      	b.n	8004f3a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005018:	4904      	ldr	r1, [pc, #16]	@ (800502c <HAL_RCC_ClockConfig+0x124>)
 800501a:	68e0      	ldr	r0, [r4, #12]
 800501c:	688b      	ldr	r3, [r1, #8]
 800501e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005022:	4303      	orrs	r3, r0
 8005024:	608b      	str	r3, [r1, #8]
 8005026:	e78b      	b.n	8004f40 <HAL_RCC_ClockConfig+0x38>
 8005028:	40023c00 	.word	0x40023c00
 800502c:	40023800 	.word	0x40023800
 8005030:	0801208c 	.word	0x0801208c
 8005034:	20000074 	.word	0x20000074
 8005038:	2000007c 	.word	0x2000007c

0800503c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800503c:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <HAL_RCC_GetPCLK1Freq+0x14>)
 800503e:	4a05      	ldr	r2, [pc, #20]	@ (8005054 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005046:	5cd3      	ldrb	r3, [r2, r3]
 8005048:	4a03      	ldr	r2, [pc, #12]	@ (8005058 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800504a:	6810      	ldr	r0, [r2, #0]
}
 800504c:	40d8      	lsrs	r0, r3
 800504e:	4770      	bx	lr
 8005050:	40023800 	.word	0x40023800
 8005054:	08012084 	.word	0x08012084
 8005058:	20000074 	.word	0x20000074

0800505c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800505c:	230f      	movs	r3, #15
 800505e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <HAL_RCC_GetClockConfig+0x34>)
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	f002 0203 	and.w	r2, r2, #3
 8005068:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005070:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8005078:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	08db      	lsrs	r3, r3, #3
 800507e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005082:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005084:	4b03      	ldr	r3, [pc, #12]	@ (8005094 <HAL_RCC_GetClockConfig+0x38>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	600b      	str	r3, [r1, #0]
}
 800508e:	4770      	bx	lr
 8005090:	40023800 	.word	0x40023800
 8005094:	40023c00 	.word	0x40023c00

08005098 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005098:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800509a:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 800509e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050a2:	f040 8088 	bne.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	f013 0f0c 	tst.w	r3, #12
 80050ac:	d045      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050ae:	4b8c      	ldr	r3, [pc, #560]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050b0:	4d8c      	ldr	r5, [pc, #560]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 80050b2:	2200      	movs	r2, #0
 80050b4:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 80050b6:	f7fe fcd3 	bl	8003a60 <HAL_GetTick>
 80050ba:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	0099      	lsls	r1, r3, #2
 80050c0:	f100 80cb 	bmi.w	800525a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80050c4:	6821      	ldr	r1, [r4, #0]
 80050c6:	074a      	lsls	r2, r1, #29
 80050c8:	d515      	bpl.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050ca:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050ce:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 80050d8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050e2:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 80050e6:	6a22      	ldr	r2, [r4, #32]
 80050e8:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80050ec:	3a01      	subs	r2, #1
 80050ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80050f2:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050f6:	070b      	lsls	r3, r1, #28
 80050f8:	d514      	bpl.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050fa:	4a7a      	ldr	r2, [pc, #488]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80050fc:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050fe:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005102:	6920      	ldr	r0, [r4, #16]
 8005104:	071b      	lsls	r3, r3, #28
 8005106:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800510a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800510e:	430b      	orrs	r3, r1
 8005110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005114:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005118:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800511a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800511e:	430b      	orrs	r3, r1
 8005120:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005124:	4b6e      	ldr	r3, [pc, #440]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005126:	4e6f      	ldr	r6, [pc, #444]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 8005128:	2201      	movs	r2, #1
 800512a:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 800512c:	f7fe fc98 	bl	8003a60 <HAL_GetTick>
 8005130:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005132:	6833      	ldr	r3, [r6, #0]
 8005134:	009f      	lsls	r7, r3, #2
 8005136:	f140 8097 	bpl.w	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	0698      	lsls	r0, r3, #26
 800513e:	d534      	bpl.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005140:	2300      	movs	r3, #0
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	4b67      	ldr	r3, [pc, #412]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005146:	4d68      	ldr	r5, [pc, #416]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800514a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800514e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800515a:	682b      	ldr	r3, [r5, #0]
 800515c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005160:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005162:	f7fe fc7d 	bl	8003a60 <HAL_GetTick>
 8005166:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	05d8      	lsls	r0, r3, #23
 800516c:	f140 8083 	bpl.w	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005170:	4d5c      	ldr	r5, [pc, #368]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005172:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005174:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005176:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800517a:	f040 8083 	bne.w	8005284 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800517e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005180:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005184:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005188:	4a56      	ldr	r2, [pc, #344]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800518a:	f040 809e 	bne.w	80052ca <HAL_RCCEx_PeriphCLKConfig+0x232>
 800518e:	6891      	ldr	r1, [r2, #8]
 8005190:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8005194:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005198:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800519c:	4301      	orrs	r1, r0
 800519e:	6091      	str	r1, [r2, #8]
 80051a0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80051a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a6:	430b      	orrs	r3, r1
 80051a8:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	06db      	lsls	r3, r3, #27
 80051ae:	f100 8090 	bmi.w	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 80051b2:	2000      	movs	r0, #0
 80051b4:	e04f      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 80051b6:	4b4a      	ldr	r3, [pc, #296]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051b8:	4e4a      	ldr	r6, [pc, #296]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 80051ba:	2200      	movs	r2, #0
 80051bc:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 80051be:	f7fe fc4f 	bl	8003a60 <HAL_GetTick>
 80051c2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051c4:	6833      	ldr	r3, [r6, #0]
 80051c6:	011f      	lsls	r7, r3, #4
 80051c8:	d43f      	bmi.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051ca:	6821      	ldr	r1, [r4, #0]
 80051cc:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051ce:	bf41      	itttt	mi
 80051d0:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 80051d4:	071b      	lslmi	r3, r3, #28
 80051d6:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 80051da:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80051de:	078a      	lsls	r2, r1, #30
 80051e0:	d515      	bpl.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051e2:	4a40      	ldr	r2, [pc, #256]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80051e4:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051e6:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80051ea:	6865      	ldr	r5, [r4, #4]
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80051f2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80051f6:	4303      	orrs	r3, r0
 80051f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051fc:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 8005200:	69e3      	ldr	r3, [r4, #28]
 8005202:	f020 001f 	bic.w	r0, r0, #31
 8005206:	3b01      	subs	r3, #1
 8005208:	4303      	orrs	r3, r0
 800520a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800520e:	064b      	lsls	r3, r1, #25
 8005210:	d50a      	bpl.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005212:	68e3      	ldr	r3, [r4, #12]
 8005214:	6862      	ldr	r2, [r4, #4]
 8005216:	061b      	lsls	r3, r3, #24
 8005218:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800521c:	68a2      	ldr	r2, [r4, #8]
 800521e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005222:	4a30      	ldr	r2, [pc, #192]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005224:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005228:	4b2d      	ldr	r3, [pc, #180]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800522a:	4e2e      	ldr	r6, [pc, #184]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 800522c:	2201      	movs	r2, #1
 800522e:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005230:	f7fe fc16 	bl	8003a60 <HAL_GetTick>
 8005234:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005236:	6833      	ldr	r3, [r6, #0]
 8005238:	011f      	lsls	r7, r3, #4
 800523a:	f53f af34 	bmi.w	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800523e:	f7fe fc0f 	bl	8003a60 <HAL_GetTick>
 8005242:	1b40      	subs	r0, r0, r5
 8005244:	2802      	cmp	r0, #2
 8005246:	d9f6      	bls.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005248:	e004      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800524a:	f7fe fc09 	bl	8003a60 <HAL_GetTick>
 800524e:	1b40      	subs	r0, r0, r5
 8005250:	2802      	cmp	r0, #2
 8005252:	d9b7      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 8005254:	2003      	movs	r0, #3
}
 8005256:	b003      	add	sp, #12
 8005258:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800525a:	f7fe fc01 	bl	8003a60 <HAL_GetTick>
 800525e:	1b80      	subs	r0, r0, r6
 8005260:	2802      	cmp	r0, #2
 8005262:	f67f af2b 	bls.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005266:	e7f5      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005268:	f7fe fbfa 	bl	8003a60 <HAL_GetTick>
 800526c:	1b40      	subs	r0, r0, r5
 800526e:	2802      	cmp	r0, #2
 8005270:	f67f af5f 	bls.w	8005132 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8005274:	e7ee      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005276:	f7fe fbf3 	bl	8003a60 <HAL_GetTick>
 800527a:	1b80      	subs	r0, r0, r6
 800527c:	2802      	cmp	r0, #2
 800527e:	f67f af73 	bls.w	8005168 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8005282:	e7e7      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005284:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005288:	4293      	cmp	r3, r2
 800528a:	f43f af78 	beq.w	800517e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800528e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005290:	4a13      	ldr	r2, [pc, #76]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005292:	2101      	movs	r1, #1
 8005294:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800529c:	2100      	movs	r1, #0
 800529e:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 80052a2:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052a4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80052a6:	07d9      	lsls	r1, r3, #31
 80052a8:	f57f af69 	bpl.w	800517e <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 80052ac:	f7fe fbd8 	bl	8003a60 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b0:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80052b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80052b8:	079a      	lsls	r2, r3, #30
 80052ba:	f53f af60 	bmi.w	800517e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052be:	f7fe fbcf 	bl	8003a60 <HAL_GetTick>
 80052c2:	1b80      	subs	r0, r0, r6
 80052c4:	42b8      	cmp	r0, r7
 80052c6:	d9f6      	bls.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052c8:	e7c4      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052ca:	6891      	ldr	r1, [r2, #8]
 80052cc:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80052d0:	e765      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052d4:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80052d8:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 80052dc:	e769      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 80052de:	bf00      	nop
 80052e0:	42470000 	.word	0x42470000
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40007000 	.word	0x40007000
 80052ec:	42471000 	.word	0x42471000

080052f0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80052f4:	4604      	mov	r4, r0
 80052f6:	b1c8      	cbz	r0, 800532c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80052f8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80052fc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005300:	b91b      	cbnz	r3, 800530a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005302:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005306:	f7fc fcaf 	bl	8001c68 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800530a:	2302      	movs	r3, #2
 800530c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005310:	1d21      	adds	r1, r4, #4
 8005312:	6820      	ldr	r0, [r4, #0]
 8005314:	f000 fcfe 	bl	8005d14 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005318:	6862      	ldr	r2, [r4, #4]
 800531a:	6820      	ldr	r0, [r4, #0]
 800531c:	4629      	mov	r1, r5
 800531e:	f000 fd31 	bl	8005d84 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005322:	2301      	movs	r3, #1
 8005324:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 8005328:	2000      	movs	r0, #0
}
 800532a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800532c:	2001      	movs	r0, #1
 800532e:	e7fc      	b.n	800532a <HAL_SDRAM_Init+0x3a>

08005330 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005330:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005332:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005336:	2b02      	cmp	r3, #2
{
 8005338:	4605      	mov	r5, r0
 800533a:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800533c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800533e:	d012      	beq.n	8005366 <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005340:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8005344:	2c01      	cmp	r4, #1
 8005346:	d10f      	bne.n	8005368 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005348:	2302      	movs	r3, #2
 800534a:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800534e:	6828      	ldr	r0, [r5, #0]
 8005350:	f000 fd4e 	bl	8005df0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005354:	6833      	ldr	r3, [r6, #0]
 8005356:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005358:	bf06      	itte	eq
 800535a:	2305      	moveq	r3, #5
 800535c:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005360:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005364:	2000      	movs	r0, #0
}
 8005366:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005368:	2001      	movs	r0, #1
 800536a:	e7fc      	b.n	8005366 <HAL_SDRAM_SendCommand+0x36>

0800536c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800536c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800536e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005372:	2b02      	cmp	r3, #2
{
 8005374:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005376:	b2d8      	uxtb	r0, r3
 8005378:	d00d      	beq.n	8005396 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800537a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800537e:	2b01      	cmp	r3, #1
 8005380:	b2dd      	uxtb	r5, r3
 8005382:	d109      	bne.n	8005398 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005384:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005386:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005388:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800538c:	f000 fd54 	bl	8005e38 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005390:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005394:	2000      	movs	r0, #0
}
 8005396:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005398:	2001      	movs	r0, #1
 800539a:	e7fc      	b.n	8005396 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800539c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800539c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80053a0:	461c      	mov	r4, r3
 80053a2:	4616      	mov	r6, r2
 80053a4:	460f      	mov	r7, r1
 80053a6:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a8:	f7fe fb5a 	bl	8003a60 <HAL_GetTick>
 80053ac:	4434      	add	r4, r6
 80053ae:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80053b0:	f7fe fb56 	bl	8003a60 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053b4:	4b24      	ldr	r3, [pc, #144]	@ (8005448 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80053bc:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 80053be:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053c0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053c2:	682a      	ldr	r2, [r5, #0]
 80053c4:	6893      	ldr	r3, [r2, #8]
 80053c6:	ea37 0303 	bics.w	r3, r7, r3
 80053ca:	d001      	beq.n	80053d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 80053cc:	2000      	movs	r0, #0
 80053ce:	e02e      	b.n	800542e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80053d0:	1c73      	adds	r3, r6, #1
 80053d2:	d0f7      	beq.n	80053c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d4:	f7fe fb44 	bl	8003a60 <HAL_GetTick>
 80053d8:	eba0 0008 	sub.w	r0, r0, r8
 80053dc:	42a0      	cmp	r0, r4
 80053de:	d329      	bcc.n	8005434 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053e8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ea:	686a      	ldr	r2, [r5, #4]
 80053ec:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80053f0:	d10a      	bne.n	8005408 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80053f2:	68aa      	ldr	r2, [r5, #8]
 80053f4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80053f8:	d002      	beq.n	8005400 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053fa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80053fe:	d103      	bne.n	8005408 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005406:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005408:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 800540a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800540e:	d107      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800541e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005420:	2301      	movs	r3, #1
 8005422:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005426:	2300      	movs	r3, #0
 8005428:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 800542c:	2003      	movs	r0, #3
}
 800542e:	b002      	add	sp, #8
 8005430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8005434:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005436:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8005438:	2a00      	cmp	r2, #0
      count--;
 800543a:	f103 33ff 	add.w	r3, r3, #4294967295
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	bf08      	it	eq
 8005442:	4614      	moveq	r4, r2
 8005444:	e7bd      	b.n	80053c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8005446:	bf00      	nop
 8005448:	20000074 	.word	0x20000074

0800544c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005450:	6842      	ldr	r2, [r0, #4]
 8005452:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8005456:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005458:	d006      	beq.n	8005468 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800545a:	460a      	mov	r2, r1
 800545c:	2101      	movs	r1, #1
 800545e:	f7ff ff9d 	bl	800539c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005462:	b9b8      	cbnz	r0, 8005494 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8005464:	2000      	movs	r0, #0
}
 8005466:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005468:	6882      	ldr	r2, [r0, #8]
 800546a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800546e:	d002      	beq.n	8005476 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005470:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005474:	d107      	bne.n	8005486 <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 8005476:	6825      	ldr	r5, [r4, #0]
 8005478:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800547a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 800547e:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8005482:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005484:	d003      	beq.n	800548e <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005486:	460a      	mov	r2, r1
 8005488:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800548a:	4620      	mov	r0, r4
 800548c:	e7e7      	b.n	800545e <SPI_EndRxTransaction+0x12>
 800548e:	460a      	mov	r2, r1
 8005490:	2101      	movs	r1, #1
 8005492:	e7fa      	b.n	800548a <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005494:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005496:	f043 0320 	orr.w	r3, r3, #32
 800549a:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 800549c:	2003      	movs	r0, #3
 800549e:	e7e2      	b.n	8005466 <SPI_EndRxTransaction+0x1a>

080054a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054a2:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054a4:	4a12      	ldr	r2, [pc, #72]	@ (80054f0 <SPI_EndRxTxTransaction+0x50>)
 80054a6:	6815      	ldr	r5, [r2, #0]
 80054a8:	4a12      	ldr	r2, [pc, #72]	@ (80054f4 <SPI_EndRxTxTransaction+0x54>)
 80054aa:	fbb5 f5f2 	udiv	r5, r5, r2
 80054ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054b2:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b4:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054b6:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 80054bc:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054be:	d10b      	bne.n	80054d8 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054c0:	460a      	mov	r2, r1
 80054c2:	2180      	movs	r1, #128	@ 0x80
 80054c4:	f7ff ff6a 	bl	800539c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80054c8:	b178      	cbz	r0, 80054ea <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80054cc:	f043 0320 	orr.w	r3, r3, #32
 80054d0:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054d2:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80054d4:	b003      	add	sp, #12
 80054d6:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80054d8:	9b01      	ldr	r3, [sp, #4]
 80054da:	b133      	cbz	r3, 80054ea <SPI_EndRxTxTransaction+0x4a>
      count--;
 80054dc:	9b01      	ldr	r3, [sp, #4]
 80054de:	3b01      	subs	r3, #1
 80054e0:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	061b      	lsls	r3, r3, #24
 80054e8:	d4f6      	bmi.n	80054d8 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 80054ea:	2000      	movs	r0, #0
 80054ec:	e7f2      	b.n	80054d4 <SPI_EndRxTxTransaction+0x34>
 80054ee:	bf00      	nop
 80054f0:	20000074 	.word	0x20000074
 80054f4:	016e3600 	.word	0x016e3600

080054f8 <HAL_SPI_Init>:
{
 80054f8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80054fa:	4604      	mov	r4, r0
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d055      	beq.n	80055ac <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005500:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005502:	2b00      	cmp	r3, #0
 8005504:	d14e      	bne.n	80055a4 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005506:	6842      	ldr	r2, [r0, #4]
 8005508:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 800550c:	d000      	beq.n	8005510 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800550e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005510:	2300      	movs	r3, #0
 8005512:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005514:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8005518:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800551c:	b923      	cbnz	r3, 8005528 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800551e:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8005522:	4620      	mov	r0, r4
 8005524:	f7fc fb6a 	bl	8001bfc <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005528:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800552a:	68a0      	ldr	r0, [r4, #8]
 800552c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8005534:	680b      	ldr	r3, [r1, #0]
 8005536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800553a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8005542:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8005546:	4303      	orrs	r3, r0
 8005548:	68e0      	ldr	r0, [r4, #12]
 800554a:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 800554e:	4303      	orrs	r3, r0
 8005550:	6920      	ldr	r0, [r4, #16]
 8005552:	f000 0002 	and.w	r0, r0, #2
 8005556:	4303      	orrs	r3, r0
 8005558:	6960      	ldr	r0, [r4, #20]
 800555a:	f000 0001 	and.w	r0, r0, #1
 800555e:	4303      	orrs	r3, r0
 8005560:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 8005564:	4303      	orrs	r3, r0
 8005566:	69e0      	ldr	r0, [r4, #28]
 8005568:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800556c:	4303      	orrs	r3, r0
 800556e:	6a20      	ldr	r0, [r4, #32]
 8005570:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8005574:	4303      	orrs	r3, r0
 8005576:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005578:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 800557c:	4303      	orrs	r3, r0
 800557e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005580:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005582:	0c12      	lsrs	r2, r2, #16
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	f002 0204 	and.w	r2, r2, #4
 800558c:	431a      	orrs	r2, r3
 800558e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005590:	69cb      	ldr	r3, [r1, #28]
 8005592:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005596:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005598:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800559a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800559c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800559e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80055a2:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055a4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055aa:	e7b1      	b.n	8005510 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80055ac:	2001      	movs	r0, #1
 80055ae:	e7f8      	b.n	80055a2 <HAL_SPI_Init+0xaa>

080055b0 <HAL_SPI_Transmit>:
{
 80055b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055b4:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80055b6:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80055ba:	2b01      	cmp	r3, #1
{
 80055bc:	4604      	mov	r4, r0
 80055be:	460d      	mov	r5, r1
 80055c0:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80055c2:	f000 80a0 	beq.w	8005706 <HAL_SPI_Transmit+0x156>
 80055c6:	2301      	movs	r3, #1
 80055c8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80055cc:	f7fe fa48 	bl	8003a60 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80055d0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80055d4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80055d6:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80055d8:	b2d8      	uxtb	r0, r3
 80055da:	f040 8092 	bne.w	8005702 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 80055de:	2d00      	cmp	r5, #0
 80055e0:	d061      	beq.n	80056a6 <HAL_SPI_Transmit+0xf6>
 80055e2:	f1b8 0f00 	cmp.w	r8, #0
 80055e6:	d05e      	beq.n	80056a6 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055e8:	2303      	movs	r3, #3
 80055ea:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 80055f2:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 80055f6:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055fa:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80055fc:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80055fe:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005600:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8005602:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005604:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 800560a:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800560e:	d107      	bne.n	8005620 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8005610:	6833      	ldr	r3, [r6, #0]
 8005612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005616:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8005618:	6833      	ldr	r3, [r6, #0]
 800561a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800561e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005620:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005622:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005624:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8005626:	bf5e      	ittt	pl
 8005628:	6833      	ldrpl	r3, [r6, #0]
 800562a:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 800562e:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005630:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005634:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005636:	d13f      	bne.n	80056b8 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005638:	b113      	cbz	r3, 8005640 <HAL_SPI_Transmit+0x90>
 800563a:	f1b8 0f01 	cmp.w	r8, #1
 800563e:	d107      	bne.n	8005650 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005640:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005644:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005646:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005648:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800564a:	3b01      	subs	r3, #1
 800564c:	b29b      	uxth	r3, r3
 800564e:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005650:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005652:	b29b      	uxth	r3, r3
 8005654:	b9a3      	cbnz	r3, 8005680 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005656:	464a      	mov	r2, r9
 8005658:	4639      	mov	r1, r7
 800565a:	4620      	mov	r0, r4
 800565c:	f7ff ff20 	bl	80054a0 <SPI_EndRxTxTransaction>
 8005660:	2800      	cmp	r0, #0
 8005662:	d14b      	bne.n	80056fc <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005664:	68a3      	ldr	r3, [r4, #8]
 8005666:	b933      	cbnz	r3, 8005676 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005668:	9301      	str	r3, [sp, #4]
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	9201      	str	r2, [sp, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005676:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005678:	3800      	subs	r0, #0
 800567a:	bf18      	it	ne
 800567c:	2001      	movne	r0, #1
error:
 800567e:	e012      	b.n	80056a6 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	6893      	ldr	r3, [r2, #8]
 8005684:	0798      	lsls	r0, r3, #30
 8005686:	d505      	bpl.n	8005694 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005688:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800568a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800568e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005690:	6323      	str	r3, [r4, #48]	@ 0x30
 8005692:	e7d9      	b.n	8005648 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005694:	f7fe f9e4 	bl	8003a60 <HAL_GetTick>
 8005698:	eba0 0009 	sub.w	r0, r0, r9
 800569c:	42b8      	cmp	r0, r7
 800569e:	d3d7      	bcc.n	8005650 <HAL_SPI_Transmit+0xa0>
 80056a0:	1c79      	adds	r1, r7, #1
 80056a2:	d0d5      	beq.n	8005650 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80056a4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80056ac:	2300      	movs	r3, #0
 80056ae:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80056b2:	b003      	add	sp, #12
 80056b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b8:	b113      	cbz	r3, 80056c0 <HAL_SPI_Transmit+0x110>
 80056ba:	f1b8 0f01 	cmp.w	r8, #1
 80056be:	d108      	bne.n	80056d2 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056c0:	782b      	ldrb	r3, [r5, #0]
 80056c2:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80056c6:	3301      	adds	r3, #1
 80056c8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80056ca:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80056d2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0bd      	beq.n	8005656 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	0792      	lsls	r2, r2, #30
 80056e0:	d503      	bpl.n	80056ea <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80056e4:	7812      	ldrb	r2, [r2, #0]
 80056e6:	731a      	strb	r2, [r3, #12]
 80056e8:	e7ec      	b.n	80056c4 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ea:	f7fe f9b9 	bl	8003a60 <HAL_GetTick>
 80056ee:	eba0 0009 	sub.w	r0, r0, r9
 80056f2:	42b8      	cmp	r0, r7
 80056f4:	d3ed      	bcc.n	80056d2 <HAL_SPI_Transmit+0x122>
 80056f6:	1c7b      	adds	r3, r7, #1
 80056f8:	d0eb      	beq.n	80056d2 <HAL_SPI_Transmit+0x122>
 80056fa:	e7d3      	b.n	80056a4 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056fc:	2320      	movs	r3, #32
 80056fe:	6563      	str	r3, [r4, #84]	@ 0x54
 8005700:	e7b0      	b.n	8005664 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8005702:	2002      	movs	r0, #2
 8005704:	e7cf      	b.n	80056a6 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8005706:	2002      	movs	r0, #2
 8005708:	e7d3      	b.n	80056b2 <HAL_SPI_Transmit+0x102>

0800570a <HAL_SPI_TransmitReceive>:
{
 800570a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800570e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8005710:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8005714:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8005718:	2b01      	cmp	r3, #1
{
 800571a:	4604      	mov	r4, r0
 800571c:	460d      	mov	r5, r1
 800571e:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8005720:	f000 80e3 	beq.w	80058ea <HAL_SPI_TransmitReceive+0x1e0>
 8005724:	2301      	movs	r3, #1
 8005726:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800572a:	f7fe f999 	bl	8003a60 <HAL_GetTick>
  tmp_state           = hspi->State;
 800572e:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8005732:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005734:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005736:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8005738:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800573a:	d00a      	beq.n	8005752 <HAL_SPI_TransmitReceive+0x48>
 800573c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005740:	f040 80d1 	bne.w	80058e6 <HAL_SPI_TransmitReceive+0x1dc>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005744:	68a3      	ldr	r3, [r4, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f040 80cd 	bne.w	80058e6 <HAL_SPI_TransmitReceive+0x1dc>
 800574c:	2904      	cmp	r1, #4
 800574e:	f040 80ca 	bne.w	80058e6 <HAL_SPI_TransmitReceive+0x1dc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005752:	b115      	cbz	r5, 800575a <HAL_SPI_TransmitReceive+0x50>
 8005754:	f1b9 0f00 	cmp.w	r9, #0
 8005758:	d109      	bne.n	800576e <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 800575a:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 800575c:	2301      	movs	r3, #1
 800575e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005762:	2300      	movs	r3, #0
 8005764:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005768:	b003      	add	sp, #12
 800576a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800576e:	2e00      	cmp	r6, #0
 8005770:	d0f3      	beq.n	800575a <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005772:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005776:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800577a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800577c:	bf1c      	itt	ne
 800577e:	2305      	movne	r3, #5
 8005780:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005784:	2300      	movs	r3, #0
 8005786:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8005788:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800578c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800578e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8005790:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005792:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8005794:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005796:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8005798:	bf58      	it	pl
 800579a:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800579c:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 800579e:	bf58      	it	pl
 80057a0:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 80057a4:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 80057a6:	bf58      	it	pl
 80057a8:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057aa:	68e1      	ldr	r1, [r4, #12]
 80057ac:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80057b0:	d148      	bne.n	8005844 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b2:	b10a      	cbz	r2, 80057b8 <HAL_SPI_TransmitReceive+0xae>
 80057b4:	2e01      	cmp	r6, #1
 80057b6:	d107      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80057bc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80057be:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c0:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80057c8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ca:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	b963      	cbnz	r3, 80057ea <HAL_SPI_TransmitReceive+0xe0>
 80057d0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	b94b      	cbnz	r3, 80057ea <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057d6:	463a      	mov	r2, r7
 80057d8:	4641      	mov	r1, r8
 80057da:	4620      	mov	r0, r4
 80057dc:	f7ff fe60 	bl	80054a0 <SPI_EndRxTxTransaction>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d074      	beq.n	80058ce <HAL_SPI_TransmitReceive+0x1c4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057e4:	2320      	movs	r3, #32
 80057e6:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 80057e8:	e7b7      	b.n	800575a <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057ea:	6821      	ldr	r1, [r4, #0]
 80057ec:	688b      	ldr	r3, [r1, #8]
 80057ee:	079a      	lsls	r2, r3, #30
 80057f0:	d50d      	bpl.n	800580e <HAL_SPI_TransmitReceive+0x104>
 80057f2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	b153      	cbz	r3, 800580e <HAL_SPI_TransmitReceive+0x104>
 80057f8:	b145      	cbz	r5, 800580c <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80057fc:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005800:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005802:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005804:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005806:	3b01      	subs	r3, #1
 8005808:	b29b      	uxth	r3, r3
 800580a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800580c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800580e:	688a      	ldr	r2, [r1, #8]
 8005810:	f012 0201 	ands.w	r2, r2, #1
 8005814:	d00c      	beq.n	8005830 <HAL_SPI_TransmitReceive+0x126>
 8005816:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005818:	b29b      	uxth	r3, r3
 800581a:	b14b      	cbz	r3, 8005830 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800581c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800581e:	68c9      	ldr	r1, [r1, #12]
 8005820:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005824:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005826:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005828:	3b01      	subs	r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800582e:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005830:	f7fe f916 	bl	8003a60 <HAL_GetTick>
 8005834:	1bc0      	subs	r0, r0, r7
 8005836:	4540      	cmp	r0, r8
 8005838:	d3c7      	bcc.n	80057ca <HAL_SPI_TransmitReceive+0xc0>
 800583a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800583e:	d0c4      	beq.n	80057ca <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 8005840:	2003      	movs	r0, #3
 8005842:	e78b      	b.n	800575c <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005844:	b10a      	cbz	r2, 800584a <HAL_SPI_TransmitReceive+0x140>
 8005846:	2e01      	cmp	r6, #1
 8005848:	d108      	bne.n	800585c <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800584a:	782a      	ldrb	r2, [r5, #0]
 800584c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800584e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005850:	3301      	adds	r3, #1
 8005852:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005854:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005856:	3b01      	subs	r3, #1
 8005858:	b29b      	uxth	r3, r3
 800585a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800585c:	2501      	movs	r5, #1
 800585e:	e02d      	b.n	80058bc <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005860:	6822      	ldr	r2, [r4, #0]
 8005862:	6893      	ldr	r3, [r2, #8]
 8005864:	079b      	lsls	r3, r3, #30
 8005866:	d50e      	bpl.n	8005886 <HAL_SPI_TransmitReceive+0x17c>
 8005868:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800586a:	b29b      	uxth	r3, r3
 800586c:	b15b      	cbz	r3, 8005886 <HAL_SPI_TransmitReceive+0x17c>
 800586e:	b14d      	cbz	r5, 8005884 <HAL_SPI_TransmitReceive+0x17a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005870:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8005876:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005878:	3301      	adds	r3, #1
 800587a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800587c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800587e:	3b01      	subs	r3, #1
 8005880:	b29b      	uxth	r3, r3
 8005882:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8005884:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005886:	6822      	ldr	r2, [r4, #0]
 8005888:	6891      	ldr	r1, [r2, #8]
 800588a:	f011 0101 	ands.w	r1, r1, #1
 800588e:	d00d      	beq.n	80058ac <HAL_SPI_TransmitReceive+0x1a2>
 8005890:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005892:	b29b      	uxth	r3, r3
 8005894:	b153      	cbz	r3, 80058ac <HAL_SPI_TransmitReceive+0x1a2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005896:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005898:	68d2      	ldr	r2, [r2, #12]
 800589a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800589c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800589e:	3301      	adds	r3, #1
 80058a0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80058a2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80058aa:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058ac:	f7fe f8d8 	bl	8003a60 <HAL_GetTick>
 80058b0:	1bc0      	subs	r0, r0, r7
 80058b2:	4540      	cmp	r0, r8
 80058b4:	d302      	bcc.n	80058bc <HAL_SPI_TransmitReceive+0x1b2>
 80058b6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80058ba:	d1c1      	bne.n	8005840 <HAL_SPI_TransmitReceive+0x136>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058bc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1cd      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x156>
 80058c4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1c9      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x156>
 80058cc:	e783      	b.n	80057d6 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058ce:	68a3      	ldr	r3, [r4, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f47f af43 	bne.w	800575c <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	9001      	str	r0, [sp, #4]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	9201      	str	r2, [sp, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	9b01      	ldr	r3, [sp, #4]
 80058e4:	e73a      	b.n	800575c <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 80058e6:	2002      	movs	r0, #2
 80058e8:	e738      	b.n	800575c <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 80058ea:	2002      	movs	r0, #2
 80058ec:	e73c      	b.n	8005768 <HAL_SPI_TransmitReceive+0x5e>

080058ee <HAL_SPI_Receive>:
{
 80058ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058f2:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058f4:	6843      	ldr	r3, [r0, #4]
 80058f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80058fa:	4604      	mov	r4, r0
 80058fc:	4689      	mov	r9, r1
 80058fe:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005900:	d10c      	bne.n	800591c <HAL_SPI_Receive+0x2e>
 8005902:	6883      	ldr	r3, [r0, #8]
 8005904:	b953      	cbnz	r3, 800591c <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005906:	2304      	movs	r3, #4
 8005908:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800590c:	4613      	mov	r3, r2
 800590e:	9500      	str	r5, [sp, #0]
 8005910:	460a      	mov	r2, r1
 8005912:	f7ff fefa 	bl	800570a <HAL_SPI_TransmitReceive>
}
 8005916:	b003      	add	sp, #12
 8005918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800591c:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8005920:	2b01      	cmp	r3, #1
 8005922:	d07f      	beq.n	8005a24 <HAL_SPI_Receive+0x136>
 8005924:	2301      	movs	r3, #1
 8005926:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800592a:	f7fe f899 	bl	8003a60 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800592e:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8005932:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005934:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005936:	b2d8      	uxtb	r0, r3
 8005938:	d172      	bne.n	8005a20 <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 800593a:	f1b9 0f00 	cmp.w	r9, #0
 800593e:	d05c      	beq.n	80059fa <HAL_SPI_Receive+0x10c>
 8005940:	2f00      	cmp	r7, #0
 8005942:	d05a      	beq.n	80059fa <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005944:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005946:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800594a:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800594c:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800594e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005952:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 8005956:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800595a:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 800595c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800595e:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005960:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005962:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005964:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005966:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005968:	d107      	bne.n	800597a <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005970:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005978:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800597e:	bf5e      	ittt	pl
 8005980:	681a      	ldrpl	r2, [r3, #0]
 8005982:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8005986:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005988:	68e3      	ldr	r3, [r4, #12]
 800598a:	b1f3      	cbz	r3, 80059ca <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 800598c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800598e:	b29b      	uxth	r3, r3
 8005990:	b1fb      	cbz	r3, 80059d2 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	07d2      	lsls	r2, r2, #31
 8005998:	d536      	bpl.n	8005a08 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800599e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a2:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80059a4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80059ac:	e7ee      	b.n	800598c <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	07d0      	lsls	r0, r2, #31
 80059b4:	d518      	bpl.n	80059e8 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059b6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80059b8:	7b1b      	ldrb	r3, [r3, #12]
 80059ba:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80059be:	3301      	adds	r3, #1
 80059c0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80059c2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80059ca:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ed      	bne.n	80059ae <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d2:	4642      	mov	r2, r8
 80059d4:	4629      	mov	r1, r5
 80059d6:	4620      	mov	r0, r4
 80059d8:	f7ff fd38 	bl	800544c <SPI_EndRxTransaction>
 80059dc:	b9e8      	cbnz	r0, 8005a1a <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059de:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80059e0:	3800      	subs	r0, #0
 80059e2:	bf18      	it	ne
 80059e4:	2001      	movne	r0, #1
error :
 80059e6:	e008      	b.n	80059fa <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059e8:	f7fe f83a 	bl	8003a60 <HAL_GetTick>
 80059ec:	eba0 0008 	sub.w	r0, r0, r8
 80059f0:	42a8      	cmp	r0, r5
 80059f2:	d3ea      	bcc.n	80059ca <HAL_SPI_Receive+0xdc>
 80059f4:	1c69      	adds	r1, r5, #1
 80059f6:	d0e8      	beq.n	80059ca <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 80059f8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005a00:	2300      	movs	r3, #0
 8005a02:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 8005a06:	e786      	b.n	8005916 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a08:	f7fe f82a 	bl	8003a60 <HAL_GetTick>
 8005a0c:	eba0 0008 	sub.w	r0, r0, r8
 8005a10:	42a8      	cmp	r0, r5
 8005a12:	d3bb      	bcc.n	800598c <HAL_SPI_Receive+0x9e>
 8005a14:	1c6b      	adds	r3, r5, #1
 8005a16:	d0b9      	beq.n	800598c <HAL_SPI_Receive+0x9e>
 8005a18:	e7ee      	b.n	80059f8 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	6563      	str	r3, [r4, #84]	@ 0x54
 8005a1e:	e7de      	b.n	80059de <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 8005a20:	2002      	movs	r0, #2
 8005a22:	e7ea      	b.n	80059fa <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 8005a24:	2002      	movs	r0, #2
 8005a26:	e776      	b.n	8005916 <HAL_SPI_Receive+0x28>

08005a28 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a2c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d130      	bne.n	8005a96 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	2302      	movs	r3, #2
 8005a36:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a3a:	6803      	ldr	r3, [r0, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a44:	4a15      	ldr	r2, [pc, #84]	@ (8005a9c <HAL_TIM_Base_Start_IT+0x70>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01a      	beq.n	8005a80 <HAL_TIM_Base_Start_IT+0x54>
 8005a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a4e:	d017      	beq.n	8005a80 <HAL_TIM_Base_Start_IT+0x54>
 8005a50:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <HAL_TIM_Base_Start_IT+0x54>
 8005a58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00f      	beq.n	8005a80 <HAL_TIM_Base_Start_IT+0x54>
 8005a60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <HAL_TIM_Base_Start_IT+0x54>
 8005a68:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <HAL_TIM_Base_Start_IT+0x54>
 8005a70:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <HAL_TIM_Base_Start_IT+0x54>
 8005a78:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	2a06      	cmp	r2, #6
 8005a88:	d003      	beq.n	8005a92 <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f042 0201 	orr.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8005a92:	2000      	movs	r0, #0
 8005a94:	4770      	bx	lr
    return HAL_ERROR;
 8005a96:	2001      	movs	r0, #1
}
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000

08005aa0 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aa8:	6803      	ldr	r3, [r0, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	0791      	lsls	r1, r2, #30
{
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ab2:	d50e      	bpl.n	8005ad2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	0792      	lsls	r2, r2, #30
 8005ab8:	d50b      	bpl.n	8005ad2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aba:	f06f 0202 	mvn.w	r2, #2
 8005abe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	079b      	lsls	r3, r3, #30
 8005ac8:	d077      	beq.n	8005bba <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	f7ff ffea 	bl	8005aa2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	0750      	lsls	r0, r2, #29
 8005ad8:	d510      	bpl.n	8005afc <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	0751      	lsls	r1, r2, #29
 8005ade:	d50d      	bpl.n	8005afc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ae0:	f06f 0204 	mvn.w	r2, #4
 8005ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005af0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005af2:	d068      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005af4:	f7ff ffd5 	bl	8005aa2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af8:	2300      	movs	r3, #0
 8005afa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	0712      	lsls	r2, r2, #28
 8005b02:	d50f      	bpl.n	8005b24 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	0710      	lsls	r0, r2, #28
 8005b08:	d50c      	bpl.n	8005b24 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b0a:	f06f 0208 	mvn.w	r2, #8
 8005b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b10:	2204      	movs	r2, #4
 8005b12:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005b18:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b1a:	d05a      	beq.n	8005bd2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1c:	f7ff ffc1 	bl	8005aa2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b20:	2300      	movs	r3, #0
 8005b22:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	06d2      	lsls	r2, r2, #27
 8005b2a:	d510      	bpl.n	8005b4e <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	06d0      	lsls	r0, r2, #27
 8005b30:	d50d      	bpl.n	8005b4e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b32:	f06f 0210 	mvn.w	r2, #16
 8005b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b38:	2208      	movs	r2, #8
 8005b3a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005b42:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b44:	d04b      	beq.n	8005bde <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b46:	f7ff ffac 	bl	8005aa2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	07d1      	lsls	r1, r2, #31
 8005b54:	d508      	bpl.n	8005b68 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	07d2      	lsls	r2, r2, #31
 8005b5a:	d505      	bpl.n	8005b68 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b5c:	f06f 0201 	mvn.w	r2, #1
 8005b60:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b62:	4620      	mov	r0, r4
 8005b64:	f7fb feac 	bl	80018c0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	0610      	lsls	r0, r2, #24
 8005b6e:	d508      	bpl.n	8005b82 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	0611      	lsls	r1, r2, #24
 8005b74:	d505      	bpl.n	8005b82 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b76:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b7a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 f8c8 	bl	8005d12 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	0652      	lsls	r2, r2, #25
 8005b88:	d508      	bpl.n	8005b9c <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	0650      	lsls	r0, r2, #25
 8005b8e:	d505      	bpl.n	8005b9c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b94:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005b96:	4620      	mov	r0, r4
 8005b98:	f7ff ff85 	bl	8005aa6 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	0691      	lsls	r1, r2, #26
 8005ba2:	d522      	bpl.n	8005bea <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	0692      	lsls	r2, r2, #26
 8005ba8:	d51f      	bpl.n	8005bea <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005baa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005bae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bb0:	611a      	str	r2, [r3, #16]
}
 8005bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005bb6:	f000 b8ab 	b.w	8005d10 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bba:	f7ff ff71 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f7ff ff70 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005bc4:	e783      	b.n	8005ace <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	f7ff ff6b 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f7ff ff6a 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005bd0:	e792      	b.n	8005af8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd2:	f7ff ff65 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f7ff ff64 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005bdc:	e7a0      	b.n	8005b20 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bde:	f7ff ff5f 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be2:	4620      	mov	r0, r4
 8005be4:	f7ff ff5e 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005be8:	e7af      	b.n	8005b4a <HAL_TIM_IRQHandler+0xa2>
}
 8005bea:	bd10      	pop	{r4, pc}

08005bec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bec:	4a30      	ldr	r2, [pc, #192]	@ (8005cb0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005bee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf0:	4290      	cmp	r0, r2
 8005bf2:	d012      	beq.n	8005c1a <TIM_Base_SetConfig+0x2e>
 8005bf4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005bf8:	d00f      	beq.n	8005c1a <TIM_Base_SetConfig+0x2e>
 8005bfa:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005bfe:	4290      	cmp	r0, r2
 8005c00:	d00b      	beq.n	8005c1a <TIM_Base_SetConfig+0x2e>
 8005c02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c06:	4290      	cmp	r0, r2
 8005c08:	d007      	beq.n	8005c1a <TIM_Base_SetConfig+0x2e>
 8005c0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c0e:	4290      	cmp	r0, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_Base_SetConfig+0x2e>
 8005c12:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005c16:	4290      	cmp	r0, r2
 8005c18:	d119      	bne.n	8005c4e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005c1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c20:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c22:	4a23      	ldr	r2, [pc, #140]	@ (8005cb0 <TIM_Base_SetConfig+0xc4>)
 8005c24:	4290      	cmp	r0, r2
 8005c26:	d029      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c28:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005c2c:	d026      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c2e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005c32:	4290      	cmp	r0, r2
 8005c34:	d022      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c3a:	4290      	cmp	r0, r2
 8005c3c:	d01e      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c42:	4290      	cmp	r0, r2
 8005c44:	d01a      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c46:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005c4a:	4290      	cmp	r0, r2
 8005c4c:	d016      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c4e:	4a19      	ldr	r2, [pc, #100]	@ (8005cb4 <TIM_Base_SetConfig+0xc8>)
 8005c50:	4290      	cmp	r0, r2
 8005c52:	d013      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c58:	4290      	cmp	r0, r2
 8005c5a:	d00f      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c5c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c60:	4290      	cmp	r0, r2
 8005c62:	d00b      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c64:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8005c68:	4290      	cmp	r0, r2
 8005c6a:	d007      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c70:	4290      	cmp	r0, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_Base_SetConfig+0x90>
 8005c74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c78:	4290      	cmp	r0, r2
 8005c7a:	d103      	bne.n	8005c84 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c82:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c84:	694a      	ldr	r2, [r1, #20]
 8005c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c8a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005c8c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c8e:	688b      	ldr	r3, [r1, #8]
 8005c90:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c92:	680b      	ldr	r3, [r1, #0]
 8005c94:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c96:	4b06      	ldr	r3, [pc, #24]	@ (8005cb0 <TIM_Base_SetConfig+0xc4>)
 8005c98:	4298      	cmp	r0, r3
 8005c9a:	d003      	beq.n	8005ca4 <TIM_Base_SetConfig+0xb8>
 8005c9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ca0:	4298      	cmp	r0, r3
 8005ca2:	d101      	bne.n	8005ca8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca4:	690b      	ldr	r3, [r1, #16]
 8005ca6:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	6143      	str	r3, [r0, #20]
}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40014000 	.word	0x40014000

08005cb8 <HAL_TIM_Base_Init>:
{
 8005cb8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005cba:	4604      	mov	r4, r0
 8005cbc:	b330      	cbz	r0, 8005d0c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005cbe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005cc2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005cc6:	b91b      	cbnz	r3, 8005cd0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005cc8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005ccc:	f7ff feac 	bl	8005a28 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd8:	1d21      	adds	r1, r4, #4
 8005cda:	f7ff ff87 	bl	8005bec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8005ce4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005cea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005cee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005cf2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005cfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cfe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005d02:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005d06:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005d0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005d0c:	2001      	movs	r0, #1
 8005d0e:	e7fc      	b.n	8005d0a <HAL_TIM_Base_Init+0x52>

08005d10 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005d10:	4770      	bx	lr

08005d12 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005d12:	4770      	bx	lr

08005d14 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d18:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8005d1c:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8005d20:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8005d24:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 8005d28:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005d2c:	6809      	ldr	r1, [r1, #0]
 8005d2e:	ea43 0308 	orr.w	r3, r3, r8
 8005d32:	b991      	cbnz	r1, 8005d5a <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d34:	ea43 030e 	orr.w	r3, r3, lr
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	ea43 030c 	orr.w	r3, r3, ip
 8005d3e:	6801      	ldr	r1, [r0, #0]
 8005d40:	433b      	orrs	r3, r7
 8005d42:	4333      	orrs	r3, r6
 8005d44:	432b      	orrs	r3, r5
 8005d46:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8005d4a:	4323      	orrs	r3, r4
 8005d4c:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8005d54:	2000      	movs	r0, #0
 8005d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d5a:	6801      	ldr	r1, [r0, #0]
 8005d5c:	ea43 030e 	orr.w	r3, r3, lr
 8005d60:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005d68:	ea42 030c 	orr.w	r3, r2, ip
 8005d6c:	6841      	ldr	r1, [r0, #4]
 8005d6e:	433b      	orrs	r3, r7
 8005d70:	4333      	orrs	r3, r6
 8005d72:	432b      	orrs	r3, r5
 8005d74:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8005d78:	4323      	orrs	r3, r4
 8005d7a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	6043      	str	r3, [r0, #4]
 8005d82:	e7e7      	b.n	8005d54 <FMC_SDRAM_Init+0x40>

08005d84 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005d84:	68cb      	ldr	r3, [r1, #12]
 8005d86:	f103 3cff 	add.w	ip, r3, #4294967295
 8005d8a:	694b      	ldr	r3, [r1, #20]
{
 8005d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005d8e:	680f      	ldr	r7, [r1, #0]
 8005d90:	684c      	ldr	r4, [r1, #4]
 8005d92:	688e      	ldr	r6, [r1, #8]
 8005d94:	690d      	ldr	r5, [r1, #16]
 8005d96:	6989      	ldr	r1, [r1, #24]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	051b      	lsls	r3, r3, #20
 8005d9c:	3c01      	subs	r4, #1
 8005d9e:	3e01      	subs	r6, #1
 8005da0:	3d01      	subs	r5, #1
 8005da2:	3901      	subs	r1, #1
 8005da4:	3f01      	subs	r7, #1
 8005da6:	0124      	lsls	r4, r4, #4
 8005da8:	0236      	lsls	r6, r6, #8
 8005daa:	042d      	lsls	r5, r5, #16
 8005dac:	0609      	lsls	r1, r1, #24
 8005dae:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8005db2:	b95a      	cbnz	r2, 8005dcc <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005db4:	433b      	orrs	r3, r7
 8005db6:	4323      	orrs	r3, r4
 8005db8:	6882      	ldr	r2, [r0, #8]
 8005dba:	4333      	orrs	r3, r6
 8005dbc:	432b      	orrs	r3, r5
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8005dc8:	2000      	movs	r0, #0
 8005dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005dcc:	6882      	ldr	r2, [r0, #8]
 8005dce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005dd2:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005dda:	ea44 0306 	orr.w	r3, r4, r6
 8005dde:	68c2      	ldr	r2, [r0, #12]
 8005de0:	433b      	orrs	r3, r7
 8005de2:	432b      	orrs	r3, r5
 8005de4:	430b      	orrs	r3, r1
 8005de6:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60c3      	str	r3, [r0, #12]
 8005dee:	e7eb      	b.n	8005dc8 <FMC_SDRAM_Timing_Init+0x44>

08005df0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	4604      	mov	r4, r0
 8005df4:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005df6:	6902      	ldr	r2, [r0, #16]
 8005df8:	e9d1 3000 	ldrd	r3, r0, [r1]
 8005dfc:	4303      	orrs	r3, r0
 8005dfe:	68c8      	ldr	r0, [r1, #12]
 8005e00:	0d92      	lsrs	r2, r2, #22
 8005e02:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8005e06:	0592      	lsls	r2, r2, #22
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	688a      	ldr	r2, [r1, #8]
 8005e0c:	3a01      	subs	r2, #1
 8005e0e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005e12:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8005e14:	f7fd fe24 	bl	8003a60 <HAL_GetTick>
 8005e18:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005e1a:	69a0      	ldr	r0, [r4, #24]
 8005e1c:	f010 0020 	ands.w	r0, r0, #32
 8005e20:	d003      	beq.n	8005e2a <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e22:	1c6b      	adds	r3, r5, #1
 8005e24:	d0f9      	beq.n	8005e1a <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005e26:	b90d      	cbnz	r5, 8005e2c <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8005e28:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005e2c:	f7fd fe18 	bl	8003a60 <HAL_GetTick>
 8005e30:	1b80      	subs	r0, r0, r6
 8005e32:	42a8      	cmp	r0, r5
 8005e34:	d9f1      	bls.n	8005e1a <FMC_SDRAM_SendCommand+0x2a>
 8005e36:	e7f7      	b.n	8005e28 <FMC_SDRAM_SendCommand+0x38>

08005e38 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005e38:	6943      	ldr	r3, [r0, #20]
 8005e3a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005e3e:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8005e42:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005e46:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8005e48:	2000      	movs	r0, #0
 8005e4a:	4770      	bx	lr

08005e4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005e4c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8005e4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005e52:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005e54:	f001 fe24 	bl	8007aa0 <xTaskGetSchedulerState>
 8005e58:	2801      	cmp	r0, #1
 8005e5a:	d003      	beq.n	8005e64 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8005e5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8005e60:	f000 bbf0 	b.w	8006644 <xPortSysTickHandler>
}
 8005e64:	bd08      	pop	{r3, pc}
	...

08005e68 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e68:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e6c:	b92b      	cbnz	r3, 8005e7a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e6e:	4b06      	ldr	r3, [pc, #24]	@ (8005e88 <osKernelInitialize+0x20>)
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	b928      	cbnz	r0, 8005e80 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e74:	2201      	movs	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e78:	4770      	bx	lr
    stat = osErrorISR;
 8005e7a:	f06f 0005 	mvn.w	r0, #5
 8005e7e:	4770      	bx	lr
    } else {
      stat = osError;
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20001d94 	.word	0x20001d94

08005e8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e92:	b95c      	cbnz	r4, 8005eac <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005e94:	4b08      	ldr	r3, [pc, #32]	@ (8005eb8 <osKernelStart+0x2c>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2a01      	cmp	r2, #1
 8005e9a:	d10a      	bne.n	8005eb2 <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e9c:	4a07      	ldr	r2, [pc, #28]	@ (8005ebc <osKernelStart+0x30>)
 8005e9e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ea4:	f001 fb7a 	bl	800759c <vTaskStartScheduler>
      stat = osOK;
 8005ea8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8005eaa:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8005eac:	f06f 0005 	mvn.w	r0, #5
 8005eb0:	e7fb      	b.n	8005eaa <osKernelStart+0x1e>
      stat = osError;
 8005eb2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005eb6:	e7f8      	b.n	8005eaa <osKernelStart+0x1e>
 8005eb8:	20001d94 	.word	0x20001d94
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ec6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ec8:	460b      	mov	r3, r1
  hTask = NULL;
 8005eca:	9205      	str	r2, [sp, #20]
 8005ecc:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005ed0:	b9ca      	cbnz	r2, 8005f06 <osThreadNew+0x46>
 8005ed2:	b1c0      	cbz	r0, 8005f06 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8005ed4:	b36c      	cbz	r4, 8005f32 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005ed6:	69a5      	ldr	r5, [r4, #24]
 8005ed8:	2d00      	cmp	r5, #0
 8005eda:	bf08      	it	eq
 8005edc:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ede:	1e69      	subs	r1, r5, #1
 8005ee0:	2937      	cmp	r1, #55	@ 0x37
 8005ee2:	46ac      	mov	ip, r5
 8005ee4:	d82a      	bhi.n	8005f3c <osThreadNew+0x7c>
 8005ee6:	6861      	ldr	r1, [r4, #4]
 8005ee8:	07c9      	lsls	r1, r1, #31
 8005eea:	d427      	bmi.n	8005f3c <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005eec:	6966      	ldr	r6, [r4, #20]
 8005eee:	b16e      	cbz	r6, 8005f0c <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ef0:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ef2:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
      if (attr->name != NULL) {
 8005ef6:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ef8:	b157      	cbz	r7, 8005f10 <osThreadNew+0x50>
 8005efa:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8005efe:	d902      	bls.n	8005f06 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f00:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f02:	b104      	cbz	r4, 8005f06 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f04:	b9e6      	cbnz	r6, 8005f40 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f06:	9805      	ldr	r0, [sp, #20]
}
 8005f08:	b007      	add	sp, #28
 8005f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8005f0c:	2280      	movs	r2, #128	@ 0x80
 8005f0e:	e7f0      	b.n	8005ef2 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f10:	f1be 0f00 	cmp.w	lr, #0
 8005f14:	d1f7      	bne.n	8005f06 <osThreadNew+0x46>
      if (mem == 0) {
 8005f16:	6924      	ldr	r4, [r4, #16]
 8005f18:	2c00      	cmp	r4, #0
 8005f1a:	d1f4      	bne.n	8005f06 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f1c:	ac05      	add	r4, sp, #20
 8005f1e:	e9cd c400 	strd	ip, r4, [sp]
 8005f22:	b292      	uxth	r2, r2
 8005f24:	f001 fb0b 	bl	800753e <xTaskCreate>
 8005f28:	2801      	cmp	r0, #1
            hTask = NULL;
 8005f2a:	bf1c      	itt	ne
 8005f2c:	2300      	movne	r3, #0
 8005f2e:	9305      	strne	r3, [sp, #20]
 8005f30:	e7e9      	b.n	8005f06 <osThreadNew+0x46>
    name = NULL;
 8005f32:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8005f34:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8005f38:	2280      	movs	r2, #128	@ 0x80
 8005f3a:	e7ef      	b.n	8005f1c <osThreadNew+0x5c>
        return (NULL);
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	e7e3      	b.n	8005f08 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f40:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8005f44:	9500      	str	r5, [sp, #0]
 8005f46:	f001 fac2 	bl	80074ce <xTaskCreateStatic>
 8005f4a:	9005      	str	r0, [sp, #20]
 8005f4c:	e7db      	b.n	8005f06 <osThreadNew+0x46>

08005f4e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f4e:	b508      	push	{r3, lr}
 8005f50:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f54:	b922      	cbnz	r2, 8005f60 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8005f56:	b108      	cbz	r0, 8005f5c <osDelay+0xe>
      vTaskDelay(ticks);
 8005f58:	f001 fc7e 	bl	8007858 <vTaskDelay>
    stat = osOK;
 8005f5c:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8005f5e:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8005f60:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8005f64:	e7fb      	b.n	8005f5e <osDelay+0x10>

08005f66 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f68:	4604      	mov	r4, r0
 8005f6a:	460e      	mov	r6, r1
 8005f6c:	4615      	mov	r5, r2
 8005f6e:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005f72:	b942      	cbnz	r2, 8005f86 <osSemaphoreNew+0x20>
 8005f74:	b138      	cbz	r0, 8005f86 <osSemaphoreNew+0x20>
 8005f76:	4288      	cmp	r0, r1
 8005f78:	d305      	bcc.n	8005f86 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8005f7a:	b155      	cbz	r5, 8005f92 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005f7c:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8005f80:	b12b      	cbz	r3, 8005f8e <osSemaphoreNew+0x28>
 8005f82:	2f4f      	cmp	r7, #79	@ 0x4f
 8005f84:	d822      	bhi.n	8005fcc <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8005f86:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8005f88:	4620      	mov	r0, r4
 8005f8a:	b003      	add	sp, #12
 8005f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005f8e:	2f00      	cmp	r7, #0
 8005f90:	d1f9      	bne.n	8005f86 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8005f92:	2c01      	cmp	r4, #1
 8005f94:	d00c      	beq.n	8005fb0 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005f96:	4620      	mov	r0, r4
 8005f98:	4631      	mov	r1, r6
 8005f9a:	f000 fd8d 	bl	8006ab8 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d0f0      	beq.n	8005f86 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8005fa4:	b985      	cbnz	r5, 8005fc8 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f001 f8cb 	bl	8007144 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8005fae:	e7eb      	b.n	8005f88 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	f000 fd36 	bl	8006a26 <xQueueGenericCreate>
 8005fba:	e00e      	b.n	8005fda <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f000 fd59 	bl	8006a74 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d0de      	beq.n	8005f86 <osSemaphoreNew+0x20>
          name = attr->name;
 8005fc8:	682d      	ldr	r5, [r5, #0]
 8005fca:	e7ec      	b.n	8005fa6 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8005fcc:	2801      	cmp	r0, #1
 8005fce:	d1f5      	bne.n	8005fbc <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005fd0:	2103      	movs	r1, #3
 8005fd2:	9100      	str	r1, [sp, #0]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	f000 fcd8 	bl	800698a <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8005fda:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d0d2      	beq.n	8005f86 <osSemaphoreNew+0x20>
 8005fe0:	2e00      	cmp	r6, #0
 8005fe2:	d0df      	beq.n	8005fa4 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f000 fd83 	bl	8006af4 <xQueueGenericSend>
 8005fee:	2801      	cmp	r0, #1
 8005ff0:	d0d8      	beq.n	8005fa4 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f001 f8d0 	bl	8007198 <vQueueDelete>
      if (hSemaphore != NULL) {
 8005ff8:	e7c5      	b.n	8005f86 <osSemaphoreNew+0x20>

08005ffa <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005ffa:	b513      	push	{r0, r1, r4, lr}
 8005ffc:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005ffe:	b328      	cbz	r0, 800604c <osSemaphoreAcquire+0x52>
 8006000:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006004:	b1cb      	cbz	r3, 800603a <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8006006:	bb09      	cbnz	r1, 800604c <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006008:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800600a:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800600c:	f001 f82d 	bl	800706a <xQueueReceiveFromISR>
 8006010:	2801      	cmp	r0, #1
 8006012:	d003      	beq.n	800601c <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8006014:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006018:	b002      	add	sp, #8
 800601a:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800601c:	9b01      	ldr	r3, [sp, #4]
 800601e:	b90b      	cbnz	r3, 8006024 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 8006020:	2000      	movs	r0, #0
 8006022:	e7f9      	b.n	8006018 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 8006024:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800602c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	e7f2      	b.n	8006020 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800603a:	f000 ff59 	bl	8006ef0 <xQueueSemaphoreTake>
 800603e:	2801      	cmp	r0, #1
 8006040:	d0ee      	beq.n	8006020 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8006042:	2c00      	cmp	r4, #0
 8006044:	d0e6      	beq.n	8006014 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8006046:	f06f 0001 	mvn.w	r0, #1
 800604a:	e7e5      	b.n	8006018 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800604c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006050:	e7e2      	b.n	8006018 <osSemaphoreAcquire+0x1e>

08006052 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006052:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006054:	b318      	cbz	r0, 800609e <osSemaphoreRelease+0x4c>
 8006056:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800605a:	b1cb      	cbz	r3, 8006090 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800605c:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800605e:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8006060:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006062:	f000 fe56 	bl	8006d12 <xQueueGiveFromISR>
 8006066:	2801      	cmp	r0, #1
 8006068:	d004      	beq.n	8006074 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800606a:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800606e:	b003      	add	sp, #12
 8006070:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8006074:	9b01      	ldr	r3, [sp, #4]
 8006076:	b14b      	cbz	r3, 800608c <osSemaphoreRelease+0x3a>
 8006078:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800607c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006080:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800608c:	2000      	movs	r0, #0
 800608e:	e7ee      	b.n	800606e <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006090:	461a      	mov	r2, r3
 8006092:	4619      	mov	r1, r3
 8006094:	f000 fd2e 	bl	8006af4 <xQueueGenericSend>
 8006098:	2801      	cmp	r0, #1
 800609a:	d0f7      	beq.n	800608c <osSemaphoreRelease+0x3a>
 800609c:	e7e5      	b.n	800606a <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800609e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80060a2:	e7e4      	b.n	800606e <osSemaphoreRelease+0x1c>

080060a4 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 80060a4:	b130      	cbz	r0, 80060b4 <osSemaphoreGetCount+0x10>
 80060a6:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 80060aa:	b10b      	cbz	r3, 80060b0 <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80060ac:	f001 b83d 	b.w	800712a <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80060b0:	f001 b828 	b.w	8007104 <uxQueueMessagesWaiting>
  }

  return (count);
}
 80060b4:	4770      	bx	lr

080060b6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80060b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060b8:	4605      	mov	r5, r0
 80060ba:	460e      	mov	r6, r1
 80060bc:	4614      	mov	r4, r2
 80060be:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80060c2:	b11f      	cbz	r7, 80060cc <osMessageQueueNew+0x16>
  hQueue = NULL;
 80060c4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80060c6:	4628      	mov	r0, r5
 80060c8:	b003      	add	sp, #12
 80060ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d0f9      	beq.n	80060c4 <osMessageQueueNew+0xe>
 80060d0:	2900      	cmp	r1, #0
 80060d2:	d0f7      	beq.n	80060c4 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 80060d4:	b1da      	cbz	r2, 800610e <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80060d6:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 80060da:	b183      	cbz	r3, 80060fe <osMessageQueueNew+0x48>
 80060dc:	2a4f      	cmp	r2, #79	@ 0x4f
 80060de:	d9f1      	bls.n	80060c4 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80060e0:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80060e2:	2a00      	cmp	r2, #0
 80060e4:	d0ee      	beq.n	80060c4 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80060e6:	6966      	ldr	r6, [r4, #20]
 80060e8:	434d      	muls	r5, r1
 80060ea:	42ae      	cmp	r6, r5
 80060ec:	d3ea      	bcc.n	80060c4 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80060ee:	9700      	str	r7, [sp, #0]
 80060f0:	f000 fc4b 	bl	800698a <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80060f4:	4605      	mov	r5, r0
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d0e4      	beq.n	80060c4 <osMessageQueueNew+0xe>
        name = attr->name;
 80060fa:	6824      	ldr	r4, [r4, #0]
 80060fc:	e011      	b.n	8006122 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80060fe:	2a00      	cmp	r2, #0
 8006100:	d1e0      	bne.n	80060c4 <osMessageQueueNew+0xe>
 8006102:	6923      	ldr	r3, [r4, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1dd      	bne.n	80060c4 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006108:	6963      	ldr	r3, [r4, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1da      	bne.n	80060c4 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800610e:	4628      	mov	r0, r5
 8006110:	2200      	movs	r2, #0
 8006112:	4631      	mov	r1, r6
 8006114:	f000 fc87 	bl	8006a26 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006118:	4605      	mov	r5, r0
 800611a:	2800      	cmp	r0, #0
 800611c:	d0d2      	beq.n	80060c4 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800611e:	2c00      	cmp	r4, #0
 8006120:	d1eb      	bne.n	80060fa <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8006122:	4621      	mov	r1, r4
 8006124:	4628      	mov	r0, r5
 8006126:	f001 f80d 	bl	8007144 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800612a:	e7cc      	b.n	80060c6 <osMessageQueueNew+0x10>

0800612c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800612c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800612e:	461c      	mov	r4, r3
 8006130:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006134:	b1de      	cbz	r6, 800616e <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006136:	b338      	cbz	r0, 8006188 <osMessageQueuePut+0x5c>
 8006138:	b331      	cbz	r1, 8006188 <osMessageQueuePut+0x5c>
 800613a:	bb2b      	cbnz	r3, 8006188 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800613c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800613e:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006140:	f000 fd8a 	bl	8006c58 <xQueueGenericSendFromISR>
 8006144:	2801      	cmp	r0, #1
 8006146:	d003      	beq.n	8006150 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8006148:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800614c:	b002      	add	sp, #8
 800614e:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8006150:	9b01      	ldr	r3, [sp, #4]
 8006152:	b90b      	cbnz	r3, 8006158 <osMessageQueuePut+0x2c>
  stat = osOK;
 8006154:	2000      	movs	r0, #0
 8006156:	e7f9      	b.n	800614c <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8006158:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800615c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006160:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	e7f2      	b.n	8006154 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800616e:	b158      	cbz	r0, 8006188 <osMessageQueuePut+0x5c>
 8006170:	b151      	cbz	r1, 8006188 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006172:	4633      	mov	r3, r6
 8006174:	4622      	mov	r2, r4
 8006176:	f000 fcbd 	bl	8006af4 <xQueueGenericSend>
 800617a:	2801      	cmp	r0, #1
 800617c:	d0ea      	beq.n	8006154 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800617e:	2c00      	cmp	r4, #0
 8006180:	d0e2      	beq.n	8006148 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8006182:	f06f 0001 	mvn.w	r0, #1
 8006186:	e7e1      	b.n	800614c <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8006188:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800618c:	e7de      	b.n	800614c <osMessageQueuePut+0x20>

0800618e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800618e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006190:	461c      	mov	r4, r3
 8006192:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006196:	b1db      	cbz	r3, 80061d0 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006198:	b330      	cbz	r0, 80061e8 <osMessageQueueGet+0x5a>
 800619a:	b329      	cbz	r1, 80061e8 <osMessageQueueGet+0x5a>
 800619c:	bb24      	cbnz	r4, 80061e8 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800619e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80061a0:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80061a2:	f000 ff62 	bl	800706a <xQueueReceiveFromISR>
 80061a6:	2801      	cmp	r0, #1
 80061a8:	d003      	beq.n	80061b2 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 80061aa:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80061ae:	b003      	add	sp, #12
 80061b0:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 80061b2:	9b01      	ldr	r3, [sp, #4]
 80061b4:	b90b      	cbnz	r3, 80061ba <osMessageQueueGet+0x2c>
  stat = osOK;
 80061b6:	2000      	movs	r0, #0
 80061b8:	e7f9      	b.n	80061ae <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 80061ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80061be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	e7f2      	b.n	80061b6 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80061d0:	b150      	cbz	r0, 80061e8 <osMessageQueueGet+0x5a>
 80061d2:	b149      	cbz	r1, 80061e8 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80061d4:	4622      	mov	r2, r4
 80061d6:	f000 fded 	bl	8006db4 <xQueueReceive>
 80061da:	2801      	cmp	r0, #1
 80061dc:	d0eb      	beq.n	80061b6 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 80061de:	2c00      	cmp	r4, #0
 80061e0:	d0e3      	beq.n	80061aa <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 80061e2:	f06f 0001 	mvn.w	r0, #1
 80061e6:	e7e2      	b.n	80061ae <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 80061e8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80061ec:	e7df      	b.n	80061ae <osMessageQueueGet+0x20>

080061ee <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80061ee:	f7ff bf59 	b.w	80060a4 <osSemaphoreGetCount>
	...

080061f4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80061f4:	4b03      	ldr	r3, [pc, #12]	@ (8006204 <vApplicationGetIdleTaskMemory+0x10>)
 80061f6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80061f8:	4b03      	ldr	r3, [pc, #12]	@ (8006208 <vApplicationGetIdleTaskMemory+0x14>)
 80061fa:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80061fc:	2380      	movs	r3, #128	@ 0x80
 80061fe:	6013      	str	r3, [r2, #0]
}
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20001d34 	.word	0x20001d34
 8006208:	20001b34 	.word	0x20001b34

0800620c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800620c:	4b03      	ldr	r3, [pc, #12]	@ (800621c <vApplicationGetTimerTaskMemory+0x10>)
 800620e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006210:	4b03      	ldr	r3, [pc, #12]	@ (8006220 <vApplicationGetTimerTaskMemory+0x14>)
 8006212:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006218:	6013      	str	r3, [r2, #0]
}
 800621a:	4770      	bx	lr
 800621c:	20001ad4 	.word	0x20001ad4
 8006220:	200016d4 	.word	0x200016d4

08006224 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006224:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006226:	4b10      	ldr	r3, [pc, #64]	@ (8006268 <prvInsertBlockIntoFreeList+0x44>)
 8006228:	461a      	mov	r2, r3
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4283      	cmp	r3, r0
 800622e:	d3fb      	bcc.n	8006228 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006230:	6854      	ldr	r4, [r2, #4]
 8006232:	1911      	adds	r1, r2, r4
 8006234:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006236:	bf01      	itttt	eq
 8006238:	6841      	ldreq	r1, [r0, #4]
 800623a:	4610      	moveq	r0, r2
 800623c:	1909      	addeq	r1, r1, r4
 800623e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006240:	6844      	ldr	r4, [r0, #4]
 8006242:	1901      	adds	r1, r0, r4
 8006244:	428b      	cmp	r3, r1
 8006246:	d10c      	bne.n	8006262 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006248:	4908      	ldr	r1, [pc, #32]	@ (800626c <prvInsertBlockIntoFreeList+0x48>)
 800624a:	6809      	ldr	r1, [r1, #0]
 800624c:	428b      	cmp	r3, r1
 800624e:	d003      	beq.n	8006258 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	4421      	add	r1, r4
 8006254:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006256:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006258:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800625a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800625c:	bf18      	it	ne
 800625e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006260:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006262:	4619      	mov	r1, r3
 8006264:	e7f8      	b.n	8006258 <prvInsertBlockIntoFreeList+0x34>
 8006266:	bf00      	nop
 8006268:	20001db0 	.word	0x20001db0
 800626c:	20001dac 	.word	0x20001dac

08006270 <pvPortMalloc>:
{
 8006270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006274:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006276:	f001 f9d7 	bl	8007628 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800627a:	4942      	ldr	r1, [pc, #264]	@ (8006384 <pvPortMalloc+0x114>)
 800627c:	4d42      	ldr	r5, [pc, #264]	@ (8006388 <pvPortMalloc+0x118>)
 800627e:	680b      	ldr	r3, [r1, #0]
 8006280:	bb0b      	cbnz	r3, 80062c6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8006282:	4a42      	ldr	r2, [pc, #264]	@ (800638c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006284:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006286:	bf1f      	itttt	ne
 8006288:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800628a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800628e:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 8006292:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006294:	bf0c      	ite	eq
 8006296:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800629a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800629c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800629e:	4e3c      	ldr	r6, [pc, #240]	@ (8006390 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 80062a0:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062a2:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80062a6:	2000      	movs	r0, #0
 80062a8:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062aa:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80062ac:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062b0:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062b2:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 80062b6:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062b8:	4b36      	ldr	r3, [pc, #216]	@ (8006394 <pvPortMalloc+0x124>)
 80062ba:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062bc:	4b36      	ldr	r3, [pc, #216]	@ (8006398 <pvPortMalloc+0x128>)
 80062be:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80062c4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062c6:	682e      	ldr	r6, [r5, #0]
 80062c8:	4226      	tst	r6, r4
 80062ca:	d155      	bne.n	8006378 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 80062cc:	2c00      	cmp	r4, #0
 80062ce:	d046      	beq.n	800635e <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 80062d0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062d4:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062d6:	bf1c      	itt	ne
 80062d8:	f023 0307 	bicne.w	r3, r3, #7
 80062dc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d04a      	beq.n	8006378 <pvPortMalloc+0x108>
 80062e2:	4f2d      	ldr	r7, [pc, #180]	@ (8006398 <pvPortMalloc+0x128>)
 80062e4:	683c      	ldr	r4, [r7, #0]
 80062e6:	429c      	cmp	r4, r3
 80062e8:	d346      	bcc.n	8006378 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 80062ea:	4a29      	ldr	r2, [pc, #164]	@ (8006390 <pvPortMalloc+0x120>)
 80062ec:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062ee:	6868      	ldr	r0, [r5, #4]
 80062f0:	4298      	cmp	r0, r3
 80062f2:	d204      	bcs.n	80062fe <pvPortMalloc+0x8e>
 80062f4:	f8d5 c000 	ldr.w	ip, [r5]
 80062f8:	f1bc 0f00 	cmp.w	ip, #0
 80062fc:	d115      	bne.n	800632a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80062fe:	6809      	ldr	r1, [r1, #0]
 8006300:	42a9      	cmp	r1, r5
 8006302:	d039      	beq.n	8006378 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006304:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006306:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800630a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800630c:	1ac2      	subs	r2, r0, r3
 800630e:	2a10      	cmp	r2, #16
 8006310:	d912      	bls.n	8006338 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006312:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006314:	0741      	lsls	r1, r0, #29
 8006316:	d00b      	beq.n	8006330 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	e7fe      	b.n	8006328 <pvPortMalloc+0xb8>
 800632a:	462a      	mov	r2, r5
 800632c:	4665      	mov	r5, ip
 800632e:	e7de      	b.n	80062ee <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006330:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006332:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006334:	f7ff ff76 	bl	8006224 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006338:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800633a:	4916      	ldr	r1, [pc, #88]	@ (8006394 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800633c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800633e:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8006340:	4a16      	ldr	r2, [pc, #88]	@ (800639c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006342:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006344:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800634a:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800634c:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800634e:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8006350:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006354:	bf38      	it	cc
 8006356:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8006358:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800635a:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 800635e:	f001 fa07 	bl	8007770 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006362:	0763      	lsls	r3, r4, #29
 8006364:	d00a      	beq.n	800637c <pvPortMalloc+0x10c>
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	e7fe      	b.n	8006376 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8006378:	2400      	movs	r4, #0
 800637a:	e7f0      	b.n	800635e <pvPortMalloc+0xee>
}
 800637c:	4620      	mov	r0, r4
 800637e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006382:	bf00      	nop
 8006384:	20001dac 	.word	0x20001dac
 8006388:	20001d98 	.word	0x20001d98
 800638c:	20001db8 	.word	0x20001db8
 8006390:	20001db0 	.word	0x20001db0
 8006394:	20001da4 	.word	0x20001da4
 8006398:	20001da8 	.word	0x20001da8
 800639c:	20001da0 	.word	0x20001da0

080063a0 <vPortFree>:
{
 80063a0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80063a2:	4604      	mov	r4, r0
 80063a4:	b390      	cbz	r0, 800640c <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006410 <vPortFree+0x70>)
 80063a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80063ac:	6812      	ldr	r2, [r2, #0]
 80063ae:	4213      	tst	r3, r2
 80063b0:	d108      	bne.n	80063c4 <vPortFree+0x24>
 80063b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	e7fe      	b.n	80063c2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063c4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80063c8:	b141      	cbz	r1, 80063dc <vPortFree+0x3c>
 80063ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	e7fe      	b.n	80063da <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063dc:	ea23 0302 	bic.w	r3, r3, r2
 80063e0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80063e4:	f001 f920 	bl	8007628 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006414 <vPortFree+0x74>)
 80063ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80063ee:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063f0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063f4:	440b      	add	r3, r1
 80063f6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063f8:	f7ff ff14 	bl	8006224 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063fc:	4a06      	ldr	r2, [pc, #24]	@ (8006418 <vPortFree+0x78>)
 80063fe:	6813      	ldr	r3, [r2, #0]
}
 8006400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8006404:	3301      	adds	r3, #1
 8006406:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006408:	f001 b9b2 	b.w	8007770 <xTaskResumeAll>
}
 800640c:	bd10      	pop	{r4, pc}
 800640e:	bf00      	nop
 8006410:	20001d98 	.word	0x20001d98
 8006414:	20001da8 	.word	0x20001da8
 8006418:	20001d9c 	.word	0x20001d9c

0800641c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800641c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006420:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006424:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006428:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800642a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006430:	4770      	bx	lr

08006432 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006436:	4770      	bx	lr

08006438 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006438:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800643a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006440:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006442:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006444:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006446:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006448:	3301      	adds	r3, #1
 800644a:	6003      	str	r3, [r0, #0]
}
 800644c:	4770      	bx	lr

0800644e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800644e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006450:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006452:	1c63      	adds	r3, r4, #1
 8006454:	d10a      	bne.n	800646c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006456:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800645c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800645e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006460:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006462:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006464:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006466:	3301      	adds	r3, #1
 8006468:	6003      	str	r3, [r0, #0]
}
 800646a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800646c:	f100 0208 	add.w	r2, r0, #8
 8006470:	4613      	mov	r3, r2
 8006472:	6852      	ldr	r2, [r2, #4]
 8006474:	6815      	ldr	r5, [r2, #0]
 8006476:	42a5      	cmp	r5, r4
 8006478:	d9fa      	bls.n	8006470 <vListInsert+0x22>
 800647a:	e7ed      	b.n	8006458 <vListInsert+0xa>

0800647c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800647c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8006480:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006482:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006484:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006486:	6859      	ldr	r1, [r3, #4]
 8006488:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800648a:	bf08      	it	eq
 800648c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800648e:	2200      	movs	r2, #0
 8006490:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	3a01      	subs	r2, #1
 8006496:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006498:	6818      	ldr	r0, [r3, #0]
}
 800649a:	4770      	bx	lr

0800649c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800649c:	4808      	ldr	r0, [pc, #32]	@ (80064c0 <prvPortStartFirstTask+0x24>)
 800649e:	6800      	ldr	r0, [r0, #0]
 80064a0:	6800      	ldr	r0, [r0, #0]
 80064a2:	f380 8808 	msr	MSP, r0
 80064a6:	f04f 0000 	mov.w	r0, #0
 80064aa:	f380 8814 	msr	CONTROL, r0
 80064ae:	b662      	cpsie	i
 80064b0:	b661      	cpsie	f
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	df00      	svc	0
 80064bc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064be:	0000      	.short	0x0000
 80064c0:	e000ed08 	.word	0xe000ed08

080064c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80064d4 <vPortEnableVFP+0x10>
 80064c8:	6801      	ldr	r1, [r0, #0]
 80064ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80064ce:	6001      	str	r1, [r0, #0]
 80064d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064d2:	0000      	.short	0x0000
 80064d4:	e000ed88 	.word	0xe000ed88

080064d8 <prvTaskExitError>:
{
 80064d8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80064de:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <prvTaskExitError+0x3c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3301      	adds	r3, #1
 80064e4:	d008      	beq.n	80064f8 <prvTaskExitError+0x20>
 80064e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	e7fe      	b.n	80064f6 <prvTaskExitError+0x1e>
 80064f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006508:	9b01      	ldr	r3, [sp, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0fc      	beq.n	8006508 <prvTaskExitError+0x30>
}
 800650e:	b002      	add	sp, #8
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000080 	.word	0x20000080

08006518 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006518:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800651c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006520:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <pxPortInitialiseStack+0x28>)
 8006522:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006526:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800652a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800652e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006532:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006536:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800653a:	3844      	subs	r0, #68	@ 0x44
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	080064d9 	.word	0x080064d9
	...

08006550 <SVC_Handler>:
	__asm volatile (
 8006550:	4b07      	ldr	r3, [pc, #28]	@ (8006570 <pxCurrentTCBConst2>)
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	6808      	ldr	r0, [r1, #0]
 8006556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	f380 8809 	msr	PSP, r0
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8811 	msr	BASEPRI, r0
 800656a:	4770      	bx	lr
 800656c:	f3af 8000 	nop.w

08006570 <pxCurrentTCBConst2>:
 8006570:	200122f8 	.word	0x200122f8

08006574 <vPortEnterCritical>:
 8006574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006584:	4a0a      	ldr	r2, [pc, #40]	@ (80065b0 <vPortEnterCritical+0x3c>)
 8006586:	6813      	ldr	r3, [r2, #0]
 8006588:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800658a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800658c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800658e:	d10e      	bne.n	80065ae <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006590:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006594:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8006598:	b2db      	uxtb	r3, r3
 800659a:	b143      	cbz	r3, 80065ae <vPortEnterCritical+0x3a>
 800659c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	e7fe      	b.n	80065ac <vPortEnterCritical+0x38>
}
 80065ae:	4770      	bx	lr
 80065b0:	20000080 	.word	0x20000080

080065b4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80065b4:	4a08      	ldr	r2, [pc, #32]	@ (80065d8 <vPortExitCritical+0x24>)
 80065b6:	6813      	ldr	r3, [r2, #0]
 80065b8:	b943      	cbnz	r3, 80065cc <vPortExitCritical+0x18>
 80065ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	e7fe      	b.n	80065ca <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80065cc:	3b01      	subs	r3, #1
 80065ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065d0:	b90b      	cbnz	r3, 80065d6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065d2:	f383 8811 	msr	BASEPRI, r3
}
 80065d6:	4770      	bx	lr
 80065d8:	20000080 	.word	0x20000080
 80065dc:	00000000 	.word	0x00000000

080065e0 <PendSV_Handler>:
	__asm volatile
 80065e0:	f3ef 8009 	mrs	r0, PSP
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	4b15      	ldr	r3, [pc, #84]	@ (8006640 <pxCurrentTCBConst>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	f01e 0f10 	tst.w	lr, #16
 80065f0:	bf08      	it	eq
 80065f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fa:	6010      	str	r0, [r2, #0]
 80065fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006604:	f380 8811 	msr	BASEPRI, r0
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f001 f946 	bl	80078a0 <vTaskSwitchContext>
 8006614:	f04f 0000 	mov.w	r0, #0
 8006618:	f380 8811 	msr	BASEPRI, r0
 800661c:	bc09      	pop	{r0, r3}
 800661e:	6819      	ldr	r1, [r3, #0]
 8006620:	6808      	ldr	r0, [r1, #0]
 8006622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006626:	f01e 0f10 	tst.w	lr, #16
 800662a:	bf08      	it	eq
 800662c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006630:	f380 8809 	msr	PSP, r0
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	f3af 8000 	nop.w

08006640 <pxCurrentTCBConst>:
 8006640:	200122f8 	.word	0x200122f8

08006644 <xPortSysTickHandler>:
{
 8006644:	b508      	push	{r3, lr}
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006656:	f000 fff5 	bl	8007644 <xTaskIncrementTick>
 800665a:	b128      	cbz	r0, 8006668 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800665c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006664:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006668:	2300      	movs	r3, #0
 800666a:	f383 8811 	msr	BASEPRI, r3
}
 800666e:	bd08      	pop	{r3, pc}

08006670 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006670:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006674:	2300      	movs	r3, #0
 8006676:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006678:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800667a:	4b05      	ldr	r3, [pc, #20]	@ (8006690 <vPortSetupTimerInterrupt+0x20>)
 800667c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	fbb3 f3f1 	udiv	r3, r3, r1
 8006686:	3b01      	subs	r3, #1
 8006688:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800668a:	2307      	movs	r3, #7
 800668c:	6113      	str	r3, [r2, #16]
}
 800668e:	4770      	bx	lr
 8006690:	20000074 	.word	0x20000074

08006694 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006694:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8006698:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800669a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800669e:	4a38      	ldr	r2, [pc, #224]	@ (8006780 <xPortStartScheduler+0xec>)
 80066a0:	4291      	cmp	r1, r2
 80066a2:	d108      	bne.n	80066b6 <xPortStartScheduler+0x22>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	e7fe      	b.n	80066b4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066b6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80066ba:	4b32      	ldr	r3, [pc, #200]	@ (8006784 <xPortStartScheduler+0xf0>)
 80066bc:	429a      	cmp	r2, r3
 80066be:	d108      	bne.n	80066d2 <xPortStartScheduler+0x3e>
 80066c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	e7fe      	b.n	80066d0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006788 <xPortStartScheduler+0xf4>)
 80066d4:	781a      	ldrb	r2, [r3, #0]
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066da:	22ff      	movs	r2, #255	@ 0xff
 80066dc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066de:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066e0:	4a2a      	ldr	r2, [pc, #168]	@ (800678c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80066ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066f0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066f2:	4a27      	ldr	r2, [pc, #156]	@ (8006790 <xPortStartScheduler+0xfc>)
 80066f4:	2307      	movs	r3, #7
 80066f6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066f8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80066fc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066fe:	0609      	lsls	r1, r1, #24
 8006700:	d40a      	bmi.n	8006718 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006702:	2b03      	cmp	r3, #3
 8006704:	d011      	beq.n	800672a <xPortStartScheduler+0x96>
 8006706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	e7fe      	b.n	8006716 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8006718:	3b01      	subs	r3, #1
 800671a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800671c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f88d 3003 	strb.w	r3, [sp, #3]
 8006728:	e7e6      	b.n	80066f8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800672a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800672e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006730:	9b01      	ldr	r3, [sp, #4]
 8006732:	4a15      	ldr	r2, [pc, #84]	@ (8006788 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006734:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006738:	b2db      	uxtb	r3, r3
 800673a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800673c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006744:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006748:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800674c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006750:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8006754:	f7ff ff8c 	bl	8006670 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006758:	4b0e      	ldr	r3, [pc, #56]	@ (8006794 <xPortStartScheduler+0x100>)
 800675a:	2500      	movs	r5, #0
 800675c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800675e:	f7ff feb1 	bl	80064c4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006762:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006766:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800676a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800676e:	f7ff fe95 	bl	800649c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006772:	f001 f895 	bl	80078a0 <vTaskSwitchContext>
	prvTaskExitError();
 8006776:	f7ff feaf 	bl	80064d8 <prvTaskExitError>
}
 800677a:	4628      	mov	r0, r5
 800677c:	b003      	add	sp, #12
 800677e:	bd30      	pop	{r4, r5, pc}
 8006780:	410fc271 	.word	0x410fc271
 8006784:	410fc270 	.word	0x410fc270
 8006788:	e000e400 	.word	0xe000e400
 800678c:	20011dbc 	.word	0x20011dbc
 8006790:	20011db8 	.word	0x20011db8
 8006794:	20000080 	.word	0x20000080

08006798 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006798:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800679c:	2b0f      	cmp	r3, #15
 800679e:	d90e      	bls.n	80067be <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067a0:	4a11      	ldr	r2, [pc, #68]	@ (80067e8 <vPortValidateInterruptPriority+0x50>)
 80067a2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067a4:	4a11      	ldr	r2, [pc, #68]	@ (80067ec <vPortValidateInterruptPriority+0x54>)
 80067a6:	7812      	ldrb	r2, [r2, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d908      	bls.n	80067be <vPortValidateInterruptPriority+0x26>
 80067ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	e7fe      	b.n	80067bc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80067c2:	4a0b      	ldr	r2, [pc, #44]	@ (80067f0 <vPortValidateInterruptPriority+0x58>)
 80067c4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d908      	bls.n	80067e4 <vPortValidateInterruptPriority+0x4c>
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	e7fe      	b.n	80067e2 <vPortValidateInterruptPriority+0x4a>
	}
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	e000e3f0 	.word	0xe000e3f0
 80067ec:	20011dbc 	.word	0x20011dbc
 80067f0:	20011db8 	.word	0x20011db8

080067f4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067f4:	b510      	push	{r4, lr}
 80067f6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067f8:	f7ff febc 	bl	8006574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067fc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80067fe:	f7ff fed9 	bl	80065b4 <vPortExitCritical>

	return xReturn;
}
 8006802:	fab4 f084 	clz	r0, r4
 8006806:	0940      	lsrs	r0, r0, #5
 8006808:	bd10      	pop	{r4, pc}

0800680a <prvCopyDataToQueue>:
{
 800680a:	b570      	push	{r4, r5, r6, lr}
 800680c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800680e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006810:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8006812:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006814:	b942      	cbnz	r2, 8006828 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006816:	6806      	ldr	r6, [r0, #0]
 8006818:	b99e      	cbnz	r6, 8006842 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800681a:	6880      	ldr	r0, [r0, #8]
 800681c:	f001 f98e 	bl	8007b3c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006820:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006822:	3501      	adds	r5, #1
 8006824:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8006826:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006828:	b96e      	cbnz	r6, 8006846 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800682a:	6840      	ldr	r0, [r0, #4]
 800682c:	f009 fde3 	bl	80103f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006830:	6863      	ldr	r3, [r4, #4]
 8006832:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006834:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006836:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006838:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800683a:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800683c:	bf24      	itt	cs
 800683e:	6823      	ldrcs	r3, [r4, #0]
 8006840:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8006842:	2000      	movs	r0, #0
 8006844:	e7ed      	b.n	8006822 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006846:	68c0      	ldr	r0, [r0, #12]
 8006848:	f009 fdd5 	bl	80103f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800684c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800684e:	68e3      	ldr	r3, [r4, #12]
 8006850:	4251      	negs	r1, r2
 8006852:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006854:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006856:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006858:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800685a:	bf3e      	ittt	cc
 800685c:	68a3      	ldrcc	r3, [r4, #8]
 800685e:	185b      	addcc	r3, r3, r1
 8006860:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006862:	2e02      	cmp	r6, #2
 8006864:	d1ed      	bne.n	8006842 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006866:	b10d      	cbz	r5, 800686c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8006868:	3d01      	subs	r5, #1
 800686a:	e7ea      	b.n	8006842 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800686c:	4628      	mov	r0, r5
 800686e:	e7d8      	b.n	8006822 <prvCopyDataToQueue+0x18>

08006870 <prvCopyDataFromQueue>:
{
 8006870:	4603      	mov	r3, r0
 8006872:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8006876:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006878:	b16a      	cbz	r2, 8006896 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800687a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800687c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800687e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006880:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006882:	bf28      	it	cs
 8006884:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006886:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006888:	bf28      	it	cs
 800688a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800688c:	68d9      	ldr	r1, [r3, #12]
}
 800688e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006892:	f009 bdb0 	b.w	80103f6 <memcpy>
}
 8006896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800689a:	4770      	bx	lr

0800689c <prvUnlockQueue>:
{
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80068a0:	f7ff fe68 	bl	8006574 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80068a4:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068a8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80068ac:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	dc14      	bgt.n	80068dc <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80068b2:	23ff      	movs	r3, #255	@ 0xff
 80068b4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80068b8:	f7ff fe7c 	bl	80065b4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80068bc:	f7ff fe5a 	bl	8006574 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80068c0:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c4:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80068c8:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068ca:	2d00      	cmp	r5, #0
 80068cc:	dc12      	bgt.n	80068f4 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80068ce:	23ff      	movs	r3, #255	@ 0xff
 80068d0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 80068d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80068d8:	f7ff be6c 	b.w	80065b4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0e7      	beq.n	80068b2 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068e2:	4630      	mov	r0, r6
 80068e4:	f001 f84e 	bl	8007984 <xTaskRemoveFromEventList>
 80068e8:	b108      	cbz	r0, 80068ee <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80068ea:	f001 f8d3 	bl	8007a94 <vTaskMissedYield>
			--cTxLock;
 80068ee:	3d01      	subs	r5, #1
 80068f0:	b26d      	sxtb	r5, r5
 80068f2:	e7dc      	b.n	80068ae <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0e9      	beq.n	80068ce <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068fa:	4630      	mov	r0, r6
 80068fc:	f001 f842 	bl	8007984 <xTaskRemoveFromEventList>
 8006900:	b108      	cbz	r0, 8006906 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006902:	f001 f8c7 	bl	8007a94 <vTaskMissedYield>
				--cRxLock;
 8006906:	3d01      	subs	r5, #1
 8006908:	b26d      	sxtb	r5, r5
 800690a:	e7de      	b.n	80068ca <prvUnlockQueue+0x2e>

0800690c <xQueueGenericReset>:
{
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006910:	4604      	mov	r4, r0
 8006912:	b940      	cbnz	r0, 8006926 <xQueueGenericReset+0x1a>
 8006914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	e7fe      	b.n	8006924 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8006926:	f7ff fe25 	bl	8006574 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800692a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 800692e:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006930:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006932:	434b      	muls	r3, r1
 8006934:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006936:	1a5b      	subs	r3, r3, r1
 8006938:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800693a:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800693c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800693e:	2000      	movs	r0, #0
 8006940:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006942:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006944:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006948:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800694c:	b9a5      	cbnz	r5, 8006978 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	b173      	cbz	r3, 8006970 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006952:	f104 0010 	add.w	r0, r4, #16
 8006956:	f001 f815 	bl	8007984 <xTaskRemoveFromEventList>
 800695a:	b148      	cbz	r0, 8006970 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800695c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006964:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8006970:	f7ff fe20 	bl	80065b4 <vPortExitCritical>
}
 8006974:	2001      	movs	r0, #1
 8006976:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006978:	f104 0010 	add.w	r0, r4, #16
 800697c:	f7ff fd4e 	bl	800641c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006980:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006984:	f7ff fd4a 	bl	800641c <vListInitialise>
 8006988:	e7f2      	b.n	8006970 <xQueueGenericReset+0x64>

0800698a <xQueueGenericCreateStatic>:
	{
 800698a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800698c:	460d      	mov	r5, r1
 800698e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006990:	b940      	cbnz	r0, 80069a4 <xQueueGenericCreateStatic+0x1a>
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	e7fe      	b.n	80069a2 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80069a4:	b943      	cbnz	r3, 80069b8 <xQueueGenericCreateStatic+0x2e>
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	e7fe      	b.n	80069b6 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069b8:	b14a      	cbz	r2, 80069ce <xQueueGenericCreateStatic+0x44>
 80069ba:	b991      	cbnz	r1, 80069e2 <xQueueGenericCreateStatic+0x58>
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069ce:	b141      	cbz	r1, 80069e2 <xQueueGenericCreateStatic+0x58>
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	e7fe      	b.n	80069e0 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069e2:	2350      	movs	r3, #80	@ 0x50
 80069e4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069e6:	9b01      	ldr	r3, [sp, #4]
 80069e8:	2b50      	cmp	r3, #80	@ 0x50
 80069ea:	d008      	beq.n	80069fe <xQueueGenericCreateStatic+0x74>
 80069ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	e7fe      	b.n	80069fc <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069fe:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a00:	2d00      	cmp	r5, #0
 8006a02:	bf08      	it	eq
 8006a04:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8006a06:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a0a:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 8006a0e:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a10:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a12:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a14:	f7ff ff7a 	bl	800690c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006a18:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006a1c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8006a20:	4620      	mov	r0, r4
 8006a22:	b003      	add	sp, #12
 8006a24:	bd30      	pop	{r4, r5, pc}

08006a26 <xQueueGenericCreate>:
	{
 8006a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a28:	460d      	mov	r5, r1
 8006a2a:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	b940      	cbnz	r0, 8006a42 <xQueueGenericCreate+0x1c>
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	e7fe      	b.n	8006a40 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a42:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a44:	3050      	adds	r0, #80	@ 0x50
 8006a46:	f7ff fc13 	bl	8006270 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	b170      	cbz	r0, 8006a6c <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a54:	b165      	cbz	r5, 8006a70 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a56:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8006a5a:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8006a5e:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a60:	2101      	movs	r1, #1
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff ff52 	bl	800690c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006a68:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a70:	4603      	mov	r3, r0
 8006a72:	e7f2      	b.n	8006a5a <xQueueGenericCreate+0x34>

08006a74 <xQueueCreateCountingSemaphoreStatic>:
	{
 8006a74:	b513      	push	{r0, r1, r4, lr}
 8006a76:	4613      	mov	r3, r2
 8006a78:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8006a7a:	b940      	cbnz	r0, 8006a8e <xQueueCreateCountingSemaphoreStatic+0x1a>
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	e7fe      	b.n	8006a8c <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006a8e:	4288      	cmp	r0, r1
 8006a90:	d208      	bcs.n	8006aa4 <xQueueCreateCountingSemaphoreStatic+0x30>
 8006a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	e7fe      	b.n	8006aa2 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	9200      	str	r2, [sp, #0]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4611      	mov	r1, r2
 8006aac:	f7ff ff6d 	bl	800698a <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8006ab0:	b100      	cbz	r0, 8006ab4 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ab2:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006ab4:	b002      	add	sp, #8
 8006ab6:	bd10      	pop	{r4, pc}

08006ab8 <xQueueCreateCountingSemaphore>:
	{
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8006abc:	b940      	cbnz	r0, 8006ad0 <xQueueCreateCountingSemaphore+0x18>
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	e7fe      	b.n	8006ace <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006ad0:	4288      	cmp	r0, r1
 8006ad2:	d208      	bcs.n	8006ae6 <xQueueCreateCountingSemaphore+0x2e>
 8006ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	e7fe      	b.n	8006ae4 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	2100      	movs	r1, #0
 8006aea:	f7ff ff9c 	bl	8006a26 <xQueueGenericCreate>
		if( xHandle != NULL )
 8006aee:	b100      	cbz	r0, 8006af2 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006af0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006af2:	bd10      	pop	{r4, pc}

08006af4 <xQueueGenericSend>:
{
 8006af4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006af8:	460f      	mov	r7, r1
 8006afa:	9201      	str	r2, [sp, #4]
 8006afc:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8006afe:	4604      	mov	r4, r0
 8006b00:	b940      	cbnz	r0, 8006b14 <xQueueGenericSend+0x20>
 8006b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	e7fe      	b.n	8006b12 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b14:	b951      	cbnz	r1, 8006b2c <xQueueGenericSend+0x38>
 8006b16:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006b18:	b143      	cbz	r3, 8006b2c <xQueueGenericSend+0x38>
 8006b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	e7fe      	b.n	8006b2a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b2c:	2e02      	cmp	r6, #2
 8006b2e:	d10b      	bne.n	8006b48 <xQueueGenericSend+0x54>
 8006b30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d008      	beq.n	8006b48 <xQueueGenericSend+0x54>
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	e7fe      	b.n	8006b46 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b48:	f000 ffaa 	bl	8007aa0 <xTaskGetSchedulerState>
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	b330      	cbz	r0, 8006b9e <xQueueGenericSend+0xaa>
 8006b50:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8006b52:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8006b56:	f7ff fd0d 	bl	8006574 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b5a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006b5c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d301      	bcc.n	8006b66 <xQueueGenericSend+0x72>
 8006b62:	2e02      	cmp	r6, #2
 8006b64:	d127      	bne.n	8006bb6 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b66:	4632      	mov	r2, r6
 8006b68:	4639      	mov	r1, r7
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f7ff fe4d 	bl	800680a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006b72:	b11b      	cbz	r3, 8006b7c <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b74:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006b78:	f000 ff04 	bl	8007984 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006b7c:	b148      	cbz	r0, 8006b92 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8006b7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b86:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006b92:	f7ff fd0f 	bl	80065b4 <vPortExitCritical>
				return pdPASS;
 8006b96:	2001      	movs	r0, #1
}
 8006b98:	b004      	add	sp, #16
 8006b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b9e:	9b01      	ldr	r3, [sp, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0d6      	beq.n	8006b52 <xQueueGenericSend+0x5e>
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bb6:	9b01      	ldr	r3, [sp, #4]
 8006bb8:	b91b      	cbnz	r3, 8006bc2 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8006bba:	f7ff fcfb 	bl	80065b4 <vPortExitCritical>
					return errQUEUE_FULL;
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e7ea      	b.n	8006b98 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8006bc2:	b915      	cbnz	r5, 8006bca <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bc4:	a802      	add	r0, sp, #8
 8006bc6:	f000 ff1d 	bl	8007a04 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006bca:	f7ff fcf3 	bl	80065b4 <vPortExitCritical>
		vTaskSuspendAll();
 8006bce:	f000 fd2b 	bl	8007628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bd2:	f7ff fccf 	bl	8006574 <vPortEnterCritical>
 8006bd6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006bda:	2bff      	cmp	r3, #255	@ 0xff
 8006bdc:	bf08      	it	eq
 8006bde:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006be2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006be6:	2bff      	cmp	r3, #255	@ 0xff
 8006be8:	bf08      	it	eq
 8006bea:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8006bee:	f7ff fce1 	bl	80065b4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bf2:	a901      	add	r1, sp, #4
 8006bf4:	a802      	add	r0, sp, #8
 8006bf6:	f000 ff11 	bl	8007a1c <xTaskCheckForTimeOut>
 8006bfa:	bb38      	cbnz	r0, 8006c4c <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bfc:	f7ff fcba 	bl	8006574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c00:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006c02:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d10e      	bne.n	8006c26 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006c08:	f7ff fcd4 	bl	80065b4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c0c:	9901      	ldr	r1, [sp, #4]
 8006c0e:	f104 0010 	add.w	r0, r4, #16
 8006c12:	f000 fe7f 	bl	8007914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7ff fe40 	bl	800689c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c1c:	f000 fda8 	bl	8007770 <xTaskResumeAll>
 8006c20:	b148      	cbz	r0, 8006c36 <xQueueGenericSend+0x142>
 8006c22:	2501      	movs	r5, #1
 8006c24:	e797      	b.n	8006b56 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8006c26:	f7ff fcc5 	bl	80065b4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7ff fe36 	bl	800689c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c30:	f000 fd9e 	bl	8007770 <xTaskResumeAll>
 8006c34:	e7f5      	b.n	8006c22 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8006c36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c3e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	e7ea      	b.n	8006c22 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f7ff fe25 	bl	800689c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c52:	f000 fd8d 	bl	8007770 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006c56:	e7b2      	b.n	8006bbe <xQueueGenericSend+0xca>

08006c58 <xQueueGenericSendFromISR>:
{
 8006c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c5c:	4689      	mov	r9, r1
 8006c5e:	4617      	mov	r7, r2
 8006c60:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8006c62:	4604      	mov	r4, r0
 8006c64:	b940      	cbnz	r0, 8006c78 <xQueueGenericSendFromISR+0x20>
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	e7fe      	b.n	8006c76 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c78:	b951      	cbnz	r1, 8006c90 <xQueueGenericSendFromISR+0x38>
 8006c7a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006c7c:	b143      	cbz	r3, 8006c90 <xQueueGenericSendFromISR+0x38>
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	e7fe      	b.n	8006c8e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c90:	2e02      	cmp	r6, #2
 8006c92:	d10b      	bne.n	8006cac <xQueueGenericSendFromISR+0x54>
 8006c94:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d008      	beq.n	8006cac <xQueueGenericSendFromISR+0x54>
 8006c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	e7fe      	b.n	8006caa <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cac:	f7ff fd74 	bl	8006798 <vPortValidateInterruptPriority>
	__asm volatile
 8006cb0:	f3ef 8811 	mrs	r8, BASEPRI
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cc4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006cc6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d301      	bcc.n	8006cd0 <xQueueGenericSendFromISR+0x78>
 8006ccc:	2e02      	cmp	r6, #2
 8006cce:	d11e      	bne.n	8006d0e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cd0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cd4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cd6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cd8:	4632      	mov	r2, r6
 8006cda:	4649      	mov	r1, r9
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff fd94 	bl	800680a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006ce2:	1c6b      	adds	r3, r5, #1
 8006ce4:	d10e      	bne.n	8006d04 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ce6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006ce8:	b13b      	cbz	r3, 8006cfa <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006cee:	f000 fe49 	bl	8007984 <xTaskRemoveFromEventList>
 8006cf2:	b110      	cbz	r0, 8006cfa <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8006cf4:	b10f      	cbz	r7, 8006cfa <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8006cfa:	2001      	movs	r0, #1
	__asm volatile
 8006cfc:	f388 8811 	msr	BASEPRI, r8
}
 8006d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d04:	3501      	adds	r5, #1
 8006d06:	b26d      	sxtb	r5, r5
 8006d08:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8006d0c:	e7f5      	b.n	8006cfa <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8006d0e:	2000      	movs	r0, #0
 8006d10:	e7f4      	b.n	8006cfc <xQueueGenericSendFromISR+0xa4>

08006d12 <xQueueGiveFromISR>:
{
 8006d12:	b570      	push	{r4, r5, r6, lr}
 8006d14:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006d16:	4604      	mov	r4, r0
 8006d18:	b940      	cbnz	r0, 8006d2c <xQueueGiveFromISR+0x1a>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	e7fe      	b.n	8006d2a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d2c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006d2e:	b143      	cbz	r3, 8006d42 <xQueueGiveFromISR+0x30>
 8006d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	e7fe      	b.n	8006d40 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006d42:	6803      	ldr	r3, [r0, #0]
 8006d44:	b953      	cbnz	r3, 8006d5c <xQueueGiveFromISR+0x4a>
 8006d46:	6883      	ldr	r3, [r0, #8]
 8006d48:	b143      	cbz	r3, 8006d5c <xQueueGiveFromISR+0x4a>
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	e7fe      	b.n	8006d5a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d5c:	f7ff fd1c 	bl	8006798 <vPortValidateInterruptPriority>
	__asm volatile
 8006d60:	f3ef 8611 	mrs	r6, BASEPRI
 8006d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d74:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d76:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d919      	bls.n	8006db0 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d80:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8006d82:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d84:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d86:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8006d88:	d10d      	bne.n	8006da6 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006d8c:	b13b      	cbz	r3, 8006d9e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d8e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006d92:	f000 fdf7 	bl	8007984 <xTaskRemoveFromEventList>
 8006d96:	b110      	cbz	r0, 8006d9e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8006d98:	b10d      	cbz	r5, 8006d9e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8006d9e:	2001      	movs	r0, #1
	__asm volatile
 8006da0:	f386 8811 	msr	BASEPRI, r6
}
 8006da4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006da6:	3301      	adds	r3, #1
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006dae:	e7f6      	b.n	8006d9e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8006db0:	2000      	movs	r0, #0
 8006db2:	e7f5      	b.n	8006da0 <xQueueGiveFromISR+0x8e>

08006db4 <xQueueReceive>:
{
 8006db4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006db8:	460e      	mov	r6, r1
 8006dba:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	b940      	cbnz	r0, 8006dd2 <xQueueReceive+0x1e>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	e7fe      	b.n	8006dd0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dd2:	b951      	cbnz	r1, 8006dea <xQueueReceive+0x36>
 8006dd4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006dd6:	b143      	cbz	r3, 8006dea <xQueueReceive+0x36>
 8006dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	e7fe      	b.n	8006de8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dea:	f000 fe59 	bl	8007aa0 <xTaskGetSchedulerState>
 8006dee:	4605      	mov	r5, r0
 8006df0:	b318      	cbz	r0, 8006e3a <xQueueReceive+0x86>
 8006df2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8006df4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8006df8:	f7ff fbbc 	bl	8006574 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dfc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dfe:	b347      	cbz	r7, 8006e52 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e00:	4631      	mov	r1, r6
 8006e02:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e04:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e06:	f7ff fd33 	bl	8006870 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e0a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e0c:	6923      	ldr	r3, [r4, #16]
 8006e0e:	b173      	cbz	r3, 8006e2e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e10:	f104 0010 	add.w	r0, r4, #16
 8006e14:	f000 fdb6 	bl	8007984 <xTaskRemoveFromEventList>
 8006e18:	b148      	cbz	r0, 8006e2e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8006e1a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e22:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006e2e:	f7ff fbc1 	bl	80065b4 <vPortExitCritical>
				return pdPASS;
 8006e32:	2001      	movs	r0, #1
}
 8006e34:	b004      	add	sp, #16
 8006e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0d9      	beq.n	8006df4 <xQueueReceive+0x40>
 8006e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	e7fe      	b.n	8006e50 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	b91b      	cbnz	r3, 8006e5e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8006e56:	f7ff fbad 	bl	80065b4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	e7ea      	b.n	8006e34 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8006e5e:	b915      	cbnz	r5, 8006e66 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e60:	a802      	add	r0, sp, #8
 8006e62:	f000 fdcf 	bl	8007a04 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006e66:	f7ff fba5 	bl	80065b4 <vPortExitCritical>
		vTaskSuspendAll();
 8006e6a:	f000 fbdd 	bl	8007628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e6e:	f7ff fb81 	bl	8006574 <vPortEnterCritical>
 8006e72:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006e76:	2bff      	cmp	r3, #255	@ 0xff
 8006e78:	bf08      	it	eq
 8006e7a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006e7e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006e82:	2bff      	cmp	r3, #255	@ 0xff
 8006e84:	bf08      	it	eq
 8006e86:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8006e8a:	f7ff fb93 	bl	80065b4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e8e:	a901      	add	r1, sp, #4
 8006e90:	a802      	add	r0, sp, #8
 8006e92:	f000 fdc3 	bl	8007a1c <xTaskCheckForTimeOut>
 8006e96:	bb00      	cbnz	r0, 8006eda <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f7ff fcab 	bl	80067f4 <prvIsQueueEmpty>
 8006e9e:	b1b0      	cbz	r0, 8006ece <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ea0:	9901      	ldr	r1, [sp, #4]
 8006ea2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006ea6:	f000 fd35 	bl	8007914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7ff fcf6 	bl	800689c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006eb0:	f000 fc5e 	bl	8007770 <xTaskResumeAll>
 8006eb4:	b948      	cbnz	r0, 8006eca <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8006eb6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ebe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	2501      	movs	r5, #1
 8006ecc:	e794      	b.n	8006df8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff fce4 	bl	800689c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ed4:	f000 fc4c 	bl	8007770 <xTaskResumeAll>
 8006ed8:	e7f7      	b.n	8006eca <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8006eda:	4620      	mov	r0, r4
 8006edc:	f7ff fcde 	bl	800689c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ee0:	f000 fc46 	bl	8007770 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f7ff fc85 	bl	80067f4 <prvIsQueueEmpty>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d0ed      	beq.n	8006eca <xQueueReceive+0x116>
 8006eee:	e7b4      	b.n	8006e5a <xQueueReceive+0xa6>

08006ef0 <xQueueSemaphoreTake>:
{
 8006ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ef2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8006ef4:	4604      	mov	r4, r0
{
 8006ef6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006ef8:	b940      	cbnz	r0, 8006f0c <xQueueSemaphoreTake+0x1c>
 8006efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	e7fe      	b.n	8006f0a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f0c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8006f0e:	b145      	cbz	r5, 8006f22 <xQueueSemaphoreTake+0x32>
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	e7fe      	b.n	8006f20 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f22:	f000 fdbd 	bl	8007aa0 <xTaskGetSchedulerState>
 8006f26:	4606      	mov	r6, r0
 8006f28:	b320      	cbz	r0, 8006f74 <xQueueSemaphoreTake+0x84>
 8006f2a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8006f2c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8006f2e:	f7ff fb21 	bl	8006574 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f32:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f34:	b353      	cbz	r3, 8006f8c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f36:	3b01      	subs	r3, #1
 8006f38:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	b913      	cbnz	r3, 8006f44 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f3e:	f000 fe8d 	bl	8007c5c <pvTaskIncrementMutexHeldCount>
 8006f42:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	b173      	cbz	r3, 8006f66 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f48:	f104 0010 	add.w	r0, r4, #16
 8006f4c:	f000 fd1a 	bl	8007984 <xTaskRemoveFromEventList>
 8006f50:	b148      	cbz	r0, 8006f66 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8006f52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006f66:	f7ff fb25 	bl	80065b4 <vPortExitCritical>
				return pdPASS;
 8006f6a:	2001      	movs	r0, #1
}
 8006f6c:	b005      	add	sp, #20
 8006f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f70:	4635      	mov	r5, r6
 8006f72:	e7db      	b.n	8006f2c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f74:	9b01      	ldr	r3, [sp, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0fa      	beq.n	8006f70 <xQueueSemaphoreTake+0x80>
 8006f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	e7fe      	b.n	8006f8a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f8c:	9b01      	ldr	r3, [sp, #4]
 8006f8e:	b953      	cbnz	r3, 8006fa6 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f90:	2d00      	cmp	r5, #0
 8006f92:	d066      	beq.n	8007062 <xQueueSemaphoreTake+0x172>
 8006f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	e7fe      	b.n	8006fa4 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8006fa6:	b916      	cbnz	r6, 8006fae <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fa8:	a802      	add	r0, sp, #8
 8006faa:	f000 fd2b 	bl	8007a04 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006fae:	f7ff fb01 	bl	80065b4 <vPortExitCritical>
		vTaskSuspendAll();
 8006fb2:	f000 fb39 	bl	8007628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fb6:	f7ff fadd 	bl	8006574 <vPortEnterCritical>
 8006fba:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006fbe:	2bff      	cmp	r3, #255	@ 0xff
 8006fc0:	bf08      	it	eq
 8006fc2:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8006fc6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006fca:	2bff      	cmp	r3, #255	@ 0xff
 8006fcc:	bf08      	it	eq
 8006fce:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8006fd2:	f7ff faef 	bl	80065b4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fd6:	a901      	add	r1, sp, #4
 8006fd8:	a802      	add	r0, sp, #8
 8006fda:	f000 fd1f 	bl	8007a1c <xTaskCheckForTimeOut>
 8006fde:	bb50      	cbnz	r0, 8007036 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f7ff fc07 	bl	80067f4 <prvIsQueueEmpty>
 8006fe6:	b300      	cbz	r0, 800702a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	b93b      	cbnz	r3, 8006ffc <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8006fec:	f7ff fac2 	bl	8006574 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ff0:	68a0      	ldr	r0, [r4, #8]
 8006ff2:	f000 fd65 	bl	8007ac0 <xTaskPriorityInherit>
 8006ff6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8006ff8:	f7ff fadc 	bl	80065b4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ffc:	9901      	ldr	r1, [sp, #4]
 8006ffe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007002:	f000 fc87 	bl	8007914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007006:	4620      	mov	r0, r4
 8007008:	f7ff fc48 	bl	800689c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800700c:	f000 fbb0 	bl	8007770 <xTaskResumeAll>
 8007010:	b948      	cbnz	r0, 8007026 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8007012:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800701a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	2601      	movs	r6, #1
 8007028:	e781      	b.n	8006f2e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800702a:	4620      	mov	r0, r4
 800702c:	f7ff fc36 	bl	800689c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007030:	f000 fb9e 	bl	8007770 <xTaskResumeAll>
 8007034:	e7f7      	b.n	8007026 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8007036:	4620      	mov	r0, r4
 8007038:	f7ff fc30 	bl	800689c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800703c:	f000 fb98 	bl	8007770 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007040:	4620      	mov	r0, r4
 8007042:	f7ff fbd7 	bl	80067f4 <prvIsQueueEmpty>
 8007046:	2800      	cmp	r0, #0
 8007048:	d0ed      	beq.n	8007026 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800704a:	b165      	cbz	r5, 8007066 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800704c:	f7ff fa92 	bl	8006574 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007050:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007052:	b119      	cbz	r1, 800705c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007054:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007056:	6819      	ldr	r1, [r3, #0]
 8007058:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800705c:	68a0      	ldr	r0, [r4, #8]
 800705e:	f000 fdaf 	bl	8007bc0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007062:	f7ff faa7 	bl	80065b4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007066:	2000      	movs	r0, #0
 8007068:	e780      	b.n	8006f6c <xQueueSemaphoreTake+0x7c>

0800706a <xQueueReceiveFromISR>:
{
 800706a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800706e:	4689      	mov	r9, r1
 8007070:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007072:	4604      	mov	r4, r0
 8007074:	b940      	cbnz	r0, 8007088 <xQueueReceiveFromISR+0x1e>
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	e7fe      	b.n	8007086 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007088:	b951      	cbnz	r1, 80070a0 <xQueueReceiveFromISR+0x36>
 800708a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800708c:	b143      	cbz	r3, 80070a0 <xQueueReceiveFromISR+0x36>
 800708e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	e7fe      	b.n	800709e <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070a0:	f7ff fb7a 	bl	8006798 <vPortValidateInterruptPriority>
	__asm volatile
 80070a4:	f3ef 8711 	mrs	r7, BASEPRI
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070b8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070ba:	b30d      	cbz	r5, 8007100 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 80070bc:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070c0:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80070c2:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070c4:	4620      	mov	r0, r4
 80070c6:	f7ff fbd3 	bl	8006870 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070ca:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80070cc:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070ce:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80070d0:	d111      	bne.n	80070f6 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	b153      	cbz	r3, 80070ec <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070d6:	f104 0010 	add.w	r0, r4, #16
 80070da:	f000 fc53 	bl	8007984 <xTaskRemoveFromEventList>
 80070de:	b128      	cbz	r0, 80070ec <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 80070e0:	f1b8 0f00 	cmp.w	r8, #0
 80070e4:	d002      	beq.n	80070ec <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 80070ec:	2001      	movs	r0, #1
	__asm volatile
 80070ee:	f387 8811 	msr	BASEPRI, r7
}
 80070f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070f6:	3601      	adds	r6, #1
 80070f8:	b276      	sxtb	r6, r6
 80070fa:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 80070fe:	e7f5      	b.n	80070ec <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8007100:	4628      	mov	r0, r5
 8007102:	e7f4      	b.n	80070ee <xQueueReceiveFromISR+0x84>

08007104 <uxQueueMessagesWaiting>:
{
 8007104:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8007106:	4604      	mov	r4, r0
 8007108:	b940      	cbnz	r0, 800711c <uxQueueMessagesWaiting+0x18>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	e7fe      	b.n	800711a <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 800711c:	f7ff fa2a 	bl	8006574 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007120:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8007122:	f7ff fa47 	bl	80065b4 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007126:	4620      	mov	r0, r4
 8007128:	bd10      	pop	{r4, pc}

0800712a <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 800712a:	b940      	cbnz	r0, 800713e <uxQueueMessagesWaitingFromISR+0x14>
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	e7fe      	b.n	800713c <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 800713e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007140:	4770      	bx	lr
	...

08007144 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007144:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007146:	4a07      	ldr	r2, [pc, #28]	@ (8007164 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007148:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800714a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800714e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8007152:	b91d      	cbnz	r5, 800715c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007154:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007158:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800715a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800715c:	3301      	adds	r3, #1
 800715e:	2b08      	cmp	r3, #8
 8007160:	d1f3      	bne.n	800714a <vQueueAddToRegistry+0x6>
 8007162:	e7fa      	b.n	800715a <vQueueAddToRegistry+0x16>
 8007164:	20011dc0 	.word	0x20011dc0

08007168 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007168:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800716a:	4a09      	ldr	r2, [pc, #36]	@ (8007190 <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800716c:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800716e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007172:	4281      	cmp	r1, r0
 8007174:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8007178:	d106      	bne.n	8007188 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800717a:	4a06      	ldr	r2, [pc, #24]	@ (8007194 <vQueueUnregisterQueue+0x2c>)
 800717c:	2100      	movs	r1, #0
 800717e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007182:	4422      	add	r2, r4
 8007184:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007186:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007188:	3301      	adds	r3, #1
 800718a:	2b08      	cmp	r3, #8
 800718c:	d1ef      	bne.n	800716e <vQueueUnregisterQueue+0x6>
 800718e:	e7fa      	b.n	8007186 <vQueueUnregisterQueue+0x1e>
 8007190:	20011dc4 	.word	0x20011dc4
 8007194:	20011dc0 	.word	0x20011dc0

08007198 <vQueueDelete>:
{
 8007198:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800719a:	b940      	cbnz	r0, 80071ae <vQueueDelete+0x16>
 800719c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	e7fe      	b.n	80071ac <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 80071ae:	f7ff ffdb 	bl	8007168 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071b2:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80071b6:	b91b      	cbnz	r3, 80071c0 <vQueueDelete+0x28>
}
 80071b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80071bc:	f7ff b8f0 	b.w	80063a0 <vPortFree>
}
 80071c0:	bd10      	pop	{r4, pc}

080071c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071c2:	b570      	push	{r4, r5, r6, lr}
 80071c4:	4604      	mov	r4, r0
 80071c6:	460d      	mov	r5, r1
 80071c8:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071ca:	f7ff f9d3 	bl	8006574 <vPortEnterCritical>
 80071ce:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80071d2:	2bff      	cmp	r3, #255	@ 0xff
 80071d4:	bf04      	itt	eq
 80071d6:	2300      	moveq	r3, #0
 80071d8:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 80071dc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80071e0:	2bff      	cmp	r3, #255	@ 0xff
 80071e2:	bf04      	itt	eq
 80071e4:	2300      	moveq	r3, #0
 80071e6:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80071ea:	f7ff f9e3 	bl	80065b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80071f0:	b92b      	cbnz	r3, 80071fe <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071f2:	4632      	mov	r2, r6
 80071f4:	4629      	mov	r1, r5
 80071f6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80071fa:	f000 fba5 	bl	8007948 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071fe:	4620      	mov	r0, r4
	}
 8007200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007204:	f7ff bb4a 	b.w	800689c <prvUnlockQueue>

08007208 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800720e:	f7ff f9b1 	bl	8006574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007212:	4b30      	ldr	r3, [pc, #192]	@ (80072d4 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8007214:	4e30      	ldr	r6, [pc, #192]	@ (80072d8 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	4f30      	ldr	r7, [pc, #192]	@ (80072dc <prvAddNewTaskToReadyList+0xd4>)
 800721a:	3201      	adds	r2, #1
 800721c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800721e:	6835      	ldr	r5, [r6, #0]
 8007220:	2d00      	cmp	r5, #0
 8007222:	d14b      	bne.n	80072bc <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007224:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d11f      	bne.n	800726c <prvAddNewTaskToReadyList+0x64>
 800722c:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800722e:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007230:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007232:	f7ff f8f3 	bl	800641c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007236:	2d38      	cmp	r5, #56	@ 0x38
 8007238:	f108 0814 	add.w	r8, r8, #20
 800723c:	d1f7      	bne.n	800722e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800723e:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8007304 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8007242:	4d27      	ldr	r5, [pc, #156]	@ (80072e0 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8007244:	4640      	mov	r0, r8
 8007246:	f7ff f8e9 	bl	800641c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800724a:	4628      	mov	r0, r5
 800724c:	f7ff f8e6 	bl	800641c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007250:	4824      	ldr	r0, [pc, #144]	@ (80072e4 <prvAddNewTaskToReadyList+0xdc>)
 8007252:	f7ff f8e3 	bl	800641c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007256:	4824      	ldr	r0, [pc, #144]	@ (80072e8 <prvAddNewTaskToReadyList+0xe0>)
 8007258:	f7ff f8e0 	bl	800641c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800725c:	4823      	ldr	r0, [pc, #140]	@ (80072ec <prvAddNewTaskToReadyList+0xe4>)
 800725e:	f7ff f8dd 	bl	800641c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007262:	4b23      	ldr	r3, [pc, #140]	@ (80072f0 <prvAddNewTaskToReadyList+0xe8>)
 8007264:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007268:	4b22      	ldr	r3, [pc, #136]	@ (80072f4 <prvAddNewTaskToReadyList+0xec>)
 800726a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800726c:	4a22      	ldr	r2, [pc, #136]	@ (80072f8 <prvAddNewTaskToReadyList+0xf0>)
 800726e:	6813      	ldr	r3, [r2, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007274:	4a21      	ldr	r2, [pc, #132]	@ (80072fc <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007276:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007278:	6811      	ldr	r1, [r2, #0]
 800727a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800727c:	2014      	movs	r0, #20
 800727e:	428b      	cmp	r3, r1
 8007280:	fb00 7003 	mla	r0, r0, r3, r7
 8007284:	f104 0104 	add.w	r1, r4, #4
 8007288:	bf88      	it	hi
 800728a:	6013      	strhi	r3, [r2, #0]
 800728c:	f7ff f8d4 	bl	8006438 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007290:	f7ff f990 	bl	80065b4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007294:	4b1a      	ldr	r3, [pc, #104]	@ (8007300 <prvAddNewTaskToReadyList+0xf8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	b173      	cbz	r3, 80072b8 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800729a:	6833      	ldr	r3, [r6, #0]
 800729c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d209      	bcs.n	80072b8 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 80072a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80072a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	f3bf 8f6f 	isb	sy
}
 80072b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80072bc:	4b10      	ldr	r3, [pc, #64]	@ (8007300 <prvAddNewTaskToReadyList+0xf8>)
 80072be:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	d1d2      	bne.n	800726c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072c6:	6832      	ldr	r2, [r6, #0]
 80072c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80072ca:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80072cc:	bf98      	it	ls
 80072ce:	6034      	strls	r4, [r6, #0]
 80072d0:	e7cc      	b.n	800726c <prvAddNewTaskToReadyList+0x64>
 80072d2:	bf00      	nop
 80072d4:	20011e24 	.word	0x20011e24
 80072d8:	200122f8 	.word	0x200122f8
 80072dc:	20011e98 	.word	0x20011e98
 80072e0:	20011e70 	.word	0x20011e70
 80072e4:	20011e54 	.word	0x20011e54
 80072e8:	20011e40 	.word	0x20011e40
 80072ec:	20011e28 	.word	0x20011e28
 80072f0:	20011e6c 	.word	0x20011e6c
 80072f4:	20011e68 	.word	0x20011e68
 80072f8:	20011e08 	.word	0x20011e08
 80072fc:	20011e1c 	.word	0x20011e1c
 8007300:	20011e18 	.word	0x20011e18
 8007304:	20011e84 	.word	0x20011e84

08007308 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800730a:	4b15      	ldr	r3, [pc, #84]	@ (8007360 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800730c:	4d15      	ldr	r5, [pc, #84]	@ (8007364 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800730e:	681c      	ldr	r4, [r3, #0]
{
 8007310:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007312:	6828      	ldr	r0, [r5, #0]
 8007314:	3004      	adds	r0, #4
{
 8007316:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007318:	f7ff f8b0 	bl	800647c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800731c:	1c73      	adds	r3, r6, #1
 800731e:	d107      	bne.n	8007330 <prvAddCurrentTaskToDelayedList+0x28>
 8007320:	b137      	cbz	r7, 8007330 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007322:	6829      	ldr	r1, [r5, #0]
 8007324:	4810      	ldr	r0, [pc, #64]	@ (8007368 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007326:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800732a:	3104      	adds	r1, #4
 800732c:	f7ff b884 	b.w	8006438 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	19a4      	adds	r4, r4, r6
 8007334:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007336:	d307      	bcc.n	8007348 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007338:	4b0c      	ldr	r3, [pc, #48]	@ (800736c <prvAddCurrentTaskToDelayedList+0x64>)
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	6829      	ldr	r1, [r5, #0]
}
 800733e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007342:	3104      	adds	r1, #4
 8007344:	f7ff b883 	b.w	800644e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007348:	4b09      	ldr	r3, [pc, #36]	@ (8007370 <prvAddCurrentTaskToDelayedList+0x68>)
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	6829      	ldr	r1, [r5, #0]
 800734e:	3104      	adds	r1, #4
 8007350:	f7ff f87d 	bl	800644e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007354:	4b07      	ldr	r3, [pc, #28]	@ (8007374 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800735a:	bf88      	it	hi
 800735c:	601c      	strhi	r4, [r3, #0]
}
 800735e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007360:	20011e20 	.word	0x20011e20
 8007364:	200122f8 	.word	0x200122f8
 8007368:	20011e28 	.word	0x20011e28
 800736c:	20011e68 	.word	0x20011e68
 8007370:	20011e6c 	.word	0x20011e6c
 8007374:	20011e04 	.word	0x20011e04

08007378 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007378:	4a06      	ldr	r2, [pc, #24]	@ (8007394 <prvResetNextTaskUnblockTime+0x1c>)
 800737a:	6813      	ldr	r3, [r2, #0]
 800737c:	6819      	ldr	r1, [r3, #0]
 800737e:	4b06      	ldr	r3, [pc, #24]	@ (8007398 <prvResetNextTaskUnblockTime+0x20>)
 8007380:	b919      	cbnz	r1, 800738a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007382:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007386:	601a      	str	r2, [r3, #0]
}
 8007388:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800738e:	68d2      	ldr	r2, [r2, #12]
 8007390:	6852      	ldr	r2, [r2, #4]
 8007392:	e7f8      	b.n	8007386 <prvResetNextTaskUnblockTime+0xe>
 8007394:	20011e6c 	.word	0x20011e6c
 8007398:	20011e04 	.word	0x20011e04

0800739c <prvDeleteTCB>:
	{
 800739c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800739e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 80073a2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073a4:	b93b      	cbnz	r3, 80073b6 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80073a6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80073a8:	f7fe fffa 	bl	80063a0 <vPortFree>
				vPortFree( pxTCB );
 80073ac:	4620      	mov	r0, r4
	}
 80073ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80073b2:	f7fe bff5 	b.w	80063a0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d0f9      	beq.n	80073ae <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d008      	beq.n	80073d0 <prvDeleteTCB+0x34>
 80073be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	e7fe      	b.n	80073ce <prvDeleteTCB+0x32>
	}
 80073d0:	bd10      	pop	{r4, pc}
	...

080073d4 <prvIdleTask>:
{
 80073d4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073d6:	4c13      	ldr	r4, [pc, #76]	@ (8007424 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d8:	4f13      	ldr	r7, [pc, #76]	@ (8007428 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80073da:	4d14      	ldr	r5, [pc, #80]	@ (800742c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	b973      	cbnz	r3, 80073fe <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073e0:	4b13      	ldr	r3, [pc, #76]	@ (8007430 <prvIdleTask+0x5c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d9f8      	bls.n	80073da <prvIdleTask+0x6>
				taskYIELD();
 80073e8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80073ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	e7ed      	b.n	80073da <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80073fe:	f7ff f8b9 	bl	8006574 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007406:	1d30      	adds	r0, r6, #4
 8007408:	f7ff f838 	bl	800647c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	3b01      	subs	r3, #1
 8007410:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	3b01      	subs	r3, #1
 8007416:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007418:	f7ff f8cc 	bl	80065b4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800741c:	4630      	mov	r0, r6
 800741e:	f7ff ffbd 	bl	800739c <prvDeleteTCB>
 8007422:	e7db      	b.n	80073dc <prvIdleTask+0x8>
 8007424:	20011e3c 	.word	0x20011e3c
 8007428:	20011e40 	.word	0x20011e40
 800742c:	20011e24 	.word	0x20011e24
 8007430:	20011e98 	.word	0x20011e98

08007434 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007438:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800743c:	0096      	lsls	r6, r2, #2
 800743e:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007440:	4607      	mov	r7, r0
 8007442:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007444:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007446:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007448:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800744a:	f008 ff04 	bl	8010256 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800744e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007450:	3e04      	subs	r6, #4
 8007452:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007454:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8007458:	b3b5      	cbz	r5, 80074c8 <prvInitialiseNewTask.constprop.0+0x94>
 800745a:	1e6b      	subs	r3, r5, #1
 800745c:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8007460:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007462:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007466:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800746a:	b109      	cbz	r1, 8007470 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800746c:	42ab      	cmp	r3, r5
 800746e:	d1f8      	bne.n	8007462 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007470:	2300      	movs	r3, #0
 8007472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007476:	9d08      	ldr	r5, [sp, #32]
 8007478:	2d37      	cmp	r5, #55	@ 0x37
 800747a:	bf28      	it	cs
 800747c:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800747e:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8007482:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007484:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007486:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8007488:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800748c:	f7fe ffd1 	bl	8006432 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007490:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007494:	f104 0018 	add.w	r0, r4, #24
 8007498:	f7fe ffcb 	bl	8006432 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800749c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074a0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074a4:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 80074a6:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074aa:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074ae:	4642      	mov	r2, r8
 80074b0:	4639      	mov	r1, r7
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff f830 	bl	8006518 <pxPortInitialiseStack>
 80074b8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80074ba:	f1b9 0f00 	cmp.w	r9, #0
 80074be:	d001      	beq.n	80074c4 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074c0:	f8c9 4000 	str.w	r4, [r9]
}
 80074c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074c8:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 80074cc:	e7d3      	b.n	8007476 <prvInitialiseNewTask.constprop.0+0x42>

080074ce <xTaskCreateStatic>:
	{
 80074ce:	b570      	push	{r4, r5, r6, lr}
 80074d0:	b086      	sub	sp, #24
 80074d2:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80074d6:	b945      	cbnz	r5, 80074ea <xTaskCreateStatic+0x1c>
 80074d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	e7fe      	b.n	80074e8 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80074ea:	b944      	cbnz	r4, 80074fe <xTaskCreateStatic+0x30>
 80074ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	e7fe      	b.n	80074fc <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80074fe:	2660      	movs	r6, #96	@ 0x60
 8007500:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007502:	9e05      	ldr	r6, [sp, #20]
 8007504:	2e60      	cmp	r6, #96	@ 0x60
 8007506:	d008      	beq.n	800751a <xTaskCreateStatic+0x4c>
 8007508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	e7fe      	b.n	8007518 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800751a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800751c:	2502      	movs	r5, #2
 800751e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007522:	ad04      	add	r5, sp, #16
 8007524:	9501      	str	r5, [sp, #4]
 8007526:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007528:	9402      	str	r4, [sp, #8]
 800752a:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800752c:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800752e:	f7ff ff81 	bl	8007434 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007532:	4620      	mov	r0, r4
 8007534:	f7ff fe68 	bl	8007208 <prvAddNewTaskToReadyList>
	}
 8007538:	9804      	ldr	r0, [sp, #16]
 800753a:	b006      	add	sp, #24
 800753c:	bd70      	pop	{r4, r5, r6, pc}

0800753e <xTaskCreate>:
	{
 800753e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007542:	4607      	mov	r7, r0
 8007544:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007546:	0090      	lsls	r0, r2, #2
	{
 8007548:	4688      	mov	r8, r1
 800754a:	4616      	mov	r6, r2
 800754c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800754e:	f7fe fe8f 	bl	8006270 <pvPortMalloc>
			if( pxStack != NULL )
 8007552:	4605      	mov	r5, r0
 8007554:	b920      	cbnz	r0, 8007560 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007556:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800755a:	b005      	add	sp, #20
 800755c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007560:	2060      	movs	r0, #96	@ 0x60
 8007562:	f7fe fe85 	bl	8006270 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007566:	4604      	mov	r4, r0
 8007568:	b198      	cbz	r0, 8007592 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800756a:	2300      	movs	r3, #0
 800756c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007570:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8007572:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007578:	9002      	str	r0, [sp, #8]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	4632      	mov	r2, r6
 800757e:	464b      	mov	r3, r9
 8007580:	4641      	mov	r1, r8
 8007582:	4638      	mov	r0, r7
 8007584:	f7ff ff56 	bl	8007434 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007588:	4620      	mov	r0, r4
 800758a:	f7ff fe3d 	bl	8007208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800758e:	2001      	movs	r0, #1
 8007590:	e7e3      	b.n	800755a <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8007592:	4628      	mov	r0, r5
 8007594:	f7fe ff04 	bl	80063a0 <vPortFree>
		if( pxNewTCB != NULL )
 8007598:	e7dd      	b.n	8007556 <xTaskCreate+0x18>
	...

0800759c <vTaskStartScheduler>:
{
 800759c:	b510      	push	{r4, lr}
 800759e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075a0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075a2:	aa07      	add	r2, sp, #28
 80075a4:	a906      	add	r1, sp, #24
 80075a6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075a8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075ac:	f7fe fe22 	bl	80061f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075b0:	9b05      	ldr	r3, [sp, #20]
 80075b2:	9302      	str	r3, [sp, #8]
 80075b4:	9b06      	ldr	r3, [sp, #24]
 80075b6:	9a07      	ldr	r2, [sp, #28]
 80075b8:	4916      	ldr	r1, [pc, #88]	@ (8007614 <vTaskStartScheduler+0x78>)
 80075ba:	4817      	ldr	r0, [pc, #92]	@ (8007618 <vTaskStartScheduler+0x7c>)
 80075bc:	e9cd 4300 	strd	r4, r3, [sp]
 80075c0:	4623      	mov	r3, r4
 80075c2:	f7ff ff84 	bl	80074ce <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80075c6:	b318      	cbz	r0, 8007610 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 80075c8:	f000 fba6 	bl	8007d18 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80075cc:	2801      	cmp	r0, #1
 80075ce:	d114      	bne.n	80075fa <vTaskStartScheduler+0x5e>
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80075e0:	4b0e      	ldr	r3, [pc, #56]	@ (800761c <vTaskStartScheduler+0x80>)
 80075e2:	f04f 32ff 	mov.w	r2, #4294967295
 80075e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007620 <vTaskStartScheduler+0x84>)
 80075ea:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <vTaskStartScheduler+0x88>)
 80075ee:	601c      	str	r4, [r3, #0]
}
 80075f0:	b008      	add	sp, #32
 80075f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80075f6:	f7ff b84d 	b.w	8006694 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075fa:	3001      	adds	r0, #1
 80075fc:	d108      	bne.n	8007610 <vTaskStartScheduler+0x74>
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	e7fe      	b.n	800760e <vTaskStartScheduler+0x72>
}
 8007610:	b008      	add	sp, #32
 8007612:	bd10      	pop	{r4, pc}
 8007614:	0801209c 	.word	0x0801209c
 8007618:	080073d5 	.word	0x080073d5
 800761c:	20011e04 	.word	0x20011e04
 8007620:	20011e18 	.word	0x20011e18
 8007624:	20011e20 	.word	0x20011e20

08007628 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007628:	4a02      	ldr	r2, [pc, #8]	@ (8007634 <vTaskSuspendAll+0xc>)
 800762a:	6813      	ldr	r3, [r2, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	6013      	str	r3, [r2, #0]
}
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20011e00 	.word	0x20011e00

08007638 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007638:	4b01      	ldr	r3, [pc, #4]	@ (8007640 <xTaskGetTickCount+0x8>)
 800763a:	6818      	ldr	r0, [r3, #0]
}
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	20011e20 	.word	0x20011e20

08007644 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007644:	4b3f      	ldr	r3, [pc, #252]	@ (8007744 <xTaskIncrementTick+0x100>)
 8007646:	681b      	ldr	r3, [r3, #0]
{
 8007648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800764c:	2b00      	cmp	r3, #0
 800764e:	d172      	bne.n	8007736 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007650:	4b3d      	ldr	r3, [pc, #244]	@ (8007748 <xTaskIncrementTick+0x104>)
 8007652:	681c      	ldr	r4, [r3, #0]
 8007654:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8007656:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007658:	b9bc      	cbnz	r4, 800768a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800765a:	4b3c      	ldr	r3, [pc, #240]	@ (800774c <xTaskIncrementTick+0x108>)
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	b142      	cbz	r2, 8007674 <xTaskIncrementTick+0x30>
 8007662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	e7fe      	b.n	8007672 <xTaskIncrementTick+0x2e>
 8007674:	4a36      	ldr	r2, [pc, #216]	@ (8007750 <xTaskIncrementTick+0x10c>)
 8007676:	6819      	ldr	r1, [r3, #0]
 8007678:	6810      	ldr	r0, [r2, #0]
 800767a:	6018      	str	r0, [r3, #0]
 800767c:	6011      	str	r1, [r2, #0]
 800767e:	4a35      	ldr	r2, [pc, #212]	@ (8007754 <xTaskIncrementTick+0x110>)
 8007680:	6813      	ldr	r3, [r2, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	f7ff fe77 	bl	8007378 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800768a:	4d33      	ldr	r5, [pc, #204]	@ (8007758 <xTaskIncrementTick+0x114>)
 800768c:	4e33      	ldr	r6, [pc, #204]	@ (800775c <xTaskIncrementTick+0x118>)
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	4f33      	ldr	r7, [pc, #204]	@ (8007760 <xTaskIncrementTick+0x11c>)
 8007692:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8007694:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007698:	d212      	bcs.n	80076c0 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800769e:	2114      	movs	r1, #20
 80076a0:	434a      	muls	r2, r1
 80076a2:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80076a4:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 80076a6:	4a2f      	ldr	r2, [pc, #188]	@ (8007764 <xTaskIncrementTick+0x120>)
 80076a8:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 80076aa:	bf28      	it	cs
 80076ac:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 80076b0:	2a00      	cmp	r2, #0
 80076b2:	bf18      	it	ne
 80076b4:	f04f 0b01 	movne.w	fp, #1
}
 80076b8:	4658      	mov	r0, fp
 80076ba:	b003      	add	sp, #12
 80076bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076c0:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800774c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 80076c4:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800776c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076c8:	f8d9 2000 	ldr.w	r2, [r9]
 80076cc:	6812      	ldr	r2, [r2, #0]
 80076ce:	b91a      	cbnz	r2, 80076d8 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d0:	f04f 32ff 	mov.w	r2, #4294967295
 80076d4:	602a      	str	r2, [r5, #0]
					break;
 80076d6:	e7e0      	b.n	800769a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d8:	f8d9 2000 	ldr.w	r2, [r9]
 80076dc:	68d2      	ldr	r2, [r2, #12]
 80076de:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80076e6:	428c      	cmp	r4, r1
 80076e8:	d201      	bcs.n	80076ee <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 80076ea:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076ec:	e7d5      	b.n	800769a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076ee:	f108 0304 	add.w	r3, r8, #4
 80076f2:	4618      	mov	r0, r3
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	f7fe fec1 	bl	800647c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076fa:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80076fe:	b119      	cbz	r1, 8007708 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007700:	f108 0018 	add.w	r0, r8, #24
 8007704:	f7fe feba 	bl	800647c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007708:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800770c:	f8da 1000 	ldr.w	r1, [sl]
 8007710:	2314      	movs	r3, #20
 8007712:	4288      	cmp	r0, r1
 8007714:	bf88      	it	hi
 8007716:	f8ca 0000 	strhi.w	r0, [sl]
 800771a:	9901      	ldr	r1, [sp, #4]
 800771c:	fb03 6000 	mla	r0, r3, r0, r6
 8007720:	f7fe fe8a 	bl	8006438 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007724:	6838      	ldr	r0, [r7, #0]
 8007726:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800772a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800772c:	4291      	cmp	r1, r2
 800772e:	bf28      	it	cs
 8007730:	f04f 0b01 	movcs.w	fp, #1
 8007734:	e7c8      	b.n	80076c8 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8007736:	4a0c      	ldr	r2, [pc, #48]	@ (8007768 <xTaskIncrementTick+0x124>)
 8007738:	6813      	ldr	r3, [r2, #0]
 800773a:	3301      	adds	r3, #1
 800773c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800773e:	f04f 0b00 	mov.w	fp, #0
 8007742:	e7b9      	b.n	80076b8 <xTaskIncrementTick+0x74>
 8007744:	20011e00 	.word	0x20011e00
 8007748:	20011e20 	.word	0x20011e20
 800774c:	20011e6c 	.word	0x20011e6c
 8007750:	20011e68 	.word	0x20011e68
 8007754:	20011e0c 	.word	0x20011e0c
 8007758:	20011e04 	.word	0x20011e04
 800775c:	20011e98 	.word	0x20011e98
 8007760:	200122f8 	.word	0x200122f8
 8007764:	20011e10 	.word	0x20011e10
 8007768:	20011e14 	.word	0x20011e14
 800776c:	20011e1c 	.word	0x20011e1c

08007770 <xTaskResumeAll>:
{
 8007770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8007774:	4c30      	ldr	r4, [pc, #192]	@ (8007838 <xTaskResumeAll+0xc8>)
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	b943      	cbnz	r3, 800778c <xTaskResumeAll+0x1c>
 800777a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	e7fe      	b.n	800778a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800778c:	f7fe fef2 	bl	8006574 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	3b01      	subs	r3, #1
 8007794:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007796:	6824      	ldr	r4, [r4, #0]
 8007798:	b12c      	cbz	r4, 80077a6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800779a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800779c:	f7fe ff0a 	bl	80065b4 <vPortExitCritical>
}
 80077a0:	4620      	mov	r0, r4
 80077a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077a6:	4b25      	ldr	r3, [pc, #148]	@ (800783c <xTaskResumeAll+0xcc>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0f5      	beq.n	800779a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077ae:	4d24      	ldr	r5, [pc, #144]	@ (8007840 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80077b0:	4e24      	ldr	r6, [pc, #144]	@ (8007844 <xTaskResumeAll+0xd4>)
 80077b2:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8007854 <xTaskResumeAll+0xe4>
 80077b6:	e01d      	b.n	80077f4 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077b8:	68eb      	ldr	r3, [r5, #12]
 80077ba:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077bc:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077be:	f104 0018 	add.w	r0, r4, #24
 80077c2:	f7fe fe5b 	bl	800647c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077c6:	4638      	mov	r0, r7
 80077c8:	f7fe fe58 	bl	800647c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80077ce:	6832      	ldr	r2, [r6, #0]
 80077d0:	2014      	movs	r0, #20
 80077d2:	4293      	cmp	r3, r2
 80077d4:	fb00 8003 	mla	r0, r0, r3, r8
 80077d8:	4639      	mov	r1, r7
 80077da:	bf88      	it	hi
 80077dc:	6033      	strhi	r3, [r6, #0]
 80077de:	f7fe fe2b 	bl	8006438 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077e2:	4b19      	ldr	r3, [pc, #100]	@ (8007848 <xTaskResumeAll+0xd8>)
 80077e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 80077ee:	4b17      	ldr	r3, [pc, #92]	@ (800784c <xTaskResumeAll+0xdc>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1de      	bne.n	80077b8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80077fa:	b10c      	cbz	r4, 8007800 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 80077fc:	f7ff fdbc 	bl	8007378 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007800:	4d13      	ldr	r5, [pc, #76]	@ (8007850 <xTaskResumeAll+0xe0>)
 8007802:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8007804:	b144      	cbz	r4, 8007818 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8007806:	4e11      	ldr	r6, [pc, #68]	@ (800784c <xTaskResumeAll+0xdc>)
 8007808:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800780a:	f7ff ff1b 	bl	8007644 <xTaskIncrementTick>
 800780e:	b100      	cbz	r0, 8007812 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8007810:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007812:	3c01      	subs	r4, #1
 8007814:	d1f9      	bne.n	800780a <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8007816:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007818:	4b0c      	ldr	r3, [pc, #48]	@ (800784c <xTaskResumeAll+0xdc>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0bc      	beq.n	800779a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8007820:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007828:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007834:	2401      	movs	r4, #1
 8007836:	e7b1      	b.n	800779c <xTaskResumeAll+0x2c>
 8007838:	20011e00 	.word	0x20011e00
 800783c:	20011e24 	.word	0x20011e24
 8007840:	20011e54 	.word	0x20011e54
 8007844:	20011e1c 	.word	0x20011e1c
 8007848:	200122f8 	.word	0x200122f8
 800784c:	20011e10 	.word	0x20011e10
 8007850:	20011e14 	.word	0x20011e14
 8007854:	20011e98 	.word	0x20011e98

08007858 <vTaskDelay>:
	{
 8007858:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800785a:	b950      	cbnz	r0, 8007872 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800785c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007864:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
	}
 8007870:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8007872:	4b0a      	ldr	r3, [pc, #40]	@ (800789c <vTaskDelay+0x44>)
 8007874:	6819      	ldr	r1, [r3, #0]
 8007876:	b141      	cbz	r1, 800788a <vTaskDelay+0x32>
 8007878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	e7fe      	b.n	8007888 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800788a:	f7ff fecd 	bl	8007628 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800788e:	f7ff fd3b 	bl	8007308 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007892:	f7ff ff6d 	bl	8007770 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007896:	2800      	cmp	r0, #0
 8007898:	d0e0      	beq.n	800785c <vTaskDelay+0x4>
 800789a:	e7e9      	b.n	8007870 <vTaskDelay+0x18>
 800789c:	20011e00 	.word	0x20011e00

080078a0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078a0:	4b17      	ldr	r3, [pc, #92]	@ (8007900 <vTaskSwitchContext+0x60>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b17      	ldr	r3, [pc, #92]	@ (8007904 <vTaskSwitchContext+0x64>)
{
 80078a6:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078a8:	b112      	cbz	r2, 80078b0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80078aa:	2201      	movs	r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
}
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b0:	4d15      	ldr	r5, [pc, #84]	@ (8007908 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 80078b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b4:	682a      	ldr	r2, [r5, #0]
 80078b6:	4915      	ldr	r1, [pc, #84]	@ (800790c <vTaskSwitchContext+0x6c>)
 80078b8:	2614      	movs	r6, #20
 80078ba:	fb06 f302 	mul.w	r3, r6, r2
 80078be:	18c8      	adds	r0, r1, r3
 80078c0:	58cc      	ldr	r4, [r1, r3]
 80078c2:	b18c      	cbz	r4, 80078e8 <vTaskSwitchContext+0x48>
 80078c4:	6844      	ldr	r4, [r0, #4]
 80078c6:	3308      	adds	r3, #8
 80078c8:	6864      	ldr	r4, [r4, #4]
 80078ca:	6044      	str	r4, [r0, #4]
 80078cc:	440b      	add	r3, r1
 80078ce:	429c      	cmp	r4, r3
 80078d0:	bf04      	itt	eq
 80078d2:	6863      	ldreq	r3, [r4, #4]
 80078d4:	6043      	streq	r3, [r0, #4]
 80078d6:	2314      	movs	r3, #20
 80078d8:	fb03 1102 	mla	r1, r3, r2, r1
 80078dc:	684b      	ldr	r3, [r1, #4]
 80078de:	68d9      	ldr	r1, [r3, #12]
 80078e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007910 <vTaskSwitchContext+0x70>)
 80078e2:	6019      	str	r1, [r3, #0]
 80078e4:	602a      	str	r2, [r5, #0]
}
 80078e6:	e7e2      	b.n	80078ae <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e8:	b942      	cbnz	r2, 80078fc <vTaskSwitchContext+0x5c>
 80078ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	e7fe      	b.n	80078fa <vTaskSwitchContext+0x5a>
 80078fc:	3a01      	subs	r2, #1
 80078fe:	e7dc      	b.n	80078ba <vTaskSwitchContext+0x1a>
 8007900:	20011e00 	.word	0x20011e00
 8007904:	20011e10 	.word	0x20011e10
 8007908:	20011e1c 	.word	0x20011e1c
 800790c:	20011e98 	.word	0x20011e98
 8007910:	200122f8 	.word	0x200122f8

08007914 <vTaskPlaceOnEventList>:
{
 8007914:	b510      	push	{r4, lr}
 8007916:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8007918:	b940      	cbnz	r0, 800792c <vTaskPlaceOnEventList+0x18>
 800791a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	e7fe      	b.n	800792a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800792c:	4b05      	ldr	r3, [pc, #20]	@ (8007944 <vTaskPlaceOnEventList+0x30>)
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	3118      	adds	r1, #24
 8007932:	f7fe fd8c 	bl	800644e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007936:	4620      	mov	r0, r4
 8007938:	2101      	movs	r1, #1
}
 800793a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800793e:	f7ff bce3 	b.w	8007308 <prvAddCurrentTaskToDelayedList>
 8007942:	bf00      	nop
 8007944:	200122f8 	.word	0x200122f8

08007948 <vTaskPlaceOnEventListRestricted>:
	{
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	460d      	mov	r5, r1
 800794c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800794e:	b940      	cbnz	r0, 8007962 <vTaskPlaceOnEventListRestricted+0x1a>
 8007950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	e7fe      	b.n	8007960 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007962:	4b07      	ldr	r3, [pc, #28]	@ (8007980 <vTaskPlaceOnEventListRestricted+0x38>)
 8007964:	6819      	ldr	r1, [r3, #0]
 8007966:	3118      	adds	r1, #24
 8007968:	f7fe fd66 	bl	8006438 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800796c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800796e:	4621      	mov	r1, r4
 8007970:	bf0c      	ite	eq
 8007972:	4628      	moveq	r0, r5
 8007974:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8007978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800797c:	f7ff bcc4 	b.w	8007308 <prvAddCurrentTaskToDelayedList>
 8007980:	200122f8 	.word	0x200122f8

08007984 <xTaskRemoveFromEventList>:
{
 8007984:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007986:	68c3      	ldr	r3, [r0, #12]
 8007988:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800798a:	b944      	cbnz	r4, 800799e <xTaskRemoveFromEventList+0x1a>
 800798c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	e7fe      	b.n	800799c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800799e:	f104 0518 	add.w	r5, r4, #24
 80079a2:	4628      	mov	r0, r5
 80079a4:	f7fe fd6a 	bl	800647c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079a8:	4b10      	ldr	r3, [pc, #64]	@ (80079ec <xTaskRemoveFromEventList+0x68>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	b9db      	cbnz	r3, 80079e6 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079ae:	1d25      	adds	r5, r4, #4
 80079b0:	4628      	mov	r0, r5
 80079b2:	f7fe fd63 	bl	800647c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079b6:	4a0e      	ldr	r2, [pc, #56]	@ (80079f0 <xTaskRemoveFromEventList+0x6c>)
 80079b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80079ba:	6811      	ldr	r1, [r2, #0]
 80079bc:	428b      	cmp	r3, r1
 80079be:	bf88      	it	hi
 80079c0:	6013      	strhi	r3, [r2, #0]
 80079c2:	4a0c      	ldr	r2, [pc, #48]	@ (80079f4 <xTaskRemoveFromEventList+0x70>)
 80079c4:	2014      	movs	r0, #20
 80079c6:	4629      	mov	r1, r5
 80079c8:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079cc:	f7fe fd34 	bl	8006438 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079d0:	4b09      	ldr	r3, [pc, #36]	@ (80079f8 <xTaskRemoveFromEventList+0x74>)
 80079d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80079da:	bf83      	ittte	hi
 80079dc:	4b07      	ldrhi	r3, [pc, #28]	@ (80079fc <xTaskRemoveFromEventList+0x78>)
 80079de:	2001      	movhi	r0, #1
 80079e0:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80079e2:	2000      	movls	r0, #0
}
 80079e4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079e6:	4806      	ldr	r0, [pc, #24]	@ (8007a00 <xTaskRemoveFromEventList+0x7c>)
 80079e8:	4629      	mov	r1, r5
 80079ea:	e7ef      	b.n	80079cc <xTaskRemoveFromEventList+0x48>
 80079ec:	20011e00 	.word	0x20011e00
 80079f0:	20011e1c 	.word	0x20011e1c
 80079f4:	20011e98 	.word	0x20011e98
 80079f8:	200122f8 	.word	0x200122f8
 80079fc:	20011e10 	.word	0x20011e10
 8007a00:	20011e54 	.word	0x20011e54

08007a04 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a04:	4b03      	ldr	r3, [pc, #12]	@ (8007a14 <vTaskInternalSetTimeOutState+0x10>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a0a:	4b03      	ldr	r3, [pc, #12]	@ (8007a18 <vTaskInternalSetTimeOutState+0x14>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6043      	str	r3, [r0, #4]
}
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	20011e0c 	.word	0x20011e0c
 8007a18:	20011e20 	.word	0x20011e20

08007a1c <xTaskCheckForTimeOut>:
{
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8007a20:	4605      	mov	r5, r0
 8007a22:	b940      	cbnz	r0, 8007a36 <xTaskCheckForTimeOut+0x1a>
 8007a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	e7fe      	b.n	8007a34 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8007a36:	b941      	cbnz	r1, 8007a4a <xTaskCheckForTimeOut+0x2e>
 8007a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	e7fe      	b.n	8007a48 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8007a4a:	f7fe fd93 	bl	8006574 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a8c <xTaskCheckForTimeOut+0x70>)
 8007a50:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	d010      	beq.n	8007a7a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a58:	480d      	ldr	r0, [pc, #52]	@ (8007a90 <xTaskCheckForTimeOut+0x74>)
 8007a5a:	682e      	ldr	r6, [r5, #0]
 8007a5c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a5e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a60:	4286      	cmp	r6, r0
 8007a62:	d001      	beq.n	8007a68 <xTaskCheckForTimeOut+0x4c>
 8007a64:	428a      	cmp	r2, r1
 8007a66:	d90f      	bls.n	8007a88 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a68:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a6a:	4283      	cmp	r3, r0
 8007a6c:	d90a      	bls.n	8007a84 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8007a6e:	1a5b      	subs	r3, r3, r1
 8007a70:	4413      	add	r3, r2
 8007a72:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a74:	4628      	mov	r0, r5
 8007a76:	f7ff ffc5 	bl	8007a04 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8007a7a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007a7c:	f7fe fd9a 	bl	80065b4 <vPortExitCritical>
}
 8007a80:	4620      	mov	r0, r4
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007a88:	2401      	movs	r4, #1
 8007a8a:	e7f7      	b.n	8007a7c <xTaskCheckForTimeOut+0x60>
 8007a8c:	20011e20 	.word	0x20011e20
 8007a90:	20011e0c 	.word	0x20011e0c

08007a94 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007a94:	4b01      	ldr	r3, [pc, #4]	@ (8007a9c <vTaskMissedYield+0x8>)
 8007a96:	2201      	movs	r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
}
 8007a9a:	4770      	bx	lr
 8007a9c:	20011e10 	.word	0x20011e10

08007aa0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007aa0:	4b05      	ldr	r3, [pc, #20]	@ (8007ab8 <xTaskGetSchedulerState+0x18>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	b133      	cbz	r3, 8007ab4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aa6:	4b05      	ldr	r3, [pc, #20]	@ (8007abc <xTaskGetSchedulerState+0x1c>)
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	fab0 f080 	clz	r0, r0
 8007aae:	0940      	lsrs	r0, r0, #5
 8007ab0:	0040      	lsls	r0, r0, #1
 8007ab2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ab4:	2001      	movs	r0, #1
	}
 8007ab6:	4770      	bx	lr
 8007ab8:	20011e18 	.word	0x20011e18
 8007abc:	20011e00 	.word	0x20011e00

08007ac0 <xTaskPriorityInherit>:
	{
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	b338      	cbz	r0, 8007b16 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ac6:	4d1a      	ldr	r5, [pc, #104]	@ (8007b30 <xTaskPriorityInherit+0x70>)
 8007ac8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007aca:	682a      	ldr	r2, [r5, #0]
 8007acc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d226      	bcs.n	8007b20 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ad2:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007ad4:	4e17      	ldr	r6, [pc, #92]	@ (8007b34 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ad6:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad8:	bfa1      	itttt	ge
 8007ada:	682a      	ldrge	r2, [r5, #0]
 8007adc:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 8007ade:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8007ae2:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007ae4:	2214      	movs	r2, #20
 8007ae6:	fb02 6303 	mla	r3, r2, r3, r6
 8007aea:	6942      	ldr	r2, [r0, #20]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d113      	bne.n	8007b18 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007af0:	1d07      	adds	r7, r0, #4
 8007af2:	4638      	mov	r0, r7
 8007af4:	f7fe fcc2 	bl	800647c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007af8:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007afa:	4a0f      	ldr	r2, [pc, #60]	@ (8007b38 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007afe:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b00:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007b02:	2014      	movs	r0, #20
 8007b04:	428b      	cmp	r3, r1
 8007b06:	fb00 6003 	mla	r0, r0, r3, r6
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	bf88      	it	hi
 8007b0e:	6013      	strhi	r3, [r2, #0]
 8007b10:	f7fe fc92 	bl	8006438 <vListInsertEnd>
				xReturn = pdTRUE;
 8007b14:	2001      	movs	r0, #1
	}
 8007b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8007b1e:	e7f9      	b.n	8007b14 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8007b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b26:	4298      	cmp	r0, r3
 8007b28:	bf2c      	ite	cs
 8007b2a:	2000      	movcs	r0, #0
 8007b2c:	2001      	movcc	r0, #1
 8007b2e:	e7f2      	b.n	8007b16 <xTaskPriorityInherit+0x56>
 8007b30:	200122f8 	.word	0x200122f8
 8007b34:	20011e98 	.word	0x20011e98
 8007b38:	20011e1c 	.word	0x20011e1c

08007b3c <xTaskPriorityDisinherit>:
	{
 8007b3c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8007b3e:	b908      	cbnz	r0, 8007b44 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8007b40:	2000      	movs	r0, #0
	}
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8007b44:	4b1b      	ldr	r3, [pc, #108]	@ (8007bb4 <xTaskPriorityDisinherit+0x78>)
 8007b46:	681c      	ldr	r4, [r3, #0]
 8007b48:	4284      	cmp	r4, r0
 8007b4a:	d008      	beq.n	8007b5e <xTaskPriorityDisinherit+0x22>
 8007b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	e7fe      	b.n	8007b5c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b5e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007b60:	b943      	cbnz	r3, 8007b74 <xTaskPriorityDisinherit+0x38>
 8007b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	e7fe      	b.n	8007b72 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b74:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007b76:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8007b78:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b7a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8007b7c:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b7e:	d0df      	beq.n	8007b40 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1dd      	bne.n	8007b40 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b84:	1d25      	adds	r5, r4, #4
 8007b86:	4628      	mov	r0, r5
 8007b88:	f7fe fc78 	bl	800647c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b8c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007b8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b90:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b94:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b96:	4a08      	ldr	r2, [pc, #32]	@ (8007bb8 <xTaskPriorityDisinherit+0x7c>)
 8007b98:	6811      	ldr	r1, [r2, #0]
 8007b9a:	428b      	cmp	r3, r1
 8007b9c:	bf88      	it	hi
 8007b9e:	6013      	strhi	r3, [r2, #0]
 8007ba0:	4a06      	ldr	r2, [pc, #24]	@ (8007bbc <xTaskPriorityDisinherit+0x80>)
 8007ba2:	2014      	movs	r0, #20
 8007ba4:	fb00 2003 	mla	r0, r0, r3, r2
 8007ba8:	4629      	mov	r1, r5
 8007baa:	f7fe fc45 	bl	8006438 <vListInsertEnd>
					xReturn = pdTRUE;
 8007bae:	2001      	movs	r0, #1
		return xReturn;
 8007bb0:	e7c7      	b.n	8007b42 <xTaskPriorityDisinherit+0x6>
 8007bb2:	bf00      	nop
 8007bb4:	200122f8 	.word	0x200122f8
 8007bb8:	20011e1c 	.word	0x20011e1c
 8007bbc:	20011e98 	.word	0x20011e98

08007bc0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8007bc0:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d041      	beq.n	8007c4c <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8007bc8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8007bca:	b942      	cbnz	r2, 8007bde <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8007bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	e7fe      	b.n	8007bdc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007bde:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8007be0:	4299      	cmp	r1, r3
 8007be2:	bf38      	it	cc
 8007be4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007be6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007be8:	428b      	cmp	r3, r1
 8007bea:	d02f      	beq.n	8007c4c <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007bec:	2a01      	cmp	r2, #1
 8007bee:	d12d      	bne.n	8007c4c <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8007bf0:	4a17      	ldr	r2, [pc, #92]	@ (8007c50 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8007bf2:	6812      	ldr	r2, [r2, #0]
 8007bf4:	4282      	cmp	r2, r0
 8007bf6:	d108      	bne.n	8007c0a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8007bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	e7fe      	b.n	8007c08 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c0a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c0c:	4d11      	ldr	r5, [pc, #68]	@ (8007c54 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 8007c0e:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c10:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c12:	f04f 0214 	mov.w	r2, #20
 8007c16:	fb02 5303 	mla	r3, r2, r3, r5
 8007c1a:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c1c:	bfa4      	itt	ge
 8007c1e:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 8007c22:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d111      	bne.n	8007c4c <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c28:	1d06      	adds	r6, r0, #4
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f7fe fc26 	bl	800647c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007c30:	4a09      	ldr	r2, [pc, #36]	@ (8007c58 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007c32:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007c34:	6811      	ldr	r1, [r2, #0]
 8007c36:	2014      	movs	r0, #20
 8007c38:	428b      	cmp	r3, r1
 8007c3a:	fb00 5003 	mla	r0, r0, r3, r5
 8007c3e:	4631      	mov	r1, r6
	}
 8007c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8007c44:	bf88      	it	hi
 8007c46:	6013      	strhi	r3, [r2, #0]
 8007c48:	f7fe bbf6 	b.w	8006438 <vListInsertEnd>
	}
 8007c4c:	bd70      	pop	{r4, r5, r6, pc}
 8007c4e:	bf00      	nop
 8007c50:	200122f8 	.word	0x200122f8
 8007c54:	20011e98 	.word	0x20011e98
 8007c58:	20011e1c 	.word	0x20011e1c

08007c5c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007c5c:	4b04      	ldr	r3, [pc, #16]	@ (8007c70 <pvTaskIncrementMutexHeldCount+0x14>)
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	b11a      	cbz	r2, 8007c6a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c62:	6819      	ldr	r1, [r3, #0]
 8007c64:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8007c66:	3201      	adds	r2, #1
 8007c68:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8007c6a:	6818      	ldr	r0, [r3, #0]
	}
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	200122f8 	.word	0x200122f8

08007c74 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8007c74:	4291      	cmp	r1, r2
{
 8007c76:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c78:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c7a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8007c7c:	d80a      	bhi.n	8007c94 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c7e:	1ad2      	subs	r2, r2, r3
 8007c80:	6983      	ldr	r3, [r0, #24]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d20d      	bcs.n	8007ca2 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c86:	4b08      	ldr	r3, [pc, #32]	@ (8007ca8 <prvInsertTimerInActiveList+0x34>)
 8007c88:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	f7fe fbdf 	bl	800644e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007c90:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8007c92:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d201      	bcs.n	8007c9c <prvInsertTimerInActiveList+0x28>
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	d202      	bcs.n	8007ca2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c9c:	4b03      	ldr	r3, [pc, #12]	@ (8007cac <prvInsertTimerInActiveList+0x38>)
 8007c9e:	1d01      	adds	r1, r0, #4
 8007ca0:	e7f3      	b.n	8007c8a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8007ca2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007ca4:	e7f5      	b.n	8007c92 <prvInsertTimerInActiveList+0x1e>
 8007ca6:	bf00      	nop
 8007ca8:	200123f8 	.word	0x200123f8
 8007cac:	200123fc 	.word	0x200123fc

08007cb0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8007cb2:	4c11      	ldr	r4, [pc, #68]	@ (8007cf8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8007cb4:	f7fe fc5e 	bl	8006574 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007cb8:	6825      	ldr	r5, [r4, #0]
 8007cba:	b9bd      	cbnz	r5, 8007cec <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cbc:	4f0f      	ldr	r7, [pc, #60]	@ (8007cfc <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8007cbe:	4e10      	ldr	r6, [pc, #64]	@ (8007d00 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	f7fe fbab 	bl	800641c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f7fe fba8 	bl	800641c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8007d04 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cce:	4a0e      	ldr	r2, [pc, #56]	@ (8007d08 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8007cd0:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d0c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cd4:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8007cd6:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cd8:	200a      	movs	r0, #10
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <prvCheckForValidListAndQueue+0x60>)
 8007cdc:	9500      	str	r5, [sp, #0]
 8007cde:	f7fe fe54 	bl	800698a <xQueueGenericCreateStatic>
 8007ce2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ce4:	b110      	cbz	r0, 8007cec <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ce6:	490b      	ldr	r1, [pc, #44]	@ (8007d14 <prvCheckForValidListAndQueue+0x64>)
 8007ce8:	f7ff fa2c 	bl	8007144 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8007cec:	b003      	add	sp, #12
 8007cee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8007cf2:	f7fe bc5f 	b.w	80065b4 <vPortExitCritical>
 8007cf6:	bf00      	nop
 8007cf8:	200123f4 	.word	0x200123f4
 8007cfc:	20012414 	.word	0x20012414
 8007d00:	20012400 	.word	0x20012400
 8007d04:	200123fc 	.word	0x200123fc
 8007d08:	2001234c 	.word	0x2001234c
 8007d0c:	200123f8 	.word	0x200123f8
 8007d10:	200122fc 	.word	0x200122fc
 8007d14:	080120a1 	.word	0x080120a1

08007d18 <xTimerCreateTimerTask>:
{
 8007d18:	b510      	push	{r4, lr}
 8007d1a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007d1c:	f7ff ffc8 	bl	8007cb0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007d20:	4b12      	ldr	r3, [pc, #72]	@ (8007d6c <xTimerCreateTimerTask+0x54>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	b1b3      	cbz	r3, 8007d54 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d26:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d28:	aa07      	add	r2, sp, #28
 8007d2a:	a906      	add	r1, sp, #24
 8007d2c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d2e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d32:	f7fe fa6b 	bl	800620c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d36:	9b05      	ldr	r3, [sp, #20]
 8007d38:	9302      	str	r3, [sp, #8]
 8007d3a:	9b06      	ldr	r3, [sp, #24]
 8007d3c:	9301      	str	r3, [sp, #4]
 8007d3e:	2302      	movs	r3, #2
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	9a07      	ldr	r2, [sp, #28]
 8007d44:	490a      	ldr	r1, [pc, #40]	@ (8007d70 <xTimerCreateTimerTask+0x58>)
 8007d46:	480b      	ldr	r0, [pc, #44]	@ (8007d74 <xTimerCreateTimerTask+0x5c>)
 8007d48:	4623      	mov	r3, r4
 8007d4a:	f7ff fbc0 	bl	80074ce <xTaskCreateStatic>
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d78 <xTimerCreateTimerTask+0x60>)
 8007d50:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007d52:	b940      	cbnz	r0, 8007d66 <xTimerCreateTimerTask+0x4e>
 8007d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007d64:	e7fe      	b.n	8007d64 <xTimerCreateTimerTask+0x4c>
}
 8007d66:	2001      	movs	r0, #1
 8007d68:	b008      	add	sp, #32
 8007d6a:	bd10      	pop	{r4, pc}
 8007d6c:	200123f4 	.word	0x200123f4
 8007d70:	080120a6 	.word	0x080120a6
 8007d74:	08007e79 	.word	0x08007e79
 8007d78:	200123f0 	.word	0x200123f0

08007d7c <xTimerGenericCommand>:
{
 8007d7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007d7e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8007d80:	4604      	mov	r4, r0
{
 8007d82:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8007d84:	b940      	cbnz	r0, 8007d98 <xTimerGenericCommand+0x1c>
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	e7fe      	b.n	8007d96 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8007d98:	4d0d      	ldr	r5, [pc, #52]	@ (8007dd0 <xTimerGenericCommand+0x54>)
 8007d9a:	6828      	ldr	r0, [r5, #0]
 8007d9c:	b180      	cbz	r0, 8007dc0 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d9e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007da0:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007da4:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007da6:	dc0d      	bgt.n	8007dc4 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007da8:	f7ff fe7a 	bl	8007aa0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007dac:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007dae:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007db0:	bf08      	it	eq
 8007db2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007db4:	6828      	ldr	r0, [r5, #0]
 8007db6:	bf18      	it	ne
 8007db8:	461a      	movne	r2, r3
 8007dba:	4669      	mov	r1, sp
 8007dbc:	f7fe fe9a 	bl	8006af4 <xQueueGenericSend>
}
 8007dc0:	b004      	add	sp, #16
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4669      	mov	r1, sp
 8007dc8:	f7fe ff46 	bl	8006c58 <xQueueGenericSendFromISR>
 8007dcc:	e7f8      	b.n	8007dc0 <xTimerGenericCommand+0x44>
 8007dce:	bf00      	nop
 8007dd0:	200123f4 	.word	0x200123f4

08007dd4 <prvSampleTimeNow>:
{
 8007dd4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8007dd8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007e74 <prvSampleTimeNow+0xa0>
{
 8007ddc:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8007dde:	f7ff fc2b 	bl	8007638 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007de2:	f8d8 3000 	ldr.w	r3, [r8]
 8007de6:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8007de8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8007dea:	d909      	bls.n	8007e00 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dec:	4f1f      	ldr	r7, [pc, #124]	@ (8007e6c <prvSampleTimeNow+0x98>)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	b96a      	cbnz	r2, 8007e10 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8007df4:	4a1e      	ldr	r2, [pc, #120]	@ (8007e70 <prvSampleTimeNow+0x9c>)
 8007df6:	6811      	ldr	r1, [r2, #0]
 8007df8:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8007dfa:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e000      	b.n	8007e02 <prvSampleTimeNow+0x2e>
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8007e04:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8007e06:	f8c8 5000 	str.w	r5, [r8]
}
 8007e0a:	b002      	add	sp, #8
 8007e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e10:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e12:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e14:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e18:	f104 0a04 	add.w	sl, r4, #4
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	f7fe fb2d 	bl	800647c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e22:	6a23      	ldr	r3, [r4, #32]
 8007e24:	4620      	mov	r0, r4
 8007e26:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e28:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8007e2c:	075b      	lsls	r3, r3, #29
 8007e2e:	d5de      	bpl.n	8007dee <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e30:	69a3      	ldr	r3, [r4, #24]
 8007e32:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8007e34:	4599      	cmp	r9, r3
 8007e36:	d206      	bcs.n	8007e46 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e38:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e3a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e3c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e3e:	4651      	mov	r1, sl
 8007e40:	f7fe fb05 	bl	800644e <vListInsert>
 8007e44:	e7d3      	b.n	8007dee <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e46:	2300      	movs	r3, #0
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	464a      	mov	r2, r9
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f7ff ff94 	bl	8007d7c <xTimerGenericCommand>
				configASSERT( xResult );
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d1ca      	bne.n	8007dee <prvSampleTimeNow+0x1a>
 8007e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	e7fe      	b.n	8007e68 <prvSampleTimeNow+0x94>
 8007e6a:	bf00      	nop
 8007e6c:	200123fc 	.word	0x200123fc
 8007e70:	200123f8 	.word	0x200123f8
 8007e74:	200123ec 	.word	0x200123ec

08007e78 <prvTimerTask>:
{
 8007e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e7c:	4d6e      	ldr	r5, [pc, #440]	@ (8008038 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e7e:	4e6f      	ldr	r6, [pc, #444]	@ (800803c <prvTimerTask+0x1c4>)
{
 8007e80:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e82:	682b      	ldr	r3, [r5, #0]
 8007e84:	f8d3 8000 	ldr.w	r8, [r3]
 8007e88:	f1b8 0f00 	cmp.w	r8, #0
 8007e8c:	d035      	beq.n	8007efa <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e94:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8007e96:	f7ff fbc7 	bl	8007628 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e9a:	a804      	add	r0, sp, #16
 8007e9c:	f7ff ff9a 	bl	8007dd4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8007ea0:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ea2:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d169      	bne.n	8007f7c <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ea8:	2c00      	cmp	r4, #0
 8007eaa:	d14c      	bne.n	8007f46 <prvTimerTask+0xce>
 8007eac:	4540      	cmp	r0, r8
 8007eae:	d350      	bcc.n	8007f52 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8007eb0:	f7ff fc5e 	bl	8007770 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007eba:	1d38      	adds	r0, r7, #4
 8007ebc:	f7fe fade 	bl	800647c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ec0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ec4:	0758      	lsls	r0, r3, #29
 8007ec6:	d51a      	bpl.n	8007efe <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ec8:	69b9      	ldr	r1, [r7, #24]
 8007eca:	4643      	mov	r3, r8
 8007ecc:	464a      	mov	r2, r9
 8007ece:	4441      	add	r1, r8
 8007ed0:	4638      	mov	r0, r7
 8007ed2:	f7ff fecf 	bl	8007c74 <prvInsertTimerInActiveList>
 8007ed6:	b1b0      	cbz	r0, 8007f06 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ed8:	9400      	str	r4, [sp, #0]
 8007eda:	4623      	mov	r3, r4
 8007edc:	4642      	mov	r2, r8
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff ff4b 	bl	8007d7c <xTimerGenericCommand>
			configASSERT( xResult );
 8007ee6:	b970      	cbnz	r0, 8007f06 <prvTimerTask+0x8e>
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	e7fe      	b.n	8007ef8 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007efa:	2401      	movs	r4, #1
 8007efc:	e7cb      	b.n	8007e96 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007efe:	f023 0301 	bic.w	r3, r3, #1
 8007f02:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	4638      	mov	r0, r7
 8007f0a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f0c:	6830      	ldr	r0, [r6, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	a904      	add	r1, sp, #16
 8007f12:	f7fe ff4f 	bl	8006db4 <xQueueReceive>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d0b3      	beq.n	8007e82 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f1a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f1c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	db2f      	blt.n	8007f82 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f22:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f24:	6963      	ldr	r3, [r4, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d132      	bne.n	8007f90 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f2a:	a803      	add	r0, sp, #12
 8007f2c:	f7ff ff52 	bl	8007dd4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007f30:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f32:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8007f34:	2b09      	cmp	r3, #9
 8007f36:	d8e9      	bhi.n	8007f0c <prvTimerTask+0x94>
 8007f38:	e8df f003 	tbb	[pc, r3]
 8007f3c:	572e2e2e 	.word	0x572e2e2e
 8007f40:	2e2e765e 	.word	0x2e2e765e
 8007f44:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f46:	4b3e      	ldr	r3, [pc, #248]	@ (8008040 <prvTimerTask+0x1c8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681c      	ldr	r4, [r3, #0]
 8007f4c:	fab4 f484 	clz	r4, r4
 8007f50:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f52:	6830      	ldr	r0, [r6, #0]
 8007f54:	4622      	mov	r2, r4
 8007f56:	eba8 0109 	sub.w	r1, r8, r9
 8007f5a:	f7ff f932 	bl	80071c2 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f5e:	f7ff fc07 	bl	8007770 <xTaskResumeAll>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d1d2      	bne.n	8007f0c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8007f66:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	e7c7      	b.n	8007f0c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8007f7c:	f7ff fbf8 	bl	8007770 <xTaskResumeAll>
}
 8007f80:	e7c4      	b.n	8007f0c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f82:	9b05      	ldr	r3, [sp, #20]
 8007f84:	9907      	ldr	r1, [sp, #28]
 8007f86:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f88:	9b04      	ldr	r3, [sp, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dbbe      	blt.n	8007f0c <prvTimerTask+0x94>
 8007f8e:	e7c8      	b.n	8007f22 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f90:	1d20      	adds	r0, r4, #4
 8007f92:	f7fe fa73 	bl	800647c <uxListRemove>
 8007f96:	e7c8      	b.n	8007f2a <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f98:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f9c:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f9e:	f043 0301 	orr.w	r3, r3, #1
 8007fa2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007fa6:	9b05      	ldr	r3, [sp, #20]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	4419      	add	r1, r3
 8007fac:	f7ff fe62 	bl	8007c74 <prvInsertTimerInActiveList>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d0ab      	beq.n	8007f0c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fb4:	6a23      	ldr	r3, [r4, #32]
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fba:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8007fbe:	0759      	lsls	r1, r3, #29
 8007fc0:	d5a4      	bpl.n	8007f0c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fc2:	69a2      	ldr	r2, [r4, #24]
 8007fc4:	9905      	ldr	r1, [sp, #20]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	440a      	add	r2, r1
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f7ff fed4 	bl	8007d7c <xTimerGenericCommand>
							configASSERT( xResult );
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d199      	bne.n	8007f0c <prvTimerTask+0x94>
 8007fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	e7fe      	b.n	8007fe8 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fee:	f023 0301 	bic.w	r3, r3, #1
 8007ff2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8007ff6:	e789      	b.n	8007f0c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ff8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8007ffc:	f043 0301 	orr.w	r3, r3, #1
 8008000:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008004:	9905      	ldr	r1, [sp, #20]
 8008006:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008008:	b941      	cbnz	r1, 800801c <prvTimerTask+0x1a4>
 800800a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	e7fe      	b.n	800801a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800801c:	4603      	mov	r3, r0
 800801e:	4401      	add	r1, r0
 8008020:	4620      	mov	r0, r4
 8008022:	f7ff fe27 	bl	8007c74 <prvInsertTimerInActiveList>
					break;
 8008026:	e771      	b.n	8007f0c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008028:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800802c:	079a      	lsls	r2, r3, #30
 800802e:	d4de      	bmi.n	8007fee <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8008030:	4620      	mov	r0, r4
 8008032:	f7fe f9b5 	bl	80063a0 <vPortFree>
 8008036:	e769      	b.n	8007f0c <prvTimerTask+0x94>
 8008038:	200123fc 	.word	0x200123fc
 800803c:	200123f4 	.word	0x200123f4
 8008040:	200123f8 	.word	0x200123f8

08008044 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8008044:	8880      	ldrh	r0, [r0, #4]
 8008046:	4770      	bx	lr

08008048 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	6803      	ldr	r3, [r0, #0]
 800804c:	4605      	mov	r5, r0
 800804e:	460c      	mov	r4, r1
 8008050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008052:	2100      	movs	r1, #0
 8008054:	4798      	blx	r3
 8008056:	682b      	ldr	r3, [r5, #0]
 8008058:	4606      	mov	r6, r0
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	4628      	mov	r0, r5
 800805e:	4798      	blx	r3
 8008060:	1ba4      	subs	r4, r4, r6
 8008062:	b2a4      	uxth	r4, r4
 8008064:	fbb4 f0f0 	udiv	r0, r4, r0
 8008068:	bd70      	pop	{r4, r5, r6, pc}

0800806a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800806a:	2300      	movs	r3, #0
 800806c:	8083      	strh	r3, [r0, #4]
 800806e:	4770      	bx	lr

08008070 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8008070:	b510      	push	{r4, lr}
 8008072:	6803      	ldr	r3, [r0, #0]
 8008074:	8881      	ldrh	r1, [r0, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008078:	4604      	mov	r4, r0
 800807a:	4798      	blx	r3
 800807c:	88a3      	ldrh	r3, [r4, #4]
 800807e:	3301      	adds	r3, #1
 8008080:	80a3      	strh	r3, [r4, #4]
 8008082:	bd10      	pop	{r4, pc}

08008084 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8008084:	6803      	ldr	r3, [r0, #0]
 8008086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008088:	4718      	bx	r3

0800808a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800808a:	4770      	bx	lr

0800808c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800808c:	4a02      	ldr	r2, [pc, #8]	@ (8008098 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800808e:	6002      	str	r2, [r0, #0]
 8008090:	2200      	movs	r2, #0
 8008092:	8082      	strh	r2, [r0, #4]
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	080120b8 	.word	0x080120b8

0800809c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800809c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800809e:	2000      	movs	r0, #0
 80080a0:	b12b      	cbz	r3, 80080ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80080a2:	b920      	cbnz	r0, 80080ae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80080a4:	1a5a      	subs	r2, r3, r1
 80080a6:	4250      	negs	r0, r2
 80080a8:	4150      	adcs	r0, r2
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	e7f8      	b.n	80080a0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80080ae:	4770      	bx	lr

080080b0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80080b0:	2300      	movs	r3, #0
 80080b2:	6148      	str	r0, [r1, #20]
 80080b4:	618b      	str	r3, [r1, #24]
 80080b6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80080b8:	b913      	cbnz	r3, 80080c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80080ba:	6281      	str	r1, [r0, #40]	@ 0x28
 80080bc:	4770      	bx	lr
 80080be:	4613      	mov	r3, r2
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	2a00      	cmp	r2, #0
 80080c4:	d1fb      	bne.n	80080be <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80080c6:	6199      	str	r1, [r3, #24]
 80080c8:	4770      	bx	lr

080080ca <_ZN8touchgfx9Container9removeAllEv>:
 80080ca:	2200      	movs	r2, #0
 80080cc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80080ce:	b123      	cbz	r3, 80080da <_ZN8touchgfx9Container9removeAllEv+0x10>
 80080d0:	6999      	ldr	r1, [r3, #24]
 80080d2:	6281      	str	r1, [r0, #40]	@ 0x28
 80080d4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80080d8:	e7f8      	b.n	80080cc <_ZN8touchgfx9Container9removeAllEv+0x2>
 80080da:	4770      	bx	lr

080080dc <_ZN8touchgfx9Container6unlinkEv>:
 80080dc:	2300      	movs	r3, #0
 80080de:	6283      	str	r3, [r0, #40]	@ 0x28
 80080e0:	4770      	bx	lr

080080e2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80080e2:	2200      	movs	r2, #0
 80080e4:	8002      	strh	r2, [r0, #0]
 80080e6:	8042      	strh	r2, [r0, #2]
 80080e8:	8082      	strh	r2, [r0, #4]
 80080ea:	80c2      	strh	r2, [r0, #6]
 80080ec:	4770      	bx	lr

080080ee <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80080ee:	b570      	push	{r4, r5, r6, lr}
 80080f0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80080f2:	460d      	mov	r5, r1
 80080f4:	4616      	mov	r6, r2
 80080f6:	b13c      	cbz	r4, 8008108 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	4620      	mov	r0, r4
 80080fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fe:	4632      	mov	r2, r6
 8008100:	4629      	mov	r1, r5
 8008102:	4798      	blx	r3
 8008104:	69a4      	ldr	r4, [r4, #24]
 8008106:	e7f6      	b.n	80080f6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8008108:	bd70      	pop	{r4, r5, r6, pc}

0800810a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800810a:	b538      	push	{r3, r4, r5, lr}
 800810c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800810e:	460d      	mov	r5, r1
 8008110:	b134      	cbz	r4, 8008120 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8008112:	682b      	ldr	r3, [r5, #0]
 8008114:	4621      	mov	r1, r4
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	4628      	mov	r0, r5
 800811a:	4798      	blx	r3
 800811c:	69a4      	ldr	r4, [r4, #24]
 800811e:	e7f7      	b.n	8008110 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8008120:	bd38      	pop	{r3, r4, r5, pc}

08008122 <_ZN8touchgfx9ContainerD1Ev>:
 8008122:	4770      	bx	lr

08008124 <_ZN8touchgfx9ContainerD0Ev>:
 8008124:	b510      	push	{r4, lr}
 8008126:	212c      	movs	r1, #44	@ 0x2c
 8008128:	4604      	mov	r4, r0
 800812a:	f007 fe5f 	bl	800fdec <_ZdlPvj>
 800812e:	4620      	mov	r0, r4
 8008130:	bd10      	pop	{r4, pc}

08008132 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8008132:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008134:	b19b      	cbz	r3, 800815e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8008136:	428b      	cmp	r3, r1
 8008138:	d109      	bne.n	800814e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800813a:	699a      	ldr	r2, [r3, #24]
 800813c:	2100      	movs	r1, #0
 800813e:	6159      	str	r1, [r3, #20]
 8008140:	6282      	str	r2, [r0, #40]	@ 0x28
 8008142:	b902      	cbnz	r2, 8008146 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8008144:	4770      	bx	lr
 8008146:	6199      	str	r1, [r3, #24]
 8008148:	4770      	bx	lr
 800814a:	4613      	mov	r3, r2
 800814c:	b13a      	cbz	r2, 800815e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800814e:	699a      	ldr	r2, [r3, #24]
 8008150:	428a      	cmp	r2, r1
 8008152:	d1fa      	bne.n	800814a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8008154:	698a      	ldr	r2, [r1, #24]
 8008156:	619a      	str	r2, [r3, #24]
 8008158:	2300      	movs	r3, #0
 800815a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800815e:	4770      	bx	lr

08008160 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8008160:	b410      	push	{r4}
 8008162:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008164:	4604      	mov	r4, r0
 8008166:	b92b      	cbnz	r3, 8008174 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8008168:	6803      	ldr	r3, [r0, #0]
 800816a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800816e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008170:	4611      	mov	r1, r2
 8008172:	4718      	bx	r3
 8008174:	b941      	cbnz	r1, 8008188 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8008176:	6193      	str	r3, [r2, #24]
 8008178:	6282      	str	r2, [r0, #40]	@ 0x28
 800817a:	6154      	str	r4, [r2, #20]
 800817c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	4603      	mov	r3, r0
 8008184:	2800      	cmp	r0, #0
 8008186:	d0f9      	beq.n	800817c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8008188:	4299      	cmp	r1, r3
 800818a:	6998      	ldr	r0, [r3, #24]
 800818c:	d1f9      	bne.n	8008182 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800818e:	6190      	str	r0, [r2, #24]
 8008190:	618a      	str	r2, [r1, #24]
 8008192:	e7f2      	b.n	800817a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08008194 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8008194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008198:	461f      	mov	r7, r3
 800819a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800819e:	460d      	mov	r5, r1
 80081a0:	4616      	mov	r6, r2
 80081a2:	b103      	cbz	r3, 80081a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80081a4:	6038      	str	r0, [r7, #0]
 80081a6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80081a8:	b314      	cbz	r4, 80081f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80081aa:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80081ae:	b1eb      	cbz	r3, 80081ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80081b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80081b4:	428d      	cmp	r5, r1
 80081b6:	db19      	blt.n	80081ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80081b8:	8923      	ldrh	r3, [r4, #8]
 80081ba:	b289      	uxth	r1, r1
 80081bc:	440b      	add	r3, r1
 80081be:	b21b      	sxth	r3, r3
 80081c0:	429d      	cmp	r5, r3
 80081c2:	da13      	bge.n	80081ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80081c4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80081c8:	4296      	cmp	r6, r2
 80081ca:	db0f      	blt.n	80081ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80081cc:	8963      	ldrh	r3, [r4, #10]
 80081ce:	b292      	uxth	r2, r2
 80081d0:	4413      	add	r3, r2
 80081d2:	b21b      	sxth	r3, r3
 80081d4:	429e      	cmp	r6, r3
 80081d6:	da09      	bge.n	80081ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	1ab2      	subs	r2, r6, r2
 80081dc:	1a69      	subs	r1, r5, r1
 80081de:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80081e2:	b212      	sxth	r2, r2
 80081e4:	463b      	mov	r3, r7
 80081e6:	b209      	sxth	r1, r1
 80081e8:	4620      	mov	r0, r4
 80081ea:	47c0      	blx	r8
 80081ec:	69a4      	ldr	r4, [r4, #24]
 80081ee:	e7db      	b.n	80081a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80081f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	4c6e      	ldr	r4, [pc, #440]	@ (80083b4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80081fa:	b0a1      	sub	sp, #132	@ 0x84
 80081fc:	6824      	ldr	r4, [r4, #0]
 80081fe:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8008200:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8008204:	9303      	str	r3, [sp, #12]
 8008206:	2400      	movs	r4, #0
 8008208:	802c      	strh	r4, [r5, #0]
 800820a:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800820c:	802c      	strh	r4, [r5, #0]
 800820e:	601c      	str	r4, [r3, #0]
 8008210:	4606      	mov	r6, r0
 8008212:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8008216:	f7ff ffbd 	bl	8008194 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800821a:	f1b9 0f03 	cmp.w	r9, #3
 800821e:	f340 80c2 	ble.w	80083a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8008222:	4631      	mov	r1, r6
 8008224:	a80c      	add	r0, sp, #48	@ 0x30
 8008226:	f003 fbc7 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800822a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800822e:	9306      	str	r3, [sp, #24]
 8008230:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8008234:	9307      	str	r3, [sp, #28]
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	f8d3 a000 	ldr.w	sl, [r3]
 800823c:	f1ba 0f00 	cmp.w	sl, #0
 8008240:	f000 80b4 	beq.w	80083ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8008244:	4651      	mov	r1, sl
 8008246:	a810      	add	r0, sp, #64	@ 0x40
 8008248:	f003 fbb6 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800824c:	9b01      	ldr	r3, [sp, #4]
 800824e:	9a06      	ldr	r2, [sp, #24]
 8008250:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8008254:	189d      	adds	r5, r3, r2
 8008256:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800825a:	9a07      	ldr	r2, [sp, #28]
 800825c:	2002      	movs	r0, #2
 800825e:	fb91 f1f0 	sdiv	r1, r1, r0
 8008262:	4419      	add	r1, r3
 8008264:	1a6d      	subs	r5, r5, r1
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800826c:	4413      	add	r3, r2
 800826e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8008272:	fb92 f2f0 	sdiv	r2, r2, r0
 8008276:	440a      	add	r2, r1
 8008278:	1a9b      	subs	r3, r3, r2
 800827a:	435b      	muls	r3, r3
 800827c:	fb05 3505 	mla	r5, r5, r5, r3
 8008280:	4f4d      	ldr	r7, [pc, #308]	@ (80083b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8008282:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008284:	ac10      	add	r4, sp, #64	@ 0x40
 8008286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008288:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800828a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800828c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800828e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008290:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008294:	f1b9 0f0c 	cmp.w	r9, #12
 8008298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800829c:	f04f 0303 	mov.w	r3, #3
 80082a0:	bfc8      	it	gt
 80082a2:	4698      	movgt	r8, r3
 80082a4:	f8cd 9000 	str.w	r9, [sp]
 80082a8:	f04f 0400 	mov.w	r4, #0
 80082ac:	bfdc      	itt	le
 80082ae:	f109 32ff 	addle.w	r2, r9, #4294967295
 80082b2:	fb92 f8f3 	sdivle	r8, r2, r3
 80082b6:	1c63      	adds	r3, r4, #1
 80082b8:	aa10      	add	r2, sp, #64	@ 0x40
 80082ba:	f004 0401 	and.w	r4, r4, #1
 80082be:	9308      	str	r3, [sp, #32]
 80082c0:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	fb93 f3f8 	sdiv	r3, r3, r8
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	3404      	adds	r4, #4
 80082ce:	f04f 0b00 	mov.w	fp, #0
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	9a04      	ldr	r2, [sp, #16]
 80082d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80082da:	fb13 f302 	smulbb	r3, r3, r2
 80082de:	9a01      	ldr	r2, [sp, #4]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	1899      	adds	r1, r3, r2
 80082e4:	9305      	str	r3, [sp, #20]
 80082e6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80082ea:	b209      	sxth	r1, r1
 80082ec:	4299      	cmp	r1, r3
 80082ee:	db4d      	blt.n	800838c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80082f0:	8932      	ldrh	r2, [r6, #8]
 80082f2:	4413      	add	r3, r2
 80082f4:	b21b      	sxth	r3, r3
 80082f6:	4299      	cmp	r1, r3
 80082f8:	da48      	bge.n	800838c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80082fa:	9b04      	ldr	r3, [sp, #16]
 80082fc:	6827      	ldr	r7, [r4, #0]
 80082fe:	fb17 f703 	smulbb	r7, r7, r3
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	b2bf      	uxth	r7, r7
 8008306:	18fa      	adds	r2, r7, r3
 8008308:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800830c:	b212      	sxth	r2, r2
 800830e:	429a      	cmp	r2, r3
 8008310:	db3c      	blt.n	800838c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008312:	8970      	ldrh	r0, [r6, #10]
 8008314:	4403      	add	r3, r0
 8008316:	b21b      	sxth	r3, r3
 8008318:	429a      	cmp	r2, r3
 800831a:	da37      	bge.n	800838c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800831c:	2300      	movs	r3, #0
 800831e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008320:	4630      	mov	r0, r6
 8008322:	ab0b      	add	r3, sp, #44	@ 0x2c
 8008324:	f7ff ff36 	bl	8008194 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8008328:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800832a:	b37a      	cbz	r2, 800838c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800832c:	4552      	cmp	r2, sl
 800832e:	d02d      	beq.n	800838c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008330:	4611      	mov	r1, r2
 8008332:	a80e      	add	r0, sp, #56	@ 0x38
 8008334:	9209      	str	r2, [sp, #36]	@ 0x24
 8008336:	f003 fb3f 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800833a:	9a06      	ldr	r2, [sp, #24]
 800833c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8008346:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800834a:	4413      	add	r3, r2
 800834c:	f04f 0e02 	mov.w	lr, #2
 8008350:	fb91 f1fe 	sdiv	r1, r1, lr
 8008354:	4401      	add	r1, r0
 8008356:	1a58      	subs	r0, r3, r1
 8008358:	9a07      	ldr	r2, [sp, #28]
 800835a:	9b02      	ldr	r3, [sp, #8]
 800835c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8008360:	fb9c fcfe 	sdiv	ip, ip, lr
 8008364:	4413      	add	r3, r2
 8008366:	448c      	add	ip, r1
 8008368:	eba3 030c 	sub.w	r3, r3, ip
 800836c:	435b      	muls	r3, r3
 800836e:	fb00 3300 	mla	r3, r0, r0, r3
 8008372:	42ab      	cmp	r3, r5
 8008374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008376:	d208      	bcs.n	800838a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8008378:	9803      	ldr	r0, [sp, #12]
 800837a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800837c:	6001      	str	r1, [r0, #0]
 800837e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8008380:	9805      	ldr	r0, [sp, #20]
 8008382:	8008      	strh	r0, [r1, #0]
 8008384:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8008386:	461d      	mov	r5, r3
 8008388:	800f      	strh	r7, [r1, #0]
 800838a:	4692      	mov	sl, r2
 800838c:	f10b 0b01 	add.w	fp, fp, #1
 8008390:	f1bb 0f04 	cmp.w	fp, #4
 8008394:	f104 0408 	add.w	r4, r4, #8
 8008398:	d19c      	bne.n	80082d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800839a:	9b00      	ldr	r3, [sp, #0]
 800839c:	9c08      	ldr	r4, [sp, #32]
 800839e:	444b      	add	r3, r9
 80083a0:	4544      	cmp	r4, r8
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	d187      	bne.n	80082b6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80083a6:	b021      	add	sp, #132	@ 0x84
 80083a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ac:	f04f 35ff 	mov.w	r5, #4294967295
 80083b0:	e766      	b.n	8008280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80083b2:	bf00      	nop
 80083b4:	20012434 	.word	0x20012434
 80083b8:	08010ea0 	.word	0x08010ea0

080083bc <_ZN8touchgfx4RectaNERKS0_>:
 80083bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083c0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80083c4:	888c      	ldrh	r4, [r1, #4]
 80083c6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80083ca:	443c      	add	r4, r7
 80083cc:	b2a4      	uxth	r4, r4
 80083ce:	fa0f f884 	sxth.w	r8, r4
 80083d2:	45c1      	cmp	r9, r8
 80083d4:	da2f      	bge.n	8008436 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80083d6:	8882      	ldrh	r2, [r0, #4]
 80083d8:	444a      	add	r2, r9
 80083da:	b292      	uxth	r2, r2
 80083dc:	fa0f fe82 	sxth.w	lr, r2
 80083e0:	4577      	cmp	r7, lr
 80083e2:	da28      	bge.n	8008436 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80083e4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80083e8:	88cb      	ldrh	r3, [r1, #6]
 80083ea:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80083ee:	442b      	add	r3, r5
 80083f0:	b21b      	sxth	r3, r3
 80083f2:	429e      	cmp	r6, r3
 80083f4:	da1f      	bge.n	8008436 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80083f6:	88c3      	ldrh	r3, [r0, #6]
 80083f8:	4433      	add	r3, r6
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	fa0f fc83 	sxth.w	ip, r3
 8008400:	4565      	cmp	r5, ip
 8008402:	da18      	bge.n	8008436 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008404:	454f      	cmp	r7, r9
 8008406:	bfb8      	it	lt
 8008408:	464f      	movlt	r7, r9
 800840a:	42b5      	cmp	r5, r6
 800840c:	bfb8      	it	lt
 800840e:	4635      	movlt	r5, r6
 8008410:	45f0      	cmp	r8, lr
 8008412:	bfd8      	it	le
 8008414:	4622      	movle	r2, r4
 8008416:	1bd2      	subs	r2, r2, r7
 8008418:	8082      	strh	r2, [r0, #4]
 800841a:	884a      	ldrh	r2, [r1, #2]
 800841c:	88c9      	ldrh	r1, [r1, #6]
 800841e:	8007      	strh	r7, [r0, #0]
 8008420:	440a      	add	r2, r1
 8008422:	b292      	uxth	r2, r2
 8008424:	b211      	sxth	r1, r2
 8008426:	458c      	cmp	ip, r1
 8008428:	bfa8      	it	ge
 800842a:	4613      	movge	r3, r2
 800842c:	1b5b      	subs	r3, r3, r5
 800842e:	80c3      	strh	r3, [r0, #6]
 8008430:	8045      	strh	r5, [r0, #2]
 8008432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008436:	2300      	movs	r3, #0
 8008438:	8003      	strh	r3, [r0, #0]
 800843a:	8043      	strh	r3, [r0, #2]
 800843c:	8083      	strh	r3, [r0, #4]
 800843e:	80c3      	strh	r3, [r0, #6]
 8008440:	e7f7      	b.n	8008432 <_ZN8touchgfx4RectaNERKS0_+0x76>

08008442 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8008442:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	dd06      	ble.n	8008458 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800844a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800844e:	2800      	cmp	r0, #0
 8008450:	bfcc      	ite	gt
 8008452:	2000      	movgt	r0, #0
 8008454:	2001      	movle	r0, #1
 8008456:	4770      	bx	lr
 8008458:	2001      	movs	r0, #1
 800845a:	4770      	bx	lr

0800845c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800845c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008460:	2300      	movs	r3, #0
 8008462:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8008464:	8003      	strh	r3, [r0, #0]
 8008466:	4604      	mov	r4, r0
 8008468:	8043      	strh	r3, [r0, #2]
 800846a:	8083      	strh	r3, [r0, #4]
 800846c:	80c3      	strh	r3, [r0, #6]
 800846e:	2d00      	cmp	r5, #0
 8008470:	d040      	beq.n	80084f4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8008472:	1d28      	adds	r0, r5, #4
 8008474:	f7ff ffe5 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 8008478:	b988      	cbnz	r0, 800849e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800847a:	4620      	mov	r0, r4
 800847c:	f7ff ffe1 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 8008480:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8008484:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8008488:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800848c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8008490:	b138      	cbz	r0, 80084a2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8008492:	8022      	strh	r2, [r4, #0]
 8008494:	8063      	strh	r3, [r4, #2]
 8008496:	f8a4 e004 	strh.w	lr, [r4, #4]
 800849a:	f8a4 c006 	strh.w	ip, [r4, #6]
 800849e:	69ad      	ldr	r5, [r5, #24]
 80084a0:	e7e5      	b.n	800846e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80084a2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80084a6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80084aa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80084ae:	4290      	cmp	r0, r2
 80084b0:	4607      	mov	r7, r0
 80084b2:	bfa8      	it	ge
 80084b4:	4617      	movge	r7, r2
 80084b6:	4472      	add	r2, lr
 80084b8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80084bc:	8027      	strh	r7, [r4, #0]
 80084be:	4299      	cmp	r1, r3
 80084c0:	460e      	mov	r6, r1
 80084c2:	4440      	add	r0, r8
 80084c4:	bfa8      	it	ge
 80084c6:	461e      	movge	r6, r3
 80084c8:	4471      	add	r1, lr
 80084ca:	4463      	add	r3, ip
 80084cc:	b200      	sxth	r0, r0
 80084ce:	b212      	sxth	r2, r2
 80084d0:	b209      	sxth	r1, r1
 80084d2:	b21b      	sxth	r3, r3
 80084d4:	4290      	cmp	r0, r2
 80084d6:	bfac      	ite	ge
 80084d8:	ebc7 0200 	rsbge	r2, r7, r0
 80084dc:	ebc7 0202 	rsblt	r2, r7, r2
 80084e0:	4299      	cmp	r1, r3
 80084e2:	bfac      	ite	ge
 80084e4:	ebc6 0301 	rsbge	r3, r6, r1
 80084e8:	ebc6 0303 	rsblt	r3, r6, r3
 80084ec:	8066      	strh	r6, [r4, #2]
 80084ee:	80a2      	strh	r2, [r4, #4]
 80084f0:	80e3      	strh	r3, [r4, #6]
 80084f2:	e7d4      	b.n	800849e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80084f4:	4620      	mov	r0, r4
 80084f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084fa <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80084fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80084fe:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8008502:	b383      	cbz	r3, 8008566 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8008504:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008506:	b374      	cbz	r4, 8008566 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8008508:	f9b1 5000 	ldrsh.w	r5, [r1]
 800850c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8008510:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8008514:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8008518:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800851c:	b303      	cbz	r3, 8008560 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800851e:	4668      	mov	r0, sp
 8008520:	1d21      	adds	r1, r4, #4
 8008522:	f8ad 5000 	strh.w	r5, [sp]
 8008526:	f8ad 6002 	strh.w	r6, [sp, #2]
 800852a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800852e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8008532:	f7ff ff43 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 8008536:	4668      	mov	r0, sp
 8008538:	f7ff ff83 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800853c:	b980      	cbnz	r0, 8008560 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800853e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008542:	88a2      	ldrh	r2, [r4, #4]
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	f8ad 3000 	strh.w	r3, [sp]
 800854a:	88e2      	ldrh	r2, [r4, #6]
 800854c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008550:	1a9b      	subs	r3, r3, r2
 8008552:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	4669      	mov	r1, sp
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	4620      	mov	r0, r4
 800855e:	4798      	blx	r3
 8008560:	69a4      	ldr	r4, [r4, #24]
 8008562:	2c00      	cmp	r4, #0
 8008564:	d1d8      	bne.n	8008518 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8008566:	b002      	add	sp, #8
 8008568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800856c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800856c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800856e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8008572:	460d      	mov	r5, r1
 8008574:	4616      	mov	r6, r2
 8008576:	b323      	cbz	r3, 80085c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8008578:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800857a:	b314      	cbz	r4, 80085c2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800857c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8008580:	b1eb      	cbz	r3, 80085be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8008582:	6828      	ldr	r0, [r5, #0]
 8008584:	6869      	ldr	r1, [r5, #4]
 8008586:	466b      	mov	r3, sp
 8008588:	c303      	stmia	r3!, {r0, r1}
 800858a:	4668      	mov	r0, sp
 800858c:	1d21      	adds	r1, r4, #4
 800858e:	f7ff ff15 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 8008592:	4668      	mov	r0, sp
 8008594:	f7ff ff55 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 8008598:	b988      	cbnz	r0, 80085be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800859a:	f8bd 3000 	ldrh.w	r3, [sp]
 800859e:	88a2      	ldrh	r2, [r4, #4]
 80085a0:	1a9b      	subs	r3, r3, r2
 80085a2:	f8ad 3000 	strh.w	r3, [sp]
 80085a6:	88e2      	ldrh	r2, [r4, #6]
 80085a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80085ac:	1a9b      	subs	r3, r3, r2
 80085ae:	f8ad 3002 	strh.w	r3, [sp, #2]
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	4632      	mov	r2, r6
 80085b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085b8:	4669      	mov	r1, sp
 80085ba:	4620      	mov	r0, r4
 80085bc:	4798      	blx	r3
 80085be:	69a4      	ldr	r4, [r4, #24]
 80085c0:	e7db      	b.n	800857a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80085c2:	b002      	add	sp, #8
 80085c4:	bd70      	pop	{r4, r5, r6, pc}

080085c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80085c6:	b513      	push	{r0, r1, r4, lr}
 80085c8:	6803      	ldr	r3, [r0, #0]
 80085ca:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80085ce:	2300      	movs	r3, #0
 80085d0:	e9cd 3300 	strd	r3, r3, [sp]
 80085d4:	466b      	mov	r3, sp
 80085d6:	47a0      	blx	r4
 80085d8:	b002      	add	sp, #8
 80085da:	bd10      	pop	{r4, pc}

080085dc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80085dc:	2301      	movs	r3, #1
 80085de:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80085e2:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80085e6:	4770      	bx	lr

080085e8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80085e8:	2301      	movs	r3, #1
 80085ea:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80085ee:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80085f2:	4770      	bx	lr

080085f4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80085f4:	6843      	ldr	r3, [r0, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	725a      	strb	r2, [r3, #9]
 80085fa:	6840      	ldr	r0, [r0, #4]
 80085fc:	6803      	ldr	r3, [r0, #0]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	4718      	bx	r3

08008602 <_ZN8touchgfx3HAL8flushDMAEv>:
 8008602:	6840      	ldr	r0, [r0, #4]
 8008604:	6803      	ldr	r3, [r0, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	4718      	bx	r3

0800860a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800860a:	b530      	push	{r4, r5, lr}
 800860c:	b08b      	sub	sp, #44	@ 0x2c
 800860e:	6804      	ldr	r4, [r0, #0]
 8008610:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8008614:	9509      	str	r5, [sp, #36]	@ 0x24
 8008616:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800861a:	9508      	str	r5, [sp, #32]
 800861c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8008620:	9507      	str	r5, [sp, #28]
 8008622:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8008626:	9506      	str	r5, [sp, #24]
 8008628:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800862c:	9505      	str	r5, [sp, #20]
 800862e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8008632:	9504      	str	r5, [sp, #16]
 8008634:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8008638:	9503      	str	r5, [sp, #12]
 800863a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800863e:	9502      	str	r5, [sp, #8]
 8008640:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8008644:	e9cd 3500 	strd	r3, r5, [sp]
 8008648:	4613      	mov	r3, r2
 800864a:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800864c:	2200      	movs	r2, #0
 800864e:	47a0      	blx	r4
 8008650:	b00b      	add	sp, #44	@ 0x2c
 8008652:	bd30      	pop	{r4, r5, pc}

08008654 <_ZN8touchgfx3HAL10beginFrameEv>:
 8008654:	4b04      	ldr	r3, [pc, #16]	@ (8008668 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	b123      	cbz	r3, 8008664 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800865a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800865e:	f080 0001 	eor.w	r0, r0, #1
 8008662:	4770      	bx	lr
 8008664:	2001      	movs	r0, #1
 8008666:	4770      	bx	lr
 8008668:	20012432 	.word	0x20012432

0800866c <_ZN8touchgfx3HAL8endFrameEv>:
 800866c:	b510      	push	{r4, lr}
 800866e:	4604      	mov	r4, r0
 8008670:	6840      	ldr	r0, [r0, #4]
 8008672:	6803      	ldr	r3, [r0, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	4798      	blx	r3
 8008678:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800867c:	b113      	cbz	r3, 8008684 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800867e:	2301      	movs	r3, #1
 8008680:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8008684:	bd10      	pop	{r4, pc}

08008686 <_ZN8touchgfx3HAL10initializeEv>:
 8008686:	b510      	push	{r4, lr}
 8008688:	4604      	mov	r4, r0
 800868a:	f7f8 f9d3 	bl	8000a34 <_ZN8touchgfx10OSWrappers10initializeEv>
 800868e:	f7f8 f8db 	bl	8000848 <_ZN8touchgfx4GPIO4initEv>
 8008692:	6860      	ldr	r0, [r4, #4]
 8008694:	6803      	ldr	r3, [r0, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	4798      	blx	r3
 800869a:	68e0      	ldr	r0, [r4, #12]
 800869c:	6803      	ldr	r3, [r0, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	4798      	blx	r3
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	4620      	mov	r0, r4
 80086a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ac:	4718      	bx	r3
	...

080086b0 <_ZN8touchgfx3HAL4tickEv>:
 80086b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80086b2:	6803      	ldr	r3, [r0, #0]
 80086b4:	4d5b      	ldr	r5, [pc, #364]	@ (8008824 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80086b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4798      	blx	r3
 80086be:	2800      	cmp	r0, #0
 80086c0:	f000 8095 	beq.w	80087ee <_ZN8touchgfx3HAL4tickEv+0x13e>
 80086c4:	2001      	movs	r0, #1
 80086c6:	f7f8 f83d 	bl	8000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80086ca:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80086ce:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80086d2:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 80086d6:	2600      	movs	r6, #0
 80086d8:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 80086dc:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80086e0:	b133      	cbz	r3, 80086f0 <_ZN8touchgfx3HAL4tickEv+0x40>
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	4620      	mov	r0, r4
 80086e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80086ea:	4798      	blx	r3
 80086ec:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80086f0:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80086f4:	6862      	ldr	r2, [r4, #4]
 80086f6:	f083 0301 	eor.w	r3, r3, #1
 80086fa:	7253      	strb	r3, [r2, #9]
 80086fc:	2601      	movs	r6, #1
 80086fe:	702e      	strb	r6, [r5, #0]
 8008700:	f002 f820 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
 8008704:	6803      	ldr	r3, [r0, #0]
 8008706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008708:	4798      	blx	r3
 800870a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800870e:	b90b      	cbnz	r3, 8008714 <_ZN8touchgfx3HAL4tickEv+0x64>
 8008710:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8008714:	f002 f816 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
 8008718:	6803      	ldr	r3, [r0, #0]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	4798      	blx	r3
 800871e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8008720:	6803      	ldr	r3, [r0, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	4798      	blx	r3
 8008726:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800872a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800872e:	3b01      	subs	r3, #1
 8008730:	b2db      	uxtb	r3, r3
 8008732:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8008736:	b10a      	cbz	r2, 800873c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1eb      	bne.n	8008714 <_ZN8touchgfx3HAL4tickEv+0x64>
 800873c:	4a3a      	ldr	r2, [pc, #232]	@ (8008828 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800873e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8008742:	7813      	ldrb	r3, [r2, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	b25b      	sxtb	r3, r3
 8008748:	4299      	cmp	r1, r3
 800874a:	7013      	strb	r3, [r2, #0]
 800874c:	dc10      	bgt.n	8008770 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800874e:	68e0      	ldr	r0, [r4, #12]
 8008750:	2300      	movs	r3, #0
 8008752:	7013      	strb	r3, [r2, #0]
 8008754:	6803      	ldr	r3, [r0, #0]
 8008756:	aa03      	add	r2, sp, #12
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	a902      	add	r1, sp, #8
 800875c:	4798      	blx	r3
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	2800      	cmp	r0, #0
 8008762:	d050      	beq.n	8008806 <_ZN8touchgfx3HAL4tickEv+0x156>
 8008764:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008768:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800876c:	4620      	mov	r0, r4
 800876e:	4798      	blx	r3
 8008770:	6960      	ldr	r0, [r4, #20]
 8008772:	2300      	movs	r3, #0
 8008774:	f88d 3007 	strb.w	r3, [sp, #7]
 8008778:	b158      	cbz	r0, 8008792 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800877a:	6803      	ldr	r3, [r0, #0]
 800877c:	f10d 0107 	add.w	r1, sp, #7
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	4798      	blx	r3
 8008784:	b128      	cbz	r0, 8008792 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8008786:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8008788:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800878c:	6803      	ldr	r3, [r0, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	4798      	blx	r3
 8008792:	f104 001c 	add.w	r0, r4, #28
 8008796:	f007 fa55 	bl	800fc44 <_ZN8touchgfx8Gestures4tickEv>
 800879a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800879e:	b30b      	cbz	r3, 80087e4 <_ZN8touchgfx3HAL4tickEv+0x134>
 80087a0:	6920      	ldr	r0, [r4, #16]
 80087a2:	6803      	ldr	r3, [r0, #0]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	4798      	blx	r3
 80087a8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80087aa:	4606      	mov	r6, r0
 80087ac:	b903      	cbnz	r3, 80087b0 <_ZN8touchgfx3HAL4tickEv+0x100>
 80087ae:	6760      	str	r0, [r4, #116]	@ 0x74
 80087b0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80087b2:	4a1e      	ldr	r2, [pc, #120]	@ (800882c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80087b4:	1af3      	subs	r3, r6, r3
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d914      	bls.n	80087e4 <_ZN8touchgfx3HAL4tickEv+0x134>
 80087ba:	6920      	ldr	r0, [r4, #16]
 80087bc:	6803      	ldr	r3, [r0, #0]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	4798      	blx	r3
 80087c2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80087c4:	2264      	movs	r2, #100	@ 0x64
 80087c6:	1af3      	subs	r3, r6, r3
 80087c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80087d0:	2800      	cmp	r0, #0
 80087d2:	dc1d      	bgt.n	8008810 <_ZN8touchgfx3HAL4tickEv+0x160>
 80087d4:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 80087d8:	6920      	ldr	r0, [r4, #16]
 80087da:	6803      	ldr	r3, [r0, #0]
 80087dc:	2100      	movs	r1, #0
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	4798      	blx	r3
 80087e2:	6766      	str	r6, [r4, #116]	@ 0x74
 80087e4:	f001 ffae 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
 80087e8:	6803      	ldr	r3, [r0, #0]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ec:	4798      	blx	r3
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	4620      	mov	r0, r4
 80087f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087f6:	4798      	blx	r3
 80087f8:	2001      	movs	r0, #1
 80087fa:	f7f7 ffcd 	bl	8000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80087fe:	2300      	movs	r3, #0
 8008800:	702b      	strb	r3, [r5, #0]
 8008802:	b004      	add	sp, #16
 8008804:	bd70      	pop	{r4, r5, r6, pc}
 8008806:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800880a:	4620      	mov	r0, r4
 800880c:	4798      	blx	r3
 800880e:	e7af      	b.n	8008770 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8008810:	2863      	cmp	r0, #99	@ 0x63
 8008812:	bfcb      	itete	gt
 8008814:	2300      	movgt	r3, #0
 8008816:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800881a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800881e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8008822:	e7d9      	b.n	80087d8 <_ZN8touchgfx3HAL4tickEv+0x128>
 8008824:	20012438 	.word	0x20012438
 8008828:	20012439 	.word	0x20012439
 800882c:	05f5e100 	.word	0x05f5e100

08008830 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8008830:	b510      	push	{r4, lr}
 8008832:	4604      	mov	r4, r0
 8008834:	f7f8 f92e 	bl	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8008838:	6863      	ldr	r3, [r4, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	729a      	strb	r2, [r3, #10]
 800883e:	bd10      	pop	{r4, pc}

08008840 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8008840:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8008842:	301c      	adds	r0, #28
 8008844:	f007 b9fc 	b.w	800fc40 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08008848 <_ZN8touchgfx3HAL5touchEll>:
 8008848:	b530      	push	{r4, r5, lr}
 800884a:	b087      	sub	sp, #28
 800884c:	4604      	mov	r4, r0
 800884e:	a804      	add	r0, sp, #16
 8008850:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8008854:	f001 fd5e 	bl	800a314 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8008858:	9b04      	ldr	r3, [sp, #16]
 800885a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800885e:	a906      	add	r1, sp, #24
 8008860:	9b05      	ldr	r3, [sp, #20]
 8008862:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8008866:	a803      	add	r0, sp, #12
 8008868:	f001 fda6 	bl	800a3b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800886c:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8008870:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8008874:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008878:	f104 001c 	add.w	r0, r4, #28
 800887c:	b189      	cbz	r1, 80088a2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800887e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8008888:	4613      	mov	r3, r2
 800888a:	462a      	mov	r2, r5
 800888c:	f007 f9e8 	bl	800fc60 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8008890:	b128      	cbz	r0, 800889e <_ZN8touchgfx3HAL5touchEll+0x56>
 8008892:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8008896:	6623      	str	r3, [r4, #96]	@ 0x60
 8008898:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800889c:	6663      	str	r3, [r4, #100]	@ 0x64
 800889e:	b007      	add	sp, #28
 80088a0:	bd30      	pop	{r4, r5, pc}
 80088a2:	f007 fa1d 	bl	800fce0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80088a6:	2301      	movs	r3, #1
 80088a8:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80088ac:	e7f1      	b.n	8008892 <_ZN8touchgfx3HAL5touchEll+0x4a>

080088ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80088ae:	b510      	push	{r4, lr}
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d046      	beq.n	8008942 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80088b4:	ea81 0002 	eor.w	r0, r1, r2
 80088b8:	07c4      	lsls	r4, r0, #31
 80088ba:	d508      	bpl.n	80088ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80088bc:	440b      	add	r3, r1
 80088be:	3a01      	subs	r2, #1
 80088c0:	428b      	cmp	r3, r1
 80088c2:	d93e      	bls.n	8008942 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80088c4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80088c8:	f801 0b01 	strb.w	r0, [r1], #1
 80088cc:	e7f8      	b.n	80088c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80088ce:	07d0      	lsls	r0, r2, #31
 80088d0:	bf42      	ittt	mi
 80088d2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80088d6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80088da:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d911      	bls.n	8008906 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80088e2:	ea81 0402 	eor.w	r4, r1, r2
 80088e6:	07a4      	lsls	r4, r4, #30
 80088e8:	4610      	mov	r0, r2
 80088ea:	d022      	beq.n	8008932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80088ec:	f023 0401 	bic.w	r4, r3, #1
 80088f0:	440c      	add	r4, r1
 80088f2:	428c      	cmp	r4, r1
 80088f4:	4602      	mov	r2, r0
 80088f6:	d904      	bls.n	8008902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80088f8:	8812      	ldrh	r2, [r2, #0]
 80088fa:	f821 2b02 	strh.w	r2, [r1], #2
 80088fe:	3002      	adds	r0, #2
 8008900:	e7f7      	b.n	80088f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	f023 0003 	bic.w	r0, r3, #3
 800890a:	4408      	add	r0, r1
 800890c:	4288      	cmp	r0, r1
 800890e:	4614      	mov	r4, r2
 8008910:	d904      	bls.n	800891c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8008912:	6824      	ldr	r4, [r4, #0]
 8008914:	f841 4b04 	str.w	r4, [r1], #4
 8008918:	3204      	adds	r2, #4
 800891a:	e7f7      	b.n	800890c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	440b      	add	r3, r1
 8008922:	3a01      	subs	r2, #1
 8008924:	428b      	cmp	r3, r1
 8008926:	d90c      	bls.n	8008942 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008928:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800892c:	f801 0b01 	strb.w	r0, [r1], #1
 8008930:	e7f8      	b.n	8008924 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8008932:	0790      	lsls	r0, r2, #30
 8008934:	d0e7      	beq.n	8008906 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008936:	f832 0b02 	ldrh.w	r0, [r2], #2
 800893a:	f821 0b02 	strh.w	r0, [r1], #2
 800893e:	3b02      	subs	r3, #2
 8008940:	e7e1      	b.n	8008906 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008942:	2001      	movs	r0, #1
 8008944:	bd10      	pop	{r4, pc}

08008946 <_ZN8touchgfx3HAL7noTouchEv>:
 8008946:	b510      	push	{r4, lr}
 8008948:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800894c:	4604      	mov	r4, r0
 800894e:	b153      	cbz	r3, 8008966 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8008950:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8008954:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8008958:	2101      	movs	r1, #1
 800895a:	301c      	adds	r0, #28
 800895c:	f007 f9c0 	bl	800fce0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8008960:	2300      	movs	r3, #0
 8008962:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8008966:	bd10      	pop	{r4, pc}

08008968 <_ZN8touchgfx3HAL3lcdEv>:
 8008968:	4b04      	ldr	r3, [pc, #16]	@ (800897c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8008970:	b10a      	cbz	r2, 8008976 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8008972:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008974:	b900      	cbnz	r0, 8008978 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8008976:	6898      	ldr	r0, [r3, #8]
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	20012434 	.word	0x20012434

08008980 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8008980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008984:	b085      	sub	sp, #20
 8008986:	ad04      	add	r5, sp, #16
 8008988:	4604      	mov	r4, r0
 800898a:	2000      	movs	r0, #0
 800898c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8008990:	69a0      	ldr	r0, [r4, #24]
 8008992:	6806      	ldr	r6, [r0, #0]
 8008994:	9501      	str	r5, [sp, #4]
 8008996:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800899a:	9500      	str	r5, [sp, #0]
 800899c:	6835      	ldr	r5, [r6, #0]
 800899e:	4699      	mov	r9, r3
 80089a0:	460f      	mov	r7, r1
 80089a2:	4690      	mov	r8, r2
 80089a4:	47a8      	blx	r5
 80089a6:	4d10      	ldr	r5, [pc, #64]	@ (80089e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80089a8:	4606      	mov	r6, r0
 80089aa:	f8a5 9000 	strh.w	r9, [r5]
 80089ae:	f7ff ffdb 	bl	8008968 <_ZN8touchgfx3HAL3lcdEv>
 80089b2:	6803      	ldr	r3, [r0, #0]
 80089b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b6:	4798      	blx	r3
 80089b8:	b128      	cbz	r0, 80089c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80089ba:	2801      	cmp	r0, #1
 80089bc:	d00b      	beq.n	80089d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80089be:	4630      	mov	r0, r6
 80089c0:	b005      	add	sp, #20
 80089c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089c6:	882b      	ldrh	r3, [r5, #0]
 80089c8:	fb08 7203 	mla	r2, r8, r3, r7
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80089d2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80089d4:	e7f3      	b.n	80089be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80089d6:	882a      	ldrh	r2, [r5, #0]
 80089d8:	9b03      	ldr	r3, [sp, #12]
 80089da:	fb08 7202 	mla	r2, r8, r2, r7
 80089de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80089e2:	1a9a      	subs	r2, r3, r2
 80089e4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80089e6:	e7ea      	b.n	80089be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80089e8:	2001242e 	.word	0x2001242e

080089ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80089ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ee:	b08b      	sub	sp, #44	@ 0x2c
 80089f0:	4617      	mov	r7, r2
 80089f2:	4604      	mov	r4, r0
 80089f4:	460e      	mov	r6, r1
 80089f6:	461d      	mov	r5, r3
 80089f8:	f7ff ffb6 	bl	8008968 <_ZN8touchgfx3HAL3lcdEv>
 80089fc:	6803      	ldr	r3, [r0, #0]
 80089fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a00:	4798      	blx	r3
 8008a02:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8008a06:	9007      	str	r0, [sp, #28]
 8008a08:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8008a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a44 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8008a0e:	6822      	ldr	r2, [r4, #0]
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	9306      	str	r3, [sp, #24]
 8008a14:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8008a1e:	9304      	str	r3, [sp, #16]
 8008a20:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008a24:	9303      	str	r3, [sp, #12]
 8008a26:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8008a30:	e9cd 5300 	strd	r5, r3, [sp]
 8008a34:	4631      	mov	r1, r6
 8008a36:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8008a38:	463b      	mov	r3, r7
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	47a8      	blx	r5
 8008a40:	b00b      	add	sp, #44	@ 0x2c
 8008a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a44:	2001242e 	.word	0x2001242e

08008a48 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8008a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a4c:	4698      	mov	r8, r3
 8008a4e:	6803      	ldr	r3, [r0, #0]
 8008a50:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8008a52:	4b15      	ldr	r3, [pc, #84]	@ (8008aa8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8008a54:	b08b      	sub	sp, #44	@ 0x2c
 8008a56:	4617      	mov	r7, r2
 8008a58:	f8b3 9000 	ldrh.w	r9, [r3]
 8008a5c:	460e      	mov	r6, r1
 8008a5e:	4604      	mov	r4, r0
 8008a60:	f7ff ff82 	bl	8008968 <_ZN8touchgfx3HAL3lcdEv>
 8008a64:	6803      	ldr	r3, [r0, #0]
 8008a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a68:	4798      	blx	r3
 8008a6a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8008a6e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8008a72:	2302      	movs	r3, #2
 8008a74:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8008a78:	2301      	movs	r3, #1
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8008a80:	9304      	str	r3, [sp, #16]
 8008a82:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8008a86:	9303      	str	r3, [sp, #12]
 8008a88:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8008a8c:	9302      	str	r3, [sp, #8]
 8008a8e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008a92:	2200      	movs	r2, #0
 8008a94:	e9cd 8300 	strd	r8, r3, [sp]
 8008a98:	4631      	mov	r1, r6
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	47a8      	blx	r5
 8008aa0:	b00b      	add	sp, #44	@ 0x2c
 8008aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aa6:	bf00      	nop
 8008aa8:	2001242e 	.word	0x2001242e

08008aac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8008aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ab0:	4698      	mov	r8, r3
 8008ab2:	6803      	ldr	r3, [r0, #0]
 8008ab4:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8008ab6:	4b11      	ldr	r3, [pc, #68]	@ (8008afc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8008ab8:	b087      	sub	sp, #28
 8008aba:	f8b3 9000 	ldrh.w	r9, [r3]
 8008abe:	460e      	mov	r6, r1
 8008ac0:	4617      	mov	r7, r2
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	f7ff ff50 	bl	8008968 <_ZN8touchgfx3HAL3lcdEv>
 8008ac8:	6803      	ldr	r3, [r0, #0]
 8008aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008acc:	4798      	blx	r3
 8008ace:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8008ad2:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ad6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8008ada:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8008ade:	9302      	str	r3, [sp, #8]
 8008ae0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	463a      	mov	r2, r7
 8008aee:	4643      	mov	r3, r8
 8008af0:	4631      	mov	r1, r6
 8008af2:	4620      	mov	r0, r4
 8008af4:	47a8      	blx	r5
 8008af6:	b007      	add	sp, #28
 8008af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008afc:	2001242e 	.word	0x2001242e

08008b00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8008b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b04:	4604      	mov	r4, r0
 8008b06:	b08f      	sub	sp, #60	@ 0x3c
 8008b08:	4610      	mov	r0, r2
 8008b0a:	460d      	mov	r5, r1
 8008b0c:	4691      	mov	r9, r2
 8008b0e:	461e      	mov	r6, r3
 8008b10:	f004 fa5a 	bl	800cfc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f000 809d 	beq.w	8008c54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8008cb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8008b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b22:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8008cbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8008b26:	4f61      	ldr	r7, [pc, #388]	@ (8008cac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008b28:	4620      	mov	r0, r4
 8008b2a:	4798      	blx	r3
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b32:	4798      	blx	r3
 8008b34:	f8bb 3000 	ldrh.w	r3, [fp]
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8008b3e:	f8ba 3000 	ldrh.w	r3, [sl]
 8008b42:	9302      	str	r3, [sp, #8]
 8008b44:	883b      	ldrh	r3, [r7, #0]
 8008b46:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8008b4a:	9303      	str	r3, [sp, #12]
 8008b4c:	4b58      	ldr	r3, [pc, #352]	@ (8008cb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008b4e:	9305      	str	r3, [sp, #20]
 8008b50:	881a      	ldrh	r2, [r3, #0]
 8008b52:	9204      	str	r2, [sp, #16]
 8008b54:	4640      	mov	r0, r8
 8008b56:	f004 facb 	bl	800d0f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8008b5a:	8038      	strh	r0, [r7, #0]
 8008b5c:	4640      	mov	r0, r8
 8008b5e:	f004 fafb 	bl	800d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8008b62:	9b05      	ldr	r3, [sp, #20]
 8008b64:	b280      	uxth	r0, r0
 8008b66:	8018      	strh	r0, [r3, #0]
 8008b68:	4b52      	ldr	r3, [pc, #328]	@ (8008cb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d174      	bne.n	8008c5a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8008b70:	883b      	ldrh	r3, [r7, #0]
 8008b72:	f8ab 3000 	strh.w	r3, [fp]
 8008b76:	f8aa 0000 	strh.w	r0, [sl]
 8008b7a:	4648      	mov	r0, r9
 8008b7c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8008b80:	f004 fa22 	bl	800cfc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8008b84:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8008b88:	2200      	movs	r2, #0
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8008b92:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8008b96:	f7f9 fece 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8008ba0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8008ba4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dd5c      	ble.n	8008c66 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8008bac:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	dd58      	ble.n	8008c66 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8008bb4:	462a      	mov	r2, r5
 8008bb6:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bb8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008bbc:	6851      	ldr	r1, [r2, #4]
 8008bbe:	c303      	stmia	r3!, {r0, r1}
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	a80a      	add	r0, sp, #40	@ 0x28
 8008bc4:	f7ff fbfa 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 8008bc8:	4b38      	ldr	r3, [pc, #224]	@ (8008cac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008bca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008bce:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	aa0a      	add	r2, sp, #40	@ 0x28
 8008bd6:	4b36      	ldr	r3, [pc, #216]	@ (8008cb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008bd8:	910c      	str	r1, [sp, #48]	@ 0x30
 8008bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008be2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8008be6:	ab08      	add	r3, sp, #32
 8008be8:	e883 0003 	stmia.w	r3, {r0, r1}
 8008bec:	4618      	mov	r0, r3
 8008bee:	a90c      	add	r1, sp, #48	@ 0x30
 8008bf0:	f7ff fbe4 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 8008bf4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d13c      	bne.n	8008c74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8008c00:	2600      	movs	r6, #0
 8008c02:	682a      	ldr	r2, [r5, #0]
 8008c04:	696b      	ldr	r3, [r5, #20]
 8008c06:	616e      	str	r6, [r5, #20]
 8008c08:	9305      	str	r3, [sp, #20]
 8008c0a:	6892      	ldr	r2, [r2, #8]
 8008c0c:	a908      	add	r1, sp, #32
 8008c0e:	4628      	mov	r0, r5
 8008c10:	4790      	blx	r2
 8008c12:	9b05      	ldr	r3, [sp, #20]
 8008c14:	616b      	str	r3, [r5, #20]
 8008c16:	4652      	mov	r2, sl
 8008c18:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8008c24:	f7f9 fe87 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 8008c28:	4b23      	ldr	r3, [pc, #140]	@ (8008cb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8008c2a:	9a01      	ldr	r2, [sp, #4]
 8008c2c:	801a      	strh	r2, [r3, #0]
 8008c2e:	4b23      	ldr	r3, [pc, #140]	@ (8008cbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8008c30:	9a02      	ldr	r2, [sp, #8]
 8008c32:	801a      	strh	r2, [r3, #0]
 8008c34:	4b1d      	ldr	r3, [pc, #116]	@ (8008cac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008c36:	9a03      	ldr	r2, [sp, #12]
 8008c38:	801a      	strh	r2, [r3, #0]
 8008c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008c3c:	9a04      	ldr	r2, [sp, #16]
 8008c3e:	801a      	strh	r2, [r3, #0]
 8008c40:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	4620      	mov	r0, r4
 8008c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4a:	4798      	blx	r3
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	4620      	mov	r0, r4
 8008c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c52:	4798      	blx	r3
 8008c54:	b00f      	add	sp, #60	@ 0x3c
 8008c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5a:	883b      	ldrh	r3, [r7, #0]
 8008c5c:	f8ab 0000 	strh.w	r0, [fp]
 8008c60:	f8aa 3000 	strh.w	r3, [sl]
 8008c64:	e789      	b.n	8008b7a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8008c66:	462a      	mov	r2, r5
 8008c68:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c6a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008c6e:	6851      	ldr	r1, [r2, #4]
 8008c70:	c303      	stmia	r3!, {r0, r1}
 8008c72:	e7a9      	b.n	8008bc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8008c74:	a807      	add	r0, sp, #28
 8008c76:	f004 fbb1 	bl	800d3dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8008c7e:	6803      	ldr	r3, [r0, #0]
 8008c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c82:	4798      	blx	r3
 8008c84:	4286      	cmp	r6, r0
 8008c86:	d1b8      	bne.n	8008bfa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8008c88:	f7ff fe6e 	bl	8008968 <_ZN8touchgfx3HAL3lcdEv>
 8008c8c:	6803      	ldr	r3, [r0, #0]
 8008c8e:	4606      	mov	r6, r0
 8008c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c92:	9305      	str	r3, [sp, #20]
 8008c94:	a807      	add	r0, sp, #28
 8008c96:	f004 fba1 	bl	800d3dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8008c9a:	9b05      	ldr	r3, [sp, #20]
 8008c9c:	4601      	mov	r1, r0
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	4798      	blx	r3
 8008ca2:	f080 0001 	eor.w	r0, r0, #1
 8008ca6:	b2c0      	uxtb	r0, r0
 8008ca8:	e7a8      	b.n	8008bfc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8008caa:	bf00      	nop
 8008cac:	20012428 	.word	0x20012428
 8008cb0:	2001242a 	.word	0x2001242a
 8008cb4:	2001242c 	.word	0x2001242c
 8008cb8:	2001242e 	.word	0x2001242e
 8008cbc:	20012430 	.word	0x20012430

08008cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	b13b      	cbz	r3, 8008cda <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8008cca:	6803      	ldr	r3, [r0, #0]
 8008ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cce:	4798      	blx	r3
 8008cd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008cd2:	4283      	cmp	r3, r0
 8008cd4:	d101      	bne.n	8008cda <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8008cd6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8008cd8:	bd10      	pop	{r4, pc}
 8008cda:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8008cdc:	e7fc      	b.n	8008cd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8008cde:	bf00      	nop
 8008ce0:	20012432 	.word	0x20012432

08008ce4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8008ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce8:	b08a      	sub	sp, #40	@ 0x28
 8008cea:	461d      	mov	r5, r3
 8008cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cf0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008cf4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8008cf8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008cfc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8008d00:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008d04:	2400      	movs	r4, #0
 8008d06:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008d0a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8008d0e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008d12:	4690      	mov	r8, r2
 8008d14:	4607      	mov	r7, r0
 8008d16:	9404      	str	r4, [sp, #16]
 8008d18:	f88d 4020 	strb.w	r4, [sp, #32]
 8008d1c:	f7ff ffd0 	bl	8008cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008d20:	fb06 8505 	mla	r5, r6, r5, r8
 8008d24:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	9505      	str	r5, [sp, #20]
 8008d2c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8008d30:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8008d34:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8008d38:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8008d3c:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8008d40:	6803      	ldr	r3, [r0, #0]
 8008d42:	a901      	add	r1, sp, #4
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	4798      	blx	r3
 8008d48:	b00a      	add	sp, #40	@ 0x28
 8008d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d4e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8008d4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d52:	b08b      	sub	sp, #44	@ 0x2c
 8008d54:	2400      	movs	r4, #0
 8008d56:	461d      	mov	r5, r3
 8008d58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008d5c:	4688      	mov	r8, r1
 8008d5e:	4691      	mov	r9, r2
 8008d60:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8008d64:	9404      	str	r4, [sp, #16]
 8008d66:	4607      	mov	r7, r0
 8008d68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d6c:	f7ff ffa8 	bl	8008cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008d70:	fb06 9505 	mla	r5, r6, r5, r9
 8008d74:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008d78:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008d7c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008d80:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	9505      	str	r5, [sp, #20]
 8008d88:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008d8c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8008d90:	f8ad 601e 	strh.w	r6, [sp, #30]
 8008d94:	f8cd 8010 	str.w	r8, [sp, #16]
 8008d98:	f8ad 4020 	strh.w	r4, [sp, #32]
 8008d9c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8008da0:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8008da4:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8008da8:	6803      	ldr	r3, [r0, #0]
 8008daa:	a901      	add	r1, sp, #4
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	4798      	blx	r3
 8008db0:	b00b      	add	sp, #44	@ 0x2c
 8008db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08008db8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8008db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbc:	b08a      	sub	sp, #40	@ 0x28
 8008dbe:	4698      	mov	r8, r3
 8008dc0:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8008dc4:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8008dc8:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8008dcc:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	2d0b      	cmp	r5, #11
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	9304      	str	r3, [sp, #16]
 8008dd8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8008ddc:	d138      	bne.n	8008e50 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8008dde:	2380      	movs	r3, #128	@ 0x80
 8008de0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008de4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8008de8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008dec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008df0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008df4:	f88d 0020 	strb.w	r0, [sp, #32]
 8008df8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8008dfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008e00:	4630      	mov	r0, r6
 8008e02:	9203      	str	r2, [sp, #12]
 8008e04:	f7ff ff5c 	bl	8008cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008e08:	2c0b      	cmp	r4, #11
 8008e0a:	bf98      	it	ls
 8008e0c:	4b1b      	ldrls	r3, [pc, #108]	@ (8008e7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8008e0e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8008e12:	bf98      	it	ls
 8008e14:	5d19      	ldrbls	r1, [r3, r4]
 8008e16:	f8ad 701e 	strh.w	r7, [sp, #30]
 8008e1a:	bf88      	it	hi
 8008e1c:	2100      	movhi	r1, #0
 8008e1e:	fb02 8307 	mla	r3, r2, r7, r8
 8008e22:	10c9      	asrs	r1, r1, #3
 8008e24:	fb01 0003 	mla	r0, r1, r3, r0
 8008e28:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8008e2c:	9005      	str	r0, [sp, #20]
 8008e2e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8008e32:	6870      	ldr	r0, [r6, #4]
 8008e34:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8008e3e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8008e42:	6803      	ldr	r3, [r0, #0]
 8008e44:	a901      	add	r1, sp, #4
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	4798      	blx	r3
 8008e4a:	b00a      	add	sp, #40	@ 0x28
 8008e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e50:	2d02      	cmp	r5, #2
 8008e52:	d109      	bne.n	8008e68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8008e54:	28ff      	cmp	r0, #255	@ 0xff
 8008e56:	d105      	bne.n	8008e64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8008e58:	f1bc 0f00 	cmp.w	ip, #0
 8008e5c:	bf14      	ite	ne
 8008e5e:	2340      	movne	r3, #64	@ 0x40
 8008e60:	2320      	moveq	r3, #32
 8008e62:	e7bd      	b.n	8008de0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008e64:	2340      	movs	r3, #64	@ 0x40
 8008e66:	e7bb      	b.n	8008de0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008e68:	28ff      	cmp	r0, #255	@ 0xff
 8008e6a:	d105      	bne.n	8008e78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8008e6c:	f1bc 0f00 	cmp.w	ip, #0
 8008e70:	bf14      	ite	ne
 8008e72:	2304      	movne	r3, #4
 8008e74:	2301      	moveq	r3, #1
 8008e76:	e7b3      	b.n	8008de0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	e7b1      	b.n	8008de0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8008e7c:	08012174 	.word	0x08012174

08008e80 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	b08b      	sub	sp, #44	@ 0x2c
 8008e86:	461d      	mov	r5, r3
 8008e88:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8008e8c:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8008e90:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8008e94:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8008e98:	bf14      	ite	ne
 8008e9a:	2308      	movne	r3, #8
 8008e9c:	2302      	moveq	r3, #2
 8008e9e:	2400      	movs	r4, #0
 8008ea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ea4:	4688      	mov	r8, r1
 8008ea6:	4693      	mov	fp, r2
 8008ea8:	9404      	str	r4, [sp, #16]
 8008eaa:	4607      	mov	r7, r0
 8008eac:	f7ff ff08 	bl	8008cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008eb0:	2e0b      	cmp	r6, #11
 8008eb2:	bf98      	it	ls
 8008eb4:	4b15      	ldrls	r3, [pc, #84]	@ (8008f0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8008eb6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8008eba:	bf98      	it	ls
 8008ebc:	5d9c      	ldrbls	r4, [r3, r6]
 8008ebe:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8008ec2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008ec6:	fb05 b50a 	mla	r5, r5, sl, fp
 8008eca:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8008ece:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008ed2:	10e4      	asrs	r4, r4, #3
 8008ed4:	fb04 0405 	mla	r4, r4, r5, r0
 8008ed8:	2300      	movs	r3, #0
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	9405      	str	r4, [sp, #20]
 8008ede:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008ee2:	f8ad a01e 	strh.w	sl, [sp, #30]
 8008ee6:	f8cd 8010 	str.w	r8, [sp, #16]
 8008eea:	f88d 9020 	strb.w	r9, [sp, #32]
 8008eee:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8008ef2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8008ef6:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8008efa:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8008efe:	6803      	ldr	r3, [r0, #0]
 8008f00:	a901      	add	r1, sp, #4
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	4798      	blx	r3
 8008f06:	b00b      	add	sp, #44	@ 0x2c
 8008f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0c:	08012174 	.word	0x08012174

08008f10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8008f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	461e      	mov	r6, r3
 8008f16:	4b0a      	ldr	r3, [pc, #40]	@ (8008f40 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8008f18:	460f      	mov	r7, r1
 8008f1a:	881d      	ldrh	r5, [r3, #0]
 8008f1c:	4690      	mov	r8, r2
 8008f1e:	f7ff fd23 	bl	8008968 <_ZN8touchgfx3HAL3lcdEv>
 8008f22:	6803      	ldr	r3, [r0, #0]
 8008f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f26:	4798      	blx	r3
 8008f28:	280b      	cmp	r0, #11
 8008f2a:	bf9a      	itte	ls
 8008f2c:	4b05      	ldrls	r3, [pc, #20]	@ (8008f44 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8008f2e:	5c1c      	ldrbls	r4, [r3, r0]
 8008f30:	2400      	movhi	r4, #0
 8008f32:	fb08 7005 	mla	r0, r8, r5, r7
 8008f36:	10e4      	asrs	r4, r4, #3
 8008f38:	fb04 6000 	mla	r0, r4, r0, r6
 8008f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f40:	2001242e 	.word	0x2001242e
 8008f44:	08012174 	.word	0x08012174

08008f48 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8008f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f4a:	b08b      	sub	sp, #44	@ 0x2c
 8008f4c:	461f      	mov	r7, r3
 8008f4e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8008f52:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008f56:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8008f5a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8008f5e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8008f62:	f8ad 301a 	strh.w	r3, [sp, #26]
 8008f66:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008f6a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008f6e:	2500      	movs	r5, #0
 8008f70:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8008f74:	f88d 3020 	strb.w	r3, [sp, #32]
 8008f78:	4604      	mov	r4, r0
 8008f7a:	4616      	mov	r6, r2
 8008f7c:	9504      	str	r5, [sp, #16]
 8008f7e:	f7ff fe9f 	bl	8008cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8008f82:	463a      	mov	r2, r7
 8008f84:	4631      	mov	r1, r6
 8008f86:	4603      	mov	r3, r0
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f7ff ffc1 	bl	8008f10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8008f90:	9005      	str	r0, [sp, #20]
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008f98:	f7ff fce6 	bl	8008968 <_ZN8touchgfx3HAL3lcdEv>
 8008f9c:	6803      	ldr	r3, [r0, #0]
 8008f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa0:	4798      	blx	r3
 8008fa2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008fa4:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8008fa8:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	6860      	ldr	r0, [r4, #4]
 8008fb0:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8008fb4:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8008fb8:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8008fbc:	6803      	ldr	r3, [r0, #0]
 8008fbe:	a901      	add	r1, sp, #4
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	4798      	blx	r3
 8008fc4:	b00b      	add	sp, #44	@ 0x2c
 8008fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fc8:	2001242e 	.word	0x2001242e

08008fcc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fce:	b08d      	sub	sp, #52	@ 0x34
 8008fd0:	466b      	mov	r3, sp
 8008fd2:	e883 0006 	stmia.w	r3, {r1, r2}
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	9306      	str	r3, [sp, #24]
 8008fda:	6803      	ldr	r3, [r0, #0]
 8008fdc:	f8bd 6000 	ldrh.w	r6, [sp]
 8008fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8008fe6:	2501      	movs	r5, #1
 8008fe8:	9503      	str	r5, [sp, #12]
 8008fea:	4604      	mov	r4, r0
 8008fec:	4798      	blx	r3
 8008fee:	463a      	mov	r2, r7
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7ff ff8b 	bl	8008f10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8008ffa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008ffc:	9307      	str	r3, [sp, #28]
 8008ffe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009002:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009006:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800900a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800900e:	4b0f      	ldr	r3, [pc, #60]	@ (800904c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8009010:	9004      	str	r0, [sp, #16]
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8009018:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800901c:	f7ff fca4 	bl	8008968 <_ZN8touchgfx3HAL3lcdEv>
 8009020:	6803      	ldr	r3, [r0, #0]
 8009022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009024:	4798      	blx	r3
 8009026:	23ff      	movs	r3, #255	@ 0xff
 8009028:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800902c:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8009030:	6860      	ldr	r0, [r4, #4]
 8009032:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8009036:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800903a:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800903e:	6803      	ldr	r3, [r0, #0]
 8009040:	a903      	add	r1, sp, #12
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	4798      	blx	r3
 8009046:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009048:	b00d      	add	sp, #52	@ 0x34
 800904a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800904c:	2001242e 	.word	0x2001242e

08009050 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8009050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009054:	b08c      	sub	sp, #48	@ 0x30
 8009056:	461e      	mov	r6, r3
 8009058:	466d      	mov	r5, sp
 800905a:	2300      	movs	r3, #0
 800905c:	e885 0006 	stmia.w	r5, {r1, r2}
 8009060:	9306      	str	r3, [sp, #24]
 8009062:	6803      	ldr	r3, [r0, #0]
 8009064:	f8bd 7000 	ldrh.w	r7, [sp]
 8009068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800906e:	2501      	movs	r5, #1
 8009070:	9503      	str	r5, [sp, #12]
 8009072:	4604      	mov	r4, r0
 8009074:	4798      	blx	r3
 8009076:	4642      	mov	r2, r8
 8009078:	4639      	mov	r1, r7
 800907a:	4603      	mov	r3, r0
 800907c:	4620      	mov	r0, r4
 800907e:	f7ff ff47 	bl	8008f10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009082:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009086:	f8ad 3020 	strh.w	r3, [sp, #32]
 800908a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800908e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8009092:	4b11      	ldr	r3, [pc, #68]	@ (80090d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8009094:	9004      	str	r0, [sp, #16]
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800909c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800909e:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80090a2:	9607      	str	r6, [sp, #28]
 80090a4:	f7ff fc60 	bl	8008968 <_ZN8touchgfx3HAL3lcdEv>
 80090a8:	6803      	ldr	r3, [r0, #0]
 80090aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ac:	4798      	blx	r3
 80090ae:	23ff      	movs	r3, #255	@ 0xff
 80090b0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80090b4:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80090b8:	6860      	ldr	r0, [r4, #4]
 80090ba:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80090be:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80090c2:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80090c6:	6803      	ldr	r3, [r0, #0]
 80090c8:	a903      	add	r1, sp, #12
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	4798      	blx	r3
 80090ce:	4630      	mov	r0, r6
 80090d0:	b00c      	add	sp, #48	@ 0x30
 80090d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d6:	bf00      	nop
 80090d8:	2001242e 	.word	0x2001242e

080090dc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80090dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090de:	b085      	sub	sp, #20
 80090e0:	ac02      	add	r4, sp, #8
 80090e2:	e884 0006 	stmia.w	r4, {r1, r2}
 80090e6:	4605      	mov	r5, r0
 80090e8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80090ec:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80090f0:	f7ff fde6 	bl	8008cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80090f4:	463a      	mov	r2, r7
 80090f6:	4603      	mov	r3, r0
 80090f8:	4631      	mov	r1, r6
 80090fa:	4628      	mov	r0, r5
 80090fc:	f7ff ff08 	bl	8008f10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009100:	4a05      	ldr	r2, [pc, #20]	@ (8009118 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8009102:	682b      	ldr	r3, [r5, #0]
 8009104:	8812      	ldrh	r2, [r2, #0]
 8009106:	9200      	str	r2, [sp, #0]
 8009108:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800910a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800910e:	4603      	mov	r3, r0
 8009110:	4628      	mov	r0, r5
 8009112:	47b0      	blx	r6
 8009114:	b005      	add	sp, #20
 8009116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009118:	2001242e 	.word	0x2001242e

0800911c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8009122:	4604      	mov	r4, r0
 8009124:	b19b      	cbz	r3, 800914e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8009126:	2002      	movs	r0, #2
 8009128:	f7f7 fb60 	bl	80007ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800912c:	2300      	movs	r3, #0
 800912e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009132:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8009136:	6823      	ldr	r3, [r4, #0]
 8009138:	4620      	mov	r0, r4
 800913a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800913e:	f7ff fdbf 	bl	8008cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009142:	462b      	mov	r3, r5
 8009144:	4601      	mov	r1, r0
 8009146:	4620      	mov	r0, r4
 8009148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800914c:	4718      	bx	r3
 800914e:	bd70      	pop	{r4, r5, r6, pc}

08009150 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8009156:	428b      	cmp	r3, r1
 8009158:	4604      	mov	r4, r0
 800915a:	460d      	mov	r5, r1
 800915c:	d006      	beq.n	800916c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800915e:	6803      	ldr	r3, [r0, #0]
 8009160:	b929      	cbnz	r1, 800916e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8009162:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009166:	4798      	blx	r3
 8009168:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800916c:	bd38      	pop	{r3, r4, r5, pc}
 800916e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8009172:	e7f8      	b.n	8009166 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08009174 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8009174:	b510      	push	{r4, lr}
 8009176:	4b0d      	ldr	r3, [pc, #52]	@ (80091ac <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	4604      	mov	r4, r0
 800917c:	b95b      	cbnz	r3, 8009196 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800917e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8009182:	2b02      	cmp	r3, #2
 8009184:	d007      	beq.n	8009196 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009186:	6840      	ldr	r0, [r0, #4]
 8009188:	f000 f912 	bl	80093b0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800918c:	b118      	cbz	r0, 8009196 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800918e:	6862      	ldr	r2, [r4, #4]
 8009190:	7a53      	ldrb	r3, [r2, #9]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0fc      	beq.n	8009190 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8009196:	f7f7 fc75 	bl	8000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800919a:	4620      	mov	r0, r4
 800919c:	2100      	movs	r1, #0
 800919e:	f7ff ffd7 	bl	8009150 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7ff fd8c 	bl	8008cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80091a8:	bd10      	pop	{r4, pc}
 80091aa:	bf00      	nop
 80091ac:	20012432 	.word	0x20012432

080091b0 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80091b0:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80091b4:	1a13      	subs	r3, r2, r0
 80091b6:	4258      	negs	r0, r3
 80091b8:	4158      	adcs	r0, r3
 80091ba:	4770      	bx	lr

080091bc <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80091bc:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfdc      	itt	le
 80091c6:	6882      	ldrle	r2, [r0, #8]
 80091c8:	189b      	addle	r3, r3, r2
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	bfcc      	ite	gt
 80091ce:	2000      	movgt	r0, #0
 80091d0:	2001      	movle	r0, #1
 80091d2:	4770      	bx	lr

080091d4 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80091d4:	6902      	ldr	r2, [r0, #16]
 80091d6:	6843      	ldr	r3, [r0, #4]
 80091d8:	2024      	movs	r0, #36	@ 0x24
 80091da:	fb00 3002 	mla	r0, r0, r2, r3
 80091de:	4770      	bx	lr

080091e0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80091e0:	6803      	ldr	r3, [r0, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	4718      	bx	r3

080091e6 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80091e6:	b570      	push	{r4, r5, r6, lr}
 80091e8:	2301      	movs	r3, #1
 80091ea:	7203      	strb	r3, [r0, #8]
 80091ec:	4604      	mov	r4, r0
 80091ee:	6840      	ldr	r0, [r0, #4]
 80091f0:	6803      	ldr	r3, [r0, #0]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	4798      	blx	r3
 80091f6:	6803      	ldr	r3, [r0, #0]
 80091f8:	2b40      	cmp	r3, #64	@ 0x40
 80091fa:	4605      	mov	r5, r0
 80091fc:	d00c      	beq.n	8009218 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80091fe:	d810      	bhi.n	8009222 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8009200:	2b04      	cmp	r3, #4
 8009202:	d01d      	beq.n	8009240 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8009204:	d804      	bhi.n	8009210 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8009206:	2b01      	cmp	r3, #1
 8009208:	d006      	beq.n	8009218 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800920a:	2b02      	cmp	r3, #2
 800920c:	d02c      	beq.n	8009268 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	2b08      	cmp	r3, #8
 8009212:	d01d      	beq.n	8009250 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8009214:	2b20      	cmp	r3, #32
 8009216:	d1fa      	bne.n	800920e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	4620      	mov	r0, r4
 800921c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800921e:	4798      	blx	r3
 8009220:	e013      	b.n	800924a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8009222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009226:	d0f7      	beq.n	8009218 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009228:	d804      	bhi.n	8009234 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800922a:	2b80      	cmp	r3, #128	@ 0x80
 800922c:	d0f4      	beq.n	8009218 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800922e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009232:	e7f0      	b.n	8009216 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8009234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009238:	d0ee      	beq.n	8009218 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800923a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800923e:	e7e5      	b.n	800920c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	7f01      	ldrb	r1, [r0, #28]
 8009244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009246:	4620      	mov	r0, r4
 8009248:	4798      	blx	r3
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800924e:	e006      	b.n	800925e <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	7f01      	ldrb	r1, [r0, #28]
 8009254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009256:	4620      	mov	r0, r4
 8009258:	4798      	blx	r3
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800925e:	4629      	mov	r1, r5
 8009260:	4620      	mov	r0, r4
 8009262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009266:	4718      	bx	r3
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	4620      	mov	r0, r4
 800926c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800926e:	4798      	blx	r3
 8009270:	e7f3      	b.n	800925a <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08009272 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8009272:	4770      	bx	lr

08009274 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8009274:	4770      	bx	lr

08009276 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8009276:	4770      	bx	lr

08009278 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8009278:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800927c:	1ad2      	subs	r2, r2, r3
 800927e:	2a00      	cmp	r2, #0
 8009280:	b510      	push	{r4, lr}
 8009282:	bfdc      	itt	le
 8009284:	6884      	ldrle	r4, [r0, #8]
 8009286:	1912      	addle	r2, r2, r4
 8009288:	2a01      	cmp	r2, #1
 800928a:	dd16      	ble.n	80092ba <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800928c:	6842      	ldr	r2, [r0, #4]
 800928e:	2424      	movs	r4, #36	@ 0x24
 8009290:	fb04 2303 	mla	r3, r4, r3, r2
 8009294:	f101 0220 	add.w	r2, r1, #32
 8009298:	f851 4b04 	ldr.w	r4, [r1], #4
 800929c:	f843 4b04 	str.w	r4, [r3], #4
 80092a0:	4291      	cmp	r1, r2
 80092a2:	d1f9      	bne.n	8009298 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80092a4:	780a      	ldrb	r2, [r1, #0]
 80092a6:	701a      	strb	r2, [r3, #0]
 80092a8:	68c3      	ldr	r3, [r0, #12]
 80092aa:	6882      	ldr	r2, [r0, #8]
 80092ac:	f3bf 8f5b 	dmb	ish
 80092b0:	3301      	adds	r3, #1
 80092b2:	429a      	cmp	r2, r3
 80092b4:	bfd8      	it	le
 80092b6:	1a9b      	suble	r3, r3, r2
 80092b8:	60c3      	str	r3, [r0, #12]
 80092ba:	bd10      	pop	{r4, pc}

080092bc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80092bc:	6903      	ldr	r3, [r0, #16]
 80092be:	6882      	ldr	r2, [r0, #8]
 80092c0:	f3bf 8f5b 	dmb	ish
 80092c4:	3301      	adds	r3, #1
 80092c6:	429a      	cmp	r2, r3
 80092c8:	bfd8      	it	le
 80092ca:	1a9b      	suble	r3, r3, r2
 80092cc:	6103      	str	r3, [r0, #16]
 80092ce:	4770      	bx	lr

080092d0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	4604      	mov	r4, r0
 80092d4:	460e      	mov	r6, r1
 80092d6:	6860      	ldr	r0, [r4, #4]
 80092d8:	6803      	ldr	r3, [r0, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	4798      	blx	r3
 80092de:	2800      	cmp	r0, #0
 80092e0:	d1f9      	bne.n	80092d6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80092e2:	4d0d      	ldr	r5, [pc, #52]	@ (8009318 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80092e4:	6828      	ldr	r0, [r5, #0]
 80092e6:	6803      	ldr	r3, [r0, #0]
 80092e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092ea:	4798      	blx	r3
 80092ec:	f7f7 fbd8 	bl	8000aa0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80092f0:	6828      	ldr	r0, [r5, #0]
 80092f2:	2101      	movs	r1, #1
 80092f4:	f7ff ff2c 	bl	8009150 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80092f8:	6860      	ldr	r0, [r4, #4]
 80092fa:	6803      	ldr	r3, [r0, #0]
 80092fc:	4631      	mov	r1, r6
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	4798      	blx	r3
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	4620      	mov	r0, r4
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	4798      	blx	r3
 800930a:	6828      	ldr	r0, [r5, #0]
 800930c:	6803      	ldr	r3, [r0, #0]
 800930e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009312:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009314:	4718      	bx	r3
 8009316:	bf00      	nop
 8009318:	20012434 	.word	0x20012434

0800931c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800931c:	b508      	push	{r3, lr}
 800931e:	f7f7 fbb1 	bl	8000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009326:	f7f7 bbb5 	b.w	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800932a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800932a:	b510      	push	{r4, lr}
 800932c:	2114      	movs	r1, #20
 800932e:	4604      	mov	r4, r0
 8009330:	f006 fd5c 	bl	800fdec <_ZdlPvj>
 8009334:	4620      	mov	r0, r4
 8009336:	bd10      	pop	{r4, pc}

08009338 <_ZN8touchgfx13DMA_Interface5startEv>:
 8009338:	b510      	push	{r4, lr}
 800933a:	4604      	mov	r4, r0
 800933c:	6840      	ldr	r0, [r0, #4]
 800933e:	6803      	ldr	r3, [r0, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4798      	blx	r3
 8009344:	b948      	cbnz	r0, 800935a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009346:	7a63      	ldrb	r3, [r4, #9]
 8009348:	b13b      	cbz	r3, 800935a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800934a:	7a23      	ldrb	r3, [r4, #8]
 800934c:	b92b      	cbnz	r3, 800935a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	4620      	mov	r0, r4
 8009352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009358:	4718      	bx	r3
 800935a:	bd10      	pop	{r4, pc}

0800935c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	4604      	mov	r4, r0
 8009360:	6840      	ldr	r0, [r0, #4]
 8009362:	6803      	ldr	r3, [r0, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4798      	blx	r3
 8009368:	4605      	mov	r5, r0
 800936a:	b930      	cbnz	r0, 800937a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800936c:	7a23      	ldrb	r3, [r4, #8]
 800936e:	b123      	cbz	r3, 800937a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8009370:	6860      	ldr	r0, [r4, #4]
 8009372:	6803      	ldr	r3, [r0, #0]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	4798      	blx	r3
 8009378:	7225      	strb	r5, [r4, #8]
 800937a:	6860      	ldr	r0, [r4, #4]
 800937c:	6803      	ldr	r3, [r0, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4798      	blx	r3
 8009382:	b928      	cbnz	r0, 8009390 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	4620      	mov	r0, r4
 8009388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800938a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800938e:	4718      	bx	r3
 8009390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009394:	f7f7 bb8c 	b.w	8000ab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08009398 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8009398:	b510      	push	{r4, lr}
 800939a:	4c04      	ldr	r4, [pc, #16]	@ (80093ac <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800939c:	6082      	str	r2, [r0, #8]
 800939e:	2200      	movs	r2, #0
 80093a0:	e9c0 4100 	strd	r4, r1, [r0]
 80093a4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80093a8:	bd10      	pop	{r4, pc}
 80093aa:	bf00      	nop
 80093ac:	08012188 	.word	0x08012188

080093b0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80093b0:	6840      	ldr	r0, [r0, #4]
 80093b2:	6803      	ldr	r3, [r0, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4718      	bx	r3

080093b8 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80093b8:	2300      	movs	r3, #0
 80093ba:	8083      	strh	r3, [r0, #4]
 80093bc:	80c3      	strh	r3, [r0, #6]
 80093be:	8003      	strh	r3, [r0, #0]
 80093c0:	8043      	strh	r3, [r0, #2]
 80093c2:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80093c6:	2bff      	cmp	r3, #255	@ 0xff
 80093c8:	bf01      	itttt	eq
 80093ca:	890b      	ldrheq	r3, [r1, #8]
 80093cc:	8083      	strheq	r3, [r0, #4]
 80093ce:	894b      	ldrheq	r3, [r1, #10]
 80093d0:	80c3      	strheq	r3, [r0, #6]
 80093d2:	4770      	bx	lr

080093d4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80093d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093d6:	4604      	mov	r4, r0
 80093d8:	6808      	ldr	r0, [r1, #0]
 80093da:	6849      	ldr	r1, [r1, #4]
 80093dc:	466b      	mov	r3, sp
 80093de:	c303      	stmia	r3!, {r0, r1}
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	4669      	mov	r1, sp
 80093e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e6:	4620      	mov	r0, r4
 80093e8:	4798      	blx	r3
 80093ea:	4b08      	ldr	r3, [pc, #32]	@ (800940c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80093f2:	b10a      	cbz	r2, 80093f8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80093f4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80093f6:	b900      	cbnz	r0, 80093fa <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80093f8:	6898      	ldr	r0, [r3, #8]
 80093fa:	6803      	ldr	r3, [r0, #0]
 80093fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80093fe:	6a1d      	ldr	r5, [r3, #32]
 8009400:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009404:	4669      	mov	r1, sp
 8009406:	47a8      	blx	r5
 8009408:	b003      	add	sp, #12
 800940a:	bd30      	pop	{r4, r5, pc}
 800940c:	20012434 	.word	0x20012434

08009410 <_ZN8touchgfx3BoxD1Ev>:
 8009410:	4770      	bx	lr

08009412 <_ZN8touchgfx3BoxD0Ev>:
 8009412:	b510      	push	{r4, lr}
 8009414:	212c      	movs	r1, #44	@ 0x2c
 8009416:	4604      	mov	r4, r0
 8009418:	f006 fce8 	bl	800fdec <_ZdlPvj>
 800941c:	4620      	mov	r0, r4
 800941e:	bd10      	pop	{r4, pc}

08009420 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8009420:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8009424:	b12a      	cbz	r2, 8009432 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8009426:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800942a:	b112      	cbz	r2, 8009432 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800942c:	6803      	ldr	r3, [r0, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	4718      	bx	r3
 8009432:	4770      	bx	lr

08009434 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8009434:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8009438:	4770      	bx	lr

0800943a <_ZN8touchgfx6ButtonD1Ev>:
 800943a:	4770      	bx	lr

0800943c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800943c:	b570      	push	{r4, r5, r6, lr}
 800943e:	880b      	ldrh	r3, [r1, #0]
 8009440:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8009442:	4605      	mov	r5, r0
 8009444:	8813      	ldrh	r3, [r2, #0]
 8009446:	f825 3f30 	strh.w	r3, [r5, #48]!
 800944a:	4604      	mov	r4, r0
 800944c:	4628      	mov	r0, r5
 800944e:	f003 fe4f 	bl	800d0f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8009452:	4606      	mov	r6, r0
 8009454:	4628      	mov	r0, r5
 8009456:	f003 fe7f 	bl	800d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	4605      	mov	r5, r0
 800945e:	4631      	mov	r1, r6
 8009460:	4620      	mov	r0, r4
 8009462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009464:	4798      	blx	r3
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	4629      	mov	r1, r5
 800946a:	4620      	mov	r0, r4
 800946c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800946e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009472:	4718      	bx	r3

08009474 <_ZN8touchgfx6ButtonD0Ev>:
 8009474:	b510      	push	{r4, lr}
 8009476:	2134      	movs	r1, #52	@ 0x34
 8009478:	4604      	mov	r4, r0
 800947a:	f006 fcb7 	bl	800fdec <_ZdlPvj>
 800947e:	4620      	mov	r0, r4
 8009480:	bd10      	pop	{r4, pc}

08009482 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8009482:	b510      	push	{r4, lr}
 8009484:	4604      	mov	r4, r0
 8009486:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8009488:	b150      	cbz	r0, 80094a0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800948a:	6803      	ldr	r3, [r0, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	4798      	blx	r3
 8009490:	b130      	cbz	r0, 80094a0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8009492:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009494:	6803      	ldr	r3, [r0, #0]
 8009496:	4621      	mov	r1, r4
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800949e:	4718      	bx	r3
 80094a0:	bd10      	pop	{r4, pc}

080094a2 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80094a2:	b510      	push	{r4, lr}
 80094a4:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 80094a8:	2bff      	cmp	r3, #255	@ 0xff
 80094aa:	4604      	mov	r4, r0
 80094ac:	d006      	beq.n	80094bc <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80094ae:	2300      	movs	r3, #0
 80094b0:	8003      	strh	r3, [r0, #0]
 80094b2:	8043      	strh	r3, [r0, #2]
 80094b4:	8083      	strh	r3, [r0, #4]
 80094b6:	80c3      	strh	r3, [r0, #6]
 80094b8:	4620      	mov	r0, r4
 80094ba:	bd10      	pop	{r4, pc}
 80094bc:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 80094c0:	b11b      	cbz	r3, 80094ca <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80094c2:	3130      	adds	r1, #48	@ 0x30
 80094c4:	f003 fe7c 	bl	800d1c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80094c8:	e7f6      	b.n	80094b8 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80094ca:	312e      	adds	r1, #46	@ 0x2e
 80094cc:	e7fa      	b.n	80094c4 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

080094d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80094d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80094d8:	b08a      	sub	sp, #40	@ 0x28
 80094da:	4604      	mov	r4, r0
 80094dc:	4688      	mov	r8, r1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d066      	beq.n	80095b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80094e2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80094e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80094e8:	a805      	add	r0, sp, #20
 80094ea:	f003 fe01 	bl	800d0f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80094ee:	4607      	mov	r7, r0
 80094f0:	a805      	add	r0, sp, #20
 80094f2:	f003 fe31 	bl	800d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80094f6:	f9b8 6000 	ldrsh.w	r6, [r8]
 80094fa:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80094fe:	4432      	add	r2, r6
 8009500:	b292      	uxth	r2, r2
 8009502:	2300      	movs	r3, #0
 8009504:	fa0f fc82 	sxth.w	ip, r2
 8009508:	459c      	cmp	ip, r3
 800950a:	9306      	str	r3, [sp, #24]
 800950c:	dd52      	ble.n	80095b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800950e:	42b7      	cmp	r7, r6
 8009510:	dd50      	ble.n	80095b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8009512:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8009516:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800951a:	442b      	add	r3, r5
 800951c:	b29b      	uxth	r3, r3
 800951e:	b219      	sxth	r1, r3
 8009520:	2900      	cmp	r1, #0
 8009522:	dd47      	ble.n	80095b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8009524:	42a8      	cmp	r0, r5
 8009526:	dd45      	ble.n	80095b4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8009528:	4567      	cmp	r7, ip
 800952a:	bfb8      	it	lt
 800952c:	b2ba      	uxthlt	r2, r7
 800952e:	4288      	cmp	r0, r1
 8009530:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8009534:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8009538:	bfb8      	it	lt
 800953a:	b283      	uxthlt	r3, r0
 800953c:	1b92      	subs	r2, r2, r6
 800953e:	1b5b      	subs	r3, r3, r5
 8009540:	f8ad 201c 	strh.w	r2, [sp, #28]
 8009544:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009548:	f8ad 6018 	strh.w	r6, [sp, #24]
 800954c:	f8ad 501a 	strh.w	r5, [sp, #26]
 8009550:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8009554:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009558:	429a      	cmp	r2, r3
 800955a:	d026      	beq.n	80095aa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800955c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8009560:	2b00      	cmp	r3, #0
 8009562:	dd22      	ble.n	80095aa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8009564:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8009568:	2b00      	cmp	r3, #0
 800956a:	dd1e      	ble.n	80095aa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800956c:	2300      	movs	r3, #0
 800956e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	a908      	add	r1, sp, #32
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	4620      	mov	r0, r4
 800957a:	4798      	blx	r3
 800957c:	4b0f      	ldr	r3, [pc, #60]	@ (80095bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009584:	b10a      	cbz	r2, 800958a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8009586:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009588:	b900      	cbnz	r0, 800958c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800958a:	6898      	ldr	r0, [r3, #8]
 800958c:	6801      	ldr	r1, [r0, #0]
 800958e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8009592:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8009596:	2501      	movs	r5, #1
 8009598:	9502      	str	r5, [sp, #8]
 800959a:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800959e:	9401      	str	r4, [sp, #4]
 80095a0:	ac06      	add	r4, sp, #24
 80095a2:	9400      	str	r4, [sp, #0]
 80095a4:	688c      	ldr	r4, [r1, #8]
 80095a6:	a905      	add	r1, sp, #20
 80095a8:	47a0      	blx	r4
 80095aa:	b00a      	add	sp, #40	@ 0x28
 80095ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80095b2:	e797      	b.n	80094e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80095b4:	2300      	movs	r3, #0
 80095b6:	9307      	str	r3, [sp, #28]
 80095b8:	e7ca      	b.n	8009550 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 80095ba:	bf00      	nop
 80095bc:	20012434 	.word	0x20012434

080095c0 <_ZNK8touchgfx6Button17invalidateContentEv>:
 80095c0:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 80095c4:	b12a      	cbz	r2, 80095d2 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80095c6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80095ca:	b112      	cbz	r2, 80095d2 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80095cc:	6803      	ldr	r3, [r0, #0]
 80095ce:	695b      	ldr	r3, [r3, #20]
 80095d0:	4718      	bx	r3
 80095d2:	4770      	bx	lr

080095d4 <_ZN8touchgfx5ImageD1Ev>:
 80095d4:	4770      	bx	lr

080095d6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80095d6:	b570      	push	{r4, r5, r6, lr}
 80095d8:	880b      	ldrh	r3, [r1, #0]
 80095da:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80095dc:	4604      	mov	r4, r0
 80095de:	4608      	mov	r0, r1
 80095e0:	460d      	mov	r5, r1
 80095e2:	f003 fd85 	bl	800d0f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80095e6:	4606      	mov	r6, r0
 80095e8:	4628      	mov	r0, r5
 80095ea:	f003 fdb5 	bl	800d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	4605      	mov	r5, r0
 80095f2:	4631      	mov	r1, r6
 80095f4:	4620      	mov	r0, r4
 80095f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f8:	4798      	blx	r3
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	4629      	mov	r1, r5
 80095fe:	4620      	mov	r0, r4
 8009600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009606:	4718      	bx	r3

08009608 <_ZN8touchgfx5ImageD0Ev>:
 8009608:	b510      	push	{r4, lr}
 800960a:	212c      	movs	r1, #44	@ 0x2c
 800960c:	4604      	mov	r4, r0
 800960e:	f006 fbed 	bl	800fdec <_ZdlPvj>
 8009612:	4620      	mov	r0, r4
 8009614:	bd10      	pop	{r4, pc}

08009616 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8009616:	b510      	push	{r4, lr}
 8009618:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800961c:	2bff      	cmp	r3, #255	@ 0xff
 800961e:	4604      	mov	r4, r0
 8009620:	d006      	beq.n	8009630 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8009622:	2300      	movs	r3, #0
 8009624:	8003      	strh	r3, [r0, #0]
 8009626:	8043      	strh	r3, [r0, #2]
 8009628:	8083      	strh	r3, [r0, #4]
 800962a:	80c3      	strh	r3, [r0, #6]
 800962c:	4620      	mov	r0, r4
 800962e:	bd10      	pop	{r4, pc}
 8009630:	3126      	adds	r1, #38	@ 0x26
 8009632:	f003 fdc5 	bl	800d1c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8009636:	e7f9      	b.n	800962c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08009638 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8009638:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800963c:	b12a      	cbz	r2, 800964a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800963e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8009642:	b112      	cbz	r2, 800964a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8009644:	6803      	ldr	r3, [r0, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	4718      	bx	r3
 800964a:	4770      	bx	lr

0800964c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800964c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009650:	4604      	mov	r4, r0
 8009652:	b088      	sub	sp, #32
 8009654:	f854 3b26 	ldr.w	r3, [r4], #38
 8009658:	2500      	movs	r5, #0
 800965a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965c:	460f      	mov	r7, r1
 800965e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009662:	a904      	add	r1, sp, #16
 8009664:	4606      	mov	r6, r0
 8009666:	4798      	blx	r3
 8009668:	4620      	mov	r0, r4
 800966a:	f003 fd41 	bl	800d0f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800966e:	4680      	mov	r8, r0
 8009670:	4620      	mov	r0, r4
 8009672:	f003 fd71 	bl	800d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8009676:	9506      	str	r5, [sp, #24]
 8009678:	ad06      	add	r5, sp, #24
 800967a:	f8ad 001e 	strh.w	r0, [sp, #30]
 800967e:	4639      	mov	r1, r7
 8009680:	4628      	mov	r0, r5
 8009682:	f8ad 801c 	strh.w	r8, [sp, #28]
 8009686:	f7fe fe99 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800968a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800968e:	2b00      	cmp	r3, #0
 8009690:	dd19      	ble.n	80096c6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8009692:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8009696:	2b00      	cmp	r3, #0
 8009698:	dd15      	ble.n	80096c6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800969a:	4b0c      	ldr	r3, [pc, #48]	@ (80096cc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80096a2:	b10a      	cbz	r2, 80096a8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80096a4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80096a6:	b900      	cbnz	r0, 80096aa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80096a8:	6898      	ldr	r0, [r3, #8]
 80096aa:	6801      	ldr	r1, [r0, #0]
 80096ac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80096b0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80096b4:	2701      	movs	r7, #1
 80096b6:	9702      	str	r7, [sp, #8]
 80096b8:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80096bc:	e9cd 5600 	strd	r5, r6, [sp]
 80096c0:	688d      	ldr	r5, [r1, #8]
 80096c2:	4621      	mov	r1, r4
 80096c4:	47a8      	blx	r5
 80096c6:	b008      	add	sp, #32
 80096c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096cc:	20012434 	.word	0x20012434

080096d0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	6803      	ldr	r3, [r0, #0]
 80096d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d6:	460c      	mov	r4, r1
 80096d8:	4798      	blx	r3
 80096da:	1b03      	subs	r3, r0, r4
 80096dc:	4258      	negs	r0, r3
 80096de:	4158      	adcs	r0, r3
 80096e0:	bd10      	pop	{r4, pc}
	...

080096e4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80096e4:	4b01      	ldr	r3, [pc, #4]	@ (80096ec <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80096e6:	6019      	str	r1, [r3, #0]
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	2001243c 	.word	0x2001243c

080096f0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80096f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	4696      	mov	lr, r2
 80096f6:	4605      	mov	r5, r0
 80096f8:	4614      	mov	r4, r2
 80096fa:	460e      	mov	r6, r1
 80096fc:	461f      	mov	r7, r3
 80096fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009702:	b097      	sub	sp, #92	@ 0x5c
 8009704:	f10d 0c1c 	add.w	ip, sp, #28
 8009708:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800970c:	f8de 3000 	ldr.w	r3, [lr]
 8009710:	f8cc 3000 	str.w	r3, [ip]
 8009714:	f104 0e14 	add.w	lr, r4, #20
 8009718:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800971c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009720:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009724:	f8de 3000 	ldr.w	r3, [lr]
 8009728:	f8cc 3000 	str.w	r3, [ip]
 800972c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8009730:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009734:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8009738:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800973c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8009740:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8009744:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8009748:	f8de 3000 	ldr.w	r3, [lr]
 800974c:	f8cc 3000 	str.w	r3, [ip]
 8009750:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009752:	682b      	ldr	r3, [r5, #0]
 8009754:	9201      	str	r2, [sp, #4]
 8009756:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800975a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800975c:	9200      	str	r2, [sp, #0]
 800975e:	f8cd 8008 	str.w	r8, [sp, #8]
 8009762:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8009766:	aa07      	add	r2, sp, #28
 8009768:	463b      	mov	r3, r7
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47d8      	blx	fp
 8009770:	46a6      	mov	lr, r4
 8009772:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009776:	f10d 0c1c 	add.w	ip, sp, #28
 800977a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800977e:	f8de 3000 	ldr.w	r3, [lr]
 8009782:	f8cc 3000 	str.w	r3, [ip]
 8009786:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800978a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800978e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009792:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009796:	343c      	adds	r4, #60	@ 0x3c
 8009798:	f8de 3000 	ldr.w	r3, [lr]
 800979c:	f8cc 3000 	str.w	r3, [ip]
 80097a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097a2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80097a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	f8cc 3000 	str.w	r3, [ip]
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80097b6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80097b8:	9201      	str	r2, [sp, #4]
 80097ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80097bc:	9200      	str	r2, [sp, #0]
 80097be:	f8cd 8008 	str.w	r8, [sp, #8]
 80097c2:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80097c4:	aa07      	add	r2, sp, #28
 80097c6:	463b      	mov	r3, r7
 80097c8:	4631      	mov	r1, r6
 80097ca:	4628      	mov	r0, r5
 80097cc:	47a0      	blx	r4
 80097ce:	b017      	add	sp, #92	@ 0x5c
 80097d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	b08d      	sub	sp, #52	@ 0x34
 80097da:	4688      	mov	r8, r1
 80097dc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80097de:	f8d3 c000 	ldr.w	ip, [r3]
 80097e2:	680f      	ldr	r7, [r1, #0]
 80097e4:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80097e8:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80097ec:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80097f0:	edd3 6a07 	vldr	s13, [r3, #28]
 80097f4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80097f6:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80097fa:	f9b1 9000 	ldrsh.w	r9, [r1]
 80097fe:	f9ba 1000 	ldrsh.w	r1, [sl]
 8009802:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8009806:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800980a:	eba7 070c 	sub.w	r7, r7, ip
 800980e:	42bc      	cmp	r4, r7
 8009810:	bfa8      	it	ge
 8009812:	463c      	movge	r4, r7
 8009814:	ee07 4a90 	vmov	s15, r4
 8009818:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800981c:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8009820:	ee25 4a04 	vmul.f32	s8, s10, s8
 8009824:	ee65 4a24 	vmul.f32	s9, s10, s9
 8009828:	ee25 5a27 	vmul.f32	s10, s10, s15
 800982c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009830:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009834:	eb09 0e0c 	add.w	lr, r9, ip
 8009838:	4571      	cmp	r1, lr
 800983a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800983e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8009842:	ee36 0a84 	vadd.f32	s0, s13, s8
 8009846:	ee61 1a87 	vmul.f32	s3, s3, s14
 800984a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800984e:	f340 808d 	ble.w	800996c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8009852:	eba1 060e 	sub.w	r6, r1, lr
 8009856:	fb96 f5f4 	sdiv	r5, r6, r4
 800985a:	ee07 5a10 	vmov	s14, r5
 800985e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009862:	2d00      	cmp	r5, #0
 8009864:	fb04 6615 	mls	r6, r4, r5, r6
 8009868:	eea7 0a04 	vfma.f32	s0, s14, s8
 800986c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8009870:	eea7 1a05 	vfma.f32	s2, s14, s10
 8009874:	dd13      	ble.n	800989e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 8009876:	ee70 6a44 	vsub.f32	s13, s0, s8
 800987a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800987e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009886:	bf18      	it	ne
 8009888:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800988c:	ee31 2a45 	vsub.f32	s4, s2, s10
 8009890:	bf08      	it	eq
 8009892:	eeb0 7a67 	vmoveq.f32	s14, s15
 8009896:	ee61 1a87 	vmul.f32	s3, s3, s14
 800989a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800989e:	fb05 f204 	mul.w	r2, r5, r4
 80098a2:	1abf      	subs	r7, r7, r2
 80098a4:	4494      	add	ip, r2
 80098a6:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80098aa:	4411      	add	r1, r2
 80098ac:	eb09 020c 	add.w	r2, r9, ip
 80098b0:	443a      	add	r2, r7
 80098b2:	b209      	sxth	r1, r1
 80098b4:	428a      	cmp	r2, r1
 80098b6:	bfc4      	itt	gt
 80098b8:	eba1 0209 	subgt.w	r2, r1, r9
 80098bc:	eba2 070c 	subgt.w	r7, r2, ip
 80098c0:	2f00      	cmp	r7, #0
 80098c2:	dd50      	ble.n	8009966 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 80098c4:	fb97 f1f4 	sdiv	r1, r7, r4
 80098c8:	fb04 7211 	mls	r2, r4, r1, r7
 80098cc:	b90a      	cbnz	r2, 80098d2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 80098ce:	3901      	subs	r1, #1
 80098d0:	4622      	mov	r2, r4
 80098d2:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80098d6:	6840      	ldr	r0, [r0, #4]
 80098d8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80098da:	f8d0 a000 	ldr.w	sl, [r0]
 80098de:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80098e0:	9008      	str	r0, [sp, #32]
 80098e2:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80098e6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80098e8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80098ec:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80098f4:	445b      	add	r3, fp
 80098f6:	eef0 6a42 	vmov.f32	s13, s4
 80098fa:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80098fe:	ee21 3a23 	vmul.f32	s6, s2, s7
 8009902:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8009906:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800990a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800990e:	9307      	str	r3, [sp, #28]
 8009910:	ee17 7a90 	vmov	r7, s15
 8009914:	ee73 7a42 	vsub.f32	s15, s6, s4
 8009918:	eeb0 7a61 	vmov.f32	s14, s3
 800991c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8009920:	ee16 3a90 	vmov	r3, s13
 8009924:	fb97 f7f4 	sdiv	r7, r7, r4
 8009928:	ee17 ca90 	vmov	ip, s15
 800992c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8009930:	fb9c fcf4 	sdiv	ip, ip, r4
 8009934:	fb0c 3306 	mla	r3, ip, r6, r3
 8009938:	9302      	str	r3, [sp, #8]
 800993a:	ee17 3a10 	vmov	r3, s14
 800993e:	44b6      	add	lr, r6
 8009940:	fb04 e505 	mla	r5, r4, r5, lr
 8009944:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8009948:	fb07 3706 	mla	r7, r7, r6, r3
 800994c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8009950:	e9cd 4700 	strd	r4, r7, [sp]
 8009954:	2900      	cmp	r1, #0
 8009956:	bfcc      	ite	gt
 8009958:	46a1      	movgt	r9, r4
 800995a:	4691      	movle	r9, r2
 800995c:	eba9 0306 	sub.w	r3, r9, r6
 8009960:	f8da 4008 	ldr.w	r4, [sl, #8]
 8009964:	47a0      	blx	r4
 8009966:	b00d      	add	sp, #52	@ 0x34
 8009968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996c:	2500      	movs	r5, #0
 800996e:	462e      	mov	r6, r5
 8009970:	e799      	b.n	80098a6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08009974 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8009974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	b0db      	sub	sp, #364	@ 0x16c
 800997a:	461d      	mov	r5, r3
 800997c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8009980:	930a      	str	r3, [sp, #40]	@ 0x28
 8009982:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8009986:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009988:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800998c:	9310      	str	r3, [sp, #64]	@ 0x40
 800998e:	6803      	ldr	r3, [r0, #0]
 8009990:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009992:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8009994:	9009      	str	r0, [sp, #36]	@ 0x24
 8009996:	4614      	mov	r4, r2
 8009998:	4629      	mov	r1, r5
 800999a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800999e:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 80099a2:	47b8      	blx	r7
 80099a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a6:	6058      	str	r0, [r3, #4]
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f000 83a1 	beq.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80099ae:	682b      	ldr	r3, [r5, #0]
 80099b0:	9314      	str	r3, [sp, #80]	@ 0x50
 80099b2:	686b      	ldr	r3, [r5, #4]
 80099b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80099b6:	4bc4      	ldr	r3, [pc, #784]	@ (8009cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80099b8:	ed94 7a02 	vldr	s14, [r4, #8]
 80099bc:	7819      	ldrb	r1, [r3, #0]
 80099be:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80099c2:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80099c6:	2900      	cmp	r1, #0
 80099c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099cc:	bf16      	itet	ne
 80099ce:	4619      	movne	r1, r3
 80099d0:	4611      	moveq	r1, r2
 80099d2:	4613      	movne	r3, r2
 80099d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099d8:	9116      	str	r1, [sp, #88]	@ 0x58
 80099da:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80099de:	f240 8387 	bls.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80099e2:	ed94 7a07 	vldr	s14, [r4, #28]
 80099e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ee:	f240 837f 	bls.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80099f2:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80099f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fe:	f240 8377 	bls.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009a02:	6822      	ldr	r2, [r4, #0]
 8009a04:	4bb1      	ldr	r3, [pc, #708]	@ (8009ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8009a06:	429a      	cmp	r2, r3
 8009a08:	f2c0 8372 	blt.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009a0c:	49b0      	ldr	r1, [pc, #704]	@ (8009cd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8009a0e:	6963      	ldr	r3, [r4, #20]
 8009a10:	428a      	cmp	r2, r1
 8009a12:	f300 836d 	bgt.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009a16:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8009a1a:	48ae      	ldr	r0, [pc, #696]	@ (8009cd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8009a1c:	33ff      	adds	r3, #255	@ 0xff
 8009a1e:	4283      	cmp	r3, r0
 8009a20:	f200 8366 	bhi.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009a24:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009a26:	4dac      	ldr	r5, [pc, #688]	@ (8009cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8009a28:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8009a2c:	33ff      	adds	r3, #255	@ 0xff
 8009a2e:	42ab      	cmp	r3, r5
 8009a30:	f200 835e 	bhi.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009a34:	6862      	ldr	r2, [r4, #4]
 8009a36:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8009a3a:	33ff      	adds	r3, #255	@ 0xff
 8009a3c:	4283      	cmp	r3, r0
 8009a3e:	f200 8357 	bhi.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009a42:	69a1      	ldr	r1, [r4, #24]
 8009a44:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8009a48:	33ff      	adds	r3, #255	@ 0xff
 8009a4a:	4283      	cmp	r3, r0
 8009a4c:	f200 8350 	bhi.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009a50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009a52:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8009a56:	30ff      	adds	r0, #255	@ 0xff
 8009a58:	42a8      	cmp	r0, r5
 8009a5a:	f200 8349 	bhi.w	800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009a5e:	428a      	cmp	r2, r1
 8009a60:	f280 8110 	bge.w	8009c84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8009a64:	429a      	cmp	r2, r3
 8009a66:	f300 8119 	bgt.w	8009c9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8009a6a:	4299      	cmp	r1, r3
 8009a6c:	f280 811d 	bge.w	8009caa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8009a70:	2502      	movs	r5, #2
 8009a72:	2701      	movs	r7, #1
 8009a74:	46a9      	mov	r9, r5
 8009a76:	46b8      	mov	r8, r7
 8009a78:	f04f 0a00 	mov.w	sl, #0
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	a849      	add	r0, sp, #292	@ 0x124
 8009a80:	f003 f86e 	bl	800cb60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8009a84:	4622      	mov	r2, r4
 8009a86:	4653      	mov	r3, sl
 8009a88:	a949      	add	r1, sp, #292	@ 0x124
 8009a8a:	f8cd 9000 	str.w	r9, [sp]
 8009a8e:	a819      	add	r0, sp, #100	@ 0x64
 8009a90:	f003 f996 	bl	800cdc0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009a94:	4622      	mov	r2, r4
 8009a96:	4653      	mov	r3, sl
 8009a98:	a949      	add	r1, sp, #292	@ 0x124
 8009a9a:	f8cd 8000 	str.w	r8, [sp]
 8009a9e:	a829      	add	r0, sp, #164	@ 0xa4
 8009aa0:	f003 f98e 	bl	800cdc0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009aa4:	4643      	mov	r3, r8
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	a949      	add	r1, sp, #292	@ 0x124
 8009aaa:	f8cd 9000 	str.w	r9, [sp]
 8009aae:	a839      	add	r0, sp, #228	@ 0xe4
 8009ab0:	f003 f986 	bl	800cdc0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009ab4:	42af      	cmp	r7, r5
 8009ab6:	bfb5      	itete	lt
 8009ab8:	2300      	movlt	r3, #0
 8009aba:	2301      	movge	r3, #1
 8009abc:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8009abe:	930e      	strge	r3, [sp, #56]	@ 0x38
 8009ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ac2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009ac6:	af12      	add	r7, sp, #72	@ 0x48
 8009ac8:	bfb9      	ittee	lt
 8009aca:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8009acc:	ac19      	addlt	r4, sp, #100	@ 0x64
 8009ace:	ad19      	addge	r5, sp, #100	@ 0x64
 8009ad0:	ac29      	addge	r4, sp, #164	@ 0xa4
 8009ad2:	e887 0003 	stmia.w	r7, {r0, r1}
 8009ad6:	b928      	cbnz	r0, 8009ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8009ad8:	4b80      	ldr	r3, [pc, #512]	@ (8009cdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8009ada:	6818      	ldr	r0, [r3, #0]
 8009adc:	6803      	ldr	r3, [r0, #0]
 8009ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae0:	4798      	blx	r3
 8009ae2:	6038      	str	r0, [r7, #0]
 8009ae4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009ae6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8009aea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009aee:	930c      	str	r3, [sp, #48]	@ 0x30
 8009af0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009af2:	6963      	ldr	r3, [r4, #20]
 8009af4:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8009af6:	440b      	add	r3, r1
 8009af8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8009afc:	4408      	add	r0, r1
 8009afe:	b200      	sxth	r0, r0
 8009b00:	4283      	cmp	r3, r0
 8009b02:	900d      	str	r0, [sp, #52]	@ 0x34
 8009b04:	f280 80dd 	bge.w	8009cc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8009b08:	428b      	cmp	r3, r1
 8009b0a:	da08      	bge.n	8009b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	dd06      	ble.n	8009b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8009b10:	1acb      	subs	r3, r1, r3
 8009b12:	429a      	cmp	r2, r3
 8009b14:	f2c0 80e4 	blt.w	8009ce0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f300 80e2 	bgt.w	8009ce2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8009b1e:	6967      	ldr	r7, [r4, #20]
 8009b20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b22:	443b      	add	r3, r7
 8009b24:	461f      	mov	r7, r3
 8009b26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b28:	1bdf      	subs	r7, r3, r7
 8009b2a:	4297      	cmp	r7, r2
 8009b2c:	bfa8      	it	ge
 8009b2e:	4617      	movge	r7, r2
 8009b30:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8009b34:	2f00      	cmp	r7, #0
 8009b36:	f340 8166 	ble.w	8009e06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8009b3a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009b3c:	6829      	ldr	r1, [r5, #0]
 8009b3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009b42:	f9bb 3000 	ldrsh.w	r3, [fp]
 8009b46:	6820      	ldr	r0, [r4, #0]
 8009b48:	4411      	add	r1, r2
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	dd1a      	ble.n	8009b84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8009b4e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8009b52:	440b      	add	r3, r1
 8009b54:	4402      	add	r2, r0
 8009b56:	b21b      	sxth	r3, r3
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	dc13      	bgt.n	8009b84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8009b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b5e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	9206      	str	r2, [sp, #24]
 8009b64:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b66:	9205      	str	r2, [sp, #20]
 8009b68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b6a:	9500      	str	r5, [sp, #0]
 8009b6c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8009b70:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8009b72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b74:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8009b78:	a912      	add	r1, sp, #72	@ 0x48
 8009b7a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8009b7e:	aa49      	add	r2, sp, #292	@ 0x124
 8009b80:	4623      	mov	r3, r4
 8009b82:	47c8      	blx	r9
 8009b84:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b88:	441a      	add	r2, r3
 8009b8a:	6963      	ldr	r3, [r4, #20]
 8009b8c:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8009b90:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8009b94:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8009b98:	68a1      	ldr	r1, [r4, #8]
 8009b9a:	ed94 6a08 	vldr	s12, [r4, #32]
 8009b9e:	6022      	str	r2, [r4, #0]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	6163      	str	r3, [r4, #20]
 8009ba4:	69a3      	ldr	r3, [r4, #24]
 8009ba6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009baa:	3b01      	subs	r3, #1
 8009bac:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8009bb0:	61a3      	str	r3, [r4, #24]
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8009bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bbc:	edd4 6a07 	vldr	s13, [r4, #28]
 8009bc0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8009bc4:	440b      	add	r3, r1
 8009bc6:	68e1      	ldr	r1, [r4, #12]
 8009bc8:	6123      	str	r3, [r4, #16]
 8009bca:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009bce:	428b      	cmp	r3, r1
 8009bd0:	edc4 6a07 	vstr	s13, [r4, #28]
 8009bd4:	db15      	blt.n	8009c02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8009bd6:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8009bda:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009bde:	3201      	adds	r2, #1
 8009be0:	edc4 6a07 	vstr	s13, [r4, #28]
 8009be4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8009be8:	6022      	str	r2, [r4, #0]
 8009bea:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009bee:	1a5b      	subs	r3, r3, r1
 8009bf0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8009bf4:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8009bf8:	6123      	str	r3, [r4, #16]
 8009bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bfe:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8009c02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c06:	441a      	add	r2, r3
 8009c08:	696b      	ldr	r3, [r5, #20]
 8009c0a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8009c0e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8009c12:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8009c16:	68a9      	ldr	r1, [r5, #8]
 8009c18:	ed95 6a08 	vldr	s12, [r5, #32]
 8009c1c:	602a      	str	r2, [r5, #0]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	616b      	str	r3, [r5, #20]
 8009c22:	69ab      	ldr	r3, [r5, #24]
 8009c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8009c2e:	61ab      	str	r3, [r5, #24]
 8009c30:	692b      	ldr	r3, [r5, #16]
 8009c32:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8009c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3a:	edd5 6a07 	vldr	s13, [r5, #28]
 8009c3e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8009c42:	440b      	add	r3, r1
 8009c44:	68e9      	ldr	r1, [r5, #12]
 8009c46:	612b      	str	r3, [r5, #16]
 8009c48:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009c4c:	428b      	cmp	r3, r1
 8009c4e:	edc5 6a07 	vstr	s13, [r5, #28]
 8009c52:	db15      	blt.n	8009c80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8009c54:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8009c58:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009c5c:	3201      	adds	r2, #1
 8009c5e:	edc5 6a07 	vstr	s13, [r5, #28]
 8009c62:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8009c66:	602a      	str	r2, [r5, #0]
 8009c68:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009c6c:	1a5b      	subs	r3, r3, r1
 8009c6e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8009c72:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8009c76:	612b      	str	r3, [r5, #16]
 8009c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c7c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8009c80:	3f01      	subs	r7, #1
 8009c82:	e757      	b.n	8009b34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8009c84:	4299      	cmp	r1, r3
 8009c86:	dc13      	bgt.n	8009cb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	da14      	bge.n	8009cb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8009c8c:	2502      	movs	r5, #2
 8009c8e:	2703      	movs	r7, #3
 8009c90:	46a9      	mov	r9, r5
 8009c92:	f04f 0800 	mov.w	r8, #0
 8009c96:	f04f 0a01 	mov.w	sl, #1
 8009c9a:	e6ef      	b.n	8009a7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8009c9c:	2501      	movs	r5, #1
 8009c9e:	2700      	movs	r7, #0
 8009ca0:	46a9      	mov	r9, r5
 8009ca2:	46b8      	mov	r8, r7
 8009ca4:	f04f 0a02 	mov.w	sl, #2
 8009ca8:	e6e8      	b.n	8009a7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8009caa:	2501      	movs	r5, #1
 8009cac:	2702      	movs	r7, #2
 8009cae:	e6e1      	b.n	8009a74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8009cb0:	2500      	movs	r5, #0
 8009cb2:	2701      	movs	r7, #1
 8009cb4:	e7f4      	b.n	8009ca0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8009cb6:	2702      	movs	r7, #2
 8009cb8:	2503      	movs	r5, #3
 8009cba:	f04f 0900 	mov.w	r9, #0
 8009cbe:	46b8      	mov	r8, r7
 8009cc0:	e7e9      	b.n	8009c96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	e728      	b.n	8009b18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8009cc6:	bf00      	nop
 8009cc8:	2001242c 	.word	0x2001242c
 8009ccc:	fffd8f01 	.word	0xfffd8f01
 8009cd0:	00027100 	.word	0x00027100
 8009cd4:	0004e1ff 	.word	0x0004e1ff
 8009cd8:	0004e1fe 	.word	0x0004e1fe
 8009cdc:	20012434 	.word	0x20012434
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8009ce4:	9111      	str	r1, [sp, #68]	@ 0x44
 8009ce6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8009cea:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8009cee:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8009cf0:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8009cf4:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8009cf8:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8009cfc:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8009d00:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8009d04:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009d08:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8009d0c:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8009d10:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8009d14:	469e      	mov	lr, r3
 8009d16:	469c      	mov	ip, r3
 8009d18:	f04f 0900 	mov.w	r9, #0
 8009d1c:	f1bc 0f00 	cmp.w	ip, #0
 8009d20:	d147      	bne.n	8009db2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8009d22:	eb03 0c07 	add.w	ip, r3, r7
 8009d26:	1ad7      	subs	r7, r2, r3
 8009d28:	f1b9 0f00 	cmp.w	r9, #0
 8009d2c:	d009      	beq.n	8009d42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8009d2e:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8009d32:	9029      	str	r0, [sp, #164]	@ 0xa4
 8009d34:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8009d38:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8009d3c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8009d40:	912d      	str	r1, [sp, #180]	@ 0xb4
 8009d42:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8009d44:	9111      	str	r1, [sp, #68]	@ 0x44
 8009d46:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8009d4a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8009d4e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8009d52:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8009d56:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8009d5a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8009d5e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8009d62:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8009d66:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8009d6a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8009d6e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8009d72:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8009d76:	f04f 0800 	mov.w	r8, #0
 8009d7a:	f1be 0f00 	cmp.w	lr, #0
 8009d7e:	d031      	beq.n	8009de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8009d80:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009d82:	4431      	add	r1, r6
 8009d84:	4549      	cmp	r1, r9
 8009d86:	4450      	add	r0, sl
 8009d88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009d8c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8009d90:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8009d94:	db08      	blt.n	8009da8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8009d96:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009d9a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009d9e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009da2:	3001      	adds	r0, #1
 8009da4:	eba1 0109 	sub.w	r1, r1, r9
 8009da8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009dac:	f04f 0801 	mov.w	r8, #1
 8009db0:	e7e3      	b.n	8009d7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8009db2:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009db4:	4431      	add	r1, r6
 8009db6:	4541      	cmp	r1, r8
 8009db8:	4450      	add	r0, sl
 8009dba:	ee37 7a24 	vadd.f32	s14, s14, s9
 8009dbe:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009dc2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8009dc6:	db08      	blt.n	8009dda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8009dc8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009dcc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8009dd0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	eba1 0108 	sub.w	r1, r1, r8
 8009dda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009dde:	f04f 0901 	mov.w	r9, #1
 8009de2:	e79b      	b.n	8009d1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8009de4:	449c      	add	ip, r3
 8009de6:	1aff      	subs	r7, r7, r3
 8009de8:	f1b8 0f00 	cmp.w	r8, #0
 8009dec:	d009      	beq.n	8009e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8009dee:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8009df2:	9019      	str	r0, [sp, #100]	@ 0x64
 8009df4:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8009df8:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8009dfc:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8009e00:	911d      	str	r1, [sp, #116]	@ 0x74
 8009e02:	1ad2      	subs	r2, r2, r3
 8009e04:	e68b      	b.n	8009b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8009e06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e08:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f000 80d1 	beq.w	8009fb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8009e10:	ad19      	add	r5, sp, #100	@ 0x64
 8009e12:	ac39      	add	r4, sp, #228	@ 0xe4
 8009e14:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009e16:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8009e1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009e1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009e22:	6963      	ldr	r3, [r4, #20]
 8009e24:	440b      	add	r3, r1
 8009e26:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8009e2a:	4408      	add	r0, r1
 8009e2c:	b200      	sxth	r0, r0
 8009e2e:	4283      	cmp	r3, r0
 8009e30:	900d      	str	r0, [sp, #52]	@ 0x34
 8009e32:	f280 80c1 	bge.w	8009fb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8009e36:	428b      	cmp	r3, r1
 8009e38:	da08      	bge.n	8009e4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8009e3a:	2a00      	cmp	r2, #0
 8009e3c:	dd06      	ble.n	8009e4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8009e3e:	1acb      	subs	r3, r1, r3
 8009e40:	429a      	cmp	r2, r3
 8009e42:	f2c0 80bb 	blt.w	8009fbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f300 80b9 	bgt.w	8009fbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8009e4c:	6967      	ldr	r7, [r4, #20]
 8009e4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e50:	443b      	add	r3, r7
 8009e52:	461f      	mov	r7, r3
 8009e54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e56:	1bdf      	subs	r7, r3, r7
 8009e58:	4297      	cmp	r7, r2
 8009e5a:	bfa8      	it	ge
 8009e5c:	4617      	movge	r7, r2
 8009e5e:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8009e62:	2f00      	cmp	r7, #0
 8009e64:	f340 813c 	ble.w	800a0e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8009e68:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009e6a:	6829      	ldr	r1, [r5, #0]
 8009e6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009e70:	f9bb 3000 	ldrsh.w	r3, [fp]
 8009e74:	6820      	ldr	r0, [r4, #0]
 8009e76:	4411      	add	r1, r2
 8009e78:	4299      	cmp	r1, r3
 8009e7a:	dd1a      	ble.n	8009eb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8009e7c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8009e80:	440b      	add	r3, r1
 8009e82:	4402      	add	r2, r0
 8009e84:	b21b      	sxth	r3, r3
 8009e86:	429a      	cmp	r2, r3
 8009e88:	dc13      	bgt.n	8009eb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8009e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e8c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	9206      	str	r2, [sp, #24]
 8009e92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e94:	9205      	str	r2, [sp, #20]
 8009e96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e98:	9500      	str	r5, [sp, #0]
 8009e9a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8009e9e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8009ea0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ea2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8009ea6:	a912      	add	r1, sp, #72	@ 0x48
 8009ea8:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8009eac:	aa49      	add	r2, sp, #292	@ 0x124
 8009eae:	4623      	mov	r3, r4
 8009eb0:	47c8      	blx	r9
 8009eb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009eb6:	441a      	add	r2, r3
 8009eb8:	6963      	ldr	r3, [r4, #20]
 8009eba:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8009ebe:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8009ec2:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8009ec6:	68a1      	ldr	r1, [r4, #8]
 8009ec8:	ed94 6a08 	vldr	s12, [r4, #32]
 8009ecc:	6022      	str	r2, [r4, #0]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	6163      	str	r3, [r4, #20]
 8009ed2:	69a3      	ldr	r3, [r4, #24]
 8009ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8009ede:	61a3      	str	r3, [r4, #24]
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8009ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eea:	edd4 6a07 	vldr	s13, [r4, #28]
 8009eee:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8009ef2:	440b      	add	r3, r1
 8009ef4:	68e1      	ldr	r1, [r4, #12]
 8009ef6:	6123      	str	r3, [r4, #16]
 8009ef8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009efc:	428b      	cmp	r3, r1
 8009efe:	edc4 6a07 	vstr	s13, [r4, #28]
 8009f02:	db15      	blt.n	8009f30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8009f04:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8009f08:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009f0c:	3201      	adds	r2, #1
 8009f0e:	edc4 6a07 	vstr	s13, [r4, #28]
 8009f12:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8009f16:	6022      	str	r2, [r4, #0]
 8009f18:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009f1c:	1a5b      	subs	r3, r3, r1
 8009f1e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8009f22:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8009f26:	6123      	str	r3, [r4, #16]
 8009f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f2c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8009f30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f34:	441a      	add	r2, r3
 8009f36:	696b      	ldr	r3, [r5, #20]
 8009f38:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8009f3c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8009f40:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8009f44:	68a9      	ldr	r1, [r5, #8]
 8009f46:	ed95 6a08 	vldr	s12, [r5, #32]
 8009f4a:	602a      	str	r2, [r5, #0]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	616b      	str	r3, [r5, #20]
 8009f50:	69ab      	ldr	r3, [r5, #24]
 8009f52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f56:	3b01      	subs	r3, #1
 8009f58:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8009f5c:	61ab      	str	r3, [r5, #24]
 8009f5e:	692b      	ldr	r3, [r5, #16]
 8009f60:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8009f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f68:	edd5 6a07 	vldr	s13, [r5, #28]
 8009f6c:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8009f70:	440b      	add	r3, r1
 8009f72:	68e9      	ldr	r1, [r5, #12]
 8009f74:	612b      	str	r3, [r5, #16]
 8009f76:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009f7a:	428b      	cmp	r3, r1
 8009f7c:	edc5 6a07 	vstr	s13, [r5, #28]
 8009f80:	db15      	blt.n	8009fae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8009f82:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8009f86:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009f8a:	3201      	adds	r2, #1
 8009f8c:	edc5 6a07 	vstr	s13, [r5, #28]
 8009f90:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	ee36 7a87 	vadd.f32	s14, s13, s14
 8009f9a:	1a5b      	subs	r3, r3, r1
 8009f9c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8009fa0:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8009fa4:	612b      	str	r3, [r5, #16]
 8009fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009faa:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8009fae:	3f01      	subs	r7, #1
 8009fb0:	e757      	b.n	8009e62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8009fb2:	ad39      	add	r5, sp, #228	@ 0xe4
 8009fb4:	ac19      	add	r4, sp, #100	@ 0x64
 8009fb6:	e72d      	b.n	8009e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8009fb8:	4613      	mov	r3, r2
 8009fba:	e744      	b.n	8009e46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8009fc2:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8009fc4:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8009fc8:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8009fcc:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8009fd0:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8009fd4:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8009fd8:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8009fdc:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8009fe0:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8009fe2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8009fe6:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8009fea:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8009fee:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8009ff2:	960e      	str	r6, [sp, #56]	@ 0x38
 8009ff4:	469e      	mov	lr, r3
 8009ff6:	461f      	mov	r7, r3
 8009ff8:	f04f 0900 	mov.w	r9, #0
 8009ffc:	2f00      	cmp	r7, #0
 8009ffe:	d146      	bne.n	800a08e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800a000:	449c      	add	ip, r3
 800a002:	1ad7      	subs	r7, r2, r3
 800a004:	f1b9 0f00 	cmp.w	r9, #0
 800a008:	d009      	beq.n	800a01e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800a00a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800a00e:	9039      	str	r0, [sp, #228]	@ 0xe4
 800a010:	913d      	str	r1, [sp, #244]	@ 0xf4
 800a012:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800a016:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800a01a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800a01e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800a020:	910e      	str	r1, [sp, #56]	@ 0x38
 800a022:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800a026:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800a02a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800a02e:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800a032:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800a036:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800a03a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800a03e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800a042:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800a046:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800a04a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800a04e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800a052:	f04f 0800 	mov.w	r8, #0
 800a056:	f1be 0f00 	cmp.w	lr, #0
 800a05a:	d030      	beq.n	800a0be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800a05c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800a05e:	4431      	add	r1, r6
 800a060:	4549      	cmp	r1, r9
 800a062:	4450      	add	r0, sl
 800a064:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a068:	ee37 7a04 	vadd.f32	s14, s14, s8
 800a06c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a070:	db08      	blt.n	800a084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800a072:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a076:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a07a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a07e:	3001      	adds	r0, #1
 800a080:	eba1 0109 	sub.w	r1, r1, r9
 800a084:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a088:	f04f 0801 	mov.w	r8, #1
 800a08c:	e7e3      	b.n	800a056 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800a08e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800a090:	4431      	add	r1, r6
 800a092:	4541      	cmp	r1, r8
 800a094:	4450      	add	r0, sl
 800a096:	ee37 7a24 	vadd.f32	s14, s14, s9
 800a09a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a09e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800a0a2:	db08      	blt.n	800a0b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800a0a4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a0a8:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a0ac:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	eba1 0108 	sub.w	r1, r1, r8
 800a0b6:	3f01      	subs	r7, #1
 800a0b8:	f04f 0901 	mov.w	r9, #1
 800a0bc:	e79e      	b.n	8009ffc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800a0be:	449c      	add	ip, r3
 800a0c0:	1aff      	subs	r7, r7, r3
 800a0c2:	f1b8 0f00 	cmp.w	r8, #0
 800a0c6:	d009      	beq.n	800a0dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800a0c8:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800a0cc:	9019      	str	r0, [sp, #100]	@ 0x64
 800a0ce:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800a0d2:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800a0d6:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800a0da:	911d      	str	r1, [sp, #116]	@ 0x74
 800a0dc:	1ad2      	subs	r2, r2, r3
 800a0de:	e6b5      	b.n	8009e4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800a0e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	b923      	cbnz	r3, 800a0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a0e6:	4b04      	ldr	r3, [pc, #16]	@ (800a0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	6803      	ldr	r3, [r0, #0]
 800a0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ee:	4798      	blx	r3
 800a0f0:	b05b      	add	sp, #364	@ 0x16c
 800a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20012434 	.word	0x20012434

0800a0fc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d818      	bhi.n	800a132 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800a100:	e8df f003 	tbb	[pc, r3]
 800a104:	130d0602 	.word	0x130d0602
 800a108:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a10c:	1850      	adds	r0, r2, r1
 800a10e:	4770      	bx	lr
 800a110:	8803      	ldrh	r3, [r0, #0]
 800a112:	8880      	ldrh	r0, [r0, #4]
 800a114:	4418      	add	r0, r3
 800a116:	b200      	sxth	r0, r0
 800a118:	1a80      	subs	r0, r0, r2
 800a11a:	3801      	subs	r0, #1
 800a11c:	4770      	bx	lr
 800a11e:	8803      	ldrh	r3, [r0, #0]
 800a120:	8880      	ldrh	r0, [r0, #4]
 800a122:	4418      	add	r0, r3
 800a124:	b200      	sxth	r0, r0
 800a126:	1a40      	subs	r0, r0, r1
 800a128:	e7f7      	b.n	800a11a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800a12a:	f9b0 0000 	ldrsh.w	r0, [r0]
 800a12e:	4410      	add	r0, r2
 800a130:	4770      	bx	lr
 800a132:	2000      	movs	r0, #0
 800a134:	4770      	bx	lr

0800a136 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800a136:	2b03      	cmp	r3, #3
 800a138:	d817      	bhi.n	800a16a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800a13a:	e8df f003 	tbb	[pc, r3]
 800a13e:	0602      	.short	0x0602
 800a140:	1009      	.short	0x1009
 800a142:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800a146:	1850      	adds	r0, r2, r1
 800a148:	4770      	bx	lr
 800a14a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a14e:	e7fa      	b.n	800a146 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800a150:	8843      	ldrh	r3, [r0, #2]
 800a152:	88c0      	ldrh	r0, [r0, #6]
 800a154:	4418      	add	r0, r3
 800a156:	b200      	sxth	r0, r0
 800a158:	1a80      	subs	r0, r0, r2
 800a15a:	3801      	subs	r0, #1
 800a15c:	4770      	bx	lr
 800a15e:	8843      	ldrh	r3, [r0, #2]
 800a160:	88c0      	ldrh	r0, [r0, #6]
 800a162:	4418      	add	r0, r3
 800a164:	b200      	sxth	r0, r0
 800a166:	1a40      	subs	r0, r0, r1
 800a168:	e7f7      	b.n	800a15a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800a16a:	2000      	movs	r0, #0
 800a16c:	4770      	bx	lr
	...

0800a170 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800a170:	4b01      	ldr	r3, [pc, #4]	@ (800a178 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	4770      	bx	lr
 800a178:	2001243c 	.word	0x2001243c

0800a17c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800a17c:	4603      	mov	r3, r0
 800a17e:	b1c8      	cbz	r0, 800a1b4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800a180:	0c02      	lsrs	r2, r0, #16
 800a182:	0412      	lsls	r2, r2, #16
 800a184:	b9a2      	cbnz	r2, 800a1b0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800a186:	0403      	lsls	r3, r0, #16
 800a188:	2010      	movs	r0, #16
 800a18a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800a18e:	bf04      	itt	eq
 800a190:	021b      	lsleq	r3, r3, #8
 800a192:	3008      	addeq	r0, #8
 800a194:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800a198:	bf04      	itt	eq
 800a19a:	011b      	lsleq	r3, r3, #4
 800a19c:	3004      	addeq	r0, #4
 800a19e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800a1a2:	bf04      	itt	eq
 800a1a4:	009b      	lsleq	r3, r3, #2
 800a1a6:	3002      	addeq	r0, #2
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	db04      	blt.n	800a1b6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	4770      	bx	lr
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	e7ea      	b.n	800a18a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800a1b4:	2020      	movs	r0, #32
 800a1b6:	4770      	bx	lr

0800a1b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	b087      	sub	sp, #28
 800a1be:	460d      	mov	r5, r1
 800a1c0:	4616      	mov	r6, r2
 800a1c2:	4698      	mov	r8, r3
 800a1c4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800a1c8:	4601      	mov	r1, r0
 800a1ca:	b120      	cbz	r0, 800a1d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800a1cc:	b11a      	cbz	r2, 800a1d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800a1ce:	2d1f      	cmp	r5, #31
 800a1d0:	d801      	bhi.n	800a1d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800a1d2:	2b1f      	cmp	r3, #31
 800a1d4:	d904      	bls.n	800a1e0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	6038      	str	r0, [r7, #0]
 800a1da:	b007      	add	sp, #28
 800a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e0:	b97d      	cbnz	r5, 800a202 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800a1e2:	b143      	cbz	r3, 800a1f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	e9cd 4700 	strd	r4, r7, [sp]
 800a1ea:	462b      	mov	r3, r5
 800a1ec:	4641      	mov	r1, r8
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f7ff ffe2 	bl	800a1b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a1f4:	e7f1      	b.n	800a1da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800a1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fa:	603b      	str	r3, [r7, #0]
 800a1fc:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800a200:	e7eb      	b.n	800a1da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800a202:	fa32 fa05 	lsrs.w	sl, r2, r5
 800a206:	d106      	bne.n	800a216 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800a208:	4346      	muls	r6, r0
 800a20a:	fbb6 f0f4 	udiv	r0, r6, r4
 800a20e:	fb04 6610 	mls	r6, r4, r0, r6
 800a212:	603e      	str	r6, [r7, #0]
 800a214:	e7e1      	b.n	800a1da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800a216:	2201      	movs	r2, #1
 800a218:	40aa      	lsls	r2, r5
 800a21a:	3a01      	subs	r2, #1
 800a21c:	4016      	ands	r6, r2
 800a21e:	fa00 fb05 	lsl.w	fp, r0, r5
 800a222:	4630      	mov	r0, r6
 800a224:	fbbb f9f4 	udiv	r9, fp, r4
 800a228:	fb0a f309 	mul.w	r3, sl, r9
 800a22c:	9303      	str	r3, [sp, #12]
 800a22e:	f7ff ffa5 	bl	800a17c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800a232:	462b      	mov	r3, r5
 800a234:	460a      	mov	r2, r1
 800a236:	e9cd 4700 	strd	r4, r7, [sp]
 800a23a:	4601      	mov	r1, r0
 800a23c:	4630      	mov	r0, r6
 800a23e:	f7ff ffbb 	bl	800a1b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a242:	fb04 b919 	mls	r9, r4, r9, fp
 800a246:	4606      	mov	r6, r0
 800a248:	4648      	mov	r0, r9
 800a24a:	eb05 0108 	add.w	r1, r5, r8
 800a24e:	f7ff ff95 	bl	800a17c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800a252:	ab05      	add	r3, sp, #20
 800a254:	e9cd 4300 	strd	r4, r3, [sp]
 800a258:	464a      	mov	r2, r9
 800a25a:	4603      	mov	r3, r0
 800a25c:	4650      	mov	r0, sl
 800a25e:	f7ff ffab 	bl	800a1b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	9a05      	ldr	r2, [sp, #20]
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	4411      	add	r1, r2
 800a26a:	fbb1 f2f4 	udiv	r2, r1, r4
 800a26e:	18d3      	adds	r3, r2, r3
 800a270:	441e      	add	r6, r3
 800a272:	fb04 1412 	mls	r4, r4, r2, r1
 800a276:	4430      	add	r0, r6
 800a278:	603c      	str	r4, [r7, #0]
 800a27a:	e7ae      	b.n	800a1da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800a27c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800a27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a280:	b085      	sub	sp, #20
 800a282:	f1b0 0900 	subs.w	r9, r0, #0
 800a286:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a288:	461d      	mov	r5, r3
 800a28a:	bfbf      	itttt	lt
 800a28c:	6823      	ldrlt	r3, [r4, #0]
 800a28e:	425b      	neglt	r3, r3
 800a290:	f1c9 0900 	rsblt	r9, r9, #0
 800a294:	6023      	strlt	r3, [r4, #0]
 800a296:	bfb4      	ite	lt
 800a298:	f04f 36ff 	movlt.w	r6, #4294967295
 800a29c:	2601      	movge	r6, #1
 800a29e:	2a00      	cmp	r2, #0
 800a2a0:	4617      	mov	r7, r2
 800a2a2:	da04      	bge.n	800a2ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	425b      	negs	r3, r3
 800a2a8:	4257      	negs	r7, r2
 800a2aa:	4276      	negs	r6, r6
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	2d00      	cmp	r5, #0
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	bfba      	itte	lt
 800a2b4:	426d      	neglt	r5, r5
 800a2b6:	f04f 38ff 	movlt.w	r8, #4294967295
 800a2ba:	f04f 0801 	movge.w	r8, #1
 800a2be:	f7ff ff5d 	bl	800a17c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800a2c2:	ab03      	add	r3, sp, #12
 800a2c4:	e9cd 5300 	strd	r5, r3, [sp]
 800a2c8:	463a      	mov	r2, r7
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	4648      	mov	r0, r9
 800a2ce:	f7ff ff73 	bl	800a1b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	9a03      	ldr	r2, [sp, #12]
 800a2d6:	4546      	cmp	r6, r8
 800a2d8:	441a      	add	r2, r3
 800a2da:	fb92 f3f5 	sdiv	r3, r2, r5
 800a2de:	4418      	add	r0, r3
 800a2e0:	bf18      	it	ne
 800a2e2:	4240      	negne	r0, r0
 800a2e4:	fb05 2313 	mls	r3, r5, r3, r2
 800a2e8:	1c72      	adds	r2, r6, #1
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	d105      	bne.n	800a2fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f1c3 0200 	rsb	r2, r3, #0
 800a2f4:	db0b      	blt.n	800a30e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800a2f6:	6022      	str	r2, [r4, #0]
 800a2f8:	e006      	b.n	800a308 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800a2fa:	2e01      	cmp	r6, #1
 800a2fc:	d104      	bne.n	800a308 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	da02      	bge.n	800a308 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800a302:	442b      	add	r3, r5
 800a304:	3801      	subs	r0, #1
 800a306:	6023      	str	r3, [r4, #0]
 800a308:	b005      	add	sp, #20
 800a30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a30e:	3801      	subs	r0, #1
 800a310:	1b52      	subs	r2, r2, r5
 800a312:	e7f0      	b.n	800a2f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800a314 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800a314:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a318:	4c1c      	ldr	r4, [pc, #112]	@ (800a38c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800a31a:	6807      	ldr	r7, [r0, #0]
 800a31c:	69a3      	ldr	r3, [r4, #24]
 800a31e:	4605      	mov	r5, r0
 800a320:	b92b      	cbnz	r3, 800a32e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800a322:	6840      	ldr	r0, [r0, #4]
 800a324:	e9c5 7000 	strd	r7, r0, [r5]
 800a328:	b004      	add	sp, #16
 800a32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a32e:	68a2      	ldr	r2, [r4, #8]
 800a330:	6820      	ldr	r0, [r4, #0]
 800a332:	ae04      	add	r6, sp, #16
 800a334:	f04f 0802 	mov.w	r8, #2
 800a338:	fb93 f1f8 	sdiv	r1, r3, r8
 800a33c:	440a      	add	r2, r1
 800a33e:	f846 2d04 	str.w	r2, [r6, #-4]!
 800a342:	69e1      	ldr	r1, [r4, #28]
 800a344:	9600      	str	r6, [sp, #0]
 800a346:	463a      	mov	r2, r7
 800a348:	f7ff ff98 	bl	800a27c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a34c:	69a3      	ldr	r3, [r4, #24]
 800a34e:	686a      	ldr	r2, [r5, #4]
 800a350:	6a21      	ldr	r1, [r4, #32]
 800a352:	9600      	str	r6, [sp, #0]
 800a354:	4607      	mov	r7, r0
 800a356:	6860      	ldr	r0, [r4, #4]
 800a358:	f7ff ff90 	bl	800a27c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a35c:	6962      	ldr	r2, [r4, #20]
 800a35e:	69a3      	ldr	r3, [r4, #24]
 800a360:	fb93 f8f8 	sdiv	r8, r3, r8
 800a364:	4442      	add	r2, r8
 800a366:	9203      	str	r2, [sp, #12]
 800a368:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a36a:	682a      	ldr	r2, [r5, #0]
 800a36c:	9600      	str	r6, [sp, #0]
 800a36e:	4407      	add	r7, r0
 800a370:	68e0      	ldr	r0, [r4, #12]
 800a372:	f7ff ff83 	bl	800a27c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a376:	9600      	str	r6, [sp, #0]
 800a378:	4680      	mov	r8, r0
 800a37a:	69a3      	ldr	r3, [r4, #24]
 800a37c:	686a      	ldr	r2, [r5, #4]
 800a37e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a380:	6920      	ldr	r0, [r4, #16]
 800a382:	f7ff ff7b 	bl	800a27c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a386:	4440      	add	r0, r8
 800a388:	e7cc      	b.n	800a324 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800a38a:	bf00      	nop
 800a38c:	20012440 	.word	0x20012440

0800a390 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800a390:	4b07      	ldr	r3, [pc, #28]	@ (800a3b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d109      	bne.n	800a3ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800a398:	f9b1 3000 	ldrsh.w	r3, [r1]
 800a39c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a3a0:	8003      	strh	r3, [r0, #0]
 800a3a2:	4b04      	ldr	r3, [pc, #16]	@ (800a3b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	800b      	strh	r3, [r1, #0]
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	2001242c 	.word	0x2001242c
 800a3b4:	20012428 	.word	0x20012428

0800a3b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800a3b8:	b510      	push	{r4, lr}
 800a3ba:	4b07      	ldr	r3, [pc, #28]	@ (800a3d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d108      	bne.n	800a3d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800a3c2:	4b06      	ldr	r3, [pc, #24]	@ (800a3dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800a3c4:	880c      	ldrh	r4, [r1, #0]
 800a3c6:	881b      	ldrh	r3, [r3, #0]
 800a3c8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	1b1b      	subs	r3, r3, r4
 800a3d0:	8003      	strh	r3, [r0, #0]
 800a3d2:	800a      	strh	r2, [r1, #0]
 800a3d4:	bd10      	pop	{r4, pc}
 800a3d6:	bf00      	nop
 800a3d8:	2001242c 	.word	0x2001242c
 800a3dc:	20012428 	.word	0x20012428

0800a3e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a40c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d10e      	bne.n	800a408 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800a3ea:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800a3ee:	8843      	ldrh	r3, [r0, #2]
 800a3f0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a3f4:	8044      	strh	r4, [r0, #2]
 800a3f6:	18ca      	adds	r2, r1, r3
 800a3f8:	4b05      	ldr	r3, [pc, #20]	@ (800a410 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800a3fa:	881b      	ldrh	r3, [r3, #0]
 800a3fc:	1a9b      	subs	r3, r3, r2
 800a3fe:	8003      	strh	r3, [r0, #0]
 800a400:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a404:	80c3      	strh	r3, [r0, #6]
 800a406:	8081      	strh	r1, [r0, #4]
 800a408:	bd10      	pop	{r4, pc}
 800a40a:	bf00      	nop
 800a40c:	2001242c 	.word	0x2001242c
 800a410:	20012428 	.word	0x20012428

0800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800a414:	4b08      	ldr	r3, [pc, #32]	@ (800a438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d10c      	bne.n	800a436 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800a41c:	8803      	ldrh	r3, [r0, #0]
 800a41e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800a422:	8842      	ldrh	r2, [r0, #2]
 800a424:	8002      	strh	r2, [r0, #0]
 800a426:	185a      	adds	r2, r3, r1
 800a428:	4b04      	ldr	r3, [pc, #16]	@ (800a43c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	1a9b      	subs	r3, r3, r2
 800a42e:	8043      	strh	r3, [r0, #2]
 800a430:	88c3      	ldrh	r3, [r0, #6]
 800a432:	8083      	strh	r3, [r0, #4]
 800a434:	80c1      	strh	r1, [r0, #6]
 800a436:	4770      	bx	lr
 800a438:	2001242c 	.word	0x2001242c
 800a43c:	20012428 	.word	0x20012428

0800a440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800a440:	b510      	push	{r4, lr}
 800a442:	4b07      	ldr	r3, [pc, #28]	@ (800a460 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d108      	bne.n	800a45c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800a44a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800a44e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a452:	8003      	strh	r3, [r0, #0]
 800a454:	8893      	ldrh	r3, [r2, #4]
 800a456:	3b01      	subs	r3, #1
 800a458:	1b1b      	subs	r3, r3, r4
 800a45a:	800b      	strh	r3, [r1, #0]
 800a45c:	bd10      	pop	{r4, pc}
 800a45e:	bf00      	nop
 800a460:	2001242c 	.word	0x2001242c

0800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800a464:	b510      	push	{r4, lr}
 800a466:	4b0a      	ldr	r3, [pc, #40]	@ (800a490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	460a      	mov	r2, r1
 800a46e:	d10d      	bne.n	800a48c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800a470:	8881      	ldrh	r1, [r0, #4]
 800a472:	8803      	ldrh	r3, [r0, #0]
 800a474:	440b      	add	r3, r1
 800a476:	4601      	mov	r1, r0
 800a478:	3b01      	subs	r3, #1
 800a47a:	f821 3b02 	strh.w	r3, [r1], #2
 800a47e:	f7ff ffdf 	bl	800a440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800a482:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a486:	88c2      	ldrh	r2, [r0, #6]
 800a488:	8082      	strh	r2, [r0, #4]
 800a48a:	80c3      	strh	r3, [r0, #6]
 800a48c:	bd10      	pop	{r4, pc}
 800a48e:	bf00      	nop
 800a490:	2001242c 	.word	0x2001242c

0800a494 <_ZN8touchgfx11Application13requestRedrawEv>:
 800a494:	4b06      	ldr	r3, [pc, #24]	@ (800a4b0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800a496:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a49a:	4b06      	ldr	r3, [pc, #24]	@ (800a4b4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800a49c:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800a4a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4a4:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800a4ae:	4770      	bx	lr
 800a4b0:	20012428 	.word	0x20012428
 800a4b4:	2001242a 	.word	0x2001242a

0800a4b8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800a4b8:	4b03      	ldr	r3, [pc, #12]	@ (800a4c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	b110      	cbz	r0, 800a4c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800a4be:	6803      	ldr	r3, [r0, #0]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	4718      	bx	r3
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	20012470 	.word	0x20012470

0800a4cc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800a4cc:	4770      	bx	lr
	...

0800a4d0 <_ZN8touchgfx11Application4drawEv>:
 800a4d0:	b507      	push	{r0, r1, r2, lr}
 800a4d2:	4b09      	ldr	r3, [pc, #36]	@ (800a4f8 <_ZN8touchgfx11Application4drawEv+0x28>)
 800a4d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a4d8:	4b08      	ldr	r3, [pc, #32]	@ (800a4fc <_ZN8touchgfx11Application4drawEv+0x2c>)
 800a4da:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a4de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4e2:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a4e6:	6803      	ldr	r3, [r0, #0]
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	9100      	str	r1, [sp, #0]
 800a4ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4ee:	4669      	mov	r1, sp
 800a4f0:	4798      	blx	r3
 800a4f2:	b003      	add	sp, #12
 800a4f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4f8:	20012428 	.word	0x20012428
 800a4fc:	2001242a 	.word	0x2001242a

0800a500 <_ZN8touchgfx11Application10invalidateEv>:
 800a500:	4b09      	ldr	r3, [pc, #36]	@ (800a528 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800a502:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a506:	4b09      	ldr	r3, [pc, #36]	@ (800a52c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800a508:	b082      	sub	sp, #8
 800a50a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a50e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a512:	2100      	movs	r1, #0
 800a514:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a518:	9100      	str	r1, [sp, #0]
 800a51a:	6803      	ldr	r3, [r0, #0]
 800a51c:	aa02      	add	r2, sp, #8
 800a51e:	e912 0006 	ldmdb	r2, {r1, r2}
 800a522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a524:	b002      	add	sp, #8
 800a526:	4718      	bx	r3
 800a528:	20012428 	.word	0x20012428
 800a52c:	2001242a 	.word	0x2001242a

0800a530 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800a530:	4b03      	ldr	r3, [pc, #12]	@ (800a540 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	b110      	cbz	r0, 800a53c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800a536:	6803      	ldr	r3, [r0, #0]
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	4718      	bx	r3
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	20012470 	.word	0x20012470

0800a544 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800a544:	4b03      	ldr	r3, [pc, #12]	@ (800a554 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	b110      	cbz	r0, 800a550 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800a54a:	6803      	ldr	r3, [r0, #0]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	4718      	bx	r3
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	20012470 	.word	0x20012470

0800a558 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800a558:	2300      	movs	r3, #0
 800a55a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800a55e:	4770      	bx	lr

0800a560 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800a560:	4b03      	ldr	r3, [pc, #12]	@ (800a570 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	b110      	cbz	r0, 800a56c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800a566:	6803      	ldr	r3, [r0, #0]
 800a568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56a:	4718      	bx	r3
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	20012470 	.word	0x20012470

0800a574 <_ZN8touchgfx11ApplicationD1Ev>:
 800a574:	4770      	bx	lr

0800a576 <_ZN8touchgfx11ApplicationD0Ev>:
 800a576:	b510      	push	{r4, lr}
 800a578:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800a57c:	4604      	mov	r4, r0
 800a57e:	f005 fc35 	bl	800fdec <_ZdlPvj>
 800a582:	4620      	mov	r0, r4
 800a584:	bd10      	pop	{r4, pc}

0800a586 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800a586:	b510      	push	{r4, lr}
 800a588:	f9b1 4000 	ldrsh.w	r4, [r1]
 800a58c:	888a      	ldrh	r2, [r1, #4]
 800a58e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800a592:	4422      	add	r2, r4
 800a594:	b212      	sxth	r2, r2
 800a596:	4293      	cmp	r3, r2
 800a598:	da15      	bge.n	800a5c6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800a59a:	8882      	ldrh	r2, [r0, #4]
 800a59c:	4413      	add	r3, r2
 800a59e:	b21b      	sxth	r3, r3
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	da10      	bge.n	800a5c6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800a5a4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800a5a8:	88c9      	ldrh	r1, [r1, #6]
 800a5aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a5ae:	4419      	add	r1, r3
 800a5b0:	b209      	sxth	r1, r1
 800a5b2:	428a      	cmp	r2, r1
 800a5b4:	da07      	bge.n	800a5c6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800a5b6:	88c0      	ldrh	r0, [r0, #6]
 800a5b8:	4410      	add	r0, r2
 800a5ba:	b200      	sxth	r0, r0
 800a5bc:	4283      	cmp	r3, r0
 800a5be:	bfac      	ite	ge
 800a5c0:	2000      	movge	r0, #0
 800a5c2:	2001      	movlt	r0, #1
 800a5c4:	bd10      	pop	{r4, pc}
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	e7fc      	b.n	800a5c4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800a5ca <_ZN8touchgfx4Rect10restrictToEss>:
 800a5ca:	f9b0 3000 	ldrsh.w	r3, [r0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	da04      	bge.n	800a5de <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800a5d4:	8884      	ldrh	r4, [r0, #4]
 800a5d6:	4423      	add	r3, r4
 800a5d8:	8083      	strh	r3, [r0, #4]
 800a5da:	2300      	movs	r3, #0
 800a5dc:	8003      	strh	r3, [r0, #0]
 800a5de:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a5e2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a5e6:	1b09      	subs	r1, r1, r4
 800a5e8:	428b      	cmp	r3, r1
 800a5ea:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800a5ee:	bfc8      	it	gt
 800a5f0:	8081      	strhgt	r1, [r0, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	da04      	bge.n	800a600 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800a5f6:	88c1      	ldrh	r1, [r0, #6]
 800a5f8:	440b      	add	r3, r1
 800a5fa:	80c3      	strh	r3, [r0, #6]
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	8043      	strh	r3, [r0, #2]
 800a600:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800a604:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a608:	1a52      	subs	r2, r2, r1
 800a60a:	4293      	cmp	r3, r2
 800a60c:	bfc8      	it	gt
 800a60e:	80c2      	strhgt	r2, [r0, #6]
 800a610:	bd10      	pop	{r4, pc}
	...

0800a614 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800a614:	b510      	push	{r4, lr}
 800a616:	4b10      	ldr	r3, [pc, #64]	@ (800a658 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800a618:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a61c:	4b0f      	ldr	r3, [pc, #60]	@ (800a65c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800a61e:	460c      	mov	r4, r1
 800a620:	4620      	mov	r0, r4
 800a622:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a626:	f7ff ffd0 	bl	800a5ca <_ZN8touchgfx4Rect10restrictToEss>
 800a62a:	4b0d      	ldr	r3, [pc, #52]	@ (800a660 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800a62c:	6818      	ldr	r0, [r3, #0]
 800a62e:	b190      	cbz	r0, 800a656 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800a630:	6803      	ldr	r3, [r0, #0]
 800a632:	4621      	mov	r1, r4
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	4798      	blx	r3
 800a638:	4b0a      	ldr	r3, [pc, #40]	@ (800a664 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	b118      	cbz	r0, 800a646 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800a63e:	6803      	ldr	r3, [r0, #0]
 800a640:	4621      	mov	r1, r4
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	4798      	blx	r3
 800a646:	4b08      	ldr	r3, [pc, #32]	@ (800a668 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800a648:	6818      	ldr	r0, [r3, #0]
 800a64a:	6803      	ldr	r3, [r0, #0]
 800a64c:	4621      	mov	r1, r4
 800a64e:	69db      	ldr	r3, [r3, #28]
 800a650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a654:	4718      	bx	r3
 800a656:	bd10      	pop	{r4, pc}
 800a658:	2001242a 	.word	0x2001242a
 800a65c:	20012428 	.word	0x20012428
 800a660:	20012470 	.word	0x20012470
 800a664:	2001246c 	.word	0x2001246c
 800a668:	20012434 	.word	0x20012434

0800a66c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66e:	4606      	mov	r6, r0
 800a670:	4608      	mov	r0, r1
 800a672:	460f      	mov	r7, r1
 800a674:	f7fd fee5 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a678:	b9e8      	cbnz	r0, 800a6b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800a67a:	f9b7 5000 	ldrsh.w	r5, [r7]
 800a67e:	f9b6 4000 	ldrsh.w	r4, [r6]
 800a682:	42a5      	cmp	r5, r4
 800a684:	db17      	blt.n	800a6b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800a686:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a68a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800a68e:	429a      	cmp	r2, r3
 800a690:	db11      	blt.n	800a6b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800a692:	88b9      	ldrh	r1, [r7, #4]
 800a694:	440d      	add	r5, r1
 800a696:	88b1      	ldrh	r1, [r6, #4]
 800a698:	440c      	add	r4, r1
 800a69a:	b22d      	sxth	r5, r5
 800a69c:	b224      	sxth	r4, r4
 800a69e:	42a5      	cmp	r5, r4
 800a6a0:	dc09      	bgt.n	800a6b6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800a6a2:	88f8      	ldrh	r0, [r7, #6]
 800a6a4:	4410      	add	r0, r2
 800a6a6:	88f2      	ldrh	r2, [r6, #6]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	b200      	sxth	r0, r0
 800a6ac:	b21b      	sxth	r3, r3
 800a6ae:	4298      	cmp	r0, r3
 800a6b0:	bfcc      	ite	gt
 800a6b2:	2000      	movgt	r0, #0
 800a6b4:	2001      	movle	r0, #1
 800a6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4608      	mov	r0, r1
 800a6be:	460d      	mov	r5, r1
 800a6c0:	f7fd febf 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a6c4:	b978      	cbnz	r0, 800a6e6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7fd febb 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a6cc:	f9b5 6000 	ldrsh.w	r6, [r5]
 800a6d0:	b150      	cbz	r0, 800a6e8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800a6d2:	8026      	strh	r6, [r4, #0]
 800a6d4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800a6d8:	8063      	strh	r3, [r4, #2]
 800a6da:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800a6de:	80a3      	strh	r3, [r4, #4]
 800a6e0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800a6e4:	80e3      	strh	r3, [r4, #6]
 800a6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e8:	f9b4 1000 	ldrsh.w	r1, [r4]
 800a6ec:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800a6f0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800a6f4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800a6f8:	88ed      	ldrh	r5, [r5, #6]
 800a6fa:	42b1      	cmp	r1, r6
 800a6fc:	460f      	mov	r7, r1
 800a6fe:	bfa8      	it	ge
 800a700:	4637      	movge	r7, r6
 800a702:	4293      	cmp	r3, r2
 800a704:	4618      	mov	r0, r3
 800a706:	4466      	add	r6, ip
 800a708:	bfa8      	it	ge
 800a70a:	4610      	movge	r0, r2
 800a70c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800a710:	8027      	strh	r7, [r4, #0]
 800a712:	442a      	add	r2, r5
 800a714:	88e5      	ldrh	r5, [r4, #6]
 800a716:	8060      	strh	r0, [r4, #2]
 800a718:	4461      	add	r1, ip
 800a71a:	442b      	add	r3, r5
 800a71c:	b236      	sxth	r6, r6
 800a71e:	b209      	sxth	r1, r1
 800a720:	b212      	sxth	r2, r2
 800a722:	b21b      	sxth	r3, r3
 800a724:	428e      	cmp	r6, r1
 800a726:	bfac      	ite	ge
 800a728:	ebc7 0106 	rsbge	r1, r7, r6
 800a72c:	ebc7 0101 	rsblt	r1, r7, r1
 800a730:	429a      	cmp	r2, r3
 800a732:	bfac      	ite	ge
 800a734:	ebc0 0202 	rsbge	r2, r0, r2
 800a738:	ebc0 0203 	rsblt	r2, r0, r3
 800a73c:	80a1      	strh	r1, [r4, #4]
 800a73e:	80e2      	strh	r2, [r4, #6]
 800a740:	e7d1      	b.n	800a6e6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800a744 <_ZN8touchgfx11Application11getInstanceEv>:
 800a744:	4b01      	ldr	r3, [pc, #4]	@ (800a74c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	20012480 	.word	0x20012480

0800a750 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a752:	4b10      	ldr	r3, [pc, #64]	@ (800a794 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	4605      	mov	r5, r0
 800a758:	b1d3      	cbz	r3, 800a790 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800a75a:	4b0f      	ldr	r3, [pc, #60]	@ (800a798 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800a75c:	4f0f      	ldr	r7, [pc, #60]	@ (800a79c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800a75e:	881c      	ldrh	r4, [r3, #0]
 800a760:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800a764:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800a768:	42a3      	cmp	r3, r4
 800a76a:	d90e      	bls.n	800a78a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a772:	b10a      	cbz	r2, 800a778 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800a774:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a776:	b900      	cbnz	r0, 800a77a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800a778:	6898      	ldr	r0, [r3, #8]
 800a77a:	6803      	ldr	r3, [r0, #0]
 800a77c:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800a780:	69db      	ldr	r3, [r3, #28]
 800a782:	3401      	adds	r4, #1
 800a784:	4798      	blx	r3
 800a786:	b2a4      	uxth	r4, r4
 800a788:	e7ec      	b.n	800a764 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800a78a:	2300      	movs	r3, #0
 800a78c:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800a790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a792:	bf00      	nop
 800a794:	20012432 	.word	0x20012432
 800a798:	20000084 	.word	0x20000084
 800a79c:	20012434 	.word	0x20012434

0800a7a0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800a7a0:	b510      	push	{r4, lr}
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800a7a8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800a7ac:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800a7b6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d90e      	bls.n	800a7dc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800a7be:	18e2      	adds	r2, r4, r3
 800a7c0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800a7c4:	b122      	cbz	r2, 800a7d0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800a7c6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800a7ca:	6803      	ldr	r3, [r0, #0]
 800a7cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ce:	4798      	blx	r3
 800a7d0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800a7da:	e7ea      	b.n	800a7b2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800a7dc:	bd10      	pop	{r4, pc}

0800a7de <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800a7e4:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800a7e8:	30a4      	adds	r0, #164	@ 0xa4
 800a7ea:	f802 3b01 	strb.w	r3, [r2], #1
 800a7ee:	4282      	cmp	r2, r0
 800a7f0:	d1fb      	bne.n	800a7ea <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800a7f2:	4770      	bx	lr

0800a7f4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	4c0b      	ldr	r4, [pc, #44]	@ (800a824 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	6820      	ldr	r0, [r4, #0]
 800a7fc:	460e      	mov	r6, r1
 800a7fe:	b110      	cbz	r0, 800a806 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800a800:	6803      	ldr	r3, [r0, #0]
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	4798      	blx	r3
 800a806:	1d28      	adds	r0, r5, #4
 800a808:	f7ff ffe9 	bl	800a7de <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800a80c:	6026      	str	r6, [r4, #0]
 800a80e:	6833      	ldr	r3, [r6, #0]
 800a810:	4630      	mov	r0, r6
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	4798      	blx	r3
 800a816:	682b      	ldr	r3, [r5, #0]
 800a818:	4628      	mov	r0, r5
 800a81a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a81c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a820:	4718      	bx	r3
 800a822:	bf00      	nop
 800a824:	20012470 	.word	0x20012470

0800a828 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800a828:	2300      	movs	r3, #0
 800a82a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800a82e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800a832:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a834:	461a      	mov	r2, r3
 800a836:	461c      	mov	r4, r3
 800a838:	461d      	mov	r5, r3
 800a83a:	459c      	cmp	ip, r3
 800a83c:	dd1a      	ble.n	800a874 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800a83e:	18c6      	adds	r6, r0, r3
 800a840:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800a844:	b16e      	cbz	r6, 800a862 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800a846:	429a      	cmp	r2, r3
 800a848:	d008      	beq.n	800a85c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800a84a:	fa1f fe82 	uxth.w	lr, r2
 800a84e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800a852:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800a856:	1887      	adds	r7, r0, r2
 800a858:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800a85c:	3201      	adds	r2, #1
 800a85e:	3301      	adds	r3, #1
 800a860:	e7eb      	b.n	800a83a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800a862:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800a866:	4299      	cmp	r1, r3
 800a868:	bfa8      	it	ge
 800a86a:	3501      	addge	r5, #1
 800a86c:	429e      	cmp	r6, r3
 800a86e:	bfc8      	it	gt
 800a870:	3401      	addgt	r4, #1
 800a872:	e7f4      	b.n	800a85e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800a874:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800a878:	1b49      	subs	r1, r1, r5
 800a87a:	1b1b      	subs	r3, r3, r4
 800a87c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800a880:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800a884:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800a888:	4293      	cmp	r3, r2
 800a88a:	dd03      	ble.n	800a894 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800a88c:	3b01      	subs	r3, #1
 800a88e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800a892:	e7f7      	b.n	800a884 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800a894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a898 <_ZN8touchgfx11Application15handleTickEventEv>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	4d16      	ldr	r5, [pc, #88]	@ (800a8f4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800a89c:	4604      	mov	r4, r0
 800a89e:	6828      	ldr	r0, [r5, #0]
 800a8a0:	b140      	cbz	r0, 800a8b4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800a8a2:	7a03      	ldrb	r3, [r0, #8]
 800a8a4:	b933      	cbnz	r3, 800a8b4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800a8a6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800a8aa:	6803      	ldr	r3, [r0, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8b2:	4718      	bx	r3
 800a8b4:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800a8b8:	4e0f      	ldr	r6, [pc, #60]	@ (800a8f8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800a8ba:	b973      	cbnz	r3, 800a8da <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800a8bc:	b168      	cbz	r0, 800a8da <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800a8be:	7a03      	ldrb	r3, [r0, #8]
 800a8c0:	b15b      	cbz	r3, 800a8da <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800a8c2:	6830      	ldr	r0, [r6, #0]
 800a8c4:	b110      	cbz	r0, 800a8cc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800a8c6:	6803      	ldr	r3, [r0, #0]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	4798      	blx	r3
 800a8cc:	6828      	ldr	r0, [r5, #0]
 800a8ce:	6803      	ldr	r3, [r0, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	4798      	blx	r3
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800a8da:	3404      	adds	r4, #4
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f7ff ff5f 	bl	800a7a0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f7ff ffa0 	bl	800a828 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800a8e8:	6830      	ldr	r0, [r6, #0]
 800a8ea:	b110      	cbz	r0, 800a8f2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800a8ec:	6803      	ldr	r3, [r0, #0]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8f0:	e7dd      	b.n	800a8ae <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	20012474 	.word	0x20012474
 800a8f8:	20012470 	.word	0x20012470

0800a8fc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800a902:	2200      	movs	r2, #0
 800a904:	801a      	strh	r2, [r3, #0]
 800a906:	805a      	strh	r2, [r3, #2]
 800a908:	809a      	strh	r2, [r3, #4]
 800a90a:	80da      	strh	r2, [r3, #6]
 800a90c:	3308      	adds	r3, #8
 800a90e:	428b      	cmp	r3, r1
 800a910:	d1f8      	bne.n	800a904 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800a912:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800a916:	4770      	bx	lr

0800a918 <_ZN8touchgfx11ApplicationC1Ev>:
 800a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91a:	4606      	mov	r6, r0
 800a91c:	4b1c      	ldr	r3, [pc, #112]	@ (800a990 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800a91e:	f846 3b04 	str.w	r3, [r6], #4
 800a922:	4604      	mov	r4, r0
 800a924:	2500      	movs	r5, #0
 800a926:	22a8      	movs	r2, #168	@ 0xa8
 800a928:	2100      	movs	r1, #0
 800a92a:	4630      	mov	r0, r6
 800a92c:	f005 fc93 	bl	8010256 <memset>
 800a930:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800a934:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800a938:	f7ff ffe0 	bl	800a8fc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800a93c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800a940:	f7ff ffdc 	bl	800a8fc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800a944:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800a948:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800a94c:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800a950:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800a954:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800a958:	490e      	ldr	r1, [pc, #56]	@ (800a994 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800a95a:	480f      	ldr	r0, [pc, #60]	@ (800a998 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800a95c:	4f0f      	ldr	r7, [pc, #60]	@ (800a99c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800a95e:	f005 f8fd 	bl	800fb5c <CRC_Lock>
 800a962:	4b0f      	ldr	r3, [pc, #60]	@ (800a9a0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800a964:	b158      	cbz	r0, 800a97e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800a966:	801d      	strh	r5, [r3, #0]
 800a968:	4a0e      	ldr	r2, [pc, #56]	@ (800a9a4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800a96a:	2300      	movs	r3, #0
 800a96c:	6013      	str	r3, [r2, #0]
 800a96e:	4a0e      	ldr	r2, [pc, #56]	@ (800a9a8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800a970:	603b      	str	r3, [r7, #0]
 800a972:	4630      	mov	r0, r6
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	f7ff ff32 	bl	800a7de <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800a97a:	4620      	mov	r0, r4
 800a97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a97e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a982:	2002      	movs	r0, #2
 800a984:	801a      	strh	r2, [r3, #0]
 800a986:	6038      	str	r0, [r7, #0]
 800a988:	f001 fa5a 	bl	800be40 <_ZN8touchgfx6Screen4drawEv>
 800a98c:	e7ec      	b.n	800a968 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800a98e:	bf00      	nop
 800a990:	080122f4 	.word	0x080122f4
 800a994:	b5e8b5cd 	.word	0xb5e8b5cd
 800a998:	f407a5c2 	.word	0xf407a5c2
 800a99c:	20012470 	.word	0x20012470
 800a9a0:	20000084 	.word	0x20000084
 800a9a4:	20012480 	.word	0x20012480
 800a9a8:	20012474 	.word	0x20012474

0800a9ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800a9ac:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	428b      	cmp	r3, r1
 800a9b6:	b510      	push	{r4, lr}
 800a9b8:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800a9bc:	d908      	bls.n	800a9d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800a9be:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a9c2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	6062      	str	r2, [r4, #4]
 800a9d0:	bd10      	pop	{r4, pc}
	...

0800a9d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	4b8f      	ldr	r3, [pc, #572]	@ (800ac18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800a9da:	b08f      	sub	sp, #60	@ 0x3c
 800a9dc:	ac0a      	add	r4, sp, #40	@ 0x28
 800a9de:	e884 0006 	stmia.w	r4, {r1, r2}
 800a9e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a9e6:	4b8d      	ldr	r3, [pc, #564]	@ (800ac1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800a9e8:	4683      	mov	fp, r0
 800a9ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f7ff fdeb 	bl	800a5ca <_ZN8touchgfx4Rect10restrictToEss>
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f7fd fd24 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d16a      	bne.n	800aad4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800a9fe:	9403      	str	r4, [sp, #12]
 800aa00:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800aa04:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800aa08:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800aa0c:	35a4      	adds	r5, #164	@ 0xa4
 800aa0e:	9301      	str	r3, [sp, #4]
 800aa10:	b15c      	cbz	r4, 800aa2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800aa12:	4629      	mov	r1, r5
 800aa14:	9803      	ldr	r0, [sp, #12]
 800aa16:	f7ff fe29 	bl	800a66c <_ZNK8touchgfx4Rect8includesERKS0_>
 800aa1a:	3c01      	subs	r4, #1
 800aa1c:	b118      	cbz	r0, 800aa26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800aa1e:	b2a1      	uxth	r1, r4
 800aa20:	9801      	ldr	r0, [sp, #4]
 800aa22:	f7ff ffc3 	bl	800a9ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800aa26:	3d08      	subs	r5, #8
 800aa28:	e7f2      	b.n	800aa10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800aa2a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800aa2e:	f8cd a010 	str.w	sl, [sp, #16]
 800aa32:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aa36:	9302      	str	r3, [sp, #8]
 800aa38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800aa3c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800aa40:	9306      	str	r3, [sp, #24]
 800aa42:	445c      	add	r4, fp
 800aa44:	2500      	movs	r5, #0
 800aa46:	4626      	mov	r6, r4
 800aa48:	f8cd a014 	str.w	sl, [sp, #20]
 800aa4c:	462f      	mov	r7, r5
 800aa4e:	9b05      	ldr	r3, [sp, #20]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d073      	beq.n	800ab3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800aa54:	9903      	ldr	r1, [sp, #12]
 800aa56:	4630      	mov	r0, r6
 800aa58:	f7ff fd95 	bl	800a586 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800aa5c:	b350      	cbz	r0, 800aab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800aa5e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800aa62:	f9b6 c000 	ldrsh.w	ip, [r6]
 800aa66:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800aa6a:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800aa6e:	45e6      	cmp	lr, ip
 800aa70:	db33      	blt.n	800aada <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800aa72:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800aa76:	88b3      	ldrh	r3, [r6, #4]
 800aa78:	4472      	add	r2, lr
 800aa7a:	4463      	add	r3, ip
 800aa7c:	b212      	sxth	r2, r2
 800aa7e:	b21b      	sxth	r3, r3
 800aa80:	429a      	cmp	r2, r3
 800aa82:	dc2a      	bgt.n	800aada <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800aa84:	88f3      	ldrh	r3, [r6, #6]
 800aa86:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800aa8a:	fa1f f289 	uxth.w	r2, r9
 800aa8e:	4413      	add	r3, r2
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	45c8      	cmp	r8, r9
 800aa94:	fa1f fc88 	uxth.w	ip, r8
 800aa98:	fa0f fe83 	sxth.w	lr, r3
 800aa9c:	db0f      	blt.n	800aabe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800aa9e:	eba3 030c 	sub.w	r3, r3, ip
 800aaa2:	1ac9      	subs	r1, r1, r3
 800aaa4:	b209      	sxth	r1, r1
 800aaa6:	2900      	cmp	r1, #0
 800aaa8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800aaac:	dd12      	ble.n	800aad4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800aaae:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800aab2:	4605      	mov	r5, r0
 800aab4:	9b05      	ldr	r3, [sp, #20]
 800aab6:	3b01      	subs	r3, #1
 800aab8:	9305      	str	r3, [sp, #20]
 800aaba:	3e08      	subs	r6, #8
 800aabc:	e7c7      	b.n	800aa4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800aabe:	4461      	add	r1, ip
 800aac0:	b209      	sxth	r1, r1
 800aac2:	4571      	cmp	r1, lr
 800aac4:	dc38      	bgt.n	800ab38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800aac6:	eba2 020c 	sub.w	r2, r2, ip
 800aaca:	b212      	sxth	r2, r2
 800aacc:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800aad0:	2a00      	cmp	r2, #0
 800aad2:	dcee      	bgt.n	800aab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800aad4:	b00f      	add	sp, #60	@ 0x3c
 800aad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aada:	45c8      	cmp	r8, r9
 800aadc:	db2c      	blt.n	800ab38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800aade:	88f3      	ldrh	r3, [r6, #6]
 800aae0:	4499      	add	r9, r3
 800aae2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800aae6:	4498      	add	r8, r3
 800aae8:	fa0f f989 	sxth.w	r9, r9
 800aaec:	fa0f f888 	sxth.w	r8, r8
 800aaf0:	45c1      	cmp	r9, r8
 800aaf2:	db21      	blt.n	800ab38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800aaf4:	88b3      	ldrh	r3, [r6, #4]
 800aaf6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800aafa:	fa1f f28c 	uxth.w	r2, ip
 800aafe:	4413      	add	r3, r2
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	45e6      	cmp	lr, ip
 800ab04:	fa1f f88e 	uxth.w	r8, lr
 800ab08:	fa0f f983 	sxth.w	r9, r3
 800ab0c:	db0a      	blt.n	800ab24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800ab0e:	eba3 0308 	sub.w	r3, r3, r8
 800ab12:	1ac9      	subs	r1, r1, r3
 800ab14:	b209      	sxth	r1, r1
 800ab16:	2900      	cmp	r1, #0
 800ab18:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800ab1c:	ddda      	ble.n	800aad4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800ab1e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800ab22:	e7c6      	b.n	800aab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800ab24:	4441      	add	r1, r8
 800ab26:	b209      	sxth	r1, r1
 800ab28:	4549      	cmp	r1, r9
 800ab2a:	dc05      	bgt.n	800ab38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800ab2c:	eba2 0208 	sub.w	r2, r2, r8
 800ab30:	b212      	sxth	r2, r2
 800ab32:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800ab36:	e7cb      	b.n	800aad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800ab38:	4607      	mov	r7, r0
 800ab3a:	e7bb      	b.n	800aab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800ab3c:	2d00      	cmp	r5, #0
 800ab3e:	d181      	bne.n	800aa44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800ab40:	2f00      	cmp	r7, #0
 800ab42:	f000 81dd 	beq.w	800af00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800ab46:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800ab4a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800ab4e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800ab52:	b2b3      	uxth	r3, r6
 800ab54:	9305      	str	r3, [sp, #20]
 800ab56:	9a05      	ldr	r2, [sp, #20]
 800ab58:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800ab5c:	4413      	add	r3, r2
 800ab5e:	b2ba      	uxth	r2, r7
 800ab60:	4492      	add	sl, r2
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	fa1f fa8a 	uxth.w	sl, sl
 800ab68:	fa0f f883 	sxth.w	r8, r3
 800ab6c:	fa0f f98a 	sxth.w	r9, sl
 800ab70:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800ab74:	9b04      	ldr	r3, [sp, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d052      	beq.n	800ac20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800ab7a:	9903      	ldr	r1, [sp, #12]
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7ff fd02 	bl	800a586 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800ab82:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ab86:	b1c0      	cbz	r0, 800abba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800ab88:	f9b4 e000 	ldrsh.w	lr, [r4]
 800ab8c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ab90:	4576      	cmp	r6, lr
 800ab92:	dc22      	bgt.n	800abda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800ab94:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800ab98:	44f4      	add	ip, lr
 800ab9a:	fa0f fc8c 	sxth.w	ip, ip
 800ab9e:	45e0      	cmp	r8, ip
 800aba0:	db1b      	blt.n	800abda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800aba2:	428f      	cmp	r7, r1
 800aba4:	fa1f fc81 	uxth.w	ip, r1
 800aba8:	88e1      	ldrh	r1, [r4, #6]
 800abaa:	dc0d      	bgt.n	800abc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800abac:	ebaa 0c0c 	sub.w	ip, sl, ip
 800abb0:	eba1 010c 	sub.w	r1, r1, ip
 800abb4:	f8a4 9002 	strh.w	r9, [r4, #2]
 800abb8:	80e1      	strh	r1, [r4, #6]
 800abba:	4628      	mov	r0, r5
 800abbc:	9904      	ldr	r1, [sp, #16]
 800abbe:	3901      	subs	r1, #1
 800abc0:	9104      	str	r1, [sp, #16]
 800abc2:	3c08      	subs	r4, #8
 800abc4:	4605      	mov	r5, r0
 800abc6:	e7d3      	b.n	800ab70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800abc8:	4461      	add	r1, ip
 800abca:	b209      	sxth	r1, r1
 800abcc:	4549      	cmp	r1, r9
 800abce:	dcf5      	bgt.n	800abbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800abd0:	eba2 0c0c 	sub.w	ip, r2, ip
 800abd4:	f8a4 c006 	strh.w	ip, [r4, #6]
 800abd8:	e7ef      	b.n	800abba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800abda:	428f      	cmp	r7, r1
 800abdc:	dcee      	bgt.n	800abbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800abde:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800abe2:	4461      	add	r1, ip
 800abe4:	b209      	sxth	r1, r1
 800abe6:	4589      	cmp	r9, r1
 800abe8:	dbe8      	blt.n	800abbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800abea:	4576      	cmp	r6, lr
 800abec:	fa1f fc8e 	uxth.w	ip, lr
 800abf0:	88a1      	ldrh	r1, [r4, #4]
 800abf2:	dc07      	bgt.n	800ac04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800abf4:	eba3 0c0c 	sub.w	ip, r3, ip
 800abf8:	eba1 010c 	sub.w	r1, r1, ip
 800abfc:	f8a4 8000 	strh.w	r8, [r4]
 800ac00:	80a1      	strh	r1, [r4, #4]
 800ac02:	e7da      	b.n	800abba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800ac04:	4461      	add	r1, ip
 800ac06:	b209      	sxth	r1, r1
 800ac08:	4588      	cmp	r8, r1
 800ac0a:	dbd7      	blt.n	800abbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800ac0c:	9905      	ldr	r1, [sp, #20]
 800ac0e:	eba1 0c0c 	sub.w	ip, r1, ip
 800ac12:	f8a4 c004 	strh.w	ip, [r4, #4]
 800ac16:	e7d0      	b.n	800abba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800ac18:	2001242a 	.word	0x2001242a
 800ac1c:	20012428 	.word	0x20012428
 800ac20:	2d00      	cmp	r5, #0
 800ac22:	f000 816d 	beq.w	800af00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800ac26:	9b06      	ldr	r3, [sp, #24]
 800ac28:	445b      	add	r3, fp
 800ac2a:	461c      	mov	r4, r3
 800ac2c:	9b02      	ldr	r3, [sp, #8]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	f000 8166 	beq.w	800af00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800ac34:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800ac38:	4629      	mov	r1, r5
 800ac3a:	9803      	ldr	r0, [sp, #12]
 800ac3c:	f7ff fd16 	bl	800a66c <_ZNK8touchgfx4Rect8includesERKS0_>
 800ac40:	b120      	cbz	r0, 800ac4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800ac42:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800ac46:	9801      	ldr	r0, [sp, #4]
 800ac48:	f7ff feb0 	bl	800a9ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ac4c:	9903      	ldr	r1, [sp, #12]
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f7ff fc99 	bl	800a586 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	f000 809c 	beq.w	800ad92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800ac5a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800ac5e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800ac62:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800ac66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac68:	fa1f f189 	uxth.w	r1, r9
 800ac6c:	eb01 0c03 	add.w	ip, r1, r3
 800ac70:	fa1f fa8c 	uxth.w	sl, ip
 800ac74:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800ac78:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800ac7c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800ac80:	b283      	uxth	r3, r0
 800ac82:	eb03 050c 	add.w	r5, r3, ip
 800ac86:	b2ad      	uxth	r5, r5
 800ac88:	9505      	str	r5, [sp, #20]
 800ac8a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800ac8e:	9504      	str	r5, [sp, #16]
 800ac90:	4548      	cmp	r0, r9
 800ac92:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800ac96:	f340 8099 	ble.w	800adcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800ac9a:	1a5b      	subs	r3, r3, r1
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	4596      	cmp	lr, r2
 800aca0:	fa0f f08a 	sxth.w	r0, sl
 800aca4:	b21e      	sxth	r6, r3
 800aca6:	dd2e      	ble.n	800ad06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800aca8:	9f02      	ldr	r7, [sp, #8]
 800acaa:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800acae:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800acb2:	9f04      	ldr	r7, [sp, #16]
 800acb4:	1a3f      	subs	r7, r7, r0
 800acb6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800acba:	fa1f fe8e 	uxth.w	lr, lr
 800acbe:	b292      	uxth	r2, r2
 800acc0:	ebae 0102 	sub.w	r1, lr, r2
 800acc4:	44a6      	add	lr, r4
 800acc6:	4402      	add	r2, r0
 800acc8:	b289      	uxth	r1, r1
 800acca:	fa0f fe8e 	sxth.w	lr, lr
 800acce:	b212      	sxth	r2, r2
 800acd0:	b20d      	sxth	r5, r1
 800acd2:	ebae 0202 	sub.w	r2, lr, r2
 800acd6:	436f      	muls	r7, r5
 800acd8:	4372      	muls	r2, r6
 800acda:	4297      	cmp	r7, r2
 800acdc:	db09      	blt.n	800acf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800acde:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800ace2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800ace6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800acea:	449c      	add	ip, r3
 800acec:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800acf0:	e686      	b.n	800aa00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800acf2:	4421      	add	r1, r4
 800acf4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800acf8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800acfc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800ad00:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800ad04:	e67c      	b.n	800aa00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ad06:	9f04      	ldr	r7, [sp, #16]
 800ad08:	42b8      	cmp	r0, r7
 800ad0a:	da27      	bge.n	800ad5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800ad0c:	9902      	ldr	r1, [sp, #8]
 800ad0e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800ad12:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800ad16:	eb05 010e 	add.w	r1, r5, lr
 800ad1a:	fa1f f881 	uxth.w	r8, r1
 800ad1e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800ad22:	4411      	add	r1, r2
 800ad24:	eba1 0108 	sub.w	r1, r1, r8
 800ad28:	b289      	uxth	r1, r1
 800ad2a:	fa0f f988 	sxth.w	r9, r8
 800ad2e:	eba2 020e 	sub.w	r2, r2, lr
 800ad32:	fa0f f881 	sxth.w	r8, r1
 800ad36:	1a3f      	subs	r7, r7, r0
 800ad38:	4372      	muls	r2, r6
 800ad3a:	fb08 f707 	mul.w	r7, r8, r7
 800ad3e:	42ba      	cmp	r2, r7
 800ad40:	dc06      	bgt.n	800ad50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800ad42:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800ad46:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800ad4a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800ad4e:	e7ca      	b.n	800ace6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800ad50:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800ad54:	4429      	add	r1, r5
 800ad56:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800ad5a:	e651      	b.n	800aa00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ad5c:	9805      	ldr	r0, [sp, #20]
 800ad5e:	ebaa 0000 	sub.w	r0, sl, r0
 800ad62:	b280      	uxth	r0, r0
 800ad64:	2d06      	cmp	r5, #6
 800ad66:	fa0f fe80 	sxth.w	lr, r0
 800ad6a:	d817      	bhi.n	800ad9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800ad6c:	9b04      	ldr	r3, [sp, #16]
 800ad6e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800ad72:	1c6b      	adds	r3, r5, #1
 800ad74:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800ad78:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800ad7c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800ad80:	9b01      	ldr	r3, [sp, #4]
 800ad82:	9801      	ldr	r0, [sp, #4]
 800ad84:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ad88:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800ad8c:	805a      	strh	r2, [r3, #2]
 800ad8e:	809e      	strh	r6, [r3, #4]
 800ad90:	80d9      	strh	r1, [r3, #6]
 800ad92:	9b02      	ldr	r3, [sp, #8]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	9302      	str	r3, [sp, #8]
 800ad98:	3c08      	subs	r4, #8
 800ad9a:	e747      	b.n	800ac2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800ad9c:	9a02      	ldr	r2, [sp, #8]
 800ad9e:	45b6      	cmp	lr, r6
 800ada0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800ada4:	db0d      	blt.n	800adc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800ada6:	449c      	add	ip, r3
 800ada8:	fa1f fc8c 	uxth.w	ip, ip
 800adac:	445a      	add	r2, fp
 800adae:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800adb2:	448c      	add	ip, r1
 800adb4:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800adb8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800adbc:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800adc0:	e61e      	b.n	800aa00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800adc2:	445a      	add	r2, fp
 800adc4:	4484      	add	ip, r0
 800adc6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800adca:	e78f      	b.n	800acec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800adcc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800add0:	fa1f f18e 	uxth.w	r1, lr
 800add4:	eb01 0806 	add.w	r8, r1, r6
 800add8:	b293      	uxth	r3, r2
 800adda:	fa1f f888 	uxth.w	r8, r8
 800adde:	9306      	str	r3, [sp, #24]
 800ade0:	fa0f f388 	sxth.w	r3, r8
 800ade4:	9307      	str	r3, [sp, #28]
 800ade6:	9f06      	ldr	r7, [sp, #24]
 800ade8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800adec:	443b      	add	r3, r7
 800adee:	b29b      	uxth	r3, r3
 800adf0:	4596      	cmp	lr, r2
 800adf2:	9308      	str	r3, [sp, #32]
 800adf4:	da24      	bge.n	800ae40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800adf6:	9905      	ldr	r1, [sp, #20]
 800adf8:	eba3 0308 	sub.w	r3, r3, r8
 800adfc:	ebaa 0401 	sub.w	r4, sl, r1
 800ae00:	b2a4      	uxth	r4, r4
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	b225      	sxth	r5, r4
 800ae06:	b219      	sxth	r1, r3
 800ae08:	eba2 020e 	sub.w	r2, r2, lr
 800ae0c:	eba9 0000 	sub.w	r0, r9, r0
 800ae10:	436a      	muls	r2, r5
 800ae12:	4348      	muls	r0, r1
 800ae14:	4282      	cmp	r2, r0
 800ae16:	9a02      	ldr	r2, [sp, #8]
 800ae18:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800ae1c:	445a      	add	r2, fp
 800ae1e:	dc06      	bgt.n	800ae2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800ae20:	9b07      	ldr	r3, [sp, #28]
 800ae22:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800ae26:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800ae2a:	44a4      	add	ip, r4
 800ae2c:	e75e      	b.n	800acec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800ae2e:	9904      	ldr	r1, [sp, #16]
 800ae30:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800ae34:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800ae38:	4433      	add	r3, r6
 800ae3a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800ae3e:	e5df      	b.n	800aa00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ae40:	9f06      	ldr	r7, [sp, #24]
 800ae42:	9b04      	ldr	r3, [sp, #16]
 800ae44:	1bc9      	subs	r1, r1, r7
 800ae46:	fa0f f78a 	sxth.w	r7, sl
 800ae4a:	b289      	uxth	r1, r1
 800ae4c:	429f      	cmp	r7, r3
 800ae4e:	fa0f fe81 	sxth.w	lr, r1
 800ae52:	dd23      	ble.n	800ae9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800ae54:	9a05      	ldr	r2, [sp, #20]
 800ae56:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800ae5a:	9d07      	ldr	r5, [sp, #28]
 800ae5c:	ebaa 0202 	sub.w	r2, sl, r2
 800ae60:	b292      	uxth	r2, r2
 800ae62:	eba5 0a03 	sub.w	sl, r5, r3
 800ae66:	b214      	sxth	r4, r2
 800ae68:	eba9 0000 	sub.w	r0, r9, r0
 800ae6c:	9b02      	ldr	r3, [sp, #8]
 800ae6e:	fb0e f000 	mul.w	r0, lr, r0
 800ae72:	fb04 fa0a 	mul.w	sl, r4, sl
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	4550      	cmp	r0, sl
 800ae7a:	445b      	add	r3, fp
 800ae7c:	db03      	blt.n	800ae86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800ae7e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800ae82:	4494      	add	ip, r2
 800ae84:	e732      	b.n	800acec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800ae86:	9a04      	ldr	r2, [sp, #16]
 800ae88:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800ae8c:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800ae90:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800ae94:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800ae98:	4431      	add	r1, r6
 800ae9a:	e75c      	b.n	800ad56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800ae9c:	9b08      	ldr	r3, [sp, #32]
 800ae9e:	eba3 0308 	sub.w	r3, r3, r8
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	2d06      	cmp	r5, #6
 800aea6:	b218      	sxth	r0, r3
 800aea8:	d813      	bhi.n	800aed2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800aeaa:	9b07      	ldr	r3, [sp, #28]
 800aeac:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800aeb0:	1c6b      	adds	r3, r5, #1
 800aeb2:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800aeb6:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800aeba:	9b01      	ldr	r3, [sp, #4]
 800aebc:	9901      	ldr	r1, [sp, #4]
 800aebe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aec2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800aec6:	805a      	strh	r2, [r3, #2]
 800aec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aeca:	809a      	strh	r2, [r3, #4]
 800aecc:	f8a3 e006 	strh.w	lr, [r3, #6]
 800aed0:	e75f      	b.n	800ad92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800aed2:	9c02      	ldr	r4, [sp, #8]
 800aed4:	4570      	cmp	r0, lr
 800aed6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800aeda:	db0d      	blt.n	800aef8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800aedc:	4431      	add	r1, r6
 800aede:	9b06      	ldr	r3, [sp, #24]
 800aee0:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800aee4:	b289      	uxth	r1, r1
 800aee6:	445c      	add	r4, fp
 800aee8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800aeec:	4419      	add	r1, r3
 800aeee:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800aef2:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800aef6:	e583      	b.n	800aa00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800aef8:	445c      	add	r4, fp
 800aefa:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800aefe:	e79b      	b.n	800ae38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800af00:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800af04:	1e65      	subs	r5, r4, #1
 800af06:	b2ad      	uxth	r5, r5
 800af08:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800af0c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800af10:	42b5      	cmp	r5, r6
 800af12:	d044      	beq.n	800af9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800af14:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800af18:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800af1c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800af20:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800af24:	4282      	cmp	r2, r0
 800af26:	d11f      	bne.n	800af68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800af28:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800af2c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800af30:	459c      	cmp	ip, r3
 800af32:	d119      	bne.n	800af68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800af34:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800af38:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800af3c:	19d8      	adds	r0, r3, r7
 800af3e:	b200      	sxth	r0, r0
 800af40:	4288      	cmp	r0, r1
 800af42:	d109      	bne.n	800af58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800af44:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800af48:	4413      	add	r3, r2
 800af4a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800af4e:	4629      	mov	r1, r5
 800af50:	9801      	ldr	r0, [sp, #4]
 800af52:	f7ff fd2b 	bl	800a9ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800af56:	e003      	b.n	800af60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800af58:	4411      	add	r1, r2
 800af5a:	b209      	sxth	r1, r1
 800af5c:	42b9      	cmp	r1, r7
 800af5e:	d0f3      	beq.n	800af48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800af60:	3d01      	subs	r5, #1
 800af62:	b2ad      	uxth	r5, r5
 800af64:	3c08      	subs	r4, #8
 800af66:	e7d3      	b.n	800af10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800af68:	42b9      	cmp	r1, r7
 800af6a:	d1f9      	bne.n	800af60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800af6c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800af70:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800af74:	4299      	cmp	r1, r3
 800af76:	d1f3      	bne.n	800af60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800af78:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800af7c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800af80:	181f      	adds	r7, r3, r0
 800af82:	b23f      	sxth	r7, r7
 800af84:	42ba      	cmp	r2, r7
 800af86:	d105      	bne.n	800af94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800af88:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800af8c:	440b      	add	r3, r1
 800af8e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800af92:	e7dc      	b.n	800af4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800af94:	440a      	add	r2, r1
 800af96:	b212      	sxth	r2, r2
 800af98:	4290      	cmp	r0, r2
 800af9a:	d1e1      	bne.n	800af60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800af9c:	e7f6      	b.n	800af8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800af9e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800afa2:	2e07      	cmp	r6, #7
 800afa4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800afa8:	d812      	bhi.n	800afd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800afaa:	1c75      	adds	r5, r6, #1
 800afac:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800afb0:	9d01      	ldr	r5, [sp, #4]
 800afb2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800afb6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800afba:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800afbe:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800afc2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800afc6:	442c      	add	r4, r5
 800afc8:	8061      	strh	r1, [r4, #2]
 800afca:	80a2      	strh	r2, [r4, #4]
 800afcc:	80e3      	strh	r3, [r4, #6]
 800afce:	e581      	b.n	800aad4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800afd0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800afd4:	3e01      	subs	r6, #1
 800afd6:	445c      	add	r4, fp
 800afd8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800afdc:	f04f 37ff 	mov.w	r7, #4294967295
 800afe0:	2500      	movs	r5, #0
 800afe2:	9305      	str	r3, [sp, #20]
 800afe4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800afe8:	9302      	str	r3, [sp, #8]
 800afea:	1e72      	subs	r2, r6, #1
 800afec:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	4691      	mov	r9, r2
 800aff4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800aff8:	f1b9 3fff 	cmp.w	r9, #4294967295
 800affc:	bf14      	ite	ne
 800affe:	9905      	ldrne	r1, [sp, #20]
 800b000:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800b004:	6818      	ldr	r0, [r3, #0]
 800b006:	9207      	str	r2, [sp, #28]
 800b008:	bf18      	it	ne
 800b00a:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800b00e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b012:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800b016:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800b01a:	9306      	str	r3, [sp, #24]
 800b01c:	fb18 f801 	smulbb	r8, r8, r1
 800b020:	6859      	ldr	r1, [r3, #4]
 800b022:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800b026:	4671      	mov	r1, lr
 800b028:	a80c      	add	r0, sp, #48	@ 0x30
 800b02a:	f7ff fb45 	bl	800a6b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800b02e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800b032:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800b036:	9b04      	ldr	r3, [sp, #16]
 800b038:	9a02      	ldr	r2, [sp, #8]
 800b03a:	fb10 f001 	smulbb	r0, r0, r1
 800b03e:	fb02 8803 	mla	r8, r2, r3, r8
 800b042:	eba0 0108 	sub.w	r1, r0, r8
 800b046:	f04f 0c08 	mov.w	ip, #8
 800b04a:	fb90 f0fc 	sdiv	r0, r0, ip
 800b04e:	4288      	cmp	r0, r1
 800b050:	dc20      	bgt.n	800b094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800b052:	4551      	cmp	r1, sl
 800b054:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b058:	da03      	bge.n	800b062 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 800b05a:	b1d9      	cbz	r1, 800b094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800b05c:	468a      	mov	sl, r1
 800b05e:	464f      	mov	r7, r9
 800b060:	4635      	mov	r5, r6
 800b062:	f109 39ff 	add.w	r9, r9, #4294967295
 800b066:	f119 0f02 	cmn.w	r9, #2
 800b06a:	d1c5      	bne.n	800aff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800b06c:	4616      	mov	r6, r2
 800b06e:	3201      	adds	r2, #1
 800b070:	f1a4 0408 	sub.w	r4, r4, #8
 800b074:	d1b6      	bne.n	800afe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800b076:	9b01      	ldr	r3, [sp, #4]
 800b078:	b2ac      	uxth	r4, r5
 800b07a:	00ed      	lsls	r5, r5, #3
 800b07c:	1958      	adds	r0, r3, r5
 800b07e:	1c7b      	adds	r3, r7, #1
 800b080:	d10b      	bne.n	800b09a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800b082:	4601      	mov	r1, r0
 800b084:	9803      	ldr	r0, [sp, #12]
 800b086:	f7ff fb17 	bl	800a6b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800b08a:	4621      	mov	r1, r4
 800b08c:	9801      	ldr	r0, [sp, #4]
 800b08e:	f7ff fc8d 	bl	800a9ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800b092:	e4b5      	b.n	800aa00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800b094:	464f      	mov	r7, r9
 800b096:	4635      	mov	r5, r6
 800b098:	e7ed      	b.n	800b076 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800b09a:	9b01      	ldr	r3, [sp, #4]
 800b09c:	00ff      	lsls	r7, r7, #3
 800b09e:	19d9      	adds	r1, r3, r7
 800b0a0:	f7ff fb0a 	bl	800a6b8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	cb03      	ldmia	r3!, {r0, r1}
 800b0a8:	445f      	add	r7, fp
 800b0aa:	445d      	add	r5, fp
 800b0ac:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800b0b0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800b0b4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800b0b8:	9b03      	ldr	r3, [sp, #12]
 800b0ba:	6869      	ldr	r1, [r5, #4]
 800b0bc:	c303      	stmia	r3!, {r0, r1}
 800b0be:	e7e4      	b.n	800b08a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0800b0c0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800b0c8:	b09b      	sub	sp, #108	@ 0x6c
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7fd f9b8 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	b948      	cbnz	r0, 800b0ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4798      	blx	r3
 800b0e2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800b0e6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800b0ea:	4bc6      	ldr	r3, [pc, #792]	@ (800b404 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d03f      	beq.n	800b172 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800b0f2:	4dc5      	ldr	r5, [pc, #788]	@ (800b408 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	f7fd f9a4 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d138      	bne.n	800b172 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800b100:	4628      	mov	r0, r5
 800b102:	f7ff f96d 	bl	800a3e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	6829      	ldr	r1, [r5, #0]
 800b10a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b10c:	686a      	ldr	r2, [r5, #4]
 800b10e:	4620      	mov	r0, r4
 800b110:	4798      	blx	r3
 800b112:	802e      	strh	r6, [r5, #0]
 800b114:	806e      	strh	r6, [r5, #2]
 800b116:	80ae      	strh	r6, [r5, #4]
 800b118:	80ee      	strh	r6, [r5, #6]
 800b11a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800b11e:	4dbb      	ldr	r5, [pc, #748]	@ (800b40c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800b120:	4640      	mov	r0, r8
 800b122:	f7ff fbeb 	bl	800a8fc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800b126:	882e      	ldrh	r6, [r5, #0]
 800b128:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800b12c:	4633      	mov	r3, r6
 800b12e:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800b132:	42bb      	cmp	r3, r7
 800b134:	d224      	bcs.n	800b180 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800b136:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800b13a:	2907      	cmp	r1, #7
 800b13c:	d816      	bhi.n	800b16c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800b13e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800b142:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800b146:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800b14a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800b14e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800b152:	1c4a      	adds	r2, r1, #1
 800b154:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800b158:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800b15c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800b160:	f8a2 a002 	strh.w	sl, [r2, #2]
 800b164:	f8a2 e004 	strh.w	lr, [r2, #4]
 800b168:	f8a2 c006 	strh.w	ip, [r2, #6]
 800b16c:	3301      	adds	r3, #1
 800b16e:	b29b      	uxth	r3, r3
 800b170:	e7df      	b.n	800b132 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800b172:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1cf      	bne.n	800b11a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800b17a:	b01b      	add	sp, #108	@ 0x6c
 800b17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b180:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800b184:	42b3      	cmp	r3, r6
 800b186:	d90c      	bls.n	800b1a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800b188:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800b18c:	6822      	ldr	r2, [r4, #0]
 800b18e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800b192:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800b194:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800b198:	4620      	mov	r0, r4
 800b19a:	3601      	adds	r6, #1
 800b19c:	47b8      	blx	r7
 800b19e:	b2b6      	uxth	r6, r6
 800b1a0:	e7ee      	b.n	800b180 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800b1a2:	4a9b      	ldr	r2, [pc, #620]	@ (800b410 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800b1a4:	6813      	ldr	r3, [r2, #0]
 800b1a6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	4691      	mov	r9, r2
 800b1ae:	f040 80e2 	bne.w	800b376 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800b1b2:	8829      	ldrh	r1, [r5, #0]
 800b1b4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800b1b8:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800b1bc:	33ae      	adds	r3, #174	@ 0xae
 800b1be:	2600      	movs	r6, #0
 800b1c0:	428f      	cmp	r7, r1
 800b1c2:	f103 0308 	add.w	r3, r3, #8
 800b1c6:	dd0a      	ble.n	800b1de <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800b1c8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800b1cc:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800b1d0:	4402      	add	r2, r0
 800b1d2:	b212      	sxth	r2, r2
 800b1d4:	4296      	cmp	r6, r2
 800b1d6:	bfb8      	it	lt
 800b1d8:	4616      	movlt	r6, r2
 800b1da:	3101      	adds	r1, #1
 800b1dc:	e7f0      	b.n	800b1c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800b1de:	4b8d      	ldr	r3, [pc, #564]	@ (800b414 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800b1e0:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800b410 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	2b0f      	cmp	r3, #15
 800b1e8:	bf88      	it	hi
 800b1ea:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800b1ee:	f04f 0300 	mov.w	r3, #0
 800b1f2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b1f6:	bf98      	it	ls
 800b1f8:	f04f 0b01 	movls.w	fp, #1
 800b1fc:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800b200:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800b204:	4b82      	ldr	r3, [pc, #520]	@ (800b410 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800b206:	4438      	add	r0, r7
 800b208:	b207      	sxth	r7, r0
 800b20a:	6818      	ldr	r0, [r3, #0]
 800b20c:	42b7      	cmp	r7, r6
 800b20e:	6803      	ldr	r3, [r0, #0]
 800b210:	f280 8083 	bge.w	800b31a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800b214:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b218:	4798      	blx	r3
 800b21a:	eb07 030b 	add.w	r3, r7, fp
 800b21e:	4298      	cmp	r0, r3
 800b220:	da07      	bge.n	800b232 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800b222:	42b0      	cmp	r0, r6
 800b224:	da05      	bge.n	800b232 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800b226:	4287      	cmp	r7, r0
 800b228:	dd6c      	ble.n	800b304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800b22a:	2f00      	cmp	r7, #0
 800b22c:	dd6a      	ble.n	800b304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800b22e:	4630      	mov	r0, r6
 800b230:	e004      	b.n	800b23c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 800b232:	4287      	cmp	r7, r0
 800b234:	dcfb      	bgt.n	800b22e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800b236:	42b0      	cmp	r0, r6
 800b238:	bfa8      	it	ge
 800b23a:	4630      	movge	r0, r6
 800b23c:	4b76      	ldr	r3, [pc, #472]	@ (800b418 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800b23e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800b242:	1bc0      	subs	r0, r0, r7
 800b244:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b248:	882f      	ldrh	r7, [r5, #0]
 800b24a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b24e:	2200      	movs	r2, #0
 800b250:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b254:	f8ad 001a 	strh.w	r0, [sp, #26]
 800b258:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800b25c:	42bb      	cmp	r3, r7
 800b25e:	d9cd      	bls.n	800b1fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800b260:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800b264:	ab07      	add	r3, sp, #28
 800b266:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800b26a:	6851      	ldr	r1, [r2, #4]
 800b26c:	c303      	stmia	r3!, {r0, r1}
 800b26e:	a905      	add	r1, sp, #20
 800b270:	a807      	add	r0, sp, #28
 800b272:	f7ff f988 	bl	800a586 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800b276:	2800      	cmp	r0, #0
 800b278:	d04c      	beq.n	800b314 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800b27a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800b27e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800b282:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800b286:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800b28a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800b28e:	9302      	str	r3, [sp, #8]
 800b290:	4686      	mov	lr, r0
 800b292:	4290      	cmp	r0, r2
 800b294:	4450      	add	r0, sl
 800b296:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800b29a:	bfb8      	it	lt
 800b29c:	4696      	movlt	lr, r2
 800b29e:	4452      	add	r2, sl
 800b2a0:	4299      	cmp	r1, r3
 800b2a2:	b280      	uxth	r0, r0
 800b2a4:	b292      	uxth	r2, r2
 800b2a6:	468c      	mov	ip, r1
 800b2a8:	fa0f fa82 	sxth.w	sl, r2
 800b2ac:	bfb8      	it	lt
 800b2ae:	469c      	movlt	ip, r3
 800b2b0:	b203      	sxth	r3, r0
 800b2b2:	4553      	cmp	r3, sl
 800b2b4:	bfb8      	it	lt
 800b2b6:	4602      	movlt	r2, r0
 800b2b8:	eba2 020e 	sub.w	r2, r2, lr
 800b2bc:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b2c0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800b2c4:	9b02      	ldr	r3, [sp, #8]
 800b2c6:	f8ad e01c 	strh.w	lr, [sp, #28]
 800b2ca:	4411      	add	r1, r2
 800b2cc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800b2d0:	f8ad c01e 	strh.w	ip, [sp, #30]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	b289      	uxth	r1, r1
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	b208      	sxth	r0, r1
 800b2dc:	b21a      	sxth	r2, r3
 800b2de:	4290      	cmp	r0, r2
 800b2e0:	bfb8      	it	lt
 800b2e2:	460b      	movlt	r3, r1
 800b2e4:	eba3 030c 	sub.w	r3, r3, ip
 800b2e8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800b2ec:	a807      	add	r0, sp, #28
 800b2ee:	f7fd f8a8 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b2f2:	b920      	cbnz	r0, 800b2fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	a907      	add	r1, sp, #28
 800b2f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	4798      	blx	r3
 800b2fe:	3701      	adds	r7, #1
 800b300:	b2bf      	uxth	r7, r7
 800b302:	e7a9      	b.n	800b258 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800b304:	f8d9 0000 	ldr.w	r0, [r9]
 800b308:	6803      	ldr	r3, [r0, #0]
 800b30a:	2101      	movs	r1, #1
 800b30c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b310:	4798      	blx	r3
 800b312:	e773      	b.n	800b1fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800b314:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800b318:	e7e8      	b.n	800b2ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800b31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b31c:	4798      	blx	r3
 800b31e:	4b3f      	ldr	r3, [pc, #252]	@ (800b41c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	f43f af29 	beq.w	800b17a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800b328:	2300      	movs	r3, #0
 800b32a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800b32e:	882b      	ldrh	r3, [r5, #0]
 800b330:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800b334:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800b338:	42ab      	cmp	r3, r5
 800b33a:	f4bf af1e 	bcs.w	800b17a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800b33e:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800b342:	2907      	cmp	r1, #7
 800b344:	d814      	bhi.n	800b370 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800b346:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800b34a:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 800b34e:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800b352:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 800b356:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 800b35a:	1c4a      	adds	r2, r1, #1
 800b35c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800b360:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800b364:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 800b368:	f8a2 c002 	strh.w	ip, [r2, #2]
 800b36c:	8097      	strh	r7, [r2, #4]
 800b36e:	80d6      	strh	r6, [r2, #6]
 800b370:	3301      	adds	r3, #1
 800b372:	b29b      	uxth	r3, r3
 800b374:	e7e0      	b.n	800b338 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 800b376:	2b02      	cmp	r3, #2
 800b378:	f040 8133 	bne.w	800b5e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800b37c:	4b28      	ldr	r3, [pc, #160]	@ (800b420 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	2b01      	cmp	r3, #1
 800b382:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800b386:	f000 8098 	beq.w	800b4ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800b38a:	882a      	ldrh	r2, [r5, #0]
 800b38c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800b390:	3201      	adds	r2, #1
 800b392:	b292      	uxth	r2, r2
 800b394:	2900      	cmp	r1, #0
 800b396:	d0c2      	beq.n	800b31e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800b398:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 800b39c:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800b3a0:	441e      	add	r6, r3
 800b3a2:	b236      	sxth	r6, r6
 800b3a4:	4694      	mov	ip, r2
 800b3a6:	f04f 0900 	mov.w	r9, #0
 800b3aa:	fa1f f38c 	uxth.w	r3, ip
 800b3ae:	4299      	cmp	r1, r3
 800b3b0:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800b3b4:	f240 80bf 	bls.w	800b536 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 800b3b8:	4427      	add	r7, r4
 800b3ba:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800b3be:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800b3c2:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800b3c6:	4283      	cmp	r3, r0
 800b3c8:	f340 80a1 	ble.w	800b50e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 800b3cc:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 800b3d0:	4406      	add	r6, r0
 800b3d2:	b236      	sxth	r6, r6
 800b3d4:	429e      	cmp	r6, r3
 800b3d6:	bfa8      	it	ge
 800b3d8:	461e      	movge	r6, r3
 800b3da:	46e1      	mov	r9, ip
 800b3dc:	f10c 0c01 	add.w	ip, ip, #1
 800b3e0:	e7e3      	b.n	800b3aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 800b3e2:	d10a      	bne.n	800b3fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800b3e4:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 800b3e8:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800b3ec:	4562      	cmp	r2, ip
 800b3ee:	bfb8      	it	lt
 800b3f0:	4662      	movlt	r2, ip
 800b3f2:	4288      	cmp	r0, r1
 800b3f4:	bfb8      	it	lt
 800b3f6:	461f      	movlt	r7, r3
 800b3f8:	e087      	b.n	800b50a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800b3fa:	428a      	cmp	r2, r1
 800b3fc:	bfb8      	it	lt
 800b3fe:	460a      	movlt	r2, r1
 800b400:	e083      	b.n	800b50a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800b402:	bf00      	nop
 800b404:	2001246c 	.word	0x2001246c
 800b408:	20012478 	.word	0x20012478
 800b40c:	20000084 	.word	0x20000084
 800b410:	20012434 	.word	0x20012434
 800b414:	2001242a 	.word	0x2001242a
 800b418:	20012428 	.word	0x20012428
 800b41c:	20012432 	.word	0x20012432
 800b420:	2001242c 	.word	0x2001242c
 800b424:	19a1      	adds	r1, r4, r6
 800b426:	ab07      	add	r3, sp, #28
 800b428:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800b42c:	6849      	ldr	r1, [r1, #4]
 800b42e:	c303      	stmia	r3!, {r0, r1}
 800b430:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800b434:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800b438:	2b13      	cmp	r3, #19
 800b43a:	bfd8      	it	le
 800b43c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800b440:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b444:	440b      	add	r3, r1
 800b446:	1a9b      	subs	r3, r3, r2
 800b448:	a807      	add	r0, sp, #28
 800b44a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b44e:	f7fe ffe1 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800b452:	a807      	add	r0, sp, #28
 800b454:	f7fc fff5 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b458:	bb78      	cbnz	r0, 800b4ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800b45a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800b45e:	f8d9 0000 	ldr.w	r0, [r9]
 800b462:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b466:	f8d0 e000 	ldr.w	lr, [r0]
 800b46a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b46e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800b472:	f1bc 0f14 	cmp.w	ip, #20
 800b476:	bfa8      	it	ge
 800b478:	f04f 0c14 	movge.w	ip, #20
 800b47c:	fa1f fc8c 	uxth.w	ip, ip
 800b480:	f8cd c000 	str.w	ip, [sp]
 800b484:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 800b488:	47d8      	blx	fp
 800b48a:	4683      	mov	fp, r0
 800b48c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800b490:	a807      	add	r0, sp, #28
 800b492:	f7fe ffa5 	bl	800a3e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	4426      	add	r6, r4
 800b49a:	4620      	mov	r0, r4
 800b49c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b49e:	a907      	add	r1, sp, #28
 800b4a0:	4798      	blx	r3
 800b4a2:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800b4a6:	eba0 000b 	sub.w	r0, r0, fp
 800b4aa:	b200      	sxth	r0, r0
 800b4ac:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 800b4b0:	b918      	cbnz	r0, 800b4ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800b4b2:	b2b9      	uxth	r1, r7
 800b4b4:	4650      	mov	r0, sl
 800b4b6:	f7ff fa79 	bl	800a9ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800b4ba:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800b4be:	f1bb 0f00 	cmp.w	fp, #0
 800b4c2:	f43f af2c 	beq.w	800b31e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800b4c6:	882b      	ldrh	r3, [r5, #0]
 800b4c8:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	2700      	movs	r7, #0
 800b4d2:	b299      	uxth	r1, r3
 800b4d4:	458b      	cmp	fp, r1
 800b4d6:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 800b4da:	d9a3      	bls.n	800b424 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800b4dc:	4426      	add	r6, r4
 800b4de:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800b4e2:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 800b4e6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800b4ea:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800b4ee:	4408      	add	r0, r1
 800b4f0:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800b4f4:	4461      	add	r1, ip
 800b4f6:	b200      	sxth	r0, r0
 800b4f8:	b209      	sxth	r1, r1
 800b4fa:	4288      	cmp	r0, r1
 800b4fc:	f6bf af71 	bge.w	800b3e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800b500:	4584      	cmp	ip, r0
 800b502:	4662      	mov	r2, ip
 800b504:	461f      	mov	r7, r3
 800b506:	bfb8      	it	lt
 800b508:	4602      	movlt	r2, r0
 800b50a:	3301      	adds	r3, #1
 800b50c:	e7e1      	b.n	800b4d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 800b50e:	d10e      	bne.n	800b52e <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 800b510:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800b514:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800b518:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800b51c:	4473      	add	r3, lr
 800b51e:	b21b      	sxth	r3, r3
 800b520:	429e      	cmp	r6, r3
 800b522:	bfa8      	it	ge
 800b524:	461e      	movge	r6, r3
 800b526:	4287      	cmp	r7, r0
 800b528:	bfb8      	it	lt
 800b52a:	46e1      	movlt	r9, ip
 800b52c:	e756      	b.n	800b3dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800b52e:	4286      	cmp	r6, r0
 800b530:	bfa8      	it	ge
 800b532:	4606      	movge	r6, r0
 800b534:	e752      	b.n	800b3dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800b536:	eb0a 0007 	add.w	r0, sl, r7
 800b53a:	4427      	add	r7, r4
 800b53c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b540:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800b544:	f1bb 0f13 	cmp.w	fp, #19
 800b548:	bfde      	ittt	le
 800b54a:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 800b54e:	445e      	addle	r6, fp
 800b550:	b236      	sxthle	r6, r6
 800b552:	f7fc ff76 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b556:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b55a:	2800      	cmp	r0, #0
 800b55c:	f47f af1a 	bne.w	800b394 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 800b560:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800b564:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800b568:	482a      	ldr	r0, [pc, #168]	@ (800b614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 800b56a:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800b56e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800b572:	6800      	ldr	r0, [r0, #0]
 800b574:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b578:	1ab6      	subs	r6, r6, r2
 800b57a:	2e14      	cmp	r6, #20
 800b57c:	f8ad 201e 	strh.w	r2, [sp, #30]
 800b580:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b584:	bfa8      	it	ge
 800b586:	2614      	movge	r6, #20
 800b588:	f8d0 c000 	ldr.w	ip, [r0]
 800b58c:	b2b6      	uxth	r6, r6
 800b58e:	fa1f fb8b 	uxth.w	fp, fp
 800b592:	455e      	cmp	r6, fp
 800b594:	bf94      	ite	ls
 800b596:	9600      	strls	r6, [sp, #0]
 800b598:	f8cd b000 	strhi.w	fp, [sp]
 800b59c:	b292      	uxth	r2, r2
 800b59e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	b289      	uxth	r1, r1
 800b5a6:	47b0      	blx	r6
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800b5ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5b0:	a907      	add	r1, sp, #28
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	4798      	blx	r3
 800b5b6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800b5ba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b5be:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800b5c2:	1a5b      	subs	r3, r3, r1
 800b5c4:	440a      	add	r2, r1
 800b5c6:	b21b      	sxth	r3, r3
 800b5c8:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800b5cc:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f47f aeda 	bne.w	800b38a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800b5d6:	fa1f f189 	uxth.w	r1, r9
 800b5da:	4650      	mov	r0, sl
 800b5dc:	f7ff f9e6 	bl	800a9ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800b5e0:	e6d3      	b.n	800b38a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800b5e2:	882e      	ldrh	r6, [r5, #0]
 800b5e4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800b5e8:	42b3      	cmp	r3, r6
 800b5ea:	f67f ae98 	bls.w	800b31e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800b5ee:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 800b5f2:	ab07      	add	r3, sp, #28
 800b5f4:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800b5f8:	6851      	ldr	r1, [r2, #4]
 800b5fa:	c303      	stmia	r3!, {r0, r1}
 800b5fc:	a807      	add	r0, sp, #28
 800b5fe:	f7fc ff20 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800b602:	b920      	cbnz	r0, 800b60e <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	a907      	add	r1, sp, #28
 800b608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b60a:	4620      	mov	r0, r4
 800b60c:	4798      	blx	r3
 800b60e:	3601      	adds	r6, #1
 800b610:	b2b6      	uxth	r6, r6
 800b612:	e7e7      	b.n	800b5e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 800b614:	20012434 	.word	0x20012434

0800b618 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800b618:	4b03      	ldr	r3, [pc, #12]	@ (800b628 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	801a      	strh	r2, [r3, #0]
 800b61e:	805a      	strh	r2, [r3, #2]
 800b620:	809a      	strh	r2, [r3, #4]
 800b622:	80da      	strh	r2, [r3, #6]
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	20012478 	.word	0x20012478

0800b62c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800b62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b630:	4606      	mov	r6, r0
 800b632:	b09d      	sub	sp, #116	@ 0x74
 800b634:	a803      	add	r0, sp, #12
 800b636:	4614      	mov	r4, r2
 800b638:	468a      	mov	sl, r1
 800b63a:	461d      	mov	r5, r3
 800b63c:	f000 fdad 	bl	800c19a <_ZN8touchgfx12TextProviderC1Ev>
 800b640:	6833      	ldr	r3, [r6, #0]
 800b642:	4630      	mov	r0, r6
 800b644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b646:	4798      	blx	r3
 800b648:	6833      	ldr	r3, [r6, #0]
 800b64a:	4607      	mov	r7, r0
 800b64c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b64e:	4630      	mov	r0, r6
 800b650:	4798      	blx	r3
 800b652:	462a      	mov	r2, r5
 800b654:	9000      	str	r0, [sp, #0]
 800b656:	4621      	mov	r1, r4
 800b658:	463b      	mov	r3, r7
 800b65a:	a803      	add	r0, sp, #12
 800b65c:	f000 fdf0 	bl	800c240 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800b660:	2500      	movs	r5, #0
 800b662:	462c      	mov	r4, r5
 800b664:	46a9      	mov	r9, r5
 800b666:	46a8      	mov	r8, r5
 800b668:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800b66c:	2300      	movs	r3, #0
 800b66e:	9302      	str	r3, [sp, #8]
 800b670:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b674:	429c      	cmp	r4, r3
 800b676:	d002      	beq.n	800b67e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800b678:	455c      	cmp	r4, fp
 800b67a:	bf18      	it	ne
 800b67c:	4625      	movne	r5, r4
 800b67e:	ab02      	add	r3, sp, #8
 800b680:	4632      	mov	r2, r6
 800b682:	4651      	mov	r1, sl
 800b684:	a803      	add	r0, sp, #12
 800b686:	f001 f8cd 	bl	800c824 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b68a:	4604      	mov	r4, r0
 800b68c:	b108      	cbz	r0, 800b692 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800b68e:	280a      	cmp	r0, #10
 800b690:	d10a      	bne.n	800b6a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800b692:	45c1      	cmp	r9, r8
 800b694:	bf38      	it	cc
 800b696:	46c1      	movcc	r9, r8
 800b698:	f04f 0800 	mov.w	r8, #0
 800b69c:	2c00      	cmp	r4, #0
 800b69e:	d1e5      	bne.n	800b66c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800b6a0:	4648      	mov	r0, r9
 800b6a2:	b01d      	add	sp, #116	@ 0x74
 800b6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a8:	9a02      	ldr	r2, [sp, #8]
 800b6aa:	2a00      	cmp	r2, #0
 800b6ac:	d0de      	beq.n	800b66c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800b6ae:	7b57      	ldrb	r7, [r2, #13]
 800b6b0:	6833      	ldr	r3, [r6, #0]
 800b6b2:	8894      	ldrh	r4, [r2, #4]
 800b6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6b6:	007f      	lsls	r7, r7, #1
 800b6b8:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800b6bc:	7a97      	ldrb	r7, [r2, #10]
 800b6be:	4629      	mov	r1, r5
 800b6c0:	4307      	orrs	r7, r0
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	4798      	blx	r3
 800b6c6:	4438      	add	r0, r7
 800b6c8:	4480      	add	r8, r0
 800b6ca:	fa1f f888 	uxth.w	r8, r8
 800b6ce:	e7e5      	b.n	800b69c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800b6d0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800b6d0:	b508      	push	{r3, lr}
 800b6d2:	6803      	ldr	r3, [r0, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	4798      	blx	r3
 800b6d8:	b128      	cbz	r0, 800b6e6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800b6da:	7b43      	ldrb	r3, [r0, #13]
 800b6dc:	7a80      	ldrb	r0, [r0, #10]
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6e4:	4318      	orrs	r0, r3
 800b6e6:	bd08      	pop	{r3, pc}

0800b6e8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800b6e8:	b40e      	push	{r1, r2, r3}
 800b6ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ec:	b09e      	sub	sp, #120	@ 0x78
 800b6ee:	ab23      	add	r3, sp, #140	@ 0x8c
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	f853 4b04 	ldr.w	r4, [r3], #4
 800b6f6:	9303      	str	r3, [sp, #12]
 800b6f8:	a805      	add	r0, sp, #20
 800b6fa:	f000 fd4e 	bl	800c19a <_ZN8touchgfx12TextProviderC1Ev>
 800b6fe:	682b      	ldr	r3, [r5, #0]
 800b700:	4628      	mov	r0, r5
 800b702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b704:	4798      	blx	r3
 800b706:	682b      	ldr	r3, [r5, #0]
 800b708:	4606      	mov	r6, r0
 800b70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b70c:	4628      	mov	r0, r5
 800b70e:	4798      	blx	r3
 800b710:	4633      	mov	r3, r6
 800b712:	ae1e      	add	r6, sp, #120	@ 0x78
 800b714:	4621      	mov	r1, r4
 800b716:	9000      	str	r0, [sp, #0]
 800b718:	9a03      	ldr	r2, [sp, #12]
 800b71a:	2400      	movs	r4, #0
 800b71c:	a805      	add	r0, sp, #20
 800b71e:	f000 fd8f 	bl	800c240 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800b722:	f846 4d68 	str.w	r4, [r6, #-104]!
 800b726:	462a      	mov	r2, r5
 800b728:	4633      	mov	r3, r6
 800b72a:	4621      	mov	r1, r4
 800b72c:	a805      	add	r0, sp, #20
 800b72e:	f001 f879 	bl	800c824 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b732:	b1f0      	cbz	r0, 800b772 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800b734:	280a      	cmp	r0, #10
 800b736:	d018      	beq.n	800b76a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800b738:	9f04      	ldr	r7, [sp, #16]
 800b73a:	b1b7      	cbz	r7, 800b76a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800b73c:	7b78      	ldrb	r0, [r7, #13]
 800b73e:	7a3b      	ldrb	r3, [r7, #8]
 800b740:	88ea      	ldrh	r2, [r5, #6]
 800b742:	00c1      	lsls	r1, r0, #3
 800b744:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800b748:	4319      	orrs	r1, r3
 800b74a:	0643      	lsls	r3, r0, #25
 800b74c:	bf44      	itt	mi
 800b74e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800b752:	b219      	sxthmi	r1, r3
 800b754:	0100      	lsls	r0, r0, #4
 800b756:	79fb      	ldrb	r3, [r7, #7]
 800b758:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800b75c:	4303      	orrs	r3, r0
 800b75e:	4413      	add	r3, r2
 800b760:	1a5b      	subs	r3, r3, r1
 800b762:	b21b      	sxth	r3, r3
 800b764:	429c      	cmp	r4, r3
 800b766:	bfb8      	it	lt
 800b768:	461c      	movlt	r4, r3
 800b76a:	4633      	mov	r3, r6
 800b76c:	462a      	mov	r2, r5
 800b76e:	2100      	movs	r1, #0
 800b770:	e7dc      	b.n	800b72c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800b772:	b2a0      	uxth	r0, r4
 800b774:	b01e      	add	sp, #120	@ 0x78
 800b776:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b77a:	b003      	add	sp, #12
 800b77c:	4770      	bx	lr

0800b77e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800b77e:	7a43      	ldrb	r3, [r0, #9]
 800b780:	8880      	ldrh	r0, [r0, #4]
 800b782:	4418      	add	r0, r3
 800b784:	b280      	uxth	r0, r0
 800b786:	4770      	bx	lr

0800b788 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800b788:	6803      	ldr	r3, [r0, #0]
 800b78a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b78c:	4718      	bx	r3

0800b78e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800b78e:	b40e      	push	{r1, r2, r3}
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	b09d      	sub	sp, #116	@ 0x74
 800b794:	ab21      	add	r3, sp, #132	@ 0x84
 800b796:	4604      	mov	r4, r0
 800b798:	f853 5b04 	ldr.w	r5, [r3], #4
 800b79c:	9302      	str	r3, [sp, #8]
 800b79e:	a803      	add	r0, sp, #12
 800b7a0:	f000 fcfb 	bl	800c19a <_ZN8touchgfx12TextProviderC1Ev>
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7aa:	4798      	blx	r3
 800b7ac:	6823      	ldr	r3, [r4, #0]
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	4798      	blx	r3
 800b7b6:	4633      	mov	r3, r6
 800b7b8:	9000      	str	r0, [sp, #0]
 800b7ba:	9a02      	ldr	r2, [sp, #8]
 800b7bc:	4629      	mov	r1, r5
 800b7be:	a803      	add	r0, sp, #12
 800b7c0:	f000 fd3e 	bl	800c240 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800b7c4:	a803      	add	r0, sp, #12
 800b7c6:	f001 f8af 	bl	800c928 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b7ca:	2401      	movs	r4, #1
 800b7cc:	b2a3      	uxth	r3, r4
 800b7ce:	b140      	cbz	r0, 800b7e2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800b7d0:	280a      	cmp	r0, #10
 800b7d2:	bf08      	it	eq
 800b7d4:	3301      	addeq	r3, #1
 800b7d6:	a803      	add	r0, sp, #12
 800b7d8:	bf08      	it	eq
 800b7da:	b21c      	sxtheq	r4, r3
 800b7dc:	f001 f8a4 	bl	800c928 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b7e0:	e7f4      	b.n	800b7cc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	b01d      	add	sp, #116	@ 0x74
 800b7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7ea:	b003      	add	sp, #12
 800b7ec:	4770      	bx	lr

0800b7ee <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800b7ee:	b40e      	push	{r1, r2, r3}
 800b7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7f2:	b09e      	sub	sp, #120	@ 0x78
 800b7f4:	ab23      	add	r3, sp, #140	@ 0x8c
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7fc:	9303      	str	r3, [sp, #12]
 800b7fe:	a805      	add	r0, sp, #20
 800b800:	f000 fccb 	bl	800c19a <_ZN8touchgfx12TextProviderC1Ev>
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	4620      	mov	r0, r4
 800b808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b80a:	4798      	blx	r3
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	4606      	mov	r6, r0
 800b810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b812:	4620      	mov	r0, r4
 800b814:	4798      	blx	r3
 800b816:	4633      	mov	r3, r6
 800b818:	4629      	mov	r1, r5
 800b81a:	9000      	str	r0, [sp, #0]
 800b81c:	9a03      	ldr	r2, [sp, #12]
 800b81e:	a805      	add	r0, sp, #20
 800b820:	ad1e      	add	r5, sp, #120	@ 0x78
 800b822:	f000 fd0d 	bl	800c240 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800b826:	2100      	movs	r1, #0
 800b828:	f845 1d68 	str.w	r1, [r5, #-104]!
 800b82c:	4622      	mov	r2, r4
 800b82e:	462b      	mov	r3, r5
 800b830:	a805      	add	r0, sp, #20
 800b832:	f000 fff7 	bl	800c824 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b836:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800b83a:	b1d8      	cbz	r0, 800b874 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800b83c:	280a      	cmp	r0, #10
 800b83e:	d012      	beq.n	800b866 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800b840:	9804      	ldr	r0, [sp, #16]
 800b842:	b180      	cbz	r0, 800b866 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800b844:	7b47      	ldrb	r7, [r0, #13]
 800b846:	88e2      	ldrh	r2, [r4, #6]
 800b848:	00fb      	lsls	r3, r7, #3
 800b84a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800b84e:	7a03      	ldrb	r3, [r0, #8]
 800b850:	430b      	orrs	r3, r1
 800b852:	0679      	lsls	r1, r7, #25
 800b854:	bf44      	itt	mi
 800b856:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800b85a:	b21b      	sxthmi	r3, r3
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	b21b      	sxth	r3, r3
 800b860:	429e      	cmp	r6, r3
 800b862:	bfa8      	it	ge
 800b864:	461e      	movge	r6, r3
 800b866:	462b      	mov	r3, r5
 800b868:	4622      	mov	r2, r4
 800b86a:	2100      	movs	r1, #0
 800b86c:	a805      	add	r0, sp, #20
 800b86e:	f000 ffd9 	bl	800c824 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b872:	e7e2      	b.n	800b83a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800b874:	4630      	mov	r0, r6
 800b876:	b01e      	add	sp, #120	@ 0x78
 800b878:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b87c:	b003      	add	sp, #12
 800b87e:	4770      	bx	lr

0800b880 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800b880:	b513      	push	{r0, r1, r4, lr}
 800b882:	6803      	ldr	r3, [r0, #0]
 800b884:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800b888:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b88c:	f8ad 1004 	strh.w	r1, [sp, #4]
 800b890:	2400      	movs	r4, #0
 800b892:	9400      	str	r4, [sp, #0]
 800b894:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	4669      	mov	r1, sp
 800b89c:	4798      	blx	r3
 800b89e:	b002      	add	sp, #8
 800b8a0:	bd10      	pop	{r4, pc}

0800b8a2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800b8a2:	b538      	push	{r3, r4, r5, lr}
 800b8a4:	680b      	ldr	r3, [r1, #0]
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	4798      	blx	r3
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	4798      	blx	r3
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}

0800b8bc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800b8bc:	b410      	push	{r4}
 800b8be:	880a      	ldrh	r2, [r1, #0]
 800b8c0:	8884      	ldrh	r4, [r0, #4]
 800b8c2:	4422      	add	r2, r4
 800b8c4:	800a      	strh	r2, [r1, #0]
 800b8c6:	88c4      	ldrh	r4, [r0, #6]
 800b8c8:	884a      	ldrh	r2, [r1, #2]
 800b8ca:	4422      	add	r2, r4
 800b8cc:	804a      	strh	r2, [r1, #2]
 800b8ce:	6940      	ldr	r0, [r0, #20]
 800b8d0:	b120      	cbz	r0, 800b8dc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800b8d2:	6803      	ldr	r3, [r0, #0]
 800b8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8da:	4718      	bx	r3
 800b8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800b8e2:	b570      	push	{r4, r5, r6, lr}
 800b8e4:	8882      	ldrh	r2, [r0, #4]
 800b8e6:	880b      	ldrh	r3, [r1, #0]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	800b      	strh	r3, [r1, #0]
 800b8ec:	88c2      	ldrh	r2, [r0, #6]
 800b8ee:	884b      	ldrh	r3, [r1, #2]
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	4413      	add	r3, r2
 800b8f4:	804b      	strh	r3, [r1, #2]
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	1d01      	adds	r1, r0, #4
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7fc fd5e 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800b900:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800b904:	2b00      	cmp	r3, #0
 800b906:	dd0b      	ble.n	800b920 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800b908:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	dd07      	ble.n	800b920 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800b910:	6968      	ldr	r0, [r5, #20]
 800b912:	b128      	cbz	r0, 800b920 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800b914:	6803      	ldr	r3, [r0, #0]
 800b916:	4621      	mov	r1, r4
 800b918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b91e:	4718      	bx	r3
 800b920:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b924 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	8882      	ldrh	r2, [r0, #4]
 800b928:	880b      	ldrh	r3, [r1, #0]
 800b92a:	4413      	add	r3, r2
 800b92c:	800b      	strh	r3, [r1, #0]
 800b92e:	88c2      	ldrh	r2, [r0, #6]
 800b930:	884b      	ldrh	r3, [r1, #2]
 800b932:	460c      	mov	r4, r1
 800b934:	4413      	add	r3, r2
 800b936:	804b      	strh	r3, [r1, #2]
 800b938:	4605      	mov	r5, r0
 800b93a:	1d01      	adds	r1, r0, #4
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7fc fd3d 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800b942:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	dd19      	ble.n	800b97e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800b94a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	dd15      	ble.n	800b97e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800b952:	6968      	ldr	r0, [r5, #20]
 800b954:	b128      	cbz	r0, 800b962 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800b956:	6803      	ldr	r3, [r0, #0]
 800b958:	4621      	mov	r1, r4
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b960:	4718      	bx	r3
 800b962:	4b07      	ldr	r3, [pc, #28]	@ (800b980 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3304      	adds	r3, #4
 800b968:	429d      	cmp	r5, r3
 800b96a:	d108      	bne.n	800b97e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800b96c:	f7fe feea 	bl	800a744 <_ZN8touchgfx11Application11getInstanceEv>
 800b970:	6803      	ldr	r3, [r0, #0]
 800b972:	6821      	ldr	r1, [r4, #0]
 800b974:	6862      	ldr	r2, [r4, #4]
 800b976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b97c:	4718      	bx	r3
 800b97e:	bd70      	pop	{r4, r5, r6, pc}
 800b980:	20012470 	.word	0x20012470

0800b984 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	4604      	mov	r4, r0
 800b988:	4616      	mov	r6, r2
 800b98a:	460d      	mov	r5, r1
 800b98c:	b901      	cbnz	r1, 800b990 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800b98e:	b192      	cbz	r2, 800b9b6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800b990:	6823      	ldr	r3, [r4, #0]
 800b992:	4620      	mov	r0, r4
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	4798      	blx	r3
 800b998:	88e2      	ldrh	r2, [r4, #6]
 800b99a:	88a1      	ldrh	r1, [r4, #4]
 800b99c:	4432      	add	r2, r6
 800b99e:	4429      	add	r1, r5
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	b212      	sxth	r2, r2
 800b9a4:	b209      	sxth	r1, r1
 800b9a6:	f7f6 ffc6 	bl	8002936 <_ZN8touchgfx8Drawable5setXYEss>
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9b4:	4718      	bx	r3
 800b9b6:	bd70      	pop	{r4, r5, r6, pc}

0800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	2300      	movs	r3, #0
 800b9c0:	8023      	strh	r3, [r4, #0]
 800b9c2:	8063      	strh	r3, [r4, #2]
 800b9c4:	6803      	ldr	r3, [r0, #0]
 800b9c6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b9ca:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800b9ce:	80a1      	strh	r1, [r4, #4]
 800b9d0:	80e2      	strh	r2, [r4, #6]
 800b9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	4798      	blx	r3
 800b9d8:	4620      	mov	r0, r4
 800b9da:	bd10      	pop	{r4, pc}

0800b9dc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800b9dc:	b530      	push	{r4, r5, lr}
 800b9de:	8083      	strh	r3, [r0, #4]
 800b9e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b9e4:	80c3      	strh	r3, [r0, #6]
 800b9e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b9ea:	7203      	strb	r3, [r0, #8]
 800b9ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b9f0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800b9f4:	7243      	strb	r3, [r0, #9]
 800b9f6:	7a83      	ldrb	r3, [r0, #10]
 800b9f8:	6141      	str	r1, [r0, #20]
 800b9fa:	f365 0306 	bfi	r3, r5, #0, #7
 800b9fe:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800ba02:	8302      	strh	r2, [r0, #24]
 800ba04:	f365 13c7 	bfi	r3, r5, #7, #1
 800ba08:	7283      	strb	r3, [r0, #10]
 800ba0a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800ba0e:	72c3      	strb	r3, [r0, #11]
 800ba10:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ba14:	7303      	strb	r3, [r0, #12]
 800ba16:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800ba1a:	81c3      	strh	r3, [r0, #14]
 800ba1c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800ba20:	8203      	strh	r3, [r0, #16]
 800ba22:	4b01      	ldr	r3, [pc, #4]	@ (800ba28 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	bd30      	pop	{r4, r5, pc}
 800ba28:	080123b0 	.word	0x080123b0

0800ba2c <_ZNK8touchgfx9ConstFont4findEt>:
 800ba2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba2e:	6944      	ldr	r4, [r0, #20]
 800ba30:	b3bc      	cbz	r4, 800baa2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ba32:	88a3      	ldrh	r3, [r4, #4]
 800ba34:	8b02      	ldrh	r2, [r0, #24]
 800ba36:	1acb      	subs	r3, r1, r3
 800ba38:	f102 32ff 	add.w	r2, r2, #4294967295
 800ba3c:	d431      	bmi.n	800baa2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	dd0c      	ble.n	800ba5c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800ba42:	230e      	movs	r3, #14
 800ba44:	fb03 4302 	mla	r3, r3, r2, r4
 800ba48:	889b      	ldrh	r3, [r3, #4]
 800ba4a:	1a5b      	subs	r3, r3, r1
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	db27      	blt.n	800baa2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	bfbc      	itt	lt
 800ba56:	2302      	movlt	r3, #2
 800ba58:	fb92 f3f3 	sdivlt	r3, r2, r3
 800ba5c:	2500      	movs	r5, #0
 800ba5e:	260e      	movs	r6, #14
 800ba60:	4295      	cmp	r5, r2
 800ba62:	dc1e      	bgt.n	800baa2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ba64:	fb06 4003 	mla	r0, r6, r3, r4
 800ba68:	8887      	ldrh	r7, [r0, #4]
 800ba6a:	42b9      	cmp	r1, r7
 800ba6c:	d01a      	beq.n	800baa4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800ba6e:	d20d      	bcs.n	800ba8c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800ba70:	1e5a      	subs	r2, r3, #1
 800ba72:	4295      	cmp	r5, r2
 800ba74:	dc15      	bgt.n	800baa2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ba76:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800ba7a:	1a5b      	subs	r3, r3, r1
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	db0f      	blt.n	800baa2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ba82:	429d      	cmp	r5, r3
 800ba84:	ddec      	ble.n	800ba60 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800ba86:	1953      	adds	r3, r2, r5
 800ba88:	105b      	asrs	r3, r3, #1
 800ba8a:	e7e9      	b.n	800ba60 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800ba8c:	1c5d      	adds	r5, r3, #1
 800ba8e:	42aa      	cmp	r2, r5
 800ba90:	db07      	blt.n	800baa2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ba92:	8a43      	ldrh	r3, [r0, #18]
 800ba94:	1acb      	subs	r3, r1, r3
 800ba96:	442b      	add	r3, r5
 800ba98:	429d      	cmp	r5, r3
 800ba9a:	dc02      	bgt.n	800baa2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	dadf      	bge.n	800ba60 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800baa0:	e7f1      	b.n	800ba86 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800baa2:	2000      	movs	r0, #0
 800baa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800baa6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800baa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa8:	4604      	mov	r4, r0
 800baaa:	4617      	mov	r7, r2
 800baac:	461e      	mov	r6, r3
 800baae:	b911      	cbnz	r1, 800bab6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800bab0:	2500      	movs	r5, #0
 800bab2:	4628      	mov	r0, r5
 800bab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bab6:	290a      	cmp	r1, #10
 800bab8:	d0fa      	beq.n	800bab0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800baba:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800babe:	4291      	cmp	r1, r2
 800bac0:	d0f6      	beq.n	800bab0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800bac2:	f242 020b 	movw	r2, #8203	@ 0x200b
 800bac6:	4291      	cmp	r1, r2
 800bac8:	d0f2      	beq.n	800bab0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800baca:	f7ff ffaf 	bl	800ba2c <_ZNK8touchgfx9ConstFont4findEt>
 800bace:	4605      	mov	r5, r0
 800bad0:	b950      	cbnz	r0, 800bae8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	4620      	mov	r0, r4
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	4798      	blx	r3
 800bada:	4601      	mov	r1, r0
 800badc:	4620      	mov	r0, r4
 800bade:	f7ff ffa5 	bl	800ba2c <_ZNK8touchgfx9ConstFont4findEt>
 800bae2:	4605      	mov	r5, r0
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d0e3      	beq.n	800bab0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	4629      	mov	r1, r5
 800baec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800baee:	4620      	mov	r0, r4
 800baf0:	4798      	blx	r3
 800baf2:	6038      	str	r0, [r7, #0]
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	4620      	mov	r0, r4
 800baf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bafa:	4798      	blx	r3
 800bafc:	7030      	strb	r0, [r6, #0]
 800bafe:	e7d8      	b.n	800bab2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800bb00 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800bb00:	2000      	movs	r0, #0
 800bb02:	4770      	bx	lr

0800bb04 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800bb04:	2001      	movs	r0, #1
 800bb06:	4770      	bx	lr

0800bb08 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800bb08:	2002      	movs	r0, #2
 800bb0a:	4770      	bx	lr

0800bb0c <_ZN8touchgfx6ScreenD1Ev>:
 800bb0c:	4770      	bx	lr

0800bb0e <_ZN8touchgfx12GestureEventD1Ev>:
 800bb0e:	4770      	bx	lr

0800bb10 <_ZN8touchgfx9DragEventD1Ev>:
 800bb10:	4770      	bx	lr

0800bb12 <_ZN8touchgfx10ClickEventD1Ev>:
 800bb12:	4770      	bx	lr

0800bb14 <_ZN8touchgfx10ClickEventD0Ev>:
 800bb14:	b510      	push	{r4, lr}
 800bb16:	210c      	movs	r1, #12
 800bb18:	4604      	mov	r4, r0
 800bb1a:	f004 f967 	bl	800fdec <_ZdlPvj>
 800bb1e:	4620      	mov	r0, r4
 800bb20:	bd10      	pop	{r4, pc}

0800bb22 <_ZN8touchgfx9DragEventD0Ev>:
 800bb22:	b510      	push	{r4, lr}
 800bb24:	2110      	movs	r1, #16
 800bb26:	4604      	mov	r4, r0
 800bb28:	f004 f960 	bl	800fdec <_ZdlPvj>
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	bd10      	pop	{r4, pc}

0800bb30 <_ZN8touchgfx12GestureEventD0Ev>:
 800bb30:	b510      	push	{r4, lr}
 800bb32:	210c      	movs	r1, #12
 800bb34:	4604      	mov	r4, r0
 800bb36:	f004 f959 	bl	800fdec <_ZdlPvj>
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	bd10      	pop	{r4, pc}

0800bb3e <_ZN8touchgfx6ScreenD0Ev>:
 800bb3e:	b510      	push	{r4, lr}
 800bb40:	213c      	movs	r1, #60	@ 0x3c
 800bb42:	4604      	mov	r4, r0
 800bb44:	f004 f952 	bl	800fdec <_ZdlPvj>
 800bb48:	4620      	mov	r0, r4
 800bb4a:	bd10      	pop	{r4, pc}

0800bb4c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800bb4c:	b530      	push	{r4, r5, lr}
 800bb4e:	460d      	mov	r5, r1
 800bb50:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800bb52:	b087      	sub	sp, #28
 800bb54:	4604      	mov	r4, r0
 800bb56:	b301      	cbz	r1, 800bb9a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800bb58:	a801      	add	r0, sp, #4
 800bb5a:	f7ff ff2d 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bb5e:	892a      	ldrh	r2, [r5, #8]
 800bb60:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bb64:	7928      	ldrb	r0, [r5, #4]
 800bb66:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800bb6a:	f88d 0010 	strb.w	r0, [sp, #16]
 800bb6e:	1ad2      	subs	r2, r2, r3
 800bb70:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800bb72:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800bb74:	f8ad 1012 	strh.w	r1, [sp, #18]
 800bb78:	441a      	add	r2, r3
 800bb7a:	896b      	ldrh	r3, [r5, #10]
 800bb7c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800bb80:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bb84:	1b5b      	subs	r3, r3, r5
 800bb86:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800bb88:	442b      	add	r3, r5
 800bb8a:	4d05      	ldr	r5, [pc, #20]	@ (800bba0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800bb8c:	9503      	str	r5, [sp, #12]
 800bb8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb92:	6803      	ldr	r3, [r0, #0]
 800bb94:	a903      	add	r1, sp, #12
 800bb96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb98:	4798      	blx	r3
 800bb9a:	b007      	add	sp, #28
 800bb9c:	bd30      	pop	{r4, r5, pc}
 800bb9e:	bf00      	nop
 800bba0:	08012440 	.word	0x08012440

0800bba4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800bba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bbaa:	b08a      	sub	sp, #40	@ 0x28
 800bbac:	4604      	mov	r4, r0
 800bbae:	460d      	mov	r5, r1
 800bbb0:	b113      	cbz	r3, 800bbb8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800bbb2:	790b      	ldrb	r3, [r1, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d044      	beq.n	800bc42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800bbb8:	f104 0804 	add.w	r8, r4, #4
 800bbbc:	4641      	mov	r1, r8
 800bbbe:	a803      	add	r0, sp, #12
 800bbc0:	f7ff fefa 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bbc4:	792b      	ldrb	r3, [r5, #4]
 800bbc6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800bbca:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800bbce:	b983      	cbnz	r3, 800bbf2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800bbd0:	892a      	ldrh	r2, [r5, #8]
 800bbd2:	88e9      	ldrh	r1, [r5, #6]
 800bbd4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800bbd8:	1b92      	subs	r2, r2, r6
 800bbda:	1bc9      	subs	r1, r1, r7
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	b212      	sxth	r2, r2
 800bbe6:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800bbea:	b209      	sxth	r1, r1
 800bbec:	4640      	mov	r0, r8
 800bbee:	f7fc fb01 	bl	80081f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800bbf2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bbf4:	b329      	cbz	r1, 800bc42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800bbf6:	a805      	add	r0, sp, #20
 800bbf8:	f7ff fede 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bbfc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800bc00:	792b      	ldrb	r3, [r5, #4]
 800bc02:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800bc04:	f88d 3020 	strb.w	r3, [sp, #32]
 800bc08:	1abf      	subs	r7, r7, r2
 800bc0a:	88ea      	ldrh	r2, [r5, #6]
 800bc0c:	4417      	add	r7, r2
 800bc0e:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800bc10:	4417      	add	r7, r2
 800bc12:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800bc16:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800bc1a:	1ab6      	subs	r6, r6, r2
 800bc1c:	892a      	ldrh	r2, [r5, #8]
 800bc1e:	4416      	add	r6, r2
 800bc20:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800bc22:	4416      	add	r6, r2
 800bc24:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800bc28:	4a07      	ldr	r2, [pc, #28]	@ (800bc48 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800bc2a:	9207      	str	r2, [sp, #28]
 800bc2c:	2600      	movs	r6, #0
 800bc2e:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800bc32:	6803      	ldr	r3, [r0, #0]
 800bc34:	a907      	add	r1, sp, #28
 800bc36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc38:	4798      	blx	r3
 800bc3a:	792b      	ldrb	r3, [r5, #4]
 800bc3c:	b10b      	cbz	r3, 800bc42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800bc3e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800bc42:	b00a      	add	sp, #40	@ 0x28
 800bc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc48:	08012418 	.word	0x08012418

0800bc4c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800bc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc50:	460c      	mov	r4, r1
 800bc52:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800bc54:	b088      	sub	sp, #32
 800bc56:	4605      	mov	r5, r0
 800bc58:	2900      	cmp	r1, #0
 800bc5a:	d06d      	beq.n	800bd38 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800bc5c:	4668      	mov	r0, sp
 800bc5e:	f7ff feab 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bc62:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800bc64:	88e3      	ldrh	r3, [r4, #6]
 800bc66:	f9bd 8000 	ldrsh.w	r8, [sp]
 800bc6a:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800bc6e:	440b      	add	r3, r1
 800bc70:	b21b      	sxth	r3, r3
 800bc72:	4543      	cmp	r3, r8
 800bc74:	db31      	blt.n	800bcda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800bc76:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800bc7a:	44c4      	add	ip, r8
 800bc7c:	fa0f fc8c 	sxth.w	ip, ip
 800bc80:	4563      	cmp	r3, ip
 800bc82:	da2a      	bge.n	800bcda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800bc84:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800bc86:	8926      	ldrh	r6, [r4, #8]
 800bc88:	4416      	add	r6, r2
 800bc8a:	b236      	sxth	r6, r6
 800bc8c:	42be      	cmp	r6, r7
 800bc8e:	db24      	blt.n	800bcda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800bc90:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800bc94:	4438      	add	r0, r7
 800bc96:	b200      	sxth	r0, r0
 800bc98:	4286      	cmp	r6, r0
 800bc9a:	da1e      	bge.n	800bcda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800bc9c:	8963      	ldrh	r3, [r4, #10]
 800bc9e:	4419      	add	r1, r3
 800bca0:	b209      	sxth	r1, r1
 800bca2:	4541      	cmp	r1, r8
 800bca4:	db08      	blt.n	800bcb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800bca6:	4561      	cmp	r1, ip
 800bca8:	da06      	bge.n	800bcb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	441a      	add	r2, r3
 800bcae:	b212      	sxth	r2, r2
 800bcb0:	42ba      	cmp	r2, r7
 800bcb2:	db01      	blt.n	800bcb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800bcb4:	4282      	cmp	r2, r0
 800bcb6:	db10      	blt.n	800bcda <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800bcb8:	4b21      	ldr	r3, [pc, #132]	@ (800bd40 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	f88d 3014 	strb.w	r3, [sp, #20]
 800bcc2:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bcca:	f8ad 3018 	strh.w	r3, [sp, #24]
 800bcce:	f8ad 301a 	strh.w	r3, [sp, #26]
 800bcd2:	6803      	ldr	r3, [r0, #0]
 800bcd4:	a904      	add	r1, sp, #16
 800bcd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcd8:	4798      	blx	r3
 800bcda:	1d29      	adds	r1, r5, #4
 800bcdc:	a802      	add	r0, sp, #8
 800bcde:	f7ff fe6b 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bce2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800bce6:	88e0      	ldrh	r0, [r4, #6]
 800bce8:	7921      	ldrb	r1, [r4, #4]
 800bcea:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800bcee:	8922      	ldrh	r2, [r4, #8]
 800bcf0:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800bcf2:	f88d 1014 	strb.w	r1, [sp, #20]
 800bcf6:	eba3 0808 	sub.w	r8, r3, r8
 800bcfa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800bcfe:	1bdf      	subs	r7, r3, r7
 800bd00:	b2bb      	uxth	r3, r7
 800bd02:	fa1f f888 	uxth.w	r8, r8
 800bd06:	8967      	ldrh	r7, [r4, #10]
 800bd08:	89a4      	ldrh	r4, [r4, #12]
 800bd0a:	4440      	add	r0, r8
 800bd0c:	4460      	add	r0, ip
 800bd0e:	441a      	add	r2, r3
 800bd10:	44b8      	add	r8, r7
 800bd12:	4423      	add	r3, r4
 800bd14:	f8ad 0016 	strh.w	r0, [sp, #22]
 800bd18:	4433      	add	r3, r6
 800bd1a:	4432      	add	r2, r6
 800bd1c:	44e0      	add	r8, ip
 800bd1e:	4c09      	ldr	r4, [pc, #36]	@ (800bd44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800bd20:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800bd22:	9404      	str	r4, [sp, #16]
 800bd24:	f8ad 2018 	strh.w	r2, [sp, #24]
 800bd28:	f8ad 801a 	strh.w	r8, [sp, #26]
 800bd2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800bd30:	6803      	ldr	r3, [r0, #0]
 800bd32:	a904      	add	r1, sp, #16
 800bd34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd36:	4798      	blx	r3
 800bd38:	b008      	add	sp, #32
 800bd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd3e:	bf00      	nop
 800bd40:	08012418 	.word	0x08012418
 800bd44:	0801242c 	.word	0x0801242c

0800bd48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800bd48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800bd50:	3201      	adds	r2, #1
 800bd52:	d112      	bne.n	800bd7a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800bd54:	6803      	ldr	r3, [r0, #0]
 800bd56:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800bd5a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800bd5e:	f8ad 1004 	strh.w	r1, [sp, #4]
 800bd62:	2500      	movs	r5, #0
 800bd64:	9500      	str	r5, [sp, #0]
 800bd66:	466d      	mov	r5, sp
 800bd68:	4629      	mov	r1, r5
 800bd6a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bd6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd70:	4798      	blx	r3
 800bd72:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd76:	e884 0003 	stmia.w	r4, {r0, r1}
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	b003      	add	sp, #12
 800bd7e:	bd30      	pop	{r4, r5, pc}

0800bd80 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800bd80:	b513      	push	{r0, r1, r4, lr}
 800bd82:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800bd86:	3301      	adds	r3, #1
 800bd88:	4604      	mov	r4, r0
 800bd8a:	d109      	bne.n	800bda0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800bd8c:	4601      	mov	r1, r0
 800bd8e:	4668      	mov	r0, sp
 800bd90:	f7ff fe12 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bd94:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd98:	8423      	strh	r3, [r4, #32]
 800bd9a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800bd9e:	8463      	strh	r3, [r4, #34]	@ 0x22
 800bda0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800bda4:	b002      	add	sp, #8
 800bda6:	bd10      	pop	{r4, pc}

0800bda8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800bda8:	b513      	push	{r0, r1, r4, lr}
 800bdaa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800bdae:	3301      	adds	r3, #1
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	d109      	bne.n	800bdc8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800bdb4:	4601      	mov	r1, r0
 800bdb6:	4668      	mov	r0, sp
 800bdb8:	f7ff fdfe 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bdbc:	f8bd 3000 	ldrh.w	r3, [sp]
 800bdc0:	8423      	strh	r3, [r4, #32]
 800bdc2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800bdc6:	8463      	strh	r3, [r4, #34]	@ 0x22
 800bdc8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800bdcc:	b002      	add	sp, #8
 800bdce:	bd10      	pop	{r4, pc}

0800bdd0 <_ZN8touchgfx6ScreenC1Ev>:
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	4b16      	ldr	r3, [pc, #88]	@ (800be30 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800bdd6:	f845 3b04 	str.w	r3, [r5], #4
 800bdda:	2300      	movs	r3, #0
 800bddc:	8103      	strh	r3, [r0, #8]
 800bdde:	8143      	strh	r3, [r0, #10]
 800bde0:	8183      	strh	r3, [r0, #12]
 800bde2:	81c3      	strh	r3, [r0, #14]
 800bde4:	8203      	strh	r3, [r0, #16]
 800bde6:	8243      	strh	r3, [r0, #18]
 800bde8:	8283      	strh	r3, [r0, #20]
 800bdea:	82c3      	strh	r3, [r0, #22]
 800bdec:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800bdf0:	6203      	str	r3, [r0, #32]
 800bdf2:	8483      	strh	r3, [r0, #36]	@ 0x24
 800bdf4:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800bdf6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800bdfa:	4a0e      	ldr	r2, [pc, #56]	@ (800be34 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800bdfc:	6343      	str	r3, [r0, #52]	@ 0x34
 800bdfe:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800be02:	4b0d      	ldr	r3, [pc, #52]	@ (800be38 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800be04:	6042      	str	r2, [r0, #4]
 800be06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800be0a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800be0c:	4a0b      	ldr	r2, [pc, #44]	@ (800be3c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800be0e:	4604      	mov	r4, r0
 800be10:	2101      	movs	r1, #1
 800be12:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800be16:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800be1a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800be1e:	4628      	mov	r0, r5
 800be20:	4798      	blx	r3
 800be22:	6863      	ldr	r3, [r4, #4]
 800be24:	4628      	mov	r0, r5
 800be26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be28:	4631      	mov	r1, r6
 800be2a:	4798      	blx	r3
 800be2c:	4620      	mov	r0, r4
 800be2e:	bd70      	pop	{r4, r5, r6, pc}
 800be30:	08012454 	.word	0x08012454
 800be34:	080120ec 	.word	0x080120ec
 800be38:	2001242a 	.word	0x2001242a
 800be3c:	20012428 	.word	0x20012428

0800be40 <_ZN8touchgfx6Screen4drawEv>:
 800be40:	b507      	push	{r0, r1, r2, lr}
 800be42:	4b09      	ldr	r3, [pc, #36]	@ (800be68 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800be44:	f9b3 2000 	ldrsh.w	r2, [r3]
 800be48:	4b08      	ldr	r3, [pc, #32]	@ (800be6c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800be4a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800be4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be52:	f8ad 3006 	strh.w	r3, [sp, #6]
 800be56:	6803      	ldr	r3, [r0, #0]
 800be58:	2100      	movs	r1, #0
 800be5a:	9100      	str	r1, [sp, #0]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	4669      	mov	r1, sp
 800be60:	4798      	blx	r3
 800be62:	b003      	add	sp, #12
 800be64:	f85d fb04 	ldr.w	pc, [sp], #4
 800be68:	20012428 	.word	0x20012428
 800be6c:	2001242a 	.word	0x2001242a

0800be70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	b089      	sub	sp, #36	@ 0x24
 800be7c:	4680      	mov	r8, r0
 800be7e:	460c      	mov	r4, r1
 800be80:	4615      	mov	r5, r2
 800be82:	dd0e      	ble.n	800bea2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800be84:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	dd0a      	ble.n	800bea2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800be8c:	4628      	mov	r0, r5
 800be8e:	f7ff ff5b 	bl	800bd48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800be92:	4621      	mov	r1, r4
 800be94:	f7fe fb77 	bl	800a586 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800be98:	69eb      	ldr	r3, [r5, #28]
 800be9a:	b928      	cbnz	r0, 800bea8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800be9c:	461d      	mov	r5, r3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1f4      	bne.n	800be8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800bea2:	b009      	add	sp, #36	@ 0x24
 800bea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea8:	ae04      	add	r6, sp, #16
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 80b5 	beq.w	800c01a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	4629      	mov	r1, r5
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	a802      	add	r0, sp, #8
 800beb8:	4798      	blx	r3
 800beba:	4628      	mov	r0, r5
 800bebc:	f7ff ff60 	bl	800bd80 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800bec0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800bec4:	4407      	add	r7, r0
 800bec6:	4628      	mov	r0, r5
 800bec8:	f7ff ff6e 	bl	800bda8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800becc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800bed0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800bed4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bed8:	4418      	add	r0, r3
 800beda:	4621      	mov	r1, r4
 800bedc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800bee0:	f8ad 0012 	strh.w	r0, [sp, #18]
 800bee4:	b23f      	sxth	r7, r7
 800bee6:	4630      	mov	r0, r6
 800bee8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800beec:	f8ad 7010 	strh.w	r7, [sp, #16]
 800bef0:	f7fc fa64 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800bef4:	4628      	mov	r0, r5
 800bef6:	f7ff ff27 	bl	800bd48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800befa:	4602      	mov	r2, r0
 800befc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bf00:	ab06      	add	r3, sp, #24
 800bf02:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf06:	4611      	mov	r1, r2
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fc fa57 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800bf0e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800bf12:	f9b4 1000 	ldrsh.w	r1, [r4]
 800bf16:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800bf1a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800bf1e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800bf22:	4299      	cmp	r1, r3
 800bf24:	d10b      	bne.n	800bf3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800bf26:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800bf2a:	4552      	cmp	r2, sl
 800bf2c:	d107      	bne.n	800bf3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800bf2e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800bf32:	455a      	cmp	r2, fp
 800bf34:	d103      	bne.n	800bf3e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800bf36:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800bf3a:	454a      	cmp	r2, r9
 800bf3c:	d06d      	beq.n	800c01a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800bf3e:	f1bb 0f00 	cmp.w	fp, #0
 800bf42:	dd65      	ble.n	800c010 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800bf44:	f1b9 0f00 	cmp.w	r9, #0
 800bf48:	dd62      	ble.n	800c010 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800bf4a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800bf4e:	fa1f f08a 	uxth.w	r0, sl
 800bf52:	4552      	cmp	r2, sl
 800bf54:	9000      	str	r0, [sp, #0]
 800bf56:	da12      	bge.n	800bf7e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800bf58:	9301      	str	r3, [sp, #4]
 800bf5a:	9b00      	ldr	r3, [sp, #0]
 800bf5c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800bf60:	f8ad 2012 	strh.w	r2, [sp, #18]
 800bf64:	1a9a      	subs	r2, r3, r2
 800bf66:	f8ad 1010 	strh.w	r1, [sp, #16]
 800bf6a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800bf6e:	f8ad 2016 	strh.w	r2, [sp, #22]
 800bf72:	69ea      	ldr	r2, [r5, #28]
 800bf74:	4631      	mov	r1, r6
 800bf76:	4640      	mov	r0, r8
 800bf78:	f7ff ff7a 	bl	800be70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	f9b4 2000 	ldrsh.w	r2, [r4]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	b29f      	uxth	r7, r3
 800bf86:	da0d      	bge.n	800bfa4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800bf88:	f8ad 2010 	strh.w	r2, [sp, #16]
 800bf8c:	1aba      	subs	r2, r7, r2
 800bf8e:	f8ad a012 	strh.w	sl, [sp, #18]
 800bf92:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bf96:	f8ad 9016 	strh.w	r9, [sp, #22]
 800bf9a:	69ea      	ldr	r2, [r5, #28]
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	4640      	mov	r0, r8
 800bfa0:	f7ff ff66 	bl	800be70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800bfa4:	8822      	ldrh	r2, [r4, #0]
 800bfa6:	88a3      	ldrh	r3, [r4, #4]
 800bfa8:	445f      	add	r7, fp
 800bfaa:	4413      	add	r3, r2
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	b2bf      	uxth	r7, r7
 800bfb0:	b23a      	sxth	r2, r7
 800bfb2:	b219      	sxth	r1, r3
 800bfb4:	4291      	cmp	r1, r2
 800bfb6:	dd0d      	ble.n	800bfd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800bfb8:	1bdb      	subs	r3, r3, r7
 800bfba:	f8ad 2010 	strh.w	r2, [sp, #16]
 800bfbe:	f8ad a012 	strh.w	sl, [sp, #18]
 800bfc2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bfc6:	f8ad 9016 	strh.w	r9, [sp, #22]
 800bfca:	69ea      	ldr	r2, [r5, #28]
 800bfcc:	4631      	mov	r1, r6
 800bfce:	4640      	mov	r0, r8
 800bfd0:	f7ff ff4e 	bl	800be70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800bfd4:	88e2      	ldrh	r2, [r4, #6]
 800bfd6:	8863      	ldrh	r3, [r4, #2]
 800bfd8:	4413      	add	r3, r2
 800bfda:	9a00      	ldr	r2, [sp, #0]
 800bfdc:	444a      	add	r2, r9
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	fa1f f982 	uxth.w	r9, r2
 800bfe4:	fa0f f289 	sxth.w	r2, r9
 800bfe8:	b219      	sxth	r1, r3
 800bfea:	428a      	cmp	r2, r1
 800bfec:	da15      	bge.n	800c01a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800bfee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800bff2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800bff6:	f8ad 1014 	strh.w	r1, [sp, #20]
 800bffa:	eba3 0309 	sub.w	r3, r3, r9
 800bffe:	f8ad 0010 	strh.w	r0, [sp, #16]
 800c002:	f8ad 2012 	strh.w	r2, [sp, #18]
 800c006:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c00a:	69ea      	ldr	r2, [r5, #28]
 800c00c:	4631      	mov	r1, r6
 800c00e:	e001      	b.n	800c014 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800c010:	69ea      	ldr	r2, [r5, #28]
 800c012:	4621      	mov	r1, r4
 800c014:	4640      	mov	r0, r8
 800c016:	f7ff ff2b 	bl	800be70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800c01a:	4628      	mov	r0, r5
 800c01c:	f7ff fe94 	bl	800bd48 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800c020:	6861      	ldr	r1, [r4, #4]
 800c022:	4602      	mov	r2, r0
 800c024:	6820      	ldr	r0, [r4, #0]
 800c026:	4633      	mov	r3, r6
 800c028:	c303      	stmia	r3!, {r0, r1}
 800c02a:	4611      	mov	r1, r2
 800c02c:	4630      	mov	r0, r6
 800c02e:	f7fc f9c5 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800c032:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f77f af33 	ble.w	800bea2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800c03c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800c040:	2b00      	cmp	r3, #0
 800c042:	f77f af2e 	ble.w	800bea2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800c046:	4628      	mov	r0, r5
 800c048:	f7ff fe9a 	bl	800bd80 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800c04c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800c050:	1a18      	subs	r0, r3, r0
 800c052:	f8ad 0010 	strh.w	r0, [sp, #16]
 800c056:	4628      	mov	r0, r5
 800c058:	f7ff fea6 	bl	800bda8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800c05c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800c060:	1a18      	subs	r0, r3, r0
 800c062:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c066:	682b      	ldr	r3, [r5, #0]
 800c068:	4631      	mov	r1, r6
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	4628      	mov	r0, r5
 800c06e:	4798      	blx	r3
 800c070:	e717      	b.n	800bea2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800c072 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800c072:	b570      	push	{r4, r5, r6, lr}
 800c074:	460c      	mov	r4, r1
 800c076:	b086      	sub	sp, #24
 800c078:	1d06      	adds	r6, r0, #4
 800c07a:	2300      	movs	r3, #0
 800c07c:	4631      	mov	r1, r6
 800c07e:	4605      	mov	r5, r0
 800c080:	a802      	add	r0, sp, #8
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	f7ff fc98 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c088:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c08c:	8822      	ldrh	r2, [r4, #0]
 800c08e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800c092:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800c096:	f8ad 0014 	strh.w	r0, [sp, #20]
 800c09a:	1ad2      	subs	r2, r2, r3
 800c09c:	8863      	ldrh	r3, [r4, #2]
 800c09e:	f8ad 2010 	strh.w	r2, [sp, #16]
 800c0a2:	1a5b      	subs	r3, r3, r1
 800c0a4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800c0a8:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c0ac:	aa01      	add	r2, sp, #4
 800c0ae:	a904      	add	r1, sp, #16
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	f8ad 3012 	strh.w	r3, [sp, #18]
 800c0b6:	f7fc fa59 	bl	800856c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800c0ba:	9a01      	ldr	r2, [sp, #4]
 800c0bc:	b11a      	cbz	r2, 800c0c6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f7ff fed5 	bl	800be70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800c0c6:	b006      	add	sp, #24
 800c0c8:	bd70      	pop	{r4, r5, r6, pc}

0800c0ca <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800c0ca:	b530      	push	{r4, r5, lr}
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800c0d4:	b085      	sub	sp, #20
 800c0d6:	460d      	mov	r5, r1
 800c0d8:	6851      	ldr	r1, [r2, #4]
 800c0da:	466b      	mov	r3, sp
 800c0dc:	c303      	stmia	r3!, {r0, r1}
 800c0de:	4629      	mov	r1, r5
 800c0e0:	4668      	mov	r0, sp
 800c0e2:	f7fc f96b 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800c0e6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800c0ea:	b12b      	cbz	r3, 800c0f8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800c0ec:	4669      	mov	r1, sp
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f7ff ffbf 	bl	800c072 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800c0f4:	b005      	add	sp, #20
 800c0f6:	bd30      	pop	{r4, r5, pc}
 800c0f8:	3404      	adds	r4, #4
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	a802      	add	r0, sp, #8
 800c0fe:	f7ff fc5b 	bl	800b9b8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c102:	f8bd 3000 	ldrh.w	r3, [sp]
 800c106:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800c10a:	1a9b      	subs	r3, r3, r2
 800c10c:	f8ad 3000 	strh.w	r3, [sp]
 800c110:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800c114:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c118:	4669      	mov	r1, sp
 800c11a:	1a9b      	subs	r3, r3, r2
 800c11c:	4620      	mov	r0, r4
 800c11e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c122:	f7fc f9ea 	bl	80084fa <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800c126:	e7e5      	b.n	800c0f4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800c128 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800c128:	680a      	ldr	r2, [r1, #0]
 800c12a:	460b      	mov	r3, r1
 800c12c:	6992      	ldr	r2, [r2, #24]
 800c12e:	1d01      	adds	r1, r0, #4
 800c130:	4618      	mov	r0, r3
 800c132:	4710      	bx	r2

0800c134 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800c134:	4298      	cmp	r0, r3
 800c136:	d200      	bcs.n	800c13a <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800c138:	b913      	cbnz	r3, 800c140 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800c13a:	440a      	add	r2, r1
 800c13c:	b210      	sxth	r0, r2
 800c13e:	4770      	bx	lr
 800c140:	ee07 0a90 	vmov	s15, r0
 800c144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c148:	ee07 3a90 	vmov	s15, r3
 800c14c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c158:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c15c:	ee07 2a90 	vmov	s15, r2
 800c160:	ee67 5a07 	vmul.f32	s11, s14, s14
 800c164:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800c168:	eee5 6a87 	vfma.f32	s13, s11, s14
 800c16c:	ee07 1a90 	vmov	s15, r1
 800c170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c174:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c178:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c17c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c184:	bfcc      	ite	gt
 800c186:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800c18a:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800c18e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c192:	ee17 3a90 	vmov	r3, s15
 800c196:	b218      	sxth	r0, r3
 800c198:	4770      	bx	lr

0800c19a <_ZN8touchgfx12TextProviderC1Ev>:
 800c19a:	b538      	push	{r3, r4, r5, lr}
 800c19c:	2500      	movs	r5, #0
 800c19e:	2302      	movs	r3, #2
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	e9c0 5500 	strd	r5, r5, [r0]
 800c1a6:	7403      	strb	r3, [r0, #16]
 800c1a8:	6145      	str	r5, [r0, #20]
 800c1aa:	7605      	strb	r5, [r0, #24]
 800c1ac:	83c5      	strh	r5, [r0, #30]
 800c1ae:	8405      	strh	r5, [r0, #32]
 800c1b0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800c1b2:	8705      	strh	r5, [r0, #56]	@ 0x38
 800c1b4:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800c1b6:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800c1ba:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800c1be:	220e      	movs	r2, #14
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	304c      	adds	r0, #76	@ 0x4c
 800c1c4:	f004 f847 	bl	8010256 <memset>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800c1d0:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800c1d4:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800c1d8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800c1dc:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800c1e0:	f7f6 ff64 	bl	80030ac <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	bd38      	pop	{r3, r4, r5, pc}

0800c1e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800c1e8:	b530      	push	{r4, r5, lr}
 800c1ea:	2500      	movs	r5, #0
 800c1ec:	2401      	movs	r4, #1
 800c1ee:	6843      	ldr	r3, [r0, #4]
 800c1f0:	b913      	cbnz	r3, 800c1f8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800c1f2:	6803      	ldr	r3, [r0, #0]
 800c1f4:	b313      	cbz	r3, 800c23c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800c1f6:	6043      	str	r3, [r0, #4]
 800c1f8:	7e03      	ldrb	r3, [r0, #24]
 800c1fa:	b143      	cbz	r3, 800c20e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800c1fc:	6943      	ldr	r3, [r0, #20]
 800c1fe:	b12b      	cbz	r3, 800c20c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800c200:	881a      	ldrh	r2, [r3, #0]
 800c202:	b11a      	cbz	r2, 800c20c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800c204:	1c9a      	adds	r2, r3, #2
 800c206:	6142      	str	r2, [r0, #20]
 800c208:	8818      	ldrh	r0, [r3, #0]
 800c20a:	bd30      	pop	{r4, r5, pc}
 800c20c:	7605      	strb	r5, [r0, #24]
 800c20e:	6843      	ldr	r3, [r0, #4]
 800c210:	8819      	ldrh	r1, [r3, #0]
 800c212:	b199      	cbz	r1, 800c23c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800c214:	1c9a      	adds	r2, r3, #2
 800c216:	2902      	cmp	r1, #2
 800c218:	6042      	str	r2, [r0, #4]
 800c21a:	d1f5      	bne.n	800c208 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800c21c:	7c03      	ldrb	r3, [r0, #16]
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d8e5      	bhi.n	800c1ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	3302      	adds	r3, #2
 800c226:	7402      	strb	r2, [r0, #16]
 800c228:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c22c:	6143      	str	r3, [r0, #20]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d0dd      	beq.n	800c1ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d0da      	beq.n	800c1ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c238:	7604      	strb	r4, [r0, #24]
 800c23a:	e7d8      	b.n	800c1ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c23c:	2000      	movs	r0, #0
 800c23e:	e7e4      	b.n	800c20a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800c240 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800c240:	b430      	push	{r4, r5}
 800c242:	6001      	str	r1, [r0, #0]
 800c244:	2100      	movs	r1, #0
 800c246:	6041      	str	r1, [r0, #4]
 800c248:	6815      	ldr	r5, [r2, #0]
 800c24a:	6085      	str	r5, [r0, #8]
 800c24c:	6852      	ldr	r2, [r2, #4]
 800c24e:	6443      	str	r3, [r0, #68]	@ 0x44
 800c250:	9b02      	ldr	r3, [sp, #8]
 800c252:	60c2      	str	r2, [r0, #12]
 800c254:	7401      	strb	r1, [r0, #16]
 800c256:	6141      	str	r1, [r0, #20]
 800c258:	7601      	strb	r1, [r0, #24]
 800c25a:	8701      	strh	r1, [r0, #56]	@ 0x38
 800c25c:	8401      	strh	r1, [r0, #32]
 800c25e:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800c262:	6483      	str	r3, [r0, #72]	@ 0x48
 800c264:	bc30      	pop	{r4, r5}
 800c266:	f7f6 bf21 	b.w	80030ac <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800c26a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800c26a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c26c:	4605      	mov	r5, r0
 800c26e:	4608      	mov	r0, r1
 800c270:	b1e9      	cbz	r1, 800c2ae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800c272:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800c276:	460b      	mov	r3, r1
 800c278:	f101 0708 	add.w	r7, r1, #8
 800c27c:	4622      	mov	r2, r4
 800c27e:	6818      	ldr	r0, [r3, #0]
 800c280:	6859      	ldr	r1, [r3, #4]
 800c282:	4626      	mov	r6, r4
 800c284:	c603      	stmia	r6!, {r0, r1}
 800c286:	3308      	adds	r3, #8
 800c288:	42bb      	cmp	r3, r7
 800c28a:	4634      	mov	r4, r6
 800c28c:	d1f7      	bne.n	800c27e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800c28e:	6818      	ldr	r0, [r3, #0]
 800c290:	6030      	str	r0, [r6, #0]
 800c292:	889b      	ldrh	r3, [r3, #4]
 800c294:	80b3      	strh	r3, [r6, #4]
 800c296:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800c29a:	015b      	lsls	r3, r3, #5
 800c29c:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800c2a0:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800c2a4:	430b      	orrs	r3, r1
 800c2a6:	425b      	negs	r3, r3
 800c2a8:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2b0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800c2b0:	b538      	push	{r3, r4, r5, lr}
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	6811      	ldr	r1, [r2, #0]
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	68cd      	ldr	r5, [r1, #12]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	47a8      	blx	r5
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	bf08      	it	eq
 800c2c2:	4620      	moveq	r0, r4
 800c2c4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c2c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800c2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2cc:	468c      	mov	ip, r1
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	4615      	mov	r5, r2
 800c2d2:	b942      	cbnz	r2, 800c2e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800c2d4:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800c2d8:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800c2dc:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2e6:	7b50      	ldrb	r0, [r2, #13]
 800c2e8:	8893      	ldrh	r3, [r2, #4]
 800c2ea:	0106      	lsls	r6, r0, #4
 800c2ec:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800c2f0:	79ee      	ldrb	r6, [r5, #7]
 800c2f2:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800c2f6:	4316      	orrs	r6, r2
 800c2f8:	185a      	adds	r2, r3, r1
 800c2fa:	b291      	uxth	r1, r2
 800c2fc:	291d      	cmp	r1, #29
 800c2fe:	b2b7      	uxth	r7, r6
 800c300:	d87e      	bhi.n	800c400 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800c302:	2201      	movs	r2, #1
 800c304:	408a      	lsls	r2, r1
 800c306:	4975      	ldr	r1, [pc, #468]	@ (800c4dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800c308:	420a      	tst	r2, r1
 800c30a:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800c30e:	d12d      	bne.n	800c36c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800c310:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800c314:	d074      	beq.n	800c400 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800c316:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800c31a:	462b      	mov	r3, r5
 800c31c:	f105 0e08 	add.w	lr, r5, #8
 800c320:	4615      	mov	r5, r2
 800c322:	6818      	ldr	r0, [r3, #0]
 800c324:	6859      	ldr	r1, [r3, #4]
 800c326:	4694      	mov	ip, r2
 800c328:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800c32c:	3308      	adds	r3, #8
 800c32e:	4573      	cmp	r3, lr
 800c330:	4662      	mov	r2, ip
 800c332:	d1f6      	bne.n	800c322 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800c334:	6818      	ldr	r0, [r3, #0]
 800c336:	f8cc 0000 	str.w	r0, [ip]
 800c33a:	889b      	ldrh	r3, [r3, #4]
 800c33c:	f8ac 3004 	strh.w	r3, [ip, #4]
 800c340:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800c344:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 800c348:	b2b3      	uxth	r3, r6
 800c34a:	1aca      	subs	r2, r1, r3
 800c34c:	b292      	uxth	r2, r2
 800c34e:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 800c352:	10d2      	asrs	r2, r2, #3
 800c354:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800c358:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800c35c:	4302      	orrs	r2, r0
 800c35e:	1bcf      	subs	r7, r1, r7
 800c360:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 800c364:	1afb      	subs	r3, r7, r3
 800c366:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800c36a:	e7b9      	b.n	800c2e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800c36c:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800c370:	462b      	mov	r3, r5
 800c372:	f105 0808 	add.w	r8, r5, #8
 800c376:	4615      	mov	r5, r2
 800c378:	6818      	ldr	r0, [r3, #0]
 800c37a:	6859      	ldr	r1, [r3, #4]
 800c37c:	4696      	mov	lr, r2
 800c37e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800c382:	3308      	adds	r3, #8
 800c384:	4543      	cmp	r3, r8
 800c386:	4672      	mov	r2, lr
 800c388:	d1f6      	bne.n	800c378 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800c38a:	6818      	ldr	r0, [r3, #0]
 800c38c:	f8ce 0000 	str.w	r0, [lr]
 800c390:	889b      	ldrh	r3, [r3, #4]
 800c392:	f8ae 3004 	strh.w	r3, [lr, #4]
 800c396:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800c398:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c39c:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800c39e:	f640 6333 	movw	r3, #3635	@ 0xe33
 800c3a2:	4299      	cmp	r1, r3
 800c3a4:	d111      	bne.n	800c3ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800c3a6:	f8dc 3000 	ldr.w	r3, [ip]
 800c3aa:	4660      	mov	r0, ip
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	4798      	blx	r3
 800c3b0:	7b41      	ldrb	r1, [r0, #13]
 800c3b2:	00cb      	lsls	r3, r1, #3
 800c3b4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c3b8:	7a03      	ldrb	r3, [r0, #8]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	064a      	lsls	r2, r1, #25
 800c3be:	bf44      	itt	mi
 800c3c0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c3c4:	b21b      	sxthmi	r3, r3
 800c3c6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c3ca:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800c3ce:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800c3d2:	443b      	add	r3, r7
 800c3d4:	4433      	add	r3, r6
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c3dc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800c3e0:	10db      	asrs	r3, r3, #3
 800c3e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800c3e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800c3f0:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 800c3f4:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 800c3fe:	e76f      	b.n	800c2e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800c400:	f023 0204 	bic.w	r2, r3, #4
 800c404:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800c408:	428a      	cmp	r2, r1
 800c40a:	d003      	beq.n	800c414 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800c40c:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800c410:	4293      	cmp	r3, r2
 800c412:	d120      	bne.n	800c456 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18e>
 800c414:	3b01      	subs	r3, #1
 800c416:	b29b      	uxth	r3, r3
 800c418:	4662      	mov	r2, ip
 800c41a:	4629      	mov	r1, r5
 800c41c:	4620      	mov	r0, r4
 800c41e:	f7ff ff47 	bl	800c2b0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800c422:	7b41      	ldrb	r1, [r0, #13]
 800c424:	00cb      	lsls	r3, r1, #3
 800c426:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c42a:	7a03      	ldrb	r3, [r0, #8]
 800c42c:	0648      	lsls	r0, r1, #25
 800c42e:	ea43 0302 	orr.w	r3, r3, r2
 800c432:	bf44      	itt	mi
 800c434:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c438:	b21b      	sxthmi	r3, r3
 800c43a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c43e:	7b6b      	ldrb	r3, [r5, #13]
 800c440:	7aaa      	ldrb	r2, [r5, #10]
 800c442:	005b      	lsls	r3, r3, #1
 800c444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c448:	4313      	orrs	r3, r2
 800c44a:	115a      	asrs	r2, r3, #5
 800c44c:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800c450:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800c454:	e032      	b.n	800c4bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800c456:	00c2      	lsls	r2, r0, #3
 800c458:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800c45c:	7a2a      	ldrb	r2, [r5, #8]
 800c45e:	430a      	orrs	r2, r1
 800c460:	0641      	lsls	r1, r0, #25
 800c462:	bf44      	itt	mi
 800c464:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800c468:	b212      	sxthmi	r2, r2
 800c46a:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800c46e:	f640 6109 	movw	r1, #3593	@ 0xe09
 800c472:	f023 0210 	bic.w	r2, r3, #16
 800c476:	428a      	cmp	r2, r1
 800c478:	d003      	beq.n	800c482 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800c47a:	f640 6213 	movw	r2, #3603	@ 0xe13
 800c47e:	4293      	cmp	r3, r2
 800c480:	d129      	bne.n	800c4d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800c482:	7b6e      	ldrb	r6, [r5, #13]
 800c484:	0076      	lsls	r6, r6, #1
 800c486:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800c48a:	7aae      	ldrb	r6, [r5, #10]
 800c48c:	4316      	orrs	r6, r2
 800c48e:	f640 6213 	movw	r2, #3603	@ 0xe13
 800c492:	4293      	cmp	r3, r2
 800c494:	bf1a      	itte	ne
 800c496:	f103 33ff 	addne.w	r3, r3, #4294967295
 800c49a:	b29b      	uxthne	r3, r3
 800c49c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800c4a0:	4662      	mov	r2, ip
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f7ff ff03 	bl	800c2b0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800c4aa:	7b43      	ldrb	r3, [r0, #13]
 800c4ac:	7a82      	ldrb	r2, [r0, #10]
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	1af6      	subs	r6, r6, r3
 800c4b8:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 800c4bc:	7b69      	ldrb	r1, [r5, #13]
 800c4be:	00cb      	lsls	r3, r1, #3
 800c4c0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c4c4:	7a2b      	ldrb	r3, [r5, #8]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	064a      	lsls	r2, r1, #25
 800c4ca:	bf44      	itt	mi
 800c4cc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c4d0:	b21b      	sxthmi	r3, r3
 800c4d2:	1bdb      	subs	r3, r3, r7
 800c4d4:	e747      	b.n	800c366 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	e7ba      	b.n	800c450 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800c4da:	bf00      	nop
 800c4dc:	3fc00079 	.word	0x3fc00079

0800c4e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800c4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	b942      	cbnz	r2, 800c4fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800c4e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4ec:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800c4f0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800c4f4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800c4f8:	e047      	b.n	800c58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800c4fa:	7b51      	ldrb	r1, [r2, #13]
 800c4fc:	8893      	ldrh	r3, [r2, #4]
 800c4fe:	010d      	lsls	r5, r1, #4
 800c500:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800c504:	79d5      	ldrb	r5, [r2, #7]
 800c506:	4305      	orrs	r5, r0
 800c508:	2d04      	cmp	r5, #4
 800c50a:	bfcc      	ite	gt
 800c50c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800c510:	f04f 0e01 	movle.w	lr, #1
 800c514:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800c518:	f200 80ab 	bhi.w	800c672 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800c51c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800c520:	4283      	cmp	r3, r0
 800c522:	d216      	bcs.n	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c524:	f240 605b 	movw	r0, #1627	@ 0x65b
 800c528:	4283      	cmp	r3, r0
 800c52a:	d859      	bhi.n	800c5e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800c52c:	f240 6057 	movw	r0, #1623	@ 0x657
 800c530:	4283      	cmp	r3, r0
 800c532:	d20e      	bcs.n	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c534:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800c538:	d24a      	bcs.n	800c5d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800c53a:	f240 604e 	movw	r0, #1614	@ 0x64e
 800c53e:	4283      	cmp	r3, r0
 800c540:	d207      	bcs.n	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c542:	f240 601a 	movw	r0, #1562	@ 0x61a
 800c546:	4283      	cmp	r3, r0
 800c548:	d02a      	beq.n	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c54a:	d821      	bhi.n	800c590 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800c54c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800c550:	d35b      	bcc.n	800c60a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800c552:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800c556:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800c55a:	f040 80d0 	bne.w	800c6fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800c55e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800c562:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800c566:	f040 80ca 	bne.w	800c6fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800c56a:	00cb      	lsls	r3, r1, #3
 800c56c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800c570:	7a13      	ldrb	r3, [r2, #8]
 800c572:	0649      	lsls	r1, r1, #25
 800c574:	ea43 0300 	orr.w	r3, r3, r0
 800c578:	bf44      	itt	mi
 800c57a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c57e:	b21b      	sxthmi	r3, r3
 800c580:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c584:	1b5d      	subs	r5, r3, r5
 800c586:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800c58a:	4610      	mov	r0, r2
 800c58c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c590:	f240 604b 	movw	r0, #1611	@ 0x64b
 800c594:	4283      	cmp	r3, r0
 800c596:	d338      	bcc.n	800c60a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800c598:	f240 604c 	movw	r0, #1612	@ 0x64c
 800c59c:	4283      	cmp	r3, r0
 800c59e:	d9d8      	bls.n	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c5a0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800c5a4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800c5a8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800c5ac:	f040 80f2 	bne.w	800c794 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800c5b0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800c5b4:	f040 80ee 	bne.w	800c794 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800c5b8:	00cb      	lsls	r3, r1, #3
 800c5ba:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800c5be:	7a13      	ldrb	r3, [r2, #8]
 800c5c0:	064e      	lsls	r6, r1, #25
 800c5c2:	ea43 0300 	orr.w	r3, r3, r0
 800c5c6:	bf44      	itt	mi
 800c5c8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c5cc:	b21b      	sxthmi	r3, r3
 800c5ce:	e7d9      	b.n	800c584 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800c5d0:	f240 6054 	movw	r0, #1620	@ 0x654
 800c5d4:	4283      	cmp	r3, r0
 800c5d6:	d8e3      	bhi.n	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c5d8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800c5dc:	d9e0      	bls.n	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c5de:	e7b8      	b.n	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c5e0:	f240 6074 	movw	r0, #1652	@ 0x674
 800c5e4:	4283      	cmp	r3, r0
 800c5e6:	d0b4      	beq.n	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c5e8:	d82d      	bhi.n	800c646 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800c5ea:	f240 605e 	movw	r0, #1630	@ 0x65e
 800c5ee:	4283      	cmp	r3, r0
 800c5f0:	d804      	bhi.n	800c5fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800c5f2:	f240 605d 	movw	r0, #1629	@ 0x65d
 800c5f6:	4283      	cmp	r3, r0
 800c5f8:	d3d2      	bcc.n	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c5fa:	e7aa      	b.n	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c5fc:	f240 605f 	movw	r0, #1631	@ 0x65f
 800c600:	4283      	cmp	r3, r0
 800c602:	d0cd      	beq.n	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c604:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800c608:	d0a3      	beq.n	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c60a:	00cb      	lsls	r3, r1, #3
 800c60c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800c610:	7a13      	ldrb	r3, [r2, #8]
 800c612:	0649      	lsls	r1, r1, #25
 800c614:	ea43 0300 	orr.w	r3, r3, r0
 800c618:	bf44      	itt	mi
 800c61a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c61e:	b21b      	sxthmi	r3, r3
 800c620:	1b5d      	subs	r5, r3, r5
 800c622:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c626:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800c62a:	7b53      	ldrb	r3, [r2, #13]
 800c62c:	015b      	lsls	r3, r3, #5
 800c62e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800c632:	7993      	ldrb	r3, [r2, #6]
 800c634:	430b      	orrs	r3, r1
 800c636:	005b      	lsls	r3, r3, #1
 800c638:	2105      	movs	r1, #5
 800c63a:	fb93 f3f1 	sdiv	r3, r3, r1
 800c63e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800c642:	440b      	add	r3, r1
 800c644:	e756      	b.n	800c4f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800c646:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800c64a:	4283      	cmp	r3, r0
 800c64c:	d809      	bhi.n	800c662 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800c64e:	f240 60df 	movw	r0, #1759	@ 0x6df
 800c652:	4283      	cmp	r3, r0
 800c654:	f4bf af7d 	bcs.w	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c658:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800c65c:	2b05      	cmp	r3, #5
 800c65e:	d8d4      	bhi.n	800c60a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800c660:	e777      	b.n	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c662:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800c666:	4283      	cmp	r3, r0
 800c668:	d09a      	beq.n	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c66a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800c66e:	4283      	cmp	r3, r0
 800c670:	e7ca      	b.n	800c608 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800c672:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800c676:	d22b      	bcs.n	800c6d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800c678:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800c67c:	4283      	cmp	r3, r0
 800c67e:	d28f      	bcs.n	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c680:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800c684:	4283      	cmp	r3, r0
 800c686:	d816      	bhi.n	800c6b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800c688:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800c68c:	4283      	cmp	r3, r0
 800c68e:	f4bf af60 	bcs.w	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c692:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800c696:	4283      	cmp	r3, r0
 800c698:	d80a      	bhi.n	800c6b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800c69a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800c69e:	4283      	cmp	r3, r0
 800c6a0:	f4bf af57 	bcs.w	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c6a4:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800c6a8:	4283      	cmp	r3, r0
 800c6aa:	f43f af79 	beq.w	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c6ae:	e7ac      	b.n	800c60a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800c6b0:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800c6b4:	e7f8      	b.n	800c6a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800c6b6:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800c6ba:	4283      	cmp	r3, r0
 800c6bc:	d802      	bhi.n	800c6c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800c6be:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800c6c2:	e798      	b.n	800c5f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800c6c4:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800c6c8:	4283      	cmp	r3, r0
 800c6ca:	f47f af42 	bne.w	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c6ce:	e767      	b.n	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c6d0:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800c6d4:	4283      	cmp	r3, r0
 800c6d6:	f43f af63 	beq.w	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c6da:	d802      	bhi.n	800c6e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800c6dc:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800c6e0:	e7f2      	b.n	800c6c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800c6e2:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800c6e6:	4283      	cmp	r3, r0
 800c6e8:	d805      	bhi.n	800c6f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800c6ea:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800c6ee:	4283      	cmp	r3, r0
 800c6f0:	f4ff af2f 	bcc.w	800c552 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c6f4:	e754      	b.n	800c5a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c6f6:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800c6fa:	4283      	cmp	r3, r0
 800c6fc:	e7af      	b.n	800c65e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800c6fe:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800c702:	4617      	mov	r7, r2
 800c704:	f102 0808 	add.w	r8, r2, #8
 800c708:	4666      	mov	r6, ip
 800c70a:	6838      	ldr	r0, [r7, #0]
 800c70c:	6879      	ldr	r1, [r7, #4]
 800c70e:	46e6      	mov	lr, ip
 800c710:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800c714:	3708      	adds	r7, #8
 800c716:	4547      	cmp	r7, r8
 800c718:	46f4      	mov	ip, lr
 800c71a:	d1f6      	bne.n	800c70a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800c71c:	6838      	ldr	r0, [r7, #0]
 800c71e:	f8ce 0000 	str.w	r0, [lr]
 800c722:	88b9      	ldrh	r1, [r7, #4]
 800c724:	f8ae 1004 	strh.w	r1, [lr, #4]
 800c728:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800c72c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800c730:	d009      	beq.n	800c746 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800c732:	7b51      	ldrb	r1, [r2, #13]
 800c734:	7992      	ldrb	r2, [r2, #6]
 800c736:	0149      	lsls	r1, r1, #5
 800c738:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800c73c:	4311      	orrs	r1, r2
 800c73e:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800c742:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800c746:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800c74a:	b2ad      	uxth	r5, r5
 800c74c:	d00d      	beq.n	800c76a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800c74e:	442b      	add	r3, r5
 800c750:	b29b      	uxth	r3, r3
 800c752:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800c756:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800c75a:	10db      	asrs	r3, r3, #3
 800c75c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800c760:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c764:	4313      	orrs	r3, r2
 800c766:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800c76a:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800c76e:	00cb      	lsls	r3, r1, #3
 800c770:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c774:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800c778:	064f      	lsls	r7, r1, #25
 800c77a:	ea43 0302 	orr.w	r3, r3, r2
 800c77e:	bf44      	itt	mi
 800c780:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c784:	b21b      	sxthmi	r3, r3
 800c786:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c78a:	1b5b      	subs	r3, r3, r5
 800c78c:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800c790:	4632      	mov	r2, r6
 800c792:	e6fa      	b.n	800c58a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800c794:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800c798:	4617      	mov	r7, r2
 800c79a:	f102 0908 	add.w	r9, r2, #8
 800c79e:	4666      	mov	r6, ip
 800c7a0:	6838      	ldr	r0, [r7, #0]
 800c7a2:	6879      	ldr	r1, [r7, #4]
 800c7a4:	46e0      	mov	r8, ip
 800c7a6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	454f      	cmp	r7, r9
 800c7ae:	46c4      	mov	ip, r8
 800c7b0:	d1f6      	bne.n	800c7a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800c7b2:	6838      	ldr	r0, [r7, #0]
 800c7b4:	f8c8 0000 	str.w	r0, [r8]
 800c7b8:	88b9      	ldrh	r1, [r7, #4]
 800c7ba:	f8a8 1004 	strh.w	r1, [r8, #4]
 800c7be:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800c7c2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800c7c6:	d009      	beq.n	800c7dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800c7c8:	7b51      	ldrb	r1, [r2, #13]
 800c7ca:	7992      	ldrb	r2, [r2, #6]
 800c7cc:	0149      	lsls	r1, r1, #5
 800c7ce:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800c7d2:	4311      	orrs	r1, r2
 800c7d4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800c7d8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800c7dc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800c7e0:	d00e      	beq.n	800c800 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800c7e2:	eba3 030e 	sub.w	r3, r3, lr
 800c7e6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800c7f0:	10db      	asrs	r3, r3, #3
 800c7f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c7f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800c800:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800c804:	00cb      	lsls	r3, r1, #3
 800c806:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c80a:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800c80e:	0648      	lsls	r0, r1, #25
 800c810:	ea43 0302 	orr.w	r3, r3, r2
 800c814:	bf44      	itt	mi
 800c816:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c81a:	b21b      	sxthmi	r3, r3
 800c81c:	1b5d      	subs	r5, r3, r5
 800c81e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800c822:	e7b5      	b.n	800c790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800c824 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800c824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c828:	461e      	mov	r6, r3
 800c82a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800c82c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c830:	4604      	mov	r4, r0
 800c832:	4617      	mov	r7, r2
 800c834:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800c838:	f7f6 fbf6 	bl	8003028 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c83c:	4605      	mov	r5, r0
 800c83e:	b918      	cbnz	r0, 800c848 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800c840:	6030      	str	r0, [r6, #0]
 800c842:	4628      	mov	r0, r5
 800c844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	4601      	mov	r1, r0
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	4638      	mov	r0, r7
 800c850:	4798      	blx	r3
 800c852:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800c856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c85a:	4602      	mov	r2, r0
 800c85c:	6030      	str	r0, [r6, #0]
 800c85e:	d213      	bcs.n	800c888 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800c860:	4643      	mov	r3, r8
 800c862:	4639      	mov	r1, r7
 800c864:	4620      	mov	r0, r4
 800c866:	f7ff fe3b 	bl	800c4e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800c86a:	6030      	str	r0, [r6, #0]
 800c86c:	6833      	ldr	r3, [r6, #0]
 800c86e:	b143      	cbz	r3, 800c882 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800c870:	7b5a      	ldrb	r2, [r3, #13]
 800c872:	7a9b      	ldrb	r3, [r3, #10]
 800c874:	0052      	lsls	r2, r2, #1
 800c876:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800c87a:	4313      	orrs	r3, r2
 800c87c:	bf0c      	ite	eq
 800c87e:	2301      	moveq	r3, #1
 800c880:	2300      	movne	r3, #0
 800c882:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800c886:	e7dc      	b.n	800c842 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800c888:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c890:	d804      	bhi.n	800c89c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800c892:	4639      	mov	r1, r7
 800c894:	4620      	mov	r0, r4
 800c896:	f7ff fd17 	bl	800c2c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800c89a:	e7e6      	b.n	800c86a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800c89c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d0e3      	beq.n	800c86c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800c8a4:	f640 1302 	movw	r3, #2306	@ 0x902
 800c8a8:	429d      	cmp	r5, r3
 800c8aa:	d1df      	bne.n	800c86c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800c8ac:	4601      	mov	r1, r0
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f7ff fcdb 	bl	800c26a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800c8b4:	e7d9      	b.n	800c86a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800c8b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800c8b6:	b510      	push	{r4, lr}
 800c8b8:	4604      	mov	r4, r0
 800c8ba:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800c8be:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800c8c0:	b1f1      	cbz	r1, 800c900 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800c8c2:	2b0a      	cmp	r3, #10
 800c8c4:	d02f      	beq.n	800c926 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800c8c6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800c8c8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800c8cc:	3901      	subs	r1, #1
 800c8ce:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800c8d0:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800c8d4:	1c51      	adds	r1, r2, #1
 800c8d6:	b289      	uxth	r1, r1
 800c8d8:	2901      	cmp	r1, #1
 800c8da:	bf84      	itt	hi
 800c8dc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c8e0:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800c8e2:	f103 0201 	add.w	r2, r3, #1
 800c8e6:	8722      	strh	r2, [r4, #56]	@ 0x38
 800c8e8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800c8ea:	bf98      	it	ls
 800c8ec:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800c8ee:	4413      	add	r3, r2
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	2b09      	cmp	r3, #9
 800c8f4:	bf88      	it	hi
 800c8f6:	3b0a      	subhi	r3, #10
 800c8f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c8fc:	8458      	strh	r0, [r3, #34]	@ 0x22
 800c8fe:	e7dc      	b.n	800c8ba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800c900:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800c902:	2b0a      	cmp	r3, #10
 800c904:	d00f      	beq.n	800c926 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800c906:	4620      	mov	r0, r4
 800c908:	f7ff fc6e 	bl	800c1e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800c90c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	8722      	strh	r2, [r4, #56]	@ 0x38
 800c912:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800c914:	4413      	add	r3, r2
 800c916:	b29b      	uxth	r3, r3
 800c918:	2b09      	cmp	r3, #9
 800c91a:	bf88      	it	hi
 800c91c:	3b0a      	subhi	r3, #10
 800c91e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c922:	8458      	strh	r0, [r3, #34]	@ 0x22
 800c924:	e7ec      	b.n	800c900 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800c926:	bd10      	pop	{r4, pc}

0800c928 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800c92c:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800c930:	4604      	mov	r4, r0
 800c932:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800c934:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800c936:	3a01      	subs	r2, #1
 800c938:	8702      	strh	r2, [r0, #56]	@ 0x38
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	b292      	uxth	r2, r2
 800c93e:	2a09      	cmp	r2, #9
 800c940:	bf86      	itte	hi
 800c942:	3b09      	subhi	r3, #9
 800c944:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800c946:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800c948:	f7ff ffb5 	bl	800c8b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800c94c:	8c23      	ldrh	r3, [r4, #32]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	bf9c      	itt	ls
 800c952:	3301      	addls	r3, #1
 800c954:	8423      	strhls	r3, [r4, #32]
 800c956:	8be3      	ldrh	r3, [r4, #30]
 800c958:	b90b      	cbnz	r3, 800c95e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800c95a:	2302      	movs	r3, #2
 800c95c:	83e3      	strh	r3, [r4, #30]
 800c95e:	8be3      	ldrh	r3, [r4, #30]
 800c960:	3b01      	subs	r3, #1
 800c962:	b29b      	uxth	r3, r3
 800c964:	83e3      	strh	r3, [r4, #30]
 800c966:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800c96a:	4628      	mov	r0, r5
 800c96c:	8365      	strh	r5, [r4, #26]
 800c96e:	bd38      	pop	{r3, r4, r5, pc}

0800c970 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800c970:	428a      	cmp	r2, r1
 800c972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c976:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800c978:	d931      	bls.n	800c9de <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800c97a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800c97c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800c980:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800c984:	19ee      	adds	r6, r5, r7
 800c986:	1a54      	subs	r4, r2, r1
 800c988:	3e01      	subs	r6, #1
 800c98a:	fa1f fe84 	uxth.w	lr, r4
 800c98e:	b2b4      	uxth	r4, r6
 800c990:	eba4 090e 	sub.w	r9, r4, lr
 800c994:	fa1f f989 	uxth.w	r9, r9
 800c998:	2c09      	cmp	r4, #9
 800c99a:	4626      	mov	r6, r4
 800c99c:	bf88      	it	hi
 800c99e:	f1a4 060a 	subhi.w	r6, r4, #10
 800c9a2:	f1bc 0f00 	cmp.w	ip, #0
 800c9a6:	bf08      	it	eq
 800c9a8:	f04f 0c02 	moveq.w	ip, #2
 800c9ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800c9b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c9b4:	fa1f fc8c 	uxth.w	ip, ip
 800c9b8:	3c01      	subs	r4, #1
 800c9ba:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800c9be:	b2a4      	uxth	r4, r4
 800c9c0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800c9c4:	454c      	cmp	r4, r9
 800c9c6:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800c9ca:	d1e5      	bne.n	800c998 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800c9cc:	eba5 050e 	sub.w	r5, r5, lr
 800c9d0:	eb0e 0408 	add.w	r4, lr, r8
 800c9d4:	8705      	strh	r5, [r0, #56]	@ 0x38
 800c9d6:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800c9da:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800c9de:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800c9e0:	1a64      	subs	r4, r4, r1
 800c9e2:	4439      	add	r1, r7
 800c9e4:	b289      	uxth	r1, r1
 800c9e6:	2909      	cmp	r1, #9
 800c9e8:	bf88      	it	hi
 800c9ea:	390a      	subhi	r1, #10
 800c9ec:	8704      	strh	r4, [r0, #56]	@ 0x38
 800c9ee:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800c9f0:	250a      	movs	r5, #10
 800c9f2:	b18a      	cbz	r2, 800ca18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800c9f4:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800c9f6:	3a01      	subs	r2, #1
 800c9f8:	b292      	uxth	r2, r2
 800c9fa:	3101      	adds	r1, #1
 800c9fc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800ca00:	8701      	strh	r1, [r0, #56]	@ 0x38
 800ca02:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800ca04:	b901      	cbnz	r1, 800ca08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800ca06:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800ca08:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800ca0a:	3901      	subs	r1, #1
 800ca0c:	b289      	uxth	r1, r1
 800ca0e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800ca10:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ca14:	844c      	strh	r4, [r1, #34]	@ 0x22
 800ca16:	e7ec      	b.n	800c9f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800ca18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca1c:	f7ff bf4b 	b.w	800c8b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800ca20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	2500      	movs	r5, #0
 800ca24:	4295      	cmp	r5, r2
 800ca26:	d011      	beq.n	800ca4c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800ca28:	8bc4      	ldrh	r4, [r0, #30]
 800ca2a:	f831 6b02 	ldrh.w	r6, [r1], #2
 800ca2e:	4414      	add	r4, r2
 800ca30:	3c01      	subs	r4, #1
 800ca32:	1b64      	subs	r4, r4, r5
 800ca34:	b2a4      	uxth	r4, r4
 800ca36:	2c01      	cmp	r4, #1
 800ca38:	bf88      	it	hi
 800ca3a:	3c02      	subhi	r4, #2
 800ca3c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ca40:	8b64      	ldrh	r4, [r4, #26]
 800ca42:	42b4      	cmp	r4, r6
 800ca44:	d117      	bne.n	800ca76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800ca46:	3501      	adds	r5, #1
 800ca48:	b2ad      	uxth	r5, r5
 800ca4a:	e7eb      	b.n	800ca24 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800ca4c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ca50:	2400      	movs	r4, #0
 800ca52:	4413      	add	r3, r2
 800ca54:	b2a2      	uxth	r2, r4
 800ca56:	429a      	cmp	r2, r3
 800ca58:	da0f      	bge.n	800ca7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800ca5a:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800ca5c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800ca60:	4432      	add	r2, r6
 800ca62:	b292      	uxth	r2, r2
 800ca64:	2a09      	cmp	r2, #9
 800ca66:	bf88      	it	hi
 800ca68:	3a0a      	subhi	r2, #10
 800ca6a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ca6e:	3401      	adds	r4, #1
 800ca70:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800ca72:	42aa      	cmp	r2, r5
 800ca74:	d0ee      	beq.n	800ca54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800ca76:	2000      	movs	r0, #0
 800ca78:	bd70      	pop	{r4, r5, r6, pc}
 800ca7a:	2001      	movs	r0, #1
 800ca7c:	e7fc      	b.n	800ca78 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800ca7e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800ca7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca82:	4605      	mov	r5, r0
 800ca84:	4616      	mov	r6, r2
 800ca86:	1c8c      	adds	r4, r1, #2
 800ca88:	8809      	ldrh	r1, [r1, #0]
 800ca8a:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800ca8e:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800ca92:	42b3      	cmp	r3, r6
 800ca94:	d124      	bne.n	800cae0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800ca96:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800ca9a:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800ca9e:	f001 070f 	and.w	r7, r1, #15
 800caa2:	f8cd 8000 	str.w	r8, [sp]
 800caa6:	464b      	mov	r3, r9
 800caa8:	4652      	mov	r2, sl
 800caaa:	4621      	mov	r1, r4
 800caac:	4628      	mov	r0, r5
 800caae:	f7ff ffb7 	bl	800ca20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800cab2:	4683      	mov	fp, r0
 800cab4:	b168      	cbz	r0, 800cad2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800cab6:	eb0a 0109 	add.w	r1, sl, r9
 800caba:	4441      	add	r1, r8
 800cabc:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800cac0:	463a      	mov	r2, r7
 800cac2:	4649      	mov	r1, r9
 800cac4:	4628      	mov	r0, r5
 800cac6:	f7ff ff53 	bl	800c970 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800caca:	4658      	mov	r0, fp
 800cacc:	b003      	add	sp, #12
 800cace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad2:	eb07 010a 	add.w	r1, r7, sl
 800cad6:	4449      	add	r1, r9
 800cad8:	4441      	add	r1, r8
 800cada:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800cade:	e7d2      	b.n	800ca86 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800cae0:	f04f 0b00 	mov.w	fp, #0
 800cae4:	e7f1      	b.n	800caca <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800cae6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800cae6:	b570      	push	{r4, r5, r6, lr}
 800cae8:	8810      	ldrh	r0, [r2, #0]
 800caea:	4298      	cmp	r0, r3
 800caec:	d817      	bhi.n	800cb1e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800caee:	1e48      	subs	r0, r1, #1
 800caf0:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800caf4:	4298      	cmp	r0, r3
 800caf6:	d312      	bcc.n	800cb1e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800caf8:	2400      	movs	r4, #0
 800cafa:	428c      	cmp	r4, r1
 800cafc:	d20f      	bcs.n	800cb1e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800cafe:	1860      	adds	r0, r4, r1
 800cb00:	1040      	asrs	r0, r0, #1
 800cb02:	0085      	lsls	r5, r0, #2
 800cb04:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800cb08:	42b3      	cmp	r3, r6
 800cb0a:	d902      	bls.n	800cb12 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	b284      	uxth	r4, r0
 800cb10:	e7f3      	b.n	800cafa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800cb12:	d201      	bcs.n	800cb18 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800cb14:	b281      	uxth	r1, r0
 800cb16:	e7f0      	b.n	800cafa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800cb18:	442a      	add	r2, r5
 800cb1a:	8850      	ldrh	r0, [r2, #2]
 800cb1c:	bd70      	pop	{r4, r5, r6, pc}
 800cb1e:	2000      	movs	r0, #0
 800cb20:	e7fc      	b.n	800cb1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800cb22 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800cb22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb26:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800cb28:	886f      	ldrh	r7, [r5, #2]
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	087f      	lsrs	r7, r7, #1
 800cb2e:	260b      	movs	r6, #11
 800cb30:	3e01      	subs	r6, #1
 800cb32:	d013      	beq.n	800cb5c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800cb34:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800cb36:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800cb3a:	462a      	mov	r2, r5
 800cb3c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800cb40:	4639      	mov	r1, r7
 800cb42:	4643      	mov	r3, r8
 800cb44:	4620      	mov	r0, r4
 800cb46:	f7ff ffce 	bl	800cae6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800cb4a:	b138      	cbz	r0, 800cb5c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800cb4c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800cb50:	4642      	mov	r2, r8
 800cb52:	4620      	mov	r0, r4
 800cb54:	f7ff ff93 	bl	800ca7e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d1e9      	bne.n	800cb30 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800cb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800cb60:	b570      	push	{r4, r5, r6, lr}
 800cb62:	694a      	ldr	r2, [r1, #20]
 800cb64:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800cb66:	684b      	ldr	r3, [r1, #4]
 800cb68:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800cb6a:	1b54      	subs	r4, r2, r5
 800cb6c:	f000 8106 	beq.w	800cd7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800cb70:	1b9b      	subs	r3, r3, r6
 800cb72:	d003      	beq.n	800cb7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800cb74:	4363      	muls	r3, r4
 800cb76:	2210      	movs	r2, #16
 800cb78:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb7c:	680c      	ldr	r4, [r1, #0]
 800cb7e:	698a      	ldr	r2, [r1, #24]
 800cb80:	1b65      	subs	r5, r4, r5
 800cb82:	f000 80fd 	beq.w	800cd80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800cb86:	1b92      	subs	r2, r2, r6
 800cb88:	d003      	beq.n	800cb92 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800cb8a:	436a      	muls	r2, r5
 800cb8c:	2410      	movs	r4, #16
 800cb8e:	fb92 f2f4 	sdiv	r2, r2, r4
 800cb92:	1a9b      	subs	r3, r3, r2
 800cb94:	ee07 3a90 	vmov	s15, r3
 800cb98:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800cdbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800cb9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cba4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cba8:	460a      	mov	r2, r1
 800cbaa:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800cbae:	4603      	mov	r3, r0
 800cbb0:	f100 040c 	add.w	r4, r0, #12
 800cbb4:	eeb1 6a43 	vneg.f32	s12, s6
 800cbb8:	edd2 7a02 	vldr	s15, [r2, #8]
 800cbbc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cbc0:	3214      	adds	r2, #20
 800cbc2:	ece3 6a01 	vstmia	r3!, {s13}
 800cbc6:	ed52 7a02 	vldr	s15, [r2, #-8]
 800cbca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cbce:	429c      	cmp	r4, r3
 800cbd0:	edc3 7a02 	vstr	s15, [r3, #8]
 800cbd4:	ed52 7a01 	vldr	s15, [r2, #-4]
 800cbd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cbdc:	edc3 7a05 	vstr	s15, [r3, #20]
 800cbe0:	d1ea      	bne.n	800cbb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800cbe2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800cbe4:	698b      	ldr	r3, [r1, #24]
 800cbe6:	edd0 4a02 	vldr	s9, [r0, #8]
 800cbea:	edd0 3a00 	vldr	s7, [r0]
 800cbee:	edd0 6a01 	vldr	s13, [r0, #4]
 800cbf2:	ed90 5a05 	vldr	s10, [r0, #20]
 800cbf6:	ed90 2a03 	vldr	s4, [r0, #12]
 800cbfa:	edd0 5a04 	vldr	s11, [r0, #16]
 800cbfe:	ed90 1a07 	vldr	s2, [r0, #28]
 800cc02:	edd0 2a06 	vldr	s5, [r0, #24]
 800cc06:	1a9b      	subs	r3, r3, r2
 800cc08:	ee07 3a90 	vmov	s15, r3
 800cc0c:	684b      	ldr	r3, [r1, #4]
 800cc0e:	1a9b      	subs	r3, r3, r2
 800cc10:	ee07 3a10 	vmov	s14, r3
 800cc14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc18:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800cc1c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cc20:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800cc24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc28:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800cc2c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cc30:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800cc34:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cc38:	ee32 5a45 	vsub.f32	s10, s4, s10
 800cc3c:	ee67 7a83 	vmul.f32	s15, s15, s6
 800cc40:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800cc44:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800cc46:	694a      	ldr	r2, [r1, #20]
 800cc48:	1b13      	subs	r3, r2, r4
 800cc4a:	ee07 3a10 	vmov	s14, r3
 800cc4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc52:	680b      	ldr	r3, [r1, #0]
 800cc54:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cc58:	1b1b      	subs	r3, r3, r4
 800cc5a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800cc5e:	ee07 3a10 	vmov	s14, r3
 800cc62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc66:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cc6a:	eee6 4a87 	vfma.f32	s9, s13, s14
 800cc6e:	ee64 4a86 	vmul.f32	s9, s9, s12
 800cc72:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800cc76:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800cc78:	698b      	ldr	r3, [r1, #24]
 800cc7a:	1a9b      	subs	r3, r3, r2
 800cc7c:	ee06 3a90 	vmov	s13, r3
 800cc80:	684b      	ldr	r3, [r1, #4]
 800cc82:	1a9b      	subs	r3, r3, r2
 800cc84:	ee07 3a10 	vmov	s14, r3
 800cc88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cc8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc90:	ee66 6a84 	vmul.f32	s13, s13, s8
 800cc94:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cc98:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800cc9c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800cca0:	ee66 6a83 	vmul.f32	s13, s13, s6
 800cca4:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800cca8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800ccaa:	694a      	ldr	r2, [r1, #20]
 800ccac:	1b13      	subs	r3, r2, r4
 800ccae:	ee07 3a10 	vmov	s14, r3
 800ccb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ccb6:	680b      	ldr	r3, [r1, #0]
 800ccb8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ccbc:	1b1b      	subs	r3, r3, r4
 800ccbe:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800ccc2:	ee07 3a10 	vmov	s14, r3
 800ccc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ccca:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ccce:	eea5 5a87 	vfma.f32	s10, s11, s14
 800ccd2:	edd0 5a08 	vldr	s11, [r0, #32]
 800ccd6:	ee25 5a06 	vmul.f32	s10, s10, s12
 800ccda:	ee31 1a65 	vsub.f32	s2, s2, s11
 800ccde:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800cce2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800cce4:	698b      	ldr	r3, [r1, #24]
 800cce6:	1a9b      	subs	r3, r3, r2
 800cce8:	ee07 3a10 	vmov	s14, r3
 800ccec:	684b      	ldr	r3, [r1, #4]
 800ccee:	1a9b      	subs	r3, r3, r2
 800ccf0:	ee01 3a90 	vmov	s3, r3
 800ccf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ccf8:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800ccfc:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cd00:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800cd04:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800cd08:	ee61 1a84 	vmul.f32	s3, s3, s8
 800cd0c:	eea1 7a21 	vfma.f32	s14, s2, s3
 800cd10:	ee27 7a03 	vmul.f32	s14, s14, s6
 800cd14:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800cd18:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800cd1a:	694a      	ldr	r2, [r1, #20]
 800cd1c:	1b13      	subs	r3, r2, r4
 800cd1e:	ee03 3a10 	vmov	s6, r3
 800cd22:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800cd26:	680b      	ldr	r3, [r1, #0]
 800cd28:	ee23 3a04 	vmul.f32	s6, s6, s8
 800cd2c:	1b1b      	subs	r3, r3, r4
 800cd2e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800cd32:	ee03 3a10 	vmov	s6, r3
 800cd36:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800cd3a:	ee23 4a04 	vmul.f32	s8, s6, s8
 800cd3e:	eee1 5a04 	vfma.f32	s11, s2, s8
 800cd42:	ee25 6a86 	vmul.f32	s12, s11, s12
 800cd46:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800cd4a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800cd4e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800cd52:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800cd56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5a:	dd13      	ble.n	800cd84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800cd5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd60:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800cd64:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800cd66:	eee3 7a87 	vfma.f32	s15, s7, s14
 800cd6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd72:	dd15      	ble.n	800cda0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800cd74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd78:	6403      	str	r3, [r0, #64]	@ 0x40
 800cd7a:	bd70      	pop	{r4, r5, r6, pc}
 800cd7c:	4623      	mov	r3, r4
 800cd7e:	e6fd      	b.n	800cb7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800cd80:	462a      	mov	r2, r5
 800cd82:	e706      	b.n	800cb92 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800cd84:	d502      	bpl.n	800cd8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800cd86:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800cd8a:	e7e9      	b.n	800cd60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800cd8c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800cd90:	eea3 2a85 	vfma.f32	s4, s7, s10
 800cd94:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800cd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd9c:	dade      	bge.n	800cd5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800cd9e:	e7f2      	b.n	800cd86 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800cda0:	d502      	bpl.n	800cda8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800cda2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800cda6:	e7e7      	b.n	800cd78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800cda8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800cdac:	eee3 4a86 	vfma.f32	s9, s7, s12
 800cdb0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800cdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb8:	dadc      	bge.n	800cd74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800cdba:	e7f2      	b.n	800cda2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800cdbc:	3d800000 	.word	0x3d800000

0800cdc0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800cdc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc4:	2714      	movs	r7, #20
 800cdc6:	435f      	muls	r7, r3
 800cdc8:	eb02 0c07 	add.w	ip, r2, r7
 800cdcc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800cdd0:	f115 0e0f 	adds.w	lr, r5, #15
 800cdd4:	f100 80a2 	bmi.w	800cf1c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800cdd8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800cddc:	9c08      	ldr	r4, [sp, #32]
 800cdde:	f8c0 e014 	str.w	lr, [r0, #20]
 800cde2:	2614      	movs	r6, #20
 800cde4:	4366      	muls	r6, r4
 800cde6:	eb02 0806 	add.w	r8, r2, r6
 800cdea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cdee:	f115 040f 	adds.w	r4, r5, #15
 800cdf2:	f100 809f 	bmi.w	800cf34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800cdf6:	1124      	asrs	r4, r4, #4
 800cdf8:	eba4 040e 	sub.w	r4, r4, lr
 800cdfc:	6184      	str	r4, [r0, #24]
 800cdfe:	2c00      	cmp	r4, #0
 800ce00:	f000 808a 	beq.w	800cf18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800ce04:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800ce08:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ce0c:	5995      	ldr	r5, [r2, r6]
 800ce0e:	eba4 0809 	sub.w	r8, r4, r9
 800ce12:	59d4      	ldr	r4, [r2, r7]
 800ce14:	eba5 0a04 	sub.w	sl, r5, r4
 800ce18:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800ce1c:	fb0e fe05 	mul.w	lr, lr, r5
 800ce20:	fb0a ee19 	mls	lr, sl, r9, lr
 800ce24:	fb08 e404 	mla	r4, r8, r4, lr
 800ce28:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800ce2c:	3c01      	subs	r4, #1
 800ce2e:	19a4      	adds	r4, r4, r6
 800ce30:	f100 808c 	bmi.w	800cf4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800ce34:	fb94 fef6 	sdiv	lr, r4, r6
 800ce38:	f8c0 e000 	str.w	lr, [r0]
 800ce3c:	fb06 441e 	mls	r4, r6, lr, r4
 800ce40:	6104      	str	r4, [r0, #16]
 800ce42:	2d00      	cmp	r5, #0
 800ce44:	f2c0 8095 	blt.w	800cf72 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800ce48:	fb95 f4f6 	sdiv	r4, r5, r6
 800ce4c:	6044      	str	r4, [r0, #4]
 800ce4e:	fb06 5514 	mls	r5, r6, r4, r5
 800ce52:	6085      	str	r5, [r0, #8]
 800ce54:	60c6      	str	r6, [r0, #12]
 800ce56:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800ce5a:	6945      	ldr	r5, [r0, #20]
 800ce5c:	59d2      	ldr	r2, [r2, r7]
 800ce5e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800cf94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800ce62:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800ce66:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800ce6a:	ee07 4a10 	vmov	s14, r4
 800ce6e:	6804      	ldr	r4, [r0, #0]
 800ce70:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800ce74:	ee07 2a90 	vmov	s15, r2
 800ce78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ce7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce80:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ce84:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce8c:	edd3 6a00 	vldr	s13, [r3]
 800ce90:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ce94:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 800ce98:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ce9c:	edc0 6a07 	vstr	s13, [r0, #28]
 800cea0:	edd0 6a01 	vldr	s13, [r0, #4]
 800cea4:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 800cea8:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800ceac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ceb0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800ceb4:	ed80 6a08 	vstr	s12, [r0, #32]
 800ceb8:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800ceba:	6242      	str	r2, [r0, #36]	@ 0x24
 800cebc:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 800cec0:	ed93 6a03 	vldr	s12, [r3, #12]
 800cec4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cec8:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800cecc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800ced0:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 800ced4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800ced8:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 800cedc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800cee0:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 800cee4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800cee6:	6302      	str	r2, [r0, #48]	@ 0x30
 800cee8:	ed93 6a06 	vldr	s12, [r3, #24]
 800ceec:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 800cef0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cef4:	eeb0 7a46 	vmov.f32	s14, s12
 800cef8:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 800cefc:	eea6 7a27 	vfma.f32	s14, s12, s15
 800cf00:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800cf04:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800cf08:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 800cf0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cf10:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 800cf14:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800cf16:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800cf18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf1c:	f1c5 0501 	rsb	r5, r5, #1
 800cf20:	f015 050f 	ands.w	r5, r5, #15
 800cf24:	bf18      	it	ne
 800cf26:	2501      	movne	r5, #1
 800cf28:	2410      	movs	r4, #16
 800cf2a:	fb9e fef4 	sdiv	lr, lr, r4
 800cf2e:	ebae 0e05 	sub.w	lr, lr, r5
 800cf32:	e753      	b.n	800cddc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800cf34:	f1c5 0501 	rsb	r5, r5, #1
 800cf38:	f015 050f 	ands.w	r5, r5, #15
 800cf3c:	bf18      	it	ne
 800cf3e:	2501      	movne	r5, #1
 800cf40:	f04f 0910 	mov.w	r9, #16
 800cf44:	fb94 f4f9 	sdiv	r4, r4, r9
 800cf48:	1b64      	subs	r4, r4, r5
 800cf4a:	e755      	b.n	800cdf8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800cf4c:	4264      	negs	r4, r4
 800cf4e:	fb94 fef6 	sdiv	lr, r4, r6
 800cf52:	f1ce 0800 	rsb	r8, lr, #0
 800cf56:	fb06 441e 	mls	r4, r6, lr, r4
 800cf5a:	f8c0 8000 	str.w	r8, [r0]
 800cf5e:	6104      	str	r4, [r0, #16]
 800cf60:	2c00      	cmp	r4, #0
 800cf62:	f43f af6e 	beq.w	800ce42 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800cf66:	ea6f 0e0e 	mvn.w	lr, lr
 800cf6a:	f8c0 e000 	str.w	lr, [r0]
 800cf6e:	1b34      	subs	r4, r6, r4
 800cf70:	e766      	b.n	800ce40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800cf72:	426d      	negs	r5, r5
 800cf74:	fb95 f4f6 	sdiv	r4, r5, r6
 800cf78:	f1c4 0e00 	rsb	lr, r4, #0
 800cf7c:	fb06 5514 	mls	r5, r6, r4, r5
 800cf80:	f8c0 e004 	str.w	lr, [r0, #4]
 800cf84:	6085      	str	r5, [r0, #8]
 800cf86:	2d00      	cmp	r5, #0
 800cf88:	f43f af64 	beq.w	800ce54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800cf8c:	43e4      	mvns	r4, r4
 800cf8e:	6044      	str	r4, [r0, #4]
 800cf90:	1b75      	subs	r5, r6, r5
 800cf92:	e75e      	b.n	800ce52 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800cf94:	3d800000 	.word	0x3d800000

0800cf98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800cf98:	4b01      	ldr	r3, [pc, #4]	@ (800cfa0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800cf9a:	6018      	str	r0, [r3, #0]
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	20012494 	.word	0x20012494

0800cfa4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800cfa4:	4b06      	ldr	r3, [pc, #24]	@ (800cfc0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800cfa6:	881a      	ldrh	r2, [r3, #0]
 800cfa8:	4282      	cmp	r2, r0
 800cfaa:	d807      	bhi.n	800cfbc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800cfac:	4b05      	ldr	r3, [pc, #20]	@ (800cfc4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800cfae:	881b      	ldrh	r3, [r3, #0]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	4298      	cmp	r0, r3
 800cfb4:	bfac      	ite	ge
 800cfb6:	2000      	movge	r0, #0
 800cfb8:	2001      	movlt	r0, #1
 800cfba:	4770      	bx	lr
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	4770      	bx	lr
 800cfc0:	200124b4 	.word	0x200124b4
 800cfc4:	200124b8 	.word	0x200124b8

0800cfc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800cfc8:	b508      	push	{r3, lr}
 800cfca:	4601      	mov	r1, r0
 800cfcc:	f7ff ffea 	bl	800cfa4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800cfd0:	b118      	cbz	r0, 800cfda <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800cfd2:	4b02      	ldr	r3, [pc, #8]	@ (800cfdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800cfda:	bd08      	pop	{r3, pc}
 800cfdc:	20012498 	.word	0x20012498

0800cfe0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800cfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfe2:	4c24      	ldr	r4, [pc, #144]	@ (800d074 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d042      	beq.n	800d070 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800cfea:	4a23      	ldr	r2, [pc, #140]	@ (800d078 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800cfec:	4d23      	ldr	r5, [pc, #140]	@ (800d07c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800cfee:	8811      	ldrh	r1, [r2, #0]
 800cff0:	f8b5 c000 	ldrh.w	ip, [r5]
 800cff4:	4822      	ldr	r0, [pc, #136]	@ (800d080 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800cff6:	4461      	add	r1, ip
 800cff8:	1c4a      	adds	r2, r1, #1
 800cffa:	f022 0201 	bic.w	r2, r2, #1
 800cffe:	008f      	lsls	r7, r1, #2
 800d000:	0412      	lsls	r2, r2, #16
 800d002:	19de      	adds	r6, r3, r7
 800d004:	0c12      	lsrs	r2, r2, #16
 800d006:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800d00a:	6006      	str	r6, [r0, #0]
 800d00c:	4e1d      	ldr	r6, [pc, #116]	@ (800d084 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800d00e:	19da      	adds	r2, r3, r7
 800d010:	6032      	str	r2, [r6, #0]
 800d012:	220e      	movs	r2, #14
 800d014:	fb02 f20c 	mul.w	r2, r2, ip
 800d018:	3203      	adds	r2, #3
 800d01a:	f022 0203 	bic.w	r2, r2, #3
 800d01e:	443a      	add	r2, r7
 800d020:	4f19      	ldr	r7, [pc, #100]	@ (800d088 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800d022:	4413      	add	r3, r2
 800d024:	603b      	str	r3, [r7, #0]
 800d026:	4f19      	ldr	r7, [pc, #100]	@ (800d08c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800d028:	2300      	movs	r3, #0
 800d02a:	803b      	strh	r3, [r7, #0]
 800d02c:	4f18      	ldr	r7, [pc, #96]	@ (800d090 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800d02e:	683f      	ldr	r7, [r7, #0]
 800d030:	1aba      	subs	r2, r7, r2
 800d032:	4f18      	ldr	r7, [pc, #96]	@ (800d094 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800d034:	603a      	str	r2, [r7, #0]
 800d036:	4a18      	ldr	r2, [pc, #96]	@ (800d098 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800d038:	469c      	mov	ip, r3
 800d03a:	8013      	strh	r3, [r2, #0]
 800d03c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800d040:	428b      	cmp	r3, r1
 800d042:	d10d      	bne.n	800d060 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800d044:	882d      	ldrh	r5, [r5, #0]
 800d046:	6830      	ldr	r0, [r6, #0]
 800d048:	2300      	movs	r3, #0
 800d04a:	240e      	movs	r4, #14
 800d04c:	429d      	cmp	r5, r3
 800d04e:	d90f      	bls.n	800d070 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800d050:	fb04 0203 	mla	r2, r4, r3, r0
 800d054:	3301      	adds	r3, #1
 800d056:	7b11      	ldrb	r1, [r2, #12]
 800d058:	f36f 1145 	bfc	r1, #5, #1
 800d05c:	7311      	strb	r1, [r2, #12]
 800d05e:	e7f5      	b.n	800d04c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800d060:	6822      	ldr	r2, [r4, #0]
 800d062:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800d066:	6802      	ldr	r2, [r0, #0]
 800d068:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800d06c:	3301      	adds	r3, #1
 800d06e:	e7e7      	b.n	800d040 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800d070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d072:	bf00      	nop
 800d074:	20012498 	.word	0x20012498
 800d078:	200124b4 	.word	0x200124b4
 800d07c:	200124b8 	.word	0x200124b8
 800d080:	200124ac 	.word	0x200124ac
 800d084:	2001249c 	.word	0x2001249c
 800d088:	200124a4 	.word	0x200124a4
 800d08c:	200124b6 	.word	0x200124b6
 800d090:	200124a0 	.word	0x200124a0
 800d094:	200124b0 	.word	0x200124b0
 800d098:	200124a8 	.word	0x200124a8

0800d09c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800d09c:	4b06      	ldr	r3, [pc, #24]	@ (800d0b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	b943      	cbnz	r3, 800d0b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800d0a2:	b139      	cbz	r1, 800d0b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800d0a4:	4b05      	ldr	r3, [pc, #20]	@ (800d0bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800d0a6:	801a      	strh	r2, [r3, #0]
 800d0a8:	4b05      	ldr	r3, [pc, #20]	@ (800d0c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800d0aa:	6019      	str	r1, [r3, #0]
 800d0ac:	4b05      	ldr	r3, [pc, #20]	@ (800d0c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800d0ae:	6018      	str	r0, [r3, #0]
 800d0b0:	f7ff bf96 	b.w	800cfe0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	200124a4 	.word	0x200124a4
 800d0bc:	200124b8 	.word	0x200124b8
 800d0c0:	200124a0 	.word	0x200124a0
 800d0c4:	20012498 	.word	0x20012498

0800d0c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800d0c8:	b470      	push	{r4, r5, r6}
 800d0ca:	4c07      	ldr	r4, [pc, #28]	@ (800d0e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800d0cc:	6826      	ldr	r6, [r4, #0]
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	9a03      	ldr	r2, [sp, #12]
 800d0d4:	b936      	cbnz	r6, 800d0e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800d0d6:	6025      	str	r5, [r4, #0]
 800d0d8:	4c04      	ldr	r4, [pc, #16]	@ (800d0ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800d0da:	8021      	strh	r1, [r4, #0]
 800d0dc:	bc70      	pop	{r4, r5, r6}
 800d0de:	4619      	mov	r1, r3
 800d0e0:	f7ff bfdc 	b.w	800d09c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800d0e4:	bc70      	pop	{r4, r5, r6}
 800d0e6:	4770      	bx	lr
 800d0e8:	200124bc 	.word	0x200124bc
 800d0ec:	200124b4 	.word	0x200124b4

0800d0f0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800d0f0:	4a12      	ldr	r2, [pc, #72]	@ (800d13c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800d0f2:	8803      	ldrh	r3, [r0, #0]
 800d0f4:	8812      	ldrh	r2, [r2, #0]
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d207      	bcs.n	800d10a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800d0fa:	4a11      	ldr	r2, [pc, #68]	@ (800d140 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800d0fc:	6812      	ldr	r2, [r2, #0]
 800d0fe:	2114      	movs	r1, #20
 800d100:	fb01 2303 	mla	r3, r1, r3, r2
 800d104:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800d108:	4770      	bx	lr
 800d10a:	490e      	ldr	r1, [pc, #56]	@ (800d144 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800d10c:	8809      	ldrh	r1, [r1, #0]
 800d10e:	4411      	add	r1, r2
 800d110:	428b      	cmp	r3, r1
 800d112:	da04      	bge.n	800d11e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800d114:	1a9b      	subs	r3, r3, r2
 800d116:	4a0c      	ldr	r2, [pc, #48]	@ (800d148 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800d118:	210e      	movs	r1, #14
 800d11a:	6812      	ldr	r2, [r2, #0]
 800d11c:	e7f0      	b.n	800d100 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800d11e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d122:	4293      	cmp	r3, r2
 800d124:	d108      	bne.n	800d138 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800d126:	4b09      	ldr	r3, [pc, #36]	@ (800d14c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	b91b      	cbnz	r3, 800d134 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800d12c:	4b08      	ldr	r3, [pc, #32]	@ (800d150 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800d12e:	f9b3 0000 	ldrsh.w	r0, [r3]
 800d132:	4770      	bx	lr
 800d134:	4b07      	ldr	r3, [pc, #28]	@ (800d154 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800d136:	e7fa      	b.n	800d12e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800d138:	2000      	movs	r0, #0
 800d13a:	4770      	bx	lr
 800d13c:	200124b4 	.word	0x200124b4
 800d140:	200124bc 	.word	0x200124bc
 800d144:	200124b8 	.word	0x200124b8
 800d148:	2001249c 	.word	0x2001249c
 800d14c:	2001242c 	.word	0x2001242c
 800d150:	2001242e 	.word	0x2001242e
 800d154:	20012430 	.word	0x20012430

0800d158 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800d158:	4a12      	ldr	r2, [pc, #72]	@ (800d1a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800d15a:	8803      	ldrh	r3, [r0, #0]
 800d15c:	8812      	ldrh	r2, [r2, #0]
 800d15e:	4293      	cmp	r3, r2
 800d160:	d207      	bcs.n	800d172 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800d162:	4a11      	ldr	r2, [pc, #68]	@ (800d1a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800d164:	6812      	ldr	r2, [r2, #0]
 800d166:	2114      	movs	r1, #20
 800d168:	fb01 2303 	mla	r3, r1, r3, r2
 800d16c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800d170:	4770      	bx	lr
 800d172:	490e      	ldr	r1, [pc, #56]	@ (800d1ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800d174:	8809      	ldrh	r1, [r1, #0]
 800d176:	4411      	add	r1, r2
 800d178:	428b      	cmp	r3, r1
 800d17a:	da04      	bge.n	800d186 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800d17c:	1a9b      	subs	r3, r3, r2
 800d17e:	4a0c      	ldr	r2, [pc, #48]	@ (800d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800d180:	210e      	movs	r1, #14
 800d182:	6812      	ldr	r2, [r2, #0]
 800d184:	e7f0      	b.n	800d168 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800d186:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d108      	bne.n	800d1a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800d18e:	4b09      	ldr	r3, [pc, #36]	@ (800d1b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	b91b      	cbnz	r3, 800d19c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800d194:	4b08      	ldr	r3, [pc, #32]	@ (800d1b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800d196:	f9b3 0000 	ldrsh.w	r0, [r3]
 800d19a:	4770      	bx	lr
 800d19c:	4b07      	ldr	r3, [pc, #28]	@ (800d1bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800d19e:	e7fa      	b.n	800d196 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	4770      	bx	lr
 800d1a4:	200124b4 	.word	0x200124b4
 800d1a8:	200124bc 	.word	0x200124bc
 800d1ac:	200124b8 	.word	0x200124b8
 800d1b0:	2001249c 	.word	0x2001249c
 800d1b4:	2001242c 	.word	0x2001242c
 800d1b8:	20012430 	.word	0x20012430
 800d1bc:	2001242e 	.word	0x2001242e

0800d1c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800d1c0:	b530      	push	{r4, r5, lr}
 800d1c2:	4a22      	ldr	r2, [pc, #136]	@ (800d24c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800d1c4:	880b      	ldrh	r3, [r1, #0]
 800d1c6:	8812      	ldrh	r2, [r2, #0]
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d213      	bcs.n	800d1f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800d1cc:	4a20      	ldr	r2, [pc, #128]	@ (800d250 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800d1ce:	6812      	ldr	r2, [r2, #0]
 800d1d0:	2114      	movs	r1, #20
 800d1d2:	fb01 2303 	mla	r3, r1, r3, r2
 800d1d6:	8a1a      	ldrh	r2, [r3, #16]
 800d1d8:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800d1dc:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800d1e0:	8a5b      	ldrh	r3, [r3, #18]
 800d1e2:	8004      	strh	r4, [r0, #0]
 800d1e4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800d1e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1ec:	8041      	strh	r1, [r0, #2]
 800d1ee:	8082      	strh	r2, [r0, #4]
 800d1f0:	80c3      	strh	r3, [r0, #6]
 800d1f2:	e024      	b.n	800d23e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 800d1f4:	4917      	ldr	r1, [pc, #92]	@ (800d254 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800d1f6:	8809      	ldrh	r1, [r1, #0]
 800d1f8:	4411      	add	r1, r2
 800d1fa:	428b      	cmp	r3, r1
 800d1fc:	da10      	bge.n	800d220 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 800d1fe:	1a9b      	subs	r3, r3, r2
 800d200:	220e      	movs	r2, #14
 800d202:	4353      	muls	r3, r2
 800d204:	4a14      	ldr	r2, [pc, #80]	@ (800d258 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 800d206:	6811      	ldr	r1, [r2, #0]
 800d208:	18ca      	adds	r2, r1, r3
 800d20a:	5ecd      	ldrsh	r5, [r1, r3]
 800d20c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800d210:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800d214:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800d218:	8005      	strh	r5, [r0, #0]
 800d21a:	8044      	strh	r4, [r0, #2]
 800d21c:	8081      	strh	r1, [r0, #4]
 800d21e:	e7e7      	b.n	800d1f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800d220:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d224:	4293      	cmp	r3, r2
 800d226:	d10b      	bne.n	800d240 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 800d228:	4b0c      	ldr	r3, [pc, #48]	@ (800d25c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 800d22a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d22e:	4b0c      	ldr	r3, [pc, #48]	@ (800d260 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 800d230:	8081      	strh	r1, [r0, #4]
 800d232:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d236:	80c2      	strh	r2, [r0, #6]
 800d238:	2300      	movs	r3, #0
 800d23a:	8003      	strh	r3, [r0, #0]
 800d23c:	8043      	strh	r3, [r0, #2]
 800d23e:	bd30      	pop	{r4, r5, pc}
 800d240:	2300      	movs	r3, #0
 800d242:	8003      	strh	r3, [r0, #0]
 800d244:	8043      	strh	r3, [r0, #2]
 800d246:	8083      	strh	r3, [r0, #4]
 800d248:	e7d2      	b.n	800d1f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800d24a:	bf00      	nop
 800d24c:	200124b4 	.word	0x200124b4
 800d250:	200124bc 	.word	0x200124bc
 800d254:	200124b8 	.word	0x200124b8
 800d258:	2001249c 	.word	0x2001249c
 800d25c:	20012428 	.word	0x20012428
 800d260:	2001242a 	.word	0x2001242a

0800d264 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 800d264:	4a17      	ldr	r2, [pc, #92]	@ (800d2c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 800d266:	8803      	ldrh	r3, [r0, #0]
 800d268:	8812      	ldrh	r2, [r2, #0]
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d213      	bcs.n	800d296 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 800d26e:	4a16      	ldr	r2, [pc, #88]	@ (800d2c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 800d270:	6812      	ldr	r2, [r2, #0]
 800d272:	2114      	movs	r1, #20
 800d274:	fb01 2303 	mla	r3, r1, r3, r2
 800d278:	8a1a      	ldrh	r2, [r3, #16]
 800d27a:	8919      	ldrh	r1, [r3, #8]
 800d27c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800d280:	428a      	cmp	r2, r1
 800d282:	db1d      	blt.n	800d2c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800d284:	8a58      	ldrh	r0, [r3, #18]
 800d286:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d28a:	895b      	ldrh	r3, [r3, #10]
 800d28c:	4298      	cmp	r0, r3
 800d28e:	bfac      	ite	ge
 800d290:	2000      	movge	r0, #0
 800d292:	2001      	movlt	r0, #1
 800d294:	4770      	bx	lr
 800d296:	490d      	ldr	r1, [pc, #52]	@ (800d2cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 800d298:	8809      	ldrh	r1, [r1, #0]
 800d29a:	4411      	add	r1, r2
 800d29c:	428b      	cmp	r3, r1
 800d29e:	da0d      	bge.n	800d2bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 800d2a0:	1a9b      	subs	r3, r3, r2
 800d2a2:	4a0b      	ldr	r2, [pc, #44]	@ (800d2d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 800d2a4:	6812      	ldr	r2, [r2, #0]
 800d2a6:	210e      	movs	r1, #14
 800d2a8:	fb01 2303 	mla	r3, r1, r3, r2
 800d2ac:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d2b0:	891a      	ldrh	r2, [r3, #8]
 800d2b2:	4291      	cmp	r1, r2
 800d2b4:	db04      	blt.n	800d2c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800d2b6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800d2ba:	e7e6      	b.n	800d28a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 800d2bc:	2000      	movs	r0, #0
 800d2be:	4770      	bx	lr
 800d2c0:	2001      	movs	r0, #1
 800d2c2:	4770      	bx	lr
 800d2c4:	200124b4 	.word	0x200124b4
 800d2c8:	200124bc 	.word	0x200124bc
 800d2cc:	200124b8 	.word	0x200124b8
 800d2d0:	2001249c 	.word	0x2001249c

0800d2d4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800d2d4:	4a12      	ldr	r2, [pc, #72]	@ (800d320 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800d2d6:	8803      	ldrh	r3, [r0, #0]
 800d2d8:	8811      	ldrh	r1, [r2, #0]
 800d2da:	428b      	cmp	r3, r1
 800d2dc:	d20b      	bcs.n	800d2f6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800d2de:	4a11      	ldr	r2, [pc, #68]	@ (800d324 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800d2e0:	6812      	ldr	r2, [r2, #0]
 800d2e2:	b112      	cbz	r2, 800d2ea <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800d2e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d2e8:	b9c0      	cbnz	r0, 800d31c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800d2ea:	4a0f      	ldr	r2, [pc, #60]	@ (800d328 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800d2ec:	6811      	ldr	r1, [r2, #0]
 800d2ee:	2214      	movs	r2, #20
 800d2f0:	4353      	muls	r3, r2
 800d2f2:	58c8      	ldr	r0, [r1, r3]
 800d2f4:	4770      	bx	lr
 800d2f6:	4a0d      	ldr	r2, [pc, #52]	@ (800d32c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800d2f8:	8812      	ldrh	r2, [r2, #0]
 800d2fa:	440a      	add	r2, r1
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	da04      	bge.n	800d30a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800d300:	4a08      	ldr	r2, [pc, #32]	@ (800d324 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800d302:	6812      	ldr	r2, [r2, #0]
 800d304:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d308:	4770      	bx	lr
 800d30a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d30e:	4293      	cmp	r3, r2
 800d310:	d103      	bne.n	800d31a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800d312:	4b07      	ldr	r3, [pc, #28]	@ (800d330 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800d318:	4770      	bx	lr
 800d31a:	2000      	movs	r0, #0
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	200124b4 	.word	0x200124b4
 800d324:	20012498 	.word	0x20012498
 800d328:	200124bc 	.word	0x200124bc
 800d32c:	200124b8 	.word	0x200124b8
 800d330:	20012434 	.word	0x20012434

0800d334 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800d334:	4b24      	ldr	r3, [pc, #144]	@ (800d3c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800d336:	8802      	ldrh	r2, [r0, #0]
 800d338:	8818      	ldrh	r0, [r3, #0]
 800d33a:	4282      	cmp	r2, r0
 800d33c:	d221      	bcs.n	800d382 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800d33e:	4b23      	ldr	r3, [pc, #140]	@ (800d3cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800d340:	6819      	ldr	r1, [r3, #0]
 800d342:	2314      	movs	r3, #20
 800d344:	fb03 1302 	mla	r3, r3, r2, r1
 800d348:	6858      	ldr	r0, [r3, #4]
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d03a      	beq.n	800d3c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800d34e:	4920      	ldr	r1, [pc, #128]	@ (800d3d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800d350:	6809      	ldr	r1, [r1, #0]
 800d352:	2900      	cmp	r1, #0
 800d354:	d036      	beq.n	800d3c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800d356:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d35a:	2900      	cmp	r1, #0
 800d35c:	d032      	beq.n	800d3c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800d35e:	891a      	ldrh	r2, [r3, #8]
 800d360:	8958      	ldrh	r0, [r3, #10]
 800d362:	4350      	muls	r0, r2
 800d364:	7c5a      	ldrb	r2, [r3, #17]
 800d366:	7cdb      	ldrb	r3, [r3, #19]
 800d368:	0952      	lsrs	r2, r2, #5
 800d36a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d36e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d372:	2b0b      	cmp	r3, #11
 800d374:	bf18      	it	ne
 800d376:	0040      	lslne	r0, r0, #1
 800d378:	3003      	adds	r0, #3
 800d37a:	f020 0003 	bic.w	r0, r0, #3
 800d37e:	4408      	add	r0, r1
 800d380:	4770      	bx	lr
 800d382:	4b14      	ldr	r3, [pc, #80]	@ (800d3d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	4403      	add	r3, r0
 800d388:	429a      	cmp	r2, r3
 800d38a:	da1a      	bge.n	800d3c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800d38c:	4b12      	ldr	r3, [pc, #72]	@ (800d3d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	1a10      	subs	r0, r2, r0
 800d392:	210e      	movs	r1, #14
 800d394:	fb01 3000 	mla	r0, r1, r0, r3
 800d398:	7b03      	ldrb	r3, [r0, #12]
 800d39a:	f003 031f 	and.w	r3, r3, #31
 800d39e:	2b0b      	cmp	r3, #11
 800d3a0:	d10b      	bne.n	800d3ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800d3a2:	8903      	ldrh	r3, [r0, #8]
 800d3a4:	8940      	ldrh	r0, [r0, #10]
 800d3a6:	4358      	muls	r0, r3
 800d3a8:	4b09      	ldr	r3, [pc, #36]	@ (800d3d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800d3aa:	6819      	ldr	r1, [r3, #0]
 800d3ac:	3003      	adds	r0, #3
 800d3ae:	f020 0303 	bic.w	r3, r0, #3
 800d3b2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800d3b6:	4418      	add	r0, r3
 800d3b8:	4770      	bx	lr
 800d3ba:	2b0d      	cmp	r3, #13
 800d3bc:	d101      	bne.n	800d3c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800d3be:	300d      	adds	r0, #13
 800d3c0:	4770      	bx	lr
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	200124b4 	.word	0x200124b4
 800d3cc:	200124bc 	.word	0x200124bc
 800d3d0:	20012498 	.word	0x20012498
 800d3d4:	200124b8 	.word	0x200124b8
 800d3d8:	2001249c 	.word	0x2001249c

0800d3dc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800d3dc:	b510      	push	{r4, lr}
 800d3de:	4b1f      	ldr	r3, [pc, #124]	@ (800d45c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 800d3e0:	8802      	ldrh	r2, [r0, #0]
 800d3e2:	881b      	ldrh	r3, [r3, #0]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d21a      	bcs.n	800d41e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 800d3e8:	4b1d      	ldr	r3, [pc, #116]	@ (800d460 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2114      	movs	r1, #20
 800d3ee:	fb01 3102 	mla	r1, r1, r2, r3
 800d3f2:	7c4b      	ldrb	r3, [r1, #17]
 800d3f4:	0958      	lsrs	r0, r3, #5
 800d3f6:	7ccb      	ldrb	r3, [r1, #19]
 800d3f8:	491a      	ldr	r1, [pc, #104]	@ (800d464 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 800d3fa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d3fe:	6809      	ldr	r1, [r1, #0]
 800d400:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 800d404:	b2d8      	uxtb	r0, r3
 800d406:	b149      	cbz	r1, 800d41c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d408:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d40c:	b132      	cbz	r2, 800d41c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d40e:	2b0e      	cmp	r3, #14
 800d410:	d021      	beq.n	800d456 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 800d412:	280f      	cmp	r0, #15
 800d414:	d01d      	beq.n	800d452 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 800d416:	2810      	cmp	r0, #16
 800d418:	bf08      	it	eq
 800d41a:	2002      	moveq	r0, #2
 800d41c:	bd10      	pop	{r4, pc}
 800d41e:	4912      	ldr	r1, [pc, #72]	@ (800d468 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 800d420:	8809      	ldrh	r1, [r1, #0]
 800d422:	4419      	add	r1, r3
 800d424:	428a      	cmp	r2, r1
 800d426:	da09      	bge.n	800d43c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	4a10      	ldr	r2, [pc, #64]	@ (800d46c <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 800d42c:	6812      	ldr	r2, [r2, #0]
 800d42e:	210e      	movs	r1, #14
 800d430:	fb01 2303 	mla	r3, r1, r3, r2
 800d434:	7b18      	ldrb	r0, [r3, #12]
 800d436:	f000 001f 	and.w	r0, r0, #31
 800d43a:	e7ef      	b.n	800d41c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d43c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800d440:	429a      	cmp	r2, r3
 800d442:	d108      	bne.n	800d456 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 800d444:	f7fb fa90 	bl	8008968 <_ZN8touchgfx3HAL3lcdEv>
 800d448:	6803      	ldr	r3, [r0, #0]
 800d44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d450:	4718      	bx	r3
 800d452:	2001      	movs	r0, #1
 800d454:	e7e2      	b.n	800d41c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d456:	2000      	movs	r0, #0
 800d458:	e7e0      	b.n	800d41c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d45a:	bf00      	nop
 800d45c:	200124b4 	.word	0x200124b4
 800d460:	200124bc 	.word	0x200124bc
 800d464:	20012498 	.word	0x20012498
 800d468:	200124b8 	.word	0x200124b8
 800d46c:	2001249c 	.word	0x2001249c

0800d470 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 800d470:	2010      	movs	r0, #16
 800d472:	4770      	bx	lr

0800d474 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 800d474:	2000      	movs	r0, #0
 800d476:	4770      	bx	lr

0800d478 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 800d478:	4b02      	ldr	r3, [pc, #8]	@ (800d484 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 800d47a:	8818      	ldrh	r0, [r3, #0]
 800d47c:	0040      	lsls	r0, r0, #1
 800d47e:	b280      	uxth	r0, r0
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	2001242e 	.word	0x2001242e

0800d488 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800d488:	2bff      	cmp	r3, #255	@ 0xff
 800d48a:	d05e      	beq.n	800d54a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 800d48c:	2a0b      	cmp	r2, #11
 800d48e:	d058      	beq.n	800d542 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800d490:	d80e      	bhi.n	800d4b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 800d492:	2a03      	cmp	r2, #3
 800d494:	d04d      	beq.n	800d532 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 800d496:	d804      	bhi.n	800d4a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 800d498:	2a01      	cmp	r2, #1
 800d49a:	d04c      	beq.n	800d536 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 800d49c:	d94d      	bls.n	800d53a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 800d49e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d4a0:	e031      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d4a2:	2a09      	cmp	r2, #9
 800d4a4:	d04d      	beq.n	800d542 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800d4a6:	d84a      	bhi.n	800d53e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800d4a8:	2a08      	cmp	r2, #8
 800d4aa:	d048      	beq.n	800d53e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	e02a      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d4b0:	2a2f      	cmp	r2, #47	@ 0x2f
 800d4b2:	d02c      	beq.n	800d50e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 800d4b4:	d811      	bhi.n	800d4da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 800d4b6:	2a2d      	cmp	r2, #45	@ 0x2d
 800d4b8:	d018      	beq.n	800d4ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 800d4ba:	d831      	bhi.n	800d520 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 800d4bc:	2a2c      	cmp	r2, #44	@ 0x2c
 800d4be:	d1f5      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d4c0:	684a      	ldr	r2, [r1, #4]
 800d4c2:	7813      	ldrb	r3, [r2, #0]
 800d4c4:	7852      	ldrb	r2, [r2, #1]
 800d4c6:	2a00      	cmp	r2, #0
 800d4c8:	d1f0      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d01d      	beq.n	800d50a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d02d      	beq.n	800d52e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d1ea      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d4d6:	68c3      	ldr	r3, [r0, #12]
 800d4d8:	e015      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d4da:	2a31      	cmp	r2, #49	@ 0x31
 800d4dc:	d004      	beq.n	800d4e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 800d4de:	d332      	bcc.n	800d546 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 800d4e0:	2a32      	cmp	r2, #50	@ 0x32
 800d4e2:	d030      	beq.n	800d546 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 800d4e4:	2a33      	cmp	r2, #51	@ 0x33
 800d4e6:	d1e1      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d4e8:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800d4ea:	e00c      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d4ec:	684a      	ldr	r2, [r1, #4]
 800d4ee:	7813      	ldrb	r3, [r2, #0]
 800d4f0:	7852      	ldrb	r2, [r2, #1]
 800d4f2:	2a00      	cmp	r2, #0
 800d4f4:	d1da      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d004      	beq.n	800d504 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 800d4fa:	d30f      	bcc.n	800d51c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 800d4fc:	2b02      	cmp	r3, #2
 800d4fe:	d1d5      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d500:	6943      	ldr	r3, [r0, #20]
 800d502:	e000      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d504:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d506:	4618      	mov	r0, r3
 800d508:	4770      	bx	lr
 800d50a:	69c3      	ldr	r3, [r0, #28]
 800d50c:	e7fb      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d50e:	684b      	ldr	r3, [r1, #4]
 800d510:	781a      	ldrb	r2, [r3, #0]
 800d512:	785b      	ldrb	r3, [r3, #1]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1c9      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d518:	2a00      	cmp	r2, #0
 800d51a:	d1f4      	bne.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d51c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d51e:	e7f2      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d520:	684b      	ldr	r3, [r1, #4]
 800d522:	781a      	ldrb	r2, [r3, #0]
 800d524:	785b      	ldrb	r3, [r3, #1]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1c0      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	d1eb      	bne.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d52e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800d530:	e7e9      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d532:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800d534:	e7e7      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d536:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d538:	e7e5      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d53a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800d53c:	e7e3      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d53e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800d540:	e7e1      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d542:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800d544:	e7df      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d546:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800d548:	e7dd      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d54a:	2a0b      	cmp	r2, #11
 800d54c:	d059      	beq.n	800d602 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 800d54e:	d80e      	bhi.n	800d56e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 800d550:	2a03      	cmp	r2, #3
 800d552:	d050      	beq.n	800d5f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 800d554:	d804      	bhi.n	800d560 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 800d556:	2a01      	cmp	r2, #1
 800d558:	d04f      	beq.n	800d5fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 800d55a:	d950      	bls.n	800d5fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 800d55c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d55e:	e7d2      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d560:	2a09      	cmp	r2, #9
 800d562:	d04e      	beq.n	800d602 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 800d564:	d801      	bhi.n	800d56a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 800d566:	2a08      	cmp	r2, #8
 800d568:	d1a0      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d56a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800d56c:	e7cb      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d56e:	2a2f      	cmp	r2, #47	@ 0x2f
 800d570:	d02d      	beq.n	800d5ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 800d572:	d811      	bhi.n	800d598 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 800d574:	2a2d      	cmp	r2, #45	@ 0x2d
 800d576:	d018      	beq.n	800d5aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 800d578:	d833      	bhi.n	800d5e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 800d57a:	2a2c      	cmp	r2, #44	@ 0x2c
 800d57c:	d196      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d57e:	684a      	ldr	r2, [r1, #4]
 800d580:	7813      	ldrb	r3, [r2, #0]
 800d582:	7852      	ldrb	r2, [r2, #1]
 800d584:	2a00      	cmp	r2, #0
 800d586:	d191      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d01e      	beq.n	800d5ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d030      	beq.n	800d5f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 800d590:	2b02      	cmp	r3, #2
 800d592:	d18b      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d594:	6903      	ldr	r3, [r0, #16]
 800d596:	e7b6      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d598:	2a31      	cmp	r2, #49	@ 0x31
 800d59a:	d004      	beq.n	800d5a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 800d59c:	d333      	bcc.n	800d606 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 800d59e:	2a32      	cmp	r2, #50	@ 0x32
 800d5a0:	d031      	beq.n	800d606 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 800d5a2:	2a33      	cmp	r2, #51	@ 0x33
 800d5a4:	d182      	bne.n	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d5a6:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800d5a8:	e7ad      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d5aa:	684a      	ldr	r2, [r1, #4]
 800d5ac:	7813      	ldrb	r3, [r2, #0]
 800d5ae:	7852      	ldrb	r2, [r2, #1]
 800d5b0:	2a00      	cmp	r2, #0
 800d5b2:	f47f af7b 	bne.w	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d005      	beq.n	800d5c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800d5ba:	d310      	bcc.n	800d5de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	f47f af75 	bne.w	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d5c2:	6983      	ldr	r3, [r0, #24]
 800d5c4:	e79f      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d5c6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d5c8:	e79d      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d5ca:	6a03      	ldr	r3, [r0, #32]
 800d5cc:	e79b      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d5ce:	684b      	ldr	r3, [r1, #4]
 800d5d0:	781a      	ldrb	r2, [r3, #0]
 800d5d2:	785b      	ldrb	r3, [r3, #1]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f47f af69 	bne.w	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d5da:	2a00      	cmp	r2, #0
 800d5dc:	d193      	bne.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d5de:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d5e0:	e791      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d5e2:	684b      	ldr	r3, [r1, #4]
 800d5e4:	781a      	ldrb	r2, [r3, #0]
 800d5e6:	785b      	ldrb	r3, [r3, #1]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f47f af5f 	bne.w	800d4ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d5ee:	2a00      	cmp	r2, #0
 800d5f0:	d189      	bne.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d5f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d5f4:	e787      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d5f6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800d5f8:	e785      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d5fa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800d5fc:	e783      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d5fe:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800d600:	e781      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d602:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800d604:	e77f      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d606:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800d608:	e77d      	b.n	800d506 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0800d60a <_ZN8touchgfx8LCD16bppD1Ev>:
 800d60a:	4770      	bx	lr

0800d60c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 800d60c:	4770      	bx	lr

0800d60e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 800d60e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d612:	b088      	sub	sp, #32
 800d614:	ac08      	add	r4, sp, #32
 800d616:	4606      	mov	r6, r0
 800d618:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 800d61c:	4620      	mov	r0, r4
 800d61e:	4688      	mov	r8, r1
 800d620:	4691      	mov	r9, r2
 800d622:	f7ff fe57 	bl	800d2d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 800d626:	6833      	ldr	r3, [r6, #0]
 800d628:	4605      	mov	r5, r0
 800d62a:	4620      	mov	r0, r4
 800d62c:	699f      	ldr	r7, [r3, #24]
 800d62e:	f7ff fd5f 	bl	800d0f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d632:	4682      	mov	sl, r0
 800d634:	4620      	mov	r0, r4
 800d636:	f7ff fd8f 	bl	800d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d63a:	9500      	str	r5, [sp, #0]
 800d63c:	e9cd a001 	strd	sl, r0, [sp, #4]
 800d640:	464b      	mov	r3, r9
 800d642:	a806      	add	r0, sp, #24
 800d644:	4642      	mov	r2, r8
 800d646:	4631      	mov	r1, r6
 800d648:	47b8      	blx	r7
 800d64a:	4628      	mov	r0, r5
 800d64c:	b008      	add	sp, #32
 800d64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800d654 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 800d654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d658:	2300      	movs	r3, #0
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	4b3d      	ldr	r3, [pc, #244]	@ (800d754 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d137      	bne.n	800d6d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 800d664:	4a3c      	ldr	r2, [pc, #240]	@ (800d758 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800d666:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d66a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d132      	bne.n	800d6d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 800d672:	4b3a      	ldr	r3, [pc, #232]	@ (800d75c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 800d674:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d678:	6808      	ldr	r0, [r1, #0]
 800d67a:	6849      	ldr	r1, [r1, #4]
 800d67c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d680:	ac02      	add	r4, sp, #8
 800d682:	ab02      	add	r3, sp, #8
 800d684:	c303      	stmia	r3!, {r0, r1}
 800d686:	4669      	mov	r1, sp
 800d688:	4620      	mov	r0, r4
 800d68a:	f7fc feeb 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800d68e:	4668      	mov	r0, sp
 800d690:	f7fc fec0 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d694:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d698:	f8bd 2000 	ldrh.w	r2, [sp]
 800d69c:	4d30      	ldr	r5, [pc, #192]	@ (800d760 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 800d69e:	4413      	add	r3, r2
 800d6a0:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d6a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d6a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800d6ac:	6828      	ldr	r0, [r5, #0]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d6b4:	6803      	ldr	r3, [r0, #0]
 800d6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6b8:	4798      	blx	r3
 800d6ba:	f010 0f01 	tst.w	r0, #1
 800d6be:	462f      	mov	r7, r5
 800d6c0:	d00c      	beq.n	800d6dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 800d6c2:	6828      	ldr	r0, [r5, #0]
 800d6c4:	6803      	ldr	r3, [r0, #0]
 800d6c6:	e894 0006 	ldmia.w	r4, {r1, r2}
 800d6ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6cc:	4798      	blx	r3
 800d6ce:	b004      	add	sp, #16
 800d6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d4:	4a21      	ldr	r2, [pc, #132]	@ (800d75c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 800d6d6:	e7c6      	b.n	800d666 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 800d6d8:	4b1f      	ldr	r3, [pc, #124]	@ (800d758 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800d6da:	e7cb      	b.n	800d674 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 800d6dc:	6838      	ldr	r0, [r7, #0]
 800d6de:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 800d6e2:	6803      	ldr	r3, [r0, #0]
 800d6e4:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 800d6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6ea:	4798      	blx	r3
 800d6ec:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800d6f0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d6f4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 800d6f8:	fb16 3602 	smlabb	r6, r6, r2, r3
 800d6fc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800d700:	6838      	ldr	r0, [r7, #0]
 800d702:	6803      	ldr	r3, [r0, #0]
 800d704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d706:	4798      	blx	r3
 800d708:	4a13      	ldr	r2, [pc, #76]	@ (800d758 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800d70a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 800d70e:	8813      	ldrh	r3, [r2, #0]
 800d710:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800d714:	fb03 1404 	mla	r4, r3, r4, r1
 800d718:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800d71c:	435d      	muls	r5, r3
 800d71e:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800d722:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d726:	4691      	mov	r9, r2
 800d728:	6838      	ldr	r0, [r7, #0]
 800d72a:	42ac      	cmp	r4, r5
 800d72c:	6803      	ldr	r3, [r0, #0]
 800d72e:	d20e      	bcs.n	800d74e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 800d730:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 800d734:	4632      	mov	r2, r6
 800d736:	4643      	mov	r3, r8
 800d738:	4621      	mov	r1, r4
 800d73a:	47d0      	blx	sl
 800d73c:	f8b9 3000 	ldrh.w	r3, [r9]
 800d740:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800d744:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800d748:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800d74c:	e7ec      	b.n	800d728 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 800d74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d750:	4798      	blx	r3
 800d752:	e7bc      	b.n	800d6ce <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 800d754:	2001242c 	.word	0x2001242c
 800d758:	2001242e 	.word	0x2001242e
 800d75c:	20012430 	.word	0x20012430
 800d760:	20012434 	.word	0x20012434

0800d764 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 800d764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d768:	b08b      	sub	sp, #44	@ 0x2c
 800d76a:	460f      	mov	r7, r1
 800d76c:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 800d770:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 800d774:	4616      	mov	r6, r2
 800d776:	f1bb 0f00 	cmp.w	fp, #0
 800d77a:	d04a      	beq.n	800d812 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800d77c:	6810      	ldr	r0, [r2, #0]
 800d77e:	6851      	ldr	r1, [r2, #4]
 800d780:	ad06      	add	r5, sp, #24
 800d782:	c503      	stmia	r5!, {r0, r1}
 800d784:	6818      	ldr	r0, [r3, #0]
 800d786:	6859      	ldr	r1, [r3, #4]
 800d788:	ad08      	add	r5, sp, #32
 800d78a:	c503      	stmia	r5!, {r0, r1}
 800d78c:	a806      	add	r0, sp, #24
 800d78e:	f7fc fe41 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d792:	4631      	mov	r1, r6
 800d794:	a808      	add	r0, sp, #32
 800d796:	f7fc fe65 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800d79a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800d79e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800d7a2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 800d7a6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 800d7aa:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 800d7ae:	fb16 2103 	smlabb	r1, r6, r3, r2
 800d7b2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 800d7b6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800d7ba:	4f5f      	ldr	r7, [pc, #380]	@ (800d938 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800d7bc:	440a      	add	r2, r1
 800d7be:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d7c2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800d7c6:	6838      	ldr	r0, [r7, #0]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800d7ce:	6803      	ldr	r3, [r0, #0]
 800d7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7d2:	4798      	blx	r3
 800d7d4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 800d7d8:	46b9      	mov	r9, r7
 800d7da:	d11d      	bne.n	800d818 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 800d7dc:	b9fc      	cbnz	r4, 800d81e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800d7de:	f010 0f01 	tst.w	r0, #1
 800d7e2:	d01c      	beq.n	800d81e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800d7e4:	f8d9 0000 	ldr.w	r0, [r9]
 800d7e8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 800d7ec:	6801      	ldr	r1, [r0, #0]
 800d7ee:	f8cd b00c 	str.w	fp, [sp, #12]
 800d7f2:	2700      	movs	r7, #0
 800d7f4:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800d7f8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 800d7fc:	9402      	str	r4, [sp, #8]
 800d7fe:	b2ad      	uxth	r5, r5
 800d800:	fa1f f488 	uxth.w	r4, r8
 800d804:	9501      	str	r5, [sp, #4]
 800d806:	9400      	str	r4, [sp, #0]
 800d808:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 800d80a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d80e:	4631      	mov	r1, r6
 800d810:	47a0      	blx	r4
 800d812:	b00b      	add	sp, #44	@ 0x2c
 800d814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d818:	f010 0f04 	tst.w	r0, #4
 800d81c:	e7e1      	b.n	800d7e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 800d81e:	f8d9 0000 	ldr.w	r0, [r9]
 800d822:	6803      	ldr	r3, [r0, #0]
 800d824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d826:	4798      	blx	r3
 800d828:	4b44      	ldr	r3, [pc, #272]	@ (800d93c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 800d82a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 800d82e:	881a      	ldrh	r2, [r3, #0]
 800d830:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800d834:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 800d838:	fb02 1404 	mla	r4, r2, r4, r1
 800d83c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800d840:	469a      	mov	sl, r3
 800d842:	fb05 f502 	mul.w	r5, r5, r2
 800d846:	ea4f 0748 	mov.w	r7, r8, lsl #1
 800d84a:	d059      	beq.n	800d900 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 800d84c:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 800d850:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800d854:	fa1f f28b 	uxth.w	r2, fp
 800d858:	fa1f f989 	uxth.w	r9, r9
 800d85c:	469e      	mov	lr, r3
 800d85e:	42ac      	cmp	r4, r5
 800d860:	d264      	bcs.n	800d92c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 800d862:	eb04 0a07 	add.w	sl, r4, r7
 800d866:	4554      	cmp	r4, sl
 800d868:	d23d      	bcs.n	800d8e6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 800d86a:	8821      	ldrh	r1, [r4, #0]
 800d86c:	f836 3b02 	ldrh.w	r3, [r6], #2
 800d870:	1208      	asrs	r0, r1, #8
 800d872:	ea4f 2c23 	mov.w	ip, r3, asr #8
 800d876:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800d87a:	fb10 f009 	smulbb	r0, r0, r9
 800d87e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 800d882:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800d886:	00c9      	lsls	r1, r1, #3
 800d888:	fb0c 0c02 	mla	ip, ip, r2, r0
 800d88c:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 800d890:	10d8      	asrs	r0, r3, #3
 800d892:	b2c9      	uxtb	r1, r1
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	fa1f fc8c 	uxth.w	ip, ip
 800d89a:	fb1b fb09 	smulbb	fp, fp, r9
 800d89e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	fb11 f109 	smulbb	r1, r1, r9
 800d8a8:	fb00 b002 	mla	r0, r0, r2, fp
 800d8ac:	fb03 1302 	mla	r3, r3, r2, r1
 800d8b0:	f10c 0b01 	add.w	fp, ip, #1
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 800d8ba:	b280      	uxth	r0, r0
 800d8bc:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 800d8c0:	f103 0c01 	add.w	ip, r3, #1
 800d8c4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800d8c8:	1c43      	adds	r3, r0, #1
 800d8ca:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800d8ce:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800d8d2:	0940      	lsrs	r0, r0, #5
 800d8d4:	ea4c 0c0b 	orr.w	ip, ip, fp
 800d8d8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800d8dc:	ea4c 0c00 	orr.w	ip, ip, r0
 800d8e0:	f824 cb02 	strh.w	ip, [r4], #2
 800d8e4:	e7bf      	b.n	800d866 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 800d8e6:	f8be 3000 	ldrh.w	r3, [lr]
 800d8ea:	eba3 0308 	sub.w	r3, r3, r8
 800d8ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800d8f2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d8f6:	eba3 0308 	sub.w	r3, r3, r8
 800d8fa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800d8fe:	e7ae      	b.n	800d85e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 800d900:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800d904:	f8d9 0000 	ldr.w	r0, [r9]
 800d908:	42ac      	cmp	r4, r5
 800d90a:	6803      	ldr	r3, [r0, #0]
 800d90c:	d20e      	bcs.n	800d92c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 800d90e:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 800d912:	4632      	mov	r2, r6
 800d914:	463b      	mov	r3, r7
 800d916:	4621      	mov	r1, r4
 800d918:	47c0      	blx	r8
 800d91a:	f8ba 3000 	ldrh.w	r3, [sl]
 800d91e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800d922:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800d926:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800d92a:	e7eb      	b.n	800d904 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 800d92c:	4b02      	ldr	r3, [pc, #8]	@ (800d938 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800d92e:	6818      	ldr	r0, [r3, #0]
 800d930:	6803      	ldr	r3, [r0, #0]
 800d932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d934:	4798      	blx	r3
 800d936:	e76c      	b.n	800d812 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800d938:	20012434 	.word	0x20012434
 800d93c:	2001242e 	.word	0x2001242e

0800d940 <_ZN8touchgfx8LCD16bppD0Ev>:
 800d940:	b510      	push	{r4, lr}
 800d942:	218c      	movs	r1, #140	@ 0x8c
 800d944:	4604      	mov	r4, r0
 800d946:	f002 fa51 	bl	800fdec <_ZdlPvj>
 800d94a:	4620      	mov	r0, r4
 800d94c:	bd10      	pop	{r4, pc}

0800d94e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 800d94e:	b510      	push	{r4, lr}
 800d950:	2104      	movs	r1, #4
 800d952:	4604      	mov	r4, r0
 800d954:	f002 fa4a 	bl	800fdec <_ZdlPvj>
 800d958:	4620      	mov	r0, r4
 800d95a:	bd10      	pop	{r4, pc}

0800d95c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 800d95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d960:	b091      	sub	sp, #68	@ 0x44
 800d962:	469b      	mov	fp, r3
 800d964:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800d968:	4616      	mov	r6, r2
 800d96a:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 800d96e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d972:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 800d976:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d97a:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d97e:	4604      	mov	r4, r0
 800d980:	460d      	mov	r5, r1
 800d982:	4640      	mov	r0, r8
 800d984:	4659      	mov	r1, fp
 800d986:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d98a:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 800d98e:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 800d992:	f7fa fd13 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800d996:	4631      	mov	r1, r6
 800d998:	4640      	mov	r0, r8
 800d99a:	f7fa fd0f 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800d99e:	4b74      	ldr	r3, [pc, #464]	@ (800db70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 800d9a0:	8818      	ldrh	r0, [r3, #0]
 800d9a2:	4b74      	ldr	r3, [pc, #464]	@ (800db74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 800d9a4:	8819      	ldrh	r1, [r3, #0]
 800d9a6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	b202      	sxth	r2, r0
 800d9ae:	b20e      	sxth	r6, r1
 800d9b0:	da07      	bge.n	800d9c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 800d9b2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800d9b6:	4463      	add	r3, ip
 800d9b8:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800d9bc:	2300      	movs	r3, #0
 800d9be:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800d9c2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800d9c6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800d9ca:	1ad2      	subs	r2, r2, r3
 800d9cc:	4594      	cmp	ip, r2
 800d9ce:	bfc4      	itt	gt
 800d9d0:	1ac2      	subgt	r2, r0, r3
 800d9d2:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 800d9d6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800d9da:	2a00      	cmp	r2, #0
 800d9dc:	da07      	bge.n	800d9ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 800d9de:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 800d9e2:	4462      	add	r2, ip
 800d9e4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800d9ee:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 800d9f2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 800d9f6:	eba6 060a 	sub.w	r6, r6, sl
 800d9fa:	42b2      	cmp	r2, r6
 800d9fc:	bfc4      	itt	gt
 800d9fe:	eba1 020a 	subgt.w	r2, r1, sl
 800da02:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 800da06:	4a5c      	ldr	r2, [pc, #368]	@ (800db78 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 800da08:	7812      	ldrb	r2, [r2, #0]
 800da0a:	b9a2      	cbnz	r2, 800da36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 800da0c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 800da10:	4286      	cmp	r6, r0
 800da12:	4640      	mov	r0, r8
 800da14:	9303      	str	r3, [sp, #12]
 800da16:	bf14      	ite	ne
 800da18:	2600      	movne	r6, #0
 800da1a:	2601      	moveq	r6, #1
 800da1c:	f7fa fd11 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800da20:	9b03      	ldr	r3, [sp, #12]
 800da22:	b160      	cbz	r0, 800da3e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 800da24:	2300      	movs	r3, #0
 800da26:	8023      	strh	r3, [r4, #0]
 800da28:	8063      	strh	r3, [r4, #2]
 800da2a:	80a3      	strh	r3, [r4, #4]
 800da2c:	4620      	mov	r0, r4
 800da2e:	80e3      	strh	r3, [r4, #6]
 800da30:	b011      	add	sp, #68	@ 0x44
 800da32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da36:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 800da3a:	428e      	cmp	r6, r1
 800da3c:	e7e9      	b.n	800da12 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 800da3e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800da42:	9205      	str	r2, [sp, #20]
 800da44:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 800da48:	9206      	str	r2, [sp, #24]
 800da4a:	f8bb 2000 	ldrh.w	r2, [fp]
 800da4e:	900e      	str	r0, [sp, #56]	@ 0x38
 800da50:	1a9b      	subs	r3, r3, r2
 800da52:	b21b      	sxth	r3, r3
 800da54:	9303      	str	r3, [sp, #12]
 800da56:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800da5a:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 800da5e:	ebaa 0a03 	sub.w	sl, sl, r3
 800da62:	fa0f f38a 	sxth.w	r3, sl
 800da66:	9304      	str	r3, [sp, #16]
 800da68:	9b03      	ldr	r3, [sp, #12]
 800da6a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800da6e:	9b04      	ldr	r3, [sp, #16]
 800da70:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800da74:	9b05      	ldr	r3, [sp, #20]
 800da76:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800da7a:	a90e      	add	r1, sp, #56	@ 0x38
 800da7c:	9b06      	ldr	r3, [sp, #24]
 800da7e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800da82:	a80c      	add	r0, sp, #48	@ 0x30
 800da84:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 800da88:	f7fc fcec 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800da8c:	4640      	mov	r0, r8
 800da8e:	f7fc fcc1 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800da92:	a80e      	add	r0, sp, #56	@ 0x38
 800da94:	f7fc fcbe 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800da98:	4b38      	ldr	r3, [pc, #224]	@ (800db7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 800da9a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 800da9e:	881b      	ldrh	r3, [r3, #0]
 800daa0:	9307      	str	r3, [sp, #28]
 800daa2:	682b      	ldr	r3, [r5, #0]
 800daa4:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 800db80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800daa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daaa:	4628      	mov	r0, r5
 800daac:	4798      	blx	r3
 800daae:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 800dab2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800dab6:	4681      	mov	r9, r0
 800dab8:	fb1a 3305 	smlabb	r3, sl, r5, r3
 800dabc:	f8db 0000 	ldr.w	r0, [fp]
 800dac0:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800dac2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800dac6:	6803      	ldr	r3, [r0, #0]
 800dac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daca:	4798      	blx	r3
 800dacc:	4607      	mov	r7, r0
 800dace:	f8db 0000 	ldr.w	r0, [fp]
 800dad2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800dad6:	6803      	ldr	r3, [r0, #0]
 800dad8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800dadc:	9109      	str	r1, [sp, #36]	@ 0x24
 800dade:	9208      	str	r2, [sp, #32]
 800dae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dae2:	4798      	blx	r3
 800dae4:	f010 0f01 	tst.w	r0, #1
 800dae8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800daec:	d012      	beq.n	800db14 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 800daee:	f8db 0000 	ldr.w	r0, [fp]
 800daf2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 800daf6:	6803      	ldr	r3, [r0, #0]
 800daf8:	9200      	str	r2, [sp, #0]
 800dafa:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800dafc:	e898 0006 	ldmia.w	r8, {r1, r2}
 800db00:	462b      	mov	r3, r5
 800db02:	47b0      	blx	r6
 800db04:	9b03      	ldr	r3, [sp, #12]
 800db06:	8023      	strh	r3, [r4, #0]
 800db08:	9b04      	ldr	r3, [sp, #16]
 800db0a:	8063      	strh	r3, [r4, #2]
 800db0c:	9b05      	ldr	r3, [sp, #20]
 800db0e:	80a3      	strh	r3, [r4, #4]
 800db10:	9b06      	ldr	r3, [sp, #24]
 800db12:	e78b      	b.n	800da2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 800db14:	fb09 f202 	mul.w	r2, r9, r2
 800db18:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800db1c:	440f      	add	r7, r1
 800db1e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 800db22:	b166      	cbz	r6, 800db3e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 800db24:	9a07      	ldr	r2, [sp, #28]
 800db26:	4592      	cmp	sl, r2
 800db28:	d109      	bne.n	800db3e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 800db2a:	f8db 0000 	ldr.w	r0, [fp]
 800db2e:	6802      	ldr	r2, [r0, #0]
 800db30:	fb09 f303 	mul.w	r3, r9, r3
 800db34:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 800db36:	4629      	mov	r1, r5
 800db38:	463a      	mov	r2, r7
 800db3a:	47b0      	blx	r6
 800db3c:	e7e2      	b.n	800db04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 800db3e:	fb0a f303 	mul.w	r3, sl, r3
 800db42:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 800db80 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800db46:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 800db4a:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800db4e:	4545      	cmp	r5, r8
 800db50:	d2d8      	bcs.n	800db04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 800db52:	f8db 0000 	ldr.w	r0, [fp]
 800db56:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800db5a:	6802      	ldr	r2, [r0, #0]
 800db5c:	4629      	mov	r1, r5
 800db5e:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 800db62:	005b      	lsls	r3, r3, #1
 800db64:	463a      	mov	r2, r7
 800db66:	47d0      	blx	sl
 800db68:	444f      	add	r7, r9
 800db6a:	4435      	add	r5, r6
 800db6c:	e7ef      	b.n	800db4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 800db6e:	bf00      	nop
 800db70:	20012428 	.word	0x20012428
 800db74:	2001242a 	.word	0x2001242a
 800db78:	2001242c 	.word	0x2001242c
 800db7c:	2001242e 	.word	0x2001242e
 800db80:	20012434 	.word	0x20012434

0800db84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 800db84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db86:	4606      	mov	r6, r0
 800db88:	b087      	sub	sp, #28
 800db8a:	460c      	mov	r4, r1
 800db8c:	4617      	mov	r7, r2
 800db8e:	461d      	mov	r5, r3
 800db90:	b333      	cbz	r3, 800dbe0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800db92:	4608      	mov	r0, r1
 800db94:	f7fa fc55 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800db98:	bb10      	cbnz	r0, 800dbe0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800db9a:	6820      	ldr	r0, [r4, #0]
 800db9c:	6861      	ldr	r1, [r4, #4]
 800db9e:	4c1c      	ldr	r4, [pc, #112]	@ (800dc10 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 800dba0:	ab04      	add	r3, sp, #16
 800dba2:	c303      	stmia	r3!, {r0, r1}
 800dba4:	a804      	add	r0, sp, #16
 800dba6:	f7fc fc35 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dbaa:	6820      	ldr	r0, [r4, #0]
 800dbac:	6803      	ldr	r3, [r0, #0]
 800dbae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbb0:	4798      	blx	r3
 800dbb2:	2dff      	cmp	r5, #255	@ 0xff
 800dbb4:	d016      	beq.n	800dbe4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 800dbb6:	f010 0f08 	tst.w	r0, #8
 800dbba:	6820      	ldr	r0, [r4, #0]
 800dbbc:	d015      	beq.n	800dbea <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 800dbbe:	2400      	movs	r4, #0
 800dbc0:	6801      	ldr	r1, [r0, #0]
 800dbc2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dbc6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800dbca:	e9cd 5402 	strd	r5, r4, [sp, #8]
 800dbce:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 800dbd2:	9401      	str	r4, [sp, #4]
 800dbd4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 800dbd8:	9400      	str	r4, [sp, #0]
 800dbda:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 800dbdc:	4639      	mov	r1, r7
 800dbde:	47a0      	blx	r4
 800dbe0:	b007      	add	sp, #28
 800dbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbe4:	f010 0f02 	tst.w	r0, #2
 800dbe8:	e7e7      	b.n	800dbba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 800dbea:	6803      	ldr	r3, [r0, #0]
 800dbec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbee:	4798      	blx	r3
 800dbf0:	4b08      	ldr	r3, [pc, #32]	@ (800dc14 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 800dbf2:	881a      	ldrh	r2, [r3, #0]
 800dbf4:	6833      	ldr	r3, [r6, #0]
 800dbf6:	e9cd 7500 	strd	r7, r5, [sp]
 800dbfa:	4601      	mov	r1, r0
 800dbfc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800dbfe:	4630      	mov	r0, r6
 800dc00:	ab04      	add	r3, sp, #16
 800dc02:	47a8      	blx	r5
 800dc04:	6820      	ldr	r0, [r4, #0]
 800dc06:	6803      	ldr	r3, [r0, #0]
 800dc08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc0a:	4798      	blx	r3
 800dc0c:	e7e8      	b.n	800dbe0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800dc0e:	bf00      	nop
 800dc10:	20012434 	.word	0x20012434
 800dc14:	2001242e 	.word	0x2001242e

0800dc18 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 800dc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc1c:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 800dc20:	9e08      	ldr	r6, [sp, #32]
 800dc22:	4688      	mov	r8, r1
 800dc24:	4614      	mov	r4, r2
 800dc26:	461d      	mov	r5, r3
 800dc28:	2f00      	cmp	r7, #0
 800dc2a:	f000 80a9 	beq.w	800dd80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fa fc07 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	f040 80a3 	bne.w	800dd80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800dc3a:	f9b5 1000 	ldrsh.w	r1, [r5]
 800dc3e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800dc42:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 800dc46:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800dc4a:	fb04 1303 	mla	r3, r4, r3, r1
 800dc4e:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 800dc52:	4365      	muls	r5, r4
 800dc54:	2fff      	cmp	r7, #255	@ 0xff
 800dc56:	eba4 0200 	sub.w	r2, r4, r0
 800dc5a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800dc5e:	ea4f 2816 	mov.w	r8, r6, lsr #8
 800dc62:	d04a      	beq.n	800dcfa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 800dc64:	b2bc      	uxth	r4, r7
 800dc66:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 800dc6a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800dc6e:	fa5f f788 	uxtb.w	r7, r8
 800dc72:	b2f3      	uxtb	r3, r6
 800dc74:	0040      	lsls	r0, r0, #1
 800dc76:	fb0e fe04 	mul.w	lr, lr, r4
 800dc7a:	4367      	muls	r7, r4
 800dc7c:	4363      	muls	r3, r4
 800dc7e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800dc82:	fa1f fc8c 	uxth.w	ip, ip
 800dc86:	42a9      	cmp	r1, r5
 800dc88:	d27a      	bcs.n	800dd80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800dc8a:	eb01 0900 	add.w	r9, r1, r0
 800dc8e:	4549      	cmp	r1, r9
 800dc90:	d231      	bcs.n	800dcf6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 800dc92:	880a      	ldrh	r2, [r1, #0]
 800dc94:	1214      	asrs	r4, r2, #8
 800dc96:	10d6      	asrs	r6, r2, #3
 800dc98:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 800dc9c:	00d2      	lsls	r2, r2, #3
 800dc9e:	b2d2      	uxtb	r2, r2
 800dca0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800dca4:	fb14 f40c 	smulbb	r4, r4, ip
 800dca8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800dcac:	4474      	add	r4, lr
 800dcae:	fb12 f20c 	smulbb	r2, r2, ip
 800dcb2:	b2a4      	uxth	r4, r4
 800dcb4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800dcb8:	441a      	add	r2, r3
 800dcba:	b292      	uxth	r2, r2
 800dcbc:	f104 0a01 	add.w	sl, r4, #1
 800dcc0:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 800dcc4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 800dcc8:	fb16 f60c 	smulbb	r6, r6, ip
 800dccc:	f102 0a01 	add.w	sl, r2, #1
 800dcd0:	443e      	add	r6, r7
 800dcd2:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 800dcd6:	b2b6      	uxth	r6, r6
 800dcd8:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 800dcdc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800dce0:	4322      	orrs	r2, r4
 800dce2:	1c74      	adds	r4, r6, #1
 800dce4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 800dce8:	0976      	lsrs	r6, r6, #5
 800dcea:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800dcee:	4332      	orrs	r2, r6
 800dcf0:	f821 2b02 	strh.w	r2, [r1], #2
 800dcf4:	e7cb      	b.n	800dc8e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 800dcf6:	4441      	add	r1, r8
 800dcf8:	e7c5      	b.n	800dc86 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 800dcfa:	4f22      	ldr	r7, [pc, #136]	@ (800dd84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 800dcfc:	0973      	lsrs	r3, r6, #5
 800dcfe:	ea08 0707 	and.w	r7, r8, r7
 800dd02:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800dd06:	433b      	orrs	r3, r7
 800dd08:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 800dd0c:	4333      	orrs	r3, r6
 800dd0e:	07e7      	lsls	r7, r4, #31
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	d50b      	bpl.n	800dd2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 800dd14:	0040      	lsls	r0, r0, #1
 800dd16:	0052      	lsls	r2, r2, #1
 800dd18:	42a9      	cmp	r1, r5
 800dd1a:	d231      	bcs.n	800dd80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800dd1c:	180c      	adds	r4, r1, r0
 800dd1e:	42a1      	cmp	r1, r4
 800dd20:	d202      	bcs.n	800dd28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 800dd22:	f821 3b02 	strh.w	r3, [r1], #2
 800dd26:	e7fa      	b.n	800dd1e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 800dd28:	4411      	add	r1, r2
 800dd2a:	e7f5      	b.n	800dd18 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 800dd2c:	078e      	lsls	r6, r1, #30
 800dd2e:	d008      	beq.n	800dd42 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 800dd30:	0066      	lsls	r6, r4, #1
 800dd32:	460a      	mov	r2, r1
 800dd34:	42aa      	cmp	r2, r5
 800dd36:	d202      	bcs.n	800dd3e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 800dd38:	8013      	strh	r3, [r2, #0]
 800dd3a:	4432      	add	r2, r6
 800dd3c:	e7fa      	b.n	800dd34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 800dd3e:	3102      	adds	r1, #2
 800dd40:	3801      	subs	r0, #1
 800dd42:	07c2      	lsls	r2, r0, #31
 800dd44:	d50b      	bpl.n	800dd5e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800dd46:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 800dd4a:	3a01      	subs	r2, #1
 800dd4c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800dd50:	0066      	lsls	r6, r4, #1
 800dd52:	42aa      	cmp	r2, r5
 800dd54:	d202      	bcs.n	800dd5c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 800dd56:	8013      	strh	r3, [r2, #0]
 800dd58:	4432      	add	r2, r6
 800dd5a:	e7fa      	b.n	800dd52 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 800dd5c:	3801      	subs	r0, #1
 800dd5e:	b178      	cbz	r0, 800dd80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800dd60:	1040      	asrs	r0, r0, #1
 800dd62:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 800dd66:	0080      	lsls	r0, r0, #2
 800dd68:	0064      	lsls	r4, r4, #1
 800dd6a:	42a9      	cmp	r1, r5
 800dd6c:	d208      	bcs.n	800dd80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800dd6e:	180e      	adds	r6, r1, r0
 800dd70:	460a      	mov	r2, r1
 800dd72:	42b2      	cmp	r2, r6
 800dd74:	d202      	bcs.n	800dd7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 800dd76:	f842 3b04 	str.w	r3, [r2], #4
 800dd7a:	e7fa      	b.n	800dd72 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 800dd7c:	4421      	add	r1, r4
 800dd7e:	e7f4      	b.n	800dd6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 800dd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd84:	00fff800 	.word	0x00fff800

0800dd88 <_ZN8touchgfx8LCD16bppC1Ev>:
 800dd88:	2200      	movs	r2, #0
 800dd8a:	4912      	ldr	r1, [pc, #72]	@ (800ddd4 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 800dd8c:	6001      	str	r1, [r0, #0]
 800dd8e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800dd92:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800dd96:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800dd9a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800dd9e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 800dda2:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 800dda6:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 800ddaa:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 800ddae:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 800ddb2:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 800ddb6:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 800ddba:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 800ddbe:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 800ddc2:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 800ddc6:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 800ddca:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 800ddce:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 800ddd2:	4770      	bx	lr
 800ddd4:	080124a4 	.word	0x080124a4

0800ddd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 800ddd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dddc:	460d      	mov	r5, r1
 800ddde:	b08d      	sub	sp, #52	@ 0x34
 800dde0:	4604      	mov	r4, r0
 800dde2:	6808      	ldr	r0, [r1, #0]
 800dde4:	6849      	ldr	r1, [r1, #4]
 800dde6:	4699      	mov	r9, r3
 800dde8:	ab08      	add	r3, sp, #32
 800ddea:	c303      	stmia	r3!, {r0, r1}
 800ddec:	6810      	ldr	r0, [r2, #0]
 800ddee:	6851      	ldr	r1, [r2, #4]
 800ddf0:	ab0a      	add	r3, sp, #40	@ 0x28
 800ddf2:	c303      	stmia	r3!, {r0, r1}
 800ddf4:	a808      	add	r0, sp, #32
 800ddf6:	f7fc fb0d 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800ddfa:	4629      	mov	r1, r5
 800ddfc:	a80a      	add	r0, sp, #40	@ 0x28
 800ddfe:	f7fc fb31 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800de02:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 800de06:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 800de0a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800de0e:	4d63      	ldr	r5, [pc, #396]	@ (800df9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 800de10:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 800de14:	6828      	ldr	r0, [r5, #0]
 800de16:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 800de1a:	fb11 2103 	smlabb	r1, r1, r3, r2
 800de1e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800de22:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 800de26:	440a      	add	r2, r1
 800de28:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800de2c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800de30:	4413      	add	r3, r2
 800de32:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800de36:	6803      	ldr	r3, [r0, #0]
 800de38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de3a:	4798      	blx	r3
 800de3c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800de40:	d119      	bne.n	800de76 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 800de42:	f010 0f20 	tst.w	r0, #32
 800de46:	6828      	ldr	r0, [r5, #0]
 800de48:	d018      	beq.n	800de7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 800de4a:	2500      	movs	r5, #0
 800de4c:	6801      	ldr	r1, [r0, #0]
 800de4e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 800de52:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 800de56:	e9cd 9503 	strd	r9, r5, [sp, #12]
 800de5a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 800de5e:	9502      	str	r5, [sp, #8]
 800de60:	b2b6      	uxth	r6, r6
 800de62:	fa1f f588 	uxth.w	r5, r8
 800de66:	9601      	str	r6, [sp, #4]
 800de68:	9500      	str	r5, [sp, #0]
 800de6a:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 800de6c:	4621      	mov	r1, r4
 800de6e:	47a8      	blx	r5
 800de70:	b00d      	add	sp, #52	@ 0x34
 800de72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de76:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800de7a:	e7e4      	b.n	800de46 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 800de7c:	6803      	ldr	r3, [r0, #0]
 800de7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de80:	4798      	blx	r3
 800de82:	4947      	ldr	r1, [pc, #284]	@ (800dfa0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 800de84:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800de88:	880b      	ldrh	r3, [r1, #0]
 800de8a:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 800de8e:	fb03 5202 	mla	r2, r3, r2, r5
 800de92:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800de96:	4373      	muls	r3, r6
 800de98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800de9c:	9307      	str	r3, [sp, #28]
 800de9e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800dea2:	9306      	str	r3, [sp, #24]
 800dea4:	468a      	mov	sl, r1
 800dea6:	9b07      	ldr	r3, [sp, #28]
 800dea8:	4298      	cmp	r0, r3
 800deaa:	d270      	bcs.n	800df8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 800deac:	9b06      	ldr	r3, [sp, #24]
 800deae:	4621      	mov	r1, r4
 800deb0:	eb00 0b03 	add.w	fp, r0, r3
 800deb4:	4558      	cmp	r0, fp
 800deb6:	d25d      	bcs.n	800df74 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 800deb8:	f851 4b04 	ldr.w	r4, [r1], #4
 800debc:	0e23      	lsrs	r3, r4, #24
 800debe:	d014      	beq.n	800deea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 800dec0:	2bff      	cmp	r3, #255	@ 0xff
 800dec2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800dec6:	d112      	bne.n	800deee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 800dec8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800decc:	d10f      	bne.n	800deee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 800dece:	0963      	lsrs	r3, r4, #5
 800ded0:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 800ded4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800ded8:	f02c 0c07 	bic.w	ip, ip, #7
 800dedc:	ea43 0c0c 	orr.w	ip, r3, ip
 800dee0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 800dee4:	ea4c 0404 	orr.w	r4, ip, r4
 800dee8:	8004      	strh	r4, [r0, #0]
 800deea:	3002      	adds	r0, #2
 800deec:	e7e2      	b.n	800deb4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 800deee:	fb09 f303 	mul.w	r3, r9, r3
 800def2:	8807      	ldrh	r7, [r0, #0]
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	eb02 2223 	add.w	r2, r2, r3, asr #8
 800defa:	1212      	asrs	r2, r2, #8
 800defc:	123e      	asrs	r6, r7, #8
 800defe:	b293      	uxth	r3, r2
 800df00:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 800df04:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 800df08:	43d2      	mvns	r2, r2
 800df0a:	b2d2      	uxtb	r2, r2
 800df0c:	10fd      	asrs	r5, r7, #3
 800df0e:	fb1e fe03 	smulbb	lr, lr, r3
 800df12:	00ff      	lsls	r7, r7, #3
 800df14:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 800df18:	fb06 e602 	mla	r6, r6, r2, lr
 800df1c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 800df20:	b2ff      	uxtb	r7, r7
 800df22:	fa5f fc8c 	uxtb.w	ip, ip
 800df26:	b2e4      	uxtb	r4, r4
 800df28:	b2b6      	uxth	r6, r6
 800df2a:	fb1c fc03 	smulbb	ip, ip, r3
 800df2e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 800df32:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 800df36:	fb14 f403 	smulbb	r4, r4, r3
 800df3a:	fb05 c502 	mla	r5, r5, r2, ip
 800df3e:	f106 0e01 	add.w	lr, r6, #1
 800df42:	fb07 4702 	mla	r7, r7, r2, r4
 800df46:	b2ad      	uxth	r5, r5
 800df48:	b2bf      	uxth	r7, r7
 800df4a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 800df4e:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 800df52:	f105 0c01 	add.w	ip, r5, #1
 800df56:	1c7e      	adds	r6, r7, #1
 800df58:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 800df5c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 800df60:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 800df64:	096d      	lsrs	r5, r5, #5
 800df66:	ea46 060e 	orr.w	r6, r6, lr
 800df6a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800df6e:	432e      	orrs	r6, r5
 800df70:	8006      	strh	r6, [r0, #0]
 800df72:	e7ba      	b.n	800deea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 800df74:	f8ba 3000 	ldrh.w	r3, [sl]
 800df78:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 800df7c:	eba3 0308 	sub.w	r3, r3, r8
 800df80:	eba4 0408 	sub.w	r4, r4, r8
 800df84:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800df88:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800df8c:	e78b      	b.n	800dea6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 800df8e:	4b03      	ldr	r3, [pc, #12]	@ (800df9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 800df90:	6818      	ldr	r0, [r3, #0]
 800df92:	6803      	ldr	r3, [r0, #0]
 800df94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df96:	4798      	blx	r3
 800df98:	e76a      	b.n	800de70 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 800df9a:	bf00      	nop
 800df9c:	20012434 	.word	0x20012434
 800dfa0:	2001242e 	.word	0x2001242e

0800dfa4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 800dfa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfa8:	460c      	mov	r4, r1
 800dfaa:	b085      	sub	sp, #20
 800dfac:	6810      	ldr	r0, [r2, #0]
 800dfae:	6851      	ldr	r1, [r2, #4]
 800dfb0:	466d      	mov	r5, sp
 800dfb2:	c503      	stmia	r5!, {r0, r1}
 800dfb4:	6818      	ldr	r0, [r3, #0]
 800dfb6:	6859      	ldr	r1, [r3, #4]
 800dfb8:	4616      	mov	r6, r2
 800dfba:	c503      	stmia	r5!, {r0, r1}
 800dfbc:	4668      	mov	r0, sp
 800dfbe:	f7fc fa29 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dfc2:	4631      	mov	r1, r6
 800dfc4:	a802      	add	r0, sp, #8
 800dfc6:	f7fc fa4d 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800dfca:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800dfce:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800dfd2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800dfd6:	4d28      	ldr	r5, [pc, #160]	@ (800e078 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 800dfd8:	4e28      	ldr	r6, [pc, #160]	@ (800e07c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 800dfda:	6828      	ldr	r0, [r5, #0]
 800dfdc:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800dfe0:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 800dfe4:	fb11 2103 	smlabb	r1, r1, r3, r2
 800dfe8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800dfec:	f8bd 1000 	ldrh.w	r1, [sp]
 800dff0:	440a      	add	r2, r1
 800dff2:	f8ad 2008 	strh.w	r2, [sp, #8]
 800dff6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dffa:	4413      	add	r3, r2
 800dffc:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e000:	6803      	ldr	r3, [r0, #0]
 800e002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e004:	4798      	blx	r3
 800e006:	8833      	ldrh	r3, [r6, #0]
 800e008:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800e00c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800e010:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 800e080 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 800e014:	fb03 1202 	mla	r2, r3, r2, r1
 800e018:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800e01c:	fb08 f303 	mul.w	r3, r8, r3
 800e020:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e024:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 800e028:	4298      	cmp	r0, r3
 800e02a:	d21d      	bcs.n	800e068 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 800e02c:	eb00 080c 	add.w	r8, r0, ip
 800e030:	4540      	cmp	r0, r8
 800e032:	d20f      	bcs.n	800e054 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 800e034:	f854 1b04 	ldr.w	r1, [r4], #4
 800e038:	ea4f 1951 	mov.w	r9, r1, lsr #5
 800e03c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 800e040:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 800e044:	ea42 0209 	orr.w	r2, r2, r9
 800e048:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800e04c:	430a      	orrs	r2, r1
 800e04e:	f820 2b02 	strh.w	r2, [r0], #2
 800e052:	e7ed      	b.n	800e030 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 800e054:	8832      	ldrh	r2, [r6, #0]
 800e056:	1bd2      	subs	r2, r2, r7
 800e058:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800e05c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800e060:	1bd2      	subs	r2, r2, r7
 800e062:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800e066:	e7df      	b.n	800e028 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 800e068:	6828      	ldr	r0, [r5, #0]
 800e06a:	6803      	ldr	r3, [r0, #0]
 800e06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e06e:	4798      	blx	r3
 800e070:	b005      	add	sp, #20
 800e072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e076:	bf00      	nop
 800e078:	20012434 	.word	0x20012434
 800e07c:	2001242e 	.word	0x2001242e
 800e080:	fffff800 	.word	0xfffff800

0800e084 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 800e084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e088:	460e      	mov	r6, r1
 800e08a:	b08e      	sub	sp, #56	@ 0x38
 800e08c:	4604      	mov	r4, r0
 800e08e:	6808      	ldr	r0, [r1, #0]
 800e090:	6849      	ldr	r1, [r1, #4]
 800e092:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 800e26c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 800e096:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 800e270 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 800e09a:	461d      	mov	r5, r3
 800e09c:	ab0a      	add	r3, sp, #40	@ 0x28
 800e09e:	c303      	stmia	r3!, {r0, r1}
 800e0a0:	6810      	ldr	r0, [r2, #0]
 800e0a2:	6851      	ldr	r1, [r2, #4]
 800e0a4:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0a6:	c303      	stmia	r3!, {r0, r1}
 800e0a8:	a80a      	add	r0, sp, #40	@ 0x28
 800e0aa:	f7fc f9b3 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	a80c      	add	r0, sp, #48	@ 0x30
 800e0b2:	f7fc f9d7 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e0b6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 800e0ba:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800e0be:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800e0c2:	f8d8 0000 	ldr.w	r0, [r8]
 800e0c6:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 800e0ca:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 800e0ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e0d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e0d6:	440c      	add	r4, r1
 800e0d8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 800e0dc:	440a      	add	r2, r1
 800e0de:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800e0e2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 800e0e6:	4413      	add	r3, r2
 800e0e8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800e0ec:	6803      	ldr	r3, [r0, #0]
 800e0ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0f0:	4798      	blx	r3
 800e0f2:	2dff      	cmp	r5, #255	@ 0xff
 800e0f4:	d124      	bne.n	800e140 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 800e0f6:	f010 0f01 	tst.w	r0, #1
 800e0fa:	f8d8 0000 	ldr.w	r0, [r8]
 800e0fe:	d022      	beq.n	800e146 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 800e100:	2100      	movs	r1, #0
 800e102:	f8d0 c000 	ldr.w	ip, [r0]
 800e106:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800e10a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800e10e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800e112:	f04f 0e01 	mov.w	lr, #1
 800e116:	f8cd e018 	str.w	lr, [sp, #24]
 800e11a:	f8b9 e000 	ldrh.w	lr, [r9]
 800e11e:	9503      	str	r5, [sp, #12]
 800e120:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 800e124:	b2b6      	uxth	r6, r6
 800e126:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800e12a:	9102      	str	r1, [sp, #8]
 800e12c:	b2bf      	uxth	r7, r7
 800e12e:	9601      	str	r6, [sp, #4]
 800e130:	9700      	str	r7, [sp, #0]
 800e132:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 800e136:	4621      	mov	r1, r4
 800e138:	47a8      	blx	r5
 800e13a:	b00e      	add	sp, #56	@ 0x38
 800e13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e140:	f010 0f04 	tst.w	r0, #4
 800e144:	e7d9      	b.n	800e0fa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 800e146:	6803      	ldr	r3, [r0, #0]
 800e148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e14a:	4798      	blx	r3
 800e14c:	f8b9 3000 	ldrh.w	r3, [r9]
 800e150:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 800e154:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 800e158:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800e15c:	fb03 1202 	mla	r2, r3, r2, r1
 800e160:	ebac 0c07 	sub.w	ip, ip, r7
 800e164:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800e168:	435e      	muls	r6, r3
 800e16a:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 800e16e:	2dff      	cmp	r5, #255	@ 0xff
 800e170:	eba3 0707 	sub.w	r7, r3, r7
 800e174:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800e178:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800e17c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 800e180:	d049      	beq.n	800e216 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 800e182:	43eb      	mvns	r3, r5
 800e184:	fa1f f985 	uxth.w	r9, r5
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	42b0      	cmp	r0, r6
 800e18c:	d266      	bcs.n	800e25c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 800e18e:	eb00 0a0e 	add.w	sl, r0, lr
 800e192:	4550      	cmp	r0, sl
 800e194:	4621      	mov	r1, r4
 800e196:	f104 0403 	add.w	r4, r4, #3
 800e19a:	d25b      	bcs.n	800e254 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 800e19c:	8802      	ldrh	r2, [r0, #0]
 800e19e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e1a2:	ea4f 2822 	mov.w	r8, r2, asr #8
 800e1a6:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 800e1aa:	fb11 f109 	smulbb	r1, r1, r9
 800e1ae:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 800e1b2:	10d5      	asrs	r5, r2, #3
 800e1b4:	fb08 1803 	mla	r8, r8, r3, r1
 800e1b8:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800e1bc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 800e1c0:	fb11 f109 	smulbb	r1, r1, r9
 800e1c4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 800e1c8:	fb05 1503 	mla	r5, r5, r3, r1
 800e1cc:	00d2      	lsls	r2, r2, #3
 800e1ce:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e1d2:	b2d2      	uxtb	r2, r2
 800e1d4:	fb11 f109 	smulbb	r1, r1, r9
 800e1d8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800e1dc:	fa1f f888 	uxth.w	r8, r8
 800e1e0:	fb02 1203 	mla	r2, r2, r3, r1
 800e1e4:	b292      	uxth	r2, r2
 800e1e6:	f108 0101 	add.w	r1, r8, #1
 800e1ea:	b2ad      	uxth	r5, r5
 800e1ec:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 800e1f0:	1c51      	adds	r1, r2, #1
 800e1f2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800e1f6:	1c69      	adds	r1, r5, #1
 800e1f8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 800e1fc:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 800e200:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800e204:	096d      	lsrs	r5, r5, #5
 800e206:	ea42 0208 	orr.w	r2, r2, r8
 800e20a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800e20e:	432a      	orrs	r2, r5
 800e210:	f820 2b02 	strh.w	r2, [r0], #2
 800e214:	e7bd      	b.n	800e192 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 800e216:	4a14      	ldr	r2, [pc, #80]	@ (800e268 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 800e218:	42b0      	cmp	r0, r6
 800e21a:	d21f      	bcs.n	800e25c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 800e21c:	eb00 050e 	add.w	r5, r0, lr
 800e220:	42a8      	cmp	r0, r5
 800e222:	4621      	mov	r1, r4
 800e224:	f104 0403 	add.w	r4, r4, #3
 800e228:	d210      	bcs.n	800e24c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 800e22a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 800e22e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e232:	00db      	lsls	r3, r3, #3
 800e234:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 800e238:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800e23c:	430b      	orrs	r3, r1
 800e23e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e242:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 800e246:	f820 3b02 	strh.w	r3, [r0], #2
 800e24a:	e7e9      	b.n	800e220 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 800e24c:	4438      	add	r0, r7
 800e24e:	eb01 040c 	add.w	r4, r1, ip
 800e252:	e7e1      	b.n	800e218 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 800e254:	4438      	add	r0, r7
 800e256:	eb01 040c 	add.w	r4, r1, ip
 800e25a:	e796      	b.n	800e18a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 800e25c:	4b03      	ldr	r3, [pc, #12]	@ (800e26c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 800e25e:	6818      	ldr	r0, [r3, #0]
 800e260:	6803      	ldr	r3, [r0, #0]
 800e262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e264:	4798      	blx	r3
 800e266:	e768      	b.n	800e13a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 800e268:	fffff800 	.word	0xfffff800
 800e26c:	20012434 	.word	0x20012434
 800e270:	2001242e 	.word	0x2001242e

0800e274 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 800e274:	b4f0      	push	{r4, r5, r6, r7}
 800e276:	4616      	mov	r6, r2
 800e278:	2e01      	cmp	r6, #1
 800e27a:	461c      	mov	r4, r3
 800e27c:	460d      	mov	r5, r1
 800e27e:	9a04      	ldr	r2, [sp, #16]
 800e280:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e284:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800e288:	d012      	beq.n	800e2b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 800e28a:	d303      	bcc.n	800e294 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 800e28c:	2e02      	cmp	r6, #2
 800e28e:	d00a      	beq.n	800e2a6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 800e290:	bcf0      	pop	{r4, r5, r6, r7}
 800e292:	4770      	bx	lr
 800e294:	6805      	ldr	r5, [r0, #0]
 800e296:	e9cd 3704 	strd	r3, r7, [sp, #16]
 800e29a:	68ed      	ldr	r5, [r5, #12]
 800e29c:	4613      	mov	r3, r2
 800e29e:	46ac      	mov	ip, r5
 800e2a0:	4622      	mov	r2, r4
 800e2a2:	bcf0      	pop	{r4, r5, r6, r7}
 800e2a4:	4760      	bx	ip
 800e2a6:	4621      	mov	r1, r4
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	bcf0      	pop	{r4, r5, r6, r7}
 800e2ac:	f7ff bd94 	b.w	800ddd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800e2b0:	4621      	mov	r1, r4
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	bcf0      	pop	{r4, r5, r6, r7}
 800e2b6:	f7ff bee5 	b.w	800e084 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0800e2bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 800e2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c0:	4681      	mov	r9, r0
 800e2c2:	b093      	sub	sp, #76	@ 0x4c
 800e2c4:	6810      	ldr	r0, [r2, #0]
 800e2c6:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 800e2ca:	4f6d      	ldr	r7, [pc, #436]	@ (800e480 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 800e2cc:	4688      	mov	r8, r1
 800e2ce:	6851      	ldr	r1, [r2, #4]
 800e2d0:	ac0e      	add	r4, sp, #56	@ 0x38
 800e2d2:	c403      	stmia	r4!, {r0, r1}
 800e2d4:	6818      	ldr	r0, [r3, #0]
 800e2d6:	6859      	ldr	r1, [r3, #4]
 800e2d8:	ac10      	add	r4, sp, #64	@ 0x40
 800e2da:	4616      	mov	r6, r2
 800e2dc:	c403      	stmia	r4!, {r0, r1}
 800e2de:	a80e      	add	r0, sp, #56	@ 0x38
 800e2e0:	f7fc f898 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	a810      	add	r0, sp, #64	@ 0x40
 800e2e8:	f7fc f8bc 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e2ec:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 800e2f0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 800e2f4:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 800e2f8:	4e62      	ldr	r6, [pc, #392]	@ (800e484 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 800e2fa:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 800e2fe:	6830      	ldr	r0, [r6, #0]
 800e300:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 800e304:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e308:	4489      	add	r9, r1
 800e30a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 800e30e:	440a      	add	r2, r1
 800e310:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e314:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 800e318:	4413      	add	r3, r2
 800e31a:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 800e31e:	6803      	ldr	r3, [r0, #0]
 800e320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e322:	4798      	blx	r3
 800e324:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800e328:	6830      	ldr	r0, [r6, #0]
 800e32a:	d01d      	beq.n	800e368 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 800e32c:	2200      	movs	r2, #0
 800e32e:	6801      	ldr	r1, [r0, #0]
 800e330:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e334:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800e338:	220b      	movs	r2, #11
 800e33a:	9207      	str	r2, [sp, #28]
 800e33c:	883a      	ldrh	r2, [r7, #0]
 800e33e:	9206      	str	r2, [sp, #24]
 800e340:	2201      	movs	r2, #1
 800e342:	e9cd a204 	strd	sl, r2, [sp, #16]
 800e346:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 800e34a:	9203      	str	r2, [sp, #12]
 800e34c:	b2a4      	uxth	r4, r4
 800e34e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e352:	9200      	str	r2, [sp, #0]
 800e354:	b2ad      	uxth	r5, r5
 800e356:	9502      	str	r5, [sp, #8]
 800e358:	9401      	str	r4, [sp, #4]
 800e35a:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 800e35c:	4642      	mov	r2, r8
 800e35e:	4649      	mov	r1, r9
 800e360:	47a0      	blx	r4
 800e362:	b013      	add	sp, #76	@ 0x4c
 800e364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e368:	6803      	ldr	r3, [r0, #0]
 800e36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e36c:	4798      	blx	r3
 800e36e:	883b      	ldrh	r3, [r7, #0]
 800e370:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 800e374:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 800e378:	fb03 1202 	mla	r2, r3, r2, r1
 800e37c:	435d      	muls	r5, r3
 800e37e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800e382:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 800e386:	920c      	str	r2, [sp, #48]	@ 0x30
 800e388:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 800e38c:	1b12      	subs	r2, r2, r4
 800e38e:	920d      	str	r2, [sp, #52]	@ 0x34
 800e390:	0062      	lsls	r2, r4, #1
 800e392:	1b1c      	subs	r4, r3, r4
 800e394:	0063      	lsls	r3, r4, #1
 800e396:	920a      	str	r2, [sp, #40]	@ 0x28
 800e398:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e39a:	f04f 0e04 	mov.w	lr, #4
 800e39e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e3a0:	4298      	cmp	r0, r3
 800e3a2:	d266      	bcs.n	800e472 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 800e3a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3a6:	eb00 0b03 	add.w	fp, r0, r3
 800e3aa:	4558      	cmp	r0, fp
 800e3ac:	d25c      	bcs.n	800e468 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 800e3ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e3b2:	fb1e e303 	smlabb	r3, lr, r3, lr
 800e3b6:	f858 2003 	ldr.w	r2, [r8, r3]
 800e3ba:	0e11      	lsrs	r1, r2, #24
 800e3bc:	d012      	beq.n	800e3e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 800e3be:	29ff      	cmp	r1, #255	@ 0xff
 800e3c0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 800e3c4:	d110      	bne.n	800e3e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 800e3c6:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800e3ca:	d10d      	bne.n	800e3e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 800e3cc:	0953      	lsrs	r3, r2, #5
 800e3ce:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 800e3d2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800e3d6:	f027 0707 	bic.w	r7, r7, #7
 800e3da:	431f      	orrs	r7, r3
 800e3dc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800e3e0:	433a      	orrs	r2, r7
 800e3e2:	8002      	strh	r2, [r0, #0]
 800e3e4:	3002      	adds	r0, #2
 800e3e6:	e7e0      	b.n	800e3aa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 800e3e8:	fb0a f101 	mul.w	r1, sl, r1
 800e3ec:	8806      	ldrh	r6, [r0, #0]
 800e3ee:	1c4b      	adds	r3, r1, #1
 800e3f0:	eb03 2321 	add.w	r3, r3, r1, asr #8
 800e3f4:	1235      	asrs	r5, r6, #8
 800e3f6:	10f4      	asrs	r4, r6, #3
 800e3f8:	121b      	asrs	r3, r3, #8
 800e3fa:	00f6      	lsls	r6, r6, #3
 800e3fc:	b299      	uxth	r1, r3
 800e3fe:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e402:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 800e406:	b2f6      	uxtb	r6, r6
 800e408:	43db      	mvns	r3, r3
 800e40a:	b2d2      	uxtb	r2, r2
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	fb1c fc01 	smulbb	ip, ip, r1
 800e412:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 800e416:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 800e41a:	fb12 f201 	smulbb	r2, r2, r1
 800e41e:	fb05 c503 	mla	r5, r5, r3, ip
 800e422:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 800e426:	b2ff      	uxtb	r7, r7
 800e428:	fb06 2203 	mla	r2, r6, r3, r2
 800e42c:	b2ad      	uxth	r5, r5
 800e42e:	fb17 f701 	smulbb	r7, r7, r1
 800e432:	b292      	uxth	r2, r2
 800e434:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 800e438:	fb04 7403 	mla	r4, r4, r3, r7
 800e43c:	f105 0c01 	add.w	ip, r5, #1
 800e440:	1c57      	adds	r7, r2, #1
 800e442:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 800e446:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 800e44a:	b2a4      	uxth	r4, r4
 800e44c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 800e450:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 800e454:	433d      	orrs	r5, r7
 800e456:	1c67      	adds	r7, r4, #1
 800e458:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 800e45c:	0964      	lsrs	r4, r4, #5
 800e45e:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800e462:	4325      	orrs	r5, r4
 800e464:	8005      	strh	r5, [r0, #0]
 800e466:	e7bd      	b.n	800e3e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 800e468:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e46a:	4418      	add	r0, r3
 800e46c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e46e:	4499      	add	r9, r3
 800e470:	e795      	b.n	800e39e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 800e472:	4b04      	ldr	r3, [pc, #16]	@ (800e484 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 800e474:	6818      	ldr	r0, [r3, #0]
 800e476:	6803      	ldr	r3, [r0, #0]
 800e478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e47a:	4798      	blx	r3
 800e47c:	e771      	b.n	800e362 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 800e47e:	bf00      	nop
 800e480:	2001242e 	.word	0x2001242e
 800e484:	20012434 	.word	0x20012434

0800e488 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 800e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48c:	b087      	sub	sp, #28
 800e48e:	4680      	mov	r8, r0
 800e490:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 800e494:	460d      	mov	r5, r1
 800e496:	4614      	mov	r4, r2
 800e498:	2e00      	cmp	r6, #0
 800e49a:	f000 80b9 	beq.w	800e610 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 800e49e:	6810      	ldr	r0, [r2, #0]
 800e4a0:	6851      	ldr	r1, [r2, #4]
 800e4a2:	af02      	add	r7, sp, #8
 800e4a4:	c703      	stmia	r7!, {r0, r1}
 800e4a6:	6818      	ldr	r0, [r3, #0]
 800e4a8:	6859      	ldr	r1, [r3, #4]
 800e4aa:	af04      	add	r7, sp, #16
 800e4ac:	c703      	stmia	r7!, {r0, r1}
 800e4ae:	a802      	add	r0, sp, #8
 800e4b0:	f7fb ffb0 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	a804      	add	r0, sp, #16
 800e4b8:	f7fb ffd4 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e4bc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800e4c0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800e4c4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 800e4c8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 800e4cc:	fb14 2103 	smlabb	r1, r4, r3, r2
 800e4d0:	eb08 0401 	add.w	r4, r8, r1
 800e4d4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800e4d8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800e4dc:	440a      	add	r2, r1
 800e4de:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e4e2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e4ec:	4b4a      	ldr	r3, [pc, #296]	@ (800e618 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 800e4ee:	6818      	ldr	r0, [r3, #0]
 800e4f0:	6803      	ldr	r3, [r0, #0]
 800e4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4f4:	4798      	blx	r3
 800e4f6:	4b49      	ldr	r3, [pc, #292]	@ (800e61c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 800e4f8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800e4fc:	881a      	ldrh	r2, [r3, #0]
 800e4fe:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800e502:	2eff      	cmp	r6, #255	@ 0xff
 800e504:	fb02 c101 	mla	r1, r2, r1, ip
 800e508:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800e50c:	fb02 f207 	mul.w	r2, r2, r7
 800e510:	f105 0104 	add.w	r1, r5, #4
 800e514:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800e518:	461d      	mov	r5, r3
 800e51a:	d05a      	beq.n	800e5d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 800e51c:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 800e520:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e524:	b2b6      	uxth	r6, r6
 800e526:	fa1f fe8e 	uxth.w	lr, lr
 800e52a:	9301      	str	r3, [sp, #4]
 800e52c:	4282      	cmp	r2, r0
 800e52e:	d96a      	bls.n	800e606 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 800e530:	eb00 0b0a 	add.w	fp, r0, sl
 800e534:	4583      	cmp	fp, r0
 800e536:	d940      	bls.n	800e5ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 800e538:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e53c:	8805      	ldrh	r5, [r0, #0]
 800e53e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e542:	122f      	asrs	r7, r5, #8
 800e544:	ea4f 2c23 	mov.w	ip, r3, asr #8
 800e548:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 800e54c:	fb17 f70e 	smulbb	r7, r7, lr
 800e550:	ea4f 09e5 	mov.w	r9, r5, asr #3
 800e554:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800e558:	00ed      	lsls	r5, r5, #3
 800e55a:	fb0c 7c06 	mla	ip, ip, r6, r7
 800e55e:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 800e562:	10df      	asrs	r7, r3, #3
 800e564:	b2ed      	uxtb	r5, r5
 800e566:	00db      	lsls	r3, r3, #3
 800e568:	fa1f fc8c 	uxth.w	ip, ip
 800e56c:	fb19 f90e 	smulbb	r9, r9, lr
 800e570:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 800e574:	b2db      	uxtb	r3, r3
 800e576:	fb15 f50e 	smulbb	r5, r5, lr
 800e57a:	fb07 9706 	mla	r7, r7, r6, r9
 800e57e:	fb03 5306 	mla	r3, r3, r6, r5
 800e582:	f10c 0901 	add.w	r9, ip, #1
 800e586:	b29b      	uxth	r3, r3
 800e588:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 800e58c:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 800e590:	f103 0c01 	add.w	ip, r3, #1
 800e594:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800e598:	b2bf      	uxth	r7, r7
 800e59a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800e59e:	ea4c 0c09 	orr.w	ip, ip, r9
 800e5a2:	f107 0901 	add.w	r9, r7, #1
 800e5a6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800e5aa:	097f      	lsrs	r7, r7, #5
 800e5ac:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 800e5b0:	ea4c 0c07 	orr.w	ip, ip, r7
 800e5b4:	f820 cb02 	strh.w	ip, [r0], #2
 800e5b8:	e7bc      	b.n	800e534 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 800e5ba:	9b01      	ldr	r3, [sp, #4]
 800e5bc:	881b      	ldrh	r3, [r3, #0]
 800e5be:	eba3 0308 	sub.w	r3, r3, r8
 800e5c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e5c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e5ca:	eba3 0308 	sub.w	r3, r3, r8
 800e5ce:	441c      	add	r4, r3
 800e5d0:	e7ac      	b.n	800e52c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 800e5d2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e5d6:	4282      	cmp	r2, r0
 800e5d8:	d915      	bls.n	800e606 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 800e5da:	eb00 060a 	add.w	r6, r0, sl
 800e5de:	4286      	cmp	r6, r0
 800e5e0:	d906      	bls.n	800e5f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 800e5e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e5e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e5ea:	f820 3b02 	strh.w	r3, [r0], #2
 800e5ee:	e7f6      	b.n	800e5de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 800e5f0:	882b      	ldrh	r3, [r5, #0]
 800e5f2:	eba3 0308 	sub.w	r3, r3, r8
 800e5f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e5fa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e5fe:	eba3 0308 	sub.w	r3, r3, r8
 800e602:	441c      	add	r4, r3
 800e604:	e7e7      	b.n	800e5d6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 800e606:	4b04      	ldr	r3, [pc, #16]	@ (800e618 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 800e608:	6818      	ldr	r0, [r3, #0]
 800e60a:	6803      	ldr	r3, [r0, #0]
 800e60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60e:	4798      	blx	r3
 800e610:	b007      	add	sp, #28
 800e612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e616:	bf00      	nop
 800e618:	20012434 	.word	0x20012434
 800e61c:	2001242e 	.word	0x2001242e

0800e620 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 800e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e624:	b091      	sub	sp, #68	@ 0x44
 800e626:	4680      	mov	r8, r0
 800e628:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 800e62c:	460f      	mov	r7, r1
 800e62e:	4614      	mov	r4, r2
 800e630:	2d00      	cmp	r5, #0
 800e632:	d051      	beq.n	800e6d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 800e634:	6810      	ldr	r0, [r2, #0]
 800e636:	6851      	ldr	r1, [r2, #4]
 800e638:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 800e83c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 800e63c:	ae0c      	add	r6, sp, #48	@ 0x30
 800e63e:	c603      	stmia	r6!, {r0, r1}
 800e640:	6818      	ldr	r0, [r3, #0]
 800e642:	6859      	ldr	r1, [r3, #4]
 800e644:	ae0e      	add	r6, sp, #56	@ 0x38
 800e646:	c603      	stmia	r6!, {r0, r1}
 800e648:	a80c      	add	r0, sp, #48	@ 0x30
 800e64a:	f7fb fee3 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e64e:	4621      	mov	r1, r4
 800e650:	a80e      	add	r0, sp, #56	@ 0x38
 800e652:	f7fb ff07 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e656:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 800e65a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 800e65e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800e662:	f8d9 0000 	ldr.w	r0, [r9]
 800e666:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 800e66a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 800e66e:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e672:	eb08 0401 	add.w	r4, r8, r1
 800e676:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 800e67a:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800e840 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 800e67e:	440a      	add	r2, r1
 800e680:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 800e684:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800e688:	4413      	add	r3, r2
 800e68a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 800e68e:	6803      	ldr	r3, [r0, #0]
 800e690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e692:	4798      	blx	r3
 800e694:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800e698:	f8d9 0000 	ldr.w	r0, [r9]
 800e69c:	d01f      	beq.n	800e6de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 800e69e:	2200      	movs	r2, #0
 800e6a0:	6801      	ldr	r1, [r0, #0]
 800e6a2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800e6a6:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800e6aa:	220b      	movs	r2, #11
 800e6ac:	9207      	str	r2, [sp, #28]
 800e6ae:	f8b8 2000 	ldrh.w	r2, [r8]
 800e6b2:	9206      	str	r2, [sp, #24]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	e9cd 5204 	strd	r5, r2, [sp, #16]
 800e6ba:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800e6be:	9203      	str	r2, [sp, #12]
 800e6c0:	fa1f f28a 	uxth.w	r2, sl
 800e6c4:	9202      	str	r2, [sp, #8]
 800e6c6:	b2b6      	uxth	r6, r6
 800e6c8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 800e6cc:	9200      	str	r2, [sp, #0]
 800e6ce:	9601      	str	r6, [sp, #4]
 800e6d0:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 800e6d2:	463a      	mov	r2, r7
 800e6d4:	4621      	mov	r1, r4
 800e6d6:	47a8      	blx	r5
 800e6d8:	b011      	add	sp, #68	@ 0x44
 800e6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6de:	6803      	ldr	r3, [r0, #0]
 800e6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e2:	4798      	blx	r3
 800e6e4:	f8b8 2000 	ldrh.w	r2, [r8]
 800e6e8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 800e6ec:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 800e6f0:	2dff      	cmp	r5, #255	@ 0xff
 800e6f2:	fb02 1303 	mla	r3, r2, r3, r1
 800e6f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e6fa:	ea4f 0946 	mov.w	r9, r6, lsl #1
 800e6fe:	fb0a fa02 	mul.w	sl, sl, r2
 800e702:	d062      	beq.n	800e7ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 800e704:	ea6f 0c05 	mvn.w	ip, r5
 800e708:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 800e70c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e70e:	b2ad      	uxth	r5, r5
 800e710:	fa5f fc8c 	uxtb.w	ip, ip
 800e714:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800e718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e71a:	4298      	cmp	r0, r3
 800e71c:	f080 8085 	bcs.w	800e82a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 800e720:	eb00 0b09 	add.w	fp, r0, r9
 800e724:	4558      	cmp	r0, fp
 800e726:	d246      	bcs.n	800e7b6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 800e728:	f814 eb01 	ldrb.w	lr, [r4], #1
 800e72c:	2303      	movs	r3, #3
 800e72e:	2204      	movs	r2, #4
 800e730:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 800e734:	eb07 0a0e 	add.w	sl, r7, lr
 800e738:	8803      	ldrh	r3, [r0, #0]
 800e73a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 800e73e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800e742:	1219      	asrs	r1, r3, #8
 800e744:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 800e748:	fb18 f805 	smulbb	r8, r8, r5
 800e74c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 800e750:	10da      	asrs	r2, r3, #3
 800e752:	fb01 810c 	mla	r1, r1, ip, r8
 800e756:	00db      	lsls	r3, r3, #3
 800e758:	f89a 8001 	ldrb.w	r8, [sl, #1]
 800e75c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 800e760:	b2db      	uxtb	r3, r3
 800e762:	fb18 f805 	smulbb	r8, r8, r5
 800e766:	fb1e fe05 	smulbb	lr, lr, r5
 800e76a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 800e76e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 800e772:	b289      	uxth	r1, r1
 800e774:	fb02 820c 	mla	r2, r2, ip, r8
 800e778:	fb03 e30c 	mla	r3, r3, ip, lr
 800e77c:	b292      	uxth	r2, r2
 800e77e:	b29b      	uxth	r3, r3
 800e780:	f101 0801 	add.w	r8, r1, #1
 800e784:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 800e788:	f103 0e01 	add.w	lr, r3, #1
 800e78c:	f102 0801 	add.w	r8, r2, #1
 800e790:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 800e794:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 800e798:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 800e79c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 800e7a0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800e7a4:	ea4e 0101 	orr.w	r1, lr, r1
 800e7a8:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 800e7ac:	ea41 0108 	orr.w	r1, r1, r8
 800e7b0:	f820 1b02 	strh.w	r1, [r0], #2
 800e7b4:	e7b6      	b.n	800e724 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 800e7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7b8:	881b      	ldrh	r3, [r3, #0]
 800e7ba:	1b9b      	subs	r3, r3, r6
 800e7bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e7c0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800e7c4:	1b9b      	subs	r3, r3, r6
 800e7c6:	441c      	add	r4, r3
 800e7c8:	e7a6      	b.n	800e718 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 800e7ca:	491b      	ldr	r1, [pc, #108]	@ (800e838 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 800e7cc:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 800e7d0:	2203      	movs	r2, #3
 800e7d2:	2504      	movs	r5, #4
 800e7d4:	4550      	cmp	r0, sl
 800e7d6:	d228      	bcs.n	800e82a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 800e7d8:	eb00 0c09 	add.w	ip, r0, r9
 800e7dc:	4560      	cmp	r0, ip
 800e7de:	4623      	mov	r3, r4
 800e7e0:	d219      	bcs.n	800e816 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 800e7e2:	f893 e000 	ldrb.w	lr, [r3]
 800e7e6:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 800e7ea:	eb07 0b0e 	add.w	fp, r7, lr
 800e7ee:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800e7f2:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800e7f6:	f89b b001 	ldrb.w	fp, [fp, #1]
 800e7fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800e7fe:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 800e802:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 800e806:	ea43 030b 	orr.w	r3, r3, fp
 800e80a:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 800e80e:	3401      	adds	r4, #1
 800e810:	f820 3b02 	strh.w	r3, [r0], #2
 800e814:	e7e2      	b.n	800e7dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 800e816:	f8b8 3000 	ldrh.w	r3, [r8]
 800e81a:	1b9b      	subs	r3, r3, r6
 800e81c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e820:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800e824:	1b9b      	subs	r3, r3, r6
 800e826:	441c      	add	r4, r3
 800e828:	e7d4      	b.n	800e7d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 800e82a:	4b04      	ldr	r3, [pc, #16]	@ (800e83c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 800e82c:	6818      	ldr	r0, [r3, #0]
 800e82e:	6803      	ldr	r3, [r0, #0]
 800e830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e832:	4798      	blx	r3
 800e834:	e750      	b.n	800e6d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 800e836:	bf00      	nop
 800e838:	fffff800 	.word	0xfffff800
 800e83c:	20012434 	.word	0x20012434
 800e840:	2001242e 	.word	0x2001242e

0800e844 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 800e844:	b4f0      	push	{r4, r5, r6, r7}
 800e846:	460c      	mov	r4, r1
 800e848:	4611      	mov	r1, r2
 800e84a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800e84e:	780f      	ldrb	r7, [r1, #0]
 800e850:	784e      	ldrb	r6, [r1, #1]
 800e852:	2f01      	cmp	r7, #1
 800e854:	461a      	mov	r2, r3
 800e856:	9b04      	ldr	r3, [sp, #16]
 800e858:	d038      	beq.n	800e8cc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 800e85a:	d31f      	bcc.n	800e89c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 800e85c:	2f02      	cmp	r7, #2
 800e85e:	d14d      	bne.n	800e8fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e860:	2e03      	cmp	r6, #3
 800e862:	d84b      	bhi.n	800e8fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e864:	e8df f006 	tbb	[pc, r6]
 800e868:	17140702 	.word	0x17140702
 800e86c:	9504      	str	r5, [sp, #16]
 800e86e:	4620      	mov	r0, r4
 800e870:	bcf0      	pop	{r4, r5, r6, r7}
 800e872:	f7ff be09 	b.w	800e488 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 800e876:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800e878:	2800      	cmp	r0, #0
 800e87a:	d03f      	beq.n	800e8fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e87c:	6806      	ldr	r6, [r0, #0]
 800e87e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800e882:	68b5      	ldr	r5, [r6, #8]
 800e884:	4613      	mov	r3, r2
 800e886:	46ac      	mov	ip, r5
 800e888:	460a      	mov	r2, r1
 800e88a:	4621      	mov	r1, r4
 800e88c:	bcf0      	pop	{r4, r5, r6, r7}
 800e88e:	4760      	bx	ip
 800e890:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800e894:	e7f0      	b.n	800e878 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 800e896:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800e89a:	e7ed      	b.n	800e878 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 800e89c:	2e03      	cmp	r6, #3
 800e89e:	d82d      	bhi.n	800e8fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e8a0:	e8df f006 	tbb	[pc, r6]
 800e8a4:	110e0702 	.word	0x110e0702
 800e8a8:	9504      	str	r5, [sp, #16]
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	bcf0      	pop	{r4, r5, r6, r7}
 800e8ae:	f7ff bd05 	b.w	800e2bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 800e8b2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800e8b4:	b310      	cbz	r0, 800e8fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e8b6:	6806      	ldr	r6, [r0, #0]
 800e8b8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800e8bc:	68f5      	ldr	r5, [r6, #12]
 800e8be:	e7e1      	b.n	800e884 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 800e8c0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800e8c4:	e7f6      	b.n	800e8b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 800e8c6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800e8ca:	e7f3      	b.n	800e8b4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 800e8cc:	2e03      	cmp	r6, #3
 800e8ce:	d815      	bhi.n	800e8fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e8d0:	e8df f006 	tbb	[pc, r6]
 800e8d4:	110e0702 	.word	0x110e0702
 800e8d8:	9504      	str	r5, [sp, #16]
 800e8da:	4620      	mov	r0, r4
 800e8dc:	bcf0      	pop	{r4, r5, r6, r7}
 800e8de:	f7ff be9f 	b.w	800e620 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 800e8e2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800e8e4:	b150      	cbz	r0, 800e8fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800e8e6:	6806      	ldr	r6, [r0, #0]
 800e8e8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800e8ec:	6935      	ldr	r5, [r6, #16]
 800e8ee:	e7c9      	b.n	800e884 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 800e8f0:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800e8f4:	e7f6      	b.n	800e8e4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 800e8f6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800e8fa:	e7f3      	b.n	800e8e4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 800e8fc:	bcf0      	pop	{r4, r5, r6, r7}
 800e8fe:	4770      	bx	lr

0800e900 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 800e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	4604      	mov	r4, r0
 800e906:	b087      	sub	sp, #28
 800e908:	6810      	ldr	r0, [r2, #0]
 800e90a:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 800e90e:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 800eb48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 800e912:	460e      	mov	r6, r1
 800e914:	6851      	ldr	r1, [r2, #4]
 800e916:	ad02      	add	r5, sp, #8
 800e918:	c503      	stmia	r5!, {r0, r1}
 800e91a:	6818      	ldr	r0, [r3, #0]
 800e91c:	6859      	ldr	r1, [r3, #4]
 800e91e:	ad04      	add	r5, sp, #16
 800e920:	4617      	mov	r7, r2
 800e922:	c503      	stmia	r5!, {r0, r1}
 800e924:	a802      	add	r0, sp, #8
 800e926:	f7fb fd75 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e92a:	4639      	mov	r1, r7
 800e92c:	a804      	add	r0, sp, #16
 800e92e:	f7fb fd99 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e932:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800e936:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800e93a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800e93e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800e942:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 800e946:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e94a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 800e94e:	440e      	add	r6, r1
 800e950:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800e954:	440a      	add	r2, r1
 800e956:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e95a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e95e:	4413      	add	r3, r2
 800e960:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e964:	4b77      	ldr	r3, [pc, #476]	@ (800eb44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800e966:	6818      	ldr	r0, [r3, #0]
 800e968:	6803      	ldr	r3, [r0, #0]
 800e96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e96c:	4798      	blx	r3
 800e96e:	f8b9 b000 	ldrh.w	fp, [r9]
 800e972:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800e976:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800e97a:	fb0b 2303 	mla	r3, fp, r3, r2
 800e97e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e982:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800e986:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800e98a:	fb05 f50b 	mul.w	r5, r5, fp
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	d069      	beq.n	800ea66 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 800e992:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 800e996:	4558      	cmp	r0, fp
 800e998:	f080 80cc 	bcs.w	800eb34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800e99c:	9b00      	ldr	r3, [sp, #0]
 800e99e:	18c3      	adds	r3, r0, r3
 800e9a0:	9301      	str	r3, [sp, #4]
 800e9a2:	4631      	mov	r1, r6
 800e9a4:	9b01      	ldr	r3, [sp, #4]
 800e9a6:	4298      	cmp	r0, r3
 800e9a8:	d24f      	bcs.n	800ea4a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 800e9aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9ae:	2a00      	cmp	r2, #0
 800e9b0:	d048      	beq.n	800ea44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 800e9b2:	fb0a f202 	mul.w	r2, sl, r2
 800e9b6:	1c53      	adds	r3, r2, #1
 800e9b8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800e9bc:	121b      	asrs	r3, r3, #8
 800e9be:	d041      	beq.n	800ea44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 800e9c0:	8802      	ldrh	r2, [r0, #0]
 800e9c2:	f8b4 c000 	ldrh.w	ip, [r4]
 800e9c6:	b29e      	uxth	r6, r3
 800e9c8:	1215      	asrs	r5, r2, #8
 800e9ca:	43db      	mvns	r3, r3
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	ea4f 272c 	mov.w	r7, ip, asr #8
 800e9d2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 800e9d6:	fb15 f503 	smulbb	r5, r5, r3
 800e9da:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 800e9de:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 800e9e2:	00d2      	lsls	r2, r2, #3
 800e9e4:	fb07 5706 	mla	r7, r7, r6, r5
 800e9e8:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 800e9ec:	ea4f 05ec 	mov.w	r5, ip, asr #3
 800e9f0:	b2d2      	uxtb	r2, r2
 800e9f2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800e9f6:	b2bf      	uxth	r7, r7
 800e9f8:	fb1e fe03 	smulbb	lr, lr, r3
 800e9fc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 800ea00:	fa5f fc8c 	uxtb.w	ip, ip
 800ea04:	fb12 f203 	smulbb	r2, r2, r3
 800ea08:	fb05 e506 	mla	r5, r5, r6, lr
 800ea0c:	fb0c 2c06 	mla	ip, ip, r6, r2
 800ea10:	f107 0e01 	add.w	lr, r7, #1
 800ea14:	fa1f fc8c 	uxth.w	ip, ip
 800ea18:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 800ea1c:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 800ea20:	f10c 0701 	add.w	r7, ip, #1
 800ea24:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 800ea28:	b2ad      	uxth	r5, r5
 800ea2a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 800ea2e:	ea47 070e 	orr.w	r7, r7, lr
 800ea32:	f105 0e01 	add.w	lr, r5, #1
 800ea36:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 800ea3a:	096d      	lsrs	r5, r5, #5
 800ea3c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800ea40:	432f      	orrs	r7, r5
 800ea42:	8007      	strh	r7, [r0, #0]
 800ea44:	3002      	adds	r0, #2
 800ea46:	3402      	adds	r4, #2
 800ea48:	e7ac      	b.n	800e9a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 800ea4a:	f8b9 3000 	ldrh.w	r3, [r9]
 800ea4e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800ea52:	eba3 0308 	sub.w	r3, r3, r8
 800ea56:	eba6 0608 	sub.w	r6, r6, r8
 800ea5a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800ea5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ea62:	440e      	add	r6, r1
 800ea64:	e797      	b.n	800e996 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 800ea66:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ea6a:	42a8      	cmp	r0, r5
 800ea6c:	d262      	bcs.n	800eb34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800ea6e:	9b00      	ldr	r3, [sp, #0]
 800ea70:	4631      	mov	r1, r6
 800ea72:	eb00 0b03 	add.w	fp, r0, r3
 800ea76:	4558      	cmp	r0, fp
 800ea78:	d24e      	bcs.n	800eb18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 800ea7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea7e:	b12b      	cbz	r3, 800ea8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 800ea80:	2bff      	cmp	r3, #255	@ 0xff
 800ea82:	f8b4 e000 	ldrh.w	lr, [r4]
 800ea86:	d104      	bne.n	800ea92 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 800ea88:	f8a0 e000 	strh.w	lr, [r0]
 800ea8c:	3002      	adds	r0, #2
 800ea8e:	3402      	adds	r4, #2
 800ea90:	e7f1      	b.n	800ea76 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 800ea92:	8802      	ldrh	r2, [r0, #0]
 800ea94:	b29f      	uxth	r7, r3
 800ea96:	1216      	asrs	r6, r2, #8
 800ea98:	43db      	mvns	r3, r3
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 800eaa0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 800eaa4:	fb16 f603 	smulbb	r6, r6, r3
 800eaa8:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 800eaac:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800eab0:	00d2      	lsls	r2, r2, #3
 800eab2:	fb0c 6c07 	mla	ip, ip, r7, r6
 800eab6:	b2d2      	uxtb	r2, r2
 800eab8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 800eabc:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 800eac0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800eac4:	fb1a fa03 	smulbb	sl, sl, r3
 800eac8:	fa1f fc8c 	uxth.w	ip, ip
 800eacc:	fb12 f303 	smulbb	r3, r2, r3
 800ead0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800ead4:	fa5f fe8e 	uxtb.w	lr, lr
 800ead8:	fb06 a607 	mla	r6, r6, r7, sl
 800eadc:	f10c 0201 	add.w	r2, ip, #1
 800eae0:	fb0e 3307 	mla	r3, lr, r7, r3
 800eae4:	b2b6      	uxth	r6, r6
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 800eaec:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 800eaf0:	f106 0a01 	add.w	sl, r6, #1
 800eaf4:	f103 0c01 	add.w	ip, r3, #1
 800eaf8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800eafc:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 800eb00:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800eb04:	0976      	lsrs	r6, r6, #5
 800eb06:	ea4c 0c02 	orr.w	ip, ip, r2
 800eb0a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800eb0e:	ea4c 0c06 	orr.w	ip, ip, r6
 800eb12:	f8a0 c000 	strh.w	ip, [r0]
 800eb16:	e7b9      	b.n	800ea8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 800eb18:	f8b9 3000 	ldrh.w	r3, [r9]
 800eb1c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800eb20:	eba3 0308 	sub.w	r3, r3, r8
 800eb24:	eba6 0608 	sub.w	r6, r6, r8
 800eb28:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800eb2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800eb30:	440e      	add	r6, r1
 800eb32:	e79a      	b.n	800ea6a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 800eb34:	4b03      	ldr	r3, [pc, #12]	@ (800eb44 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800eb36:	6818      	ldr	r0, [r3, #0]
 800eb38:	6803      	ldr	r3, [r0, #0]
 800eb3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb3c:	4798      	blx	r3
 800eb3e:	b007      	add	sp, #28
 800eb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb44:	20012434 	.word	0x20012434
 800eb48:	2001242e 	.word	0x2001242e

0800eb4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 800eb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb50:	b089      	sub	sp, #36	@ 0x24
 800eb52:	4607      	mov	r7, r0
 800eb54:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 800eb58:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800eb5a:	4688      	mov	r8, r1
 800eb5c:	4692      	mov	sl, r2
 800eb5e:	4699      	mov	r9, r3
 800eb60:	2e00      	cmp	r6, #0
 800eb62:	d048      	beq.n	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800eb64:	4608      	mov	r0, r1
 800eb66:	f7fe fac3 	bl	800d0f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	4640      	mov	r0, r8
 800eb6e:	f7fe faf3 	bl	800d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800eb72:	f8ad 000e 	strh.w	r0, [sp, #14]
 800eb76:	4640      	mov	r0, r8
 800eb78:	f8ad a008 	strh.w	sl, [sp, #8]
 800eb7c:	f8ad 500c 	strh.w	r5, [sp, #12]
 800eb80:	f8ad 900a 	strh.w	r9, [sp, #10]
 800eb84:	f7fe fba6 	bl	800d2d4 <_ZNK8touchgfx6Bitmap7getDataEv>
 800eb88:	4605      	mov	r5, r0
 800eb8a:	4640      	mov	r0, r8
 800eb8c:	f7fe fbd2 	bl	800d334 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800eb90:	4682      	mov	sl, r0
 800eb92:	4640      	mov	r0, r8
 800eb94:	f7fe fc22 	bl	800d3dc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800eb98:	2810      	cmp	r0, #16
 800eb9a:	d82c      	bhi.n	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800eb9c:	e8df f010 	tbh	[pc, r0, lsl #1]
 800eba0:	00ba00ca 	.word	0x00ba00ca
 800eba4:	002b0011 	.word	0x002b0011
 800eba8:	002b002b 	.word	0x002b002b
 800ebac:	002b002b 	.word	0x002b002b
 800ebb0:	002b002b 	.word	0x002b002b
 800ebb4:	00c1002b 	.word	0x00c1002b
 800ebb8:	002b002b 	.word	0x002b002b
 800ebbc:	002b0180 	.word	0x002b0180
 800ebc0:	0173      	.short	0x0173
 800ebc2:	4bbc      	ldr	r3, [pc, #752]	@ (800eeb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 800ebc4:	6818      	ldr	r0, [r3, #0]
 800ebc6:	6803      	ldr	r3, [r0, #0]
 800ebc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebca:	4798      	blx	r3
 800ebcc:	2eff      	cmp	r6, #255	@ 0xff
 800ebce:	d101      	bne.n	800ebd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 800ebd0:	0683      	lsls	r3, r0, #26
 800ebd2:	d506      	bpl.n	800ebe2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 800ebd4:	4633      	mov	r3, r6
 800ebd6:	4622      	mov	r2, r4
 800ebd8:	a902      	add	r1, sp, #8
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f7ff f8fc 	bl	800ddd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800ebe0:	e009      	b.n	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ebe2:	4640      	mov	r0, r8
 800ebe4:	f7fe fb3e 	bl	800d264 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800ebe8:	b940      	cbnz	r0, 800ebfc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 800ebea:	4623      	mov	r3, r4
 800ebec:	aa02      	add	r2, sp, #8
 800ebee:	4629      	mov	r1, r5
 800ebf0:	4638      	mov	r0, r7
 800ebf2:	f7ff f9d7 	bl	800dfa4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 800ebf6:	b009      	add	sp, #36	@ 0x24
 800ebf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebfc:	f10d 0918 	add.w	r9, sp, #24
 800ec00:	4641      	mov	r1, r8
 800ec02:	4648      	mov	r0, r9
 800ec04:	f7fe fadc 	bl	800d1c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ec08:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ec0c:	f10d 0810 	add.w	r8, sp, #16
 800ec10:	e888 0003 	stmia.w	r8, {r0, r1}
 800ec14:	4640      	mov	r0, r8
 800ec16:	4621      	mov	r1, r4
 800ec18:	f7f9 fbd0 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800ec1c:	4640      	mov	r0, r8
 800ec1e:	f7f9 fc10 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ec22:	2800      	cmp	r0, #0
 800ec24:	d1d6      	bne.n	800ebd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 800ec26:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800ec2a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	dd12      	ble.n	800ec58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 800ec32:	1a9b      	subs	r3, r3, r2
 800ec34:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ec38:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ec3c:	f8ad 0018 	strh.w	r0, [sp, #24]
 800ec40:	f8ad 201a 	strh.w	r2, [sp, #26]
 800ec44:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ec48:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ec4c:	464a      	mov	r2, r9
 800ec4e:	4633      	mov	r3, r6
 800ec50:	a902      	add	r1, sp, #8
 800ec52:	4628      	mov	r0, r5
 800ec54:	f7ff f8c0 	bl	800ddd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800ec58:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800ec5c:	f9b4 2000 	ldrsh.w	r2, [r4]
 800ec60:	4293      	cmp	r3, r2
 800ec62:	dd12      	ble.n	800ec8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 800ec64:	1a9b      	subs	r3, r3, r2
 800ec66:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800ec6a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800ec6e:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ec72:	f8ad 001a 	strh.w	r0, [sp, #26]
 800ec76:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ec7a:	f8ad 101e 	strh.w	r1, [sp, #30]
 800ec7e:	23ff      	movs	r3, #255	@ 0xff
 800ec80:	464a      	mov	r2, r9
 800ec82:	a902      	add	r1, sp, #8
 800ec84:	4628      	mov	r0, r5
 800ec86:	f7ff f8a7 	bl	800ddd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800ec8a:	4643      	mov	r3, r8
 800ec8c:	aa02      	add	r2, sp, #8
 800ec8e:	4629      	mov	r1, r5
 800ec90:	4638      	mov	r0, r7
 800ec92:	f7ff f987 	bl	800dfa4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 800ec96:	88a2      	ldrh	r2, [r4, #4]
 800ec98:	8823      	ldrh	r3, [r4, #0]
 800ec9a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ec9e:	4413      	add	r3, r2
 800eca0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800eca4:	440a      	add	r2, r1
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	b292      	uxth	r2, r2
 800ecaa:	b211      	sxth	r1, r2
 800ecac:	b218      	sxth	r0, r3
 800ecae:	4288      	cmp	r0, r1
 800ecb0:	dd12      	ble.n	800ecd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 800ecb2:	1a9b      	subs	r3, r3, r2
 800ecb4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800ecb8:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 800ecbc:	f8ad 1018 	strh.w	r1, [sp, #24]
 800ecc0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ecc4:	f8ad 001e 	strh.w	r0, [sp, #30]
 800ecc8:	23ff      	movs	r3, #255	@ 0xff
 800ecca:	464a      	mov	r2, r9
 800eccc:	a902      	add	r1, sp, #8
 800ecce:	4628      	mov	r0, r5
 800ecd0:	f8ad 601a 	strh.w	r6, [sp, #26]
 800ecd4:	f7ff f880 	bl	800ddd8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800ecd8:	88e2      	ldrh	r2, [r4, #6]
 800ecda:	8863      	ldrh	r3, [r4, #2]
 800ecdc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800ece0:	4413      	add	r3, r2
 800ece2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ece6:	440a      	add	r2, r1
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	b292      	uxth	r2, r2
 800ecec:	b211      	sxth	r1, r2
 800ecee:	b218      	sxth	r0, r3
 800ecf0:	4288      	cmp	r0, r1
 800ecf2:	dd80      	ble.n	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ecf4:	1a9b      	subs	r3, r3, r2
 800ecf6:	f9b4 6000 	ldrsh.w	r6, [r4]
 800ecfa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800ecfe:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ed02:	f8ad 6018 	strh.w	r6, [sp, #24]
 800ed06:	f8ad 101a 	strh.w	r1, [sp, #26]
 800ed0a:	f8ad 001c 	strh.w	r0, [sp, #28]
 800ed0e:	23ff      	movs	r3, #255	@ 0xff
 800ed10:	464a      	mov	r2, r9
 800ed12:	e761      	b.n	800ebd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 800ed14:	4633      	mov	r3, r6
 800ed16:	4622      	mov	r2, r4
 800ed18:	a902      	add	r1, sp, #8
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	f7ff f9b2 	bl	800e084 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 800ed20:	e769      	b.n	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ed22:	e9cd 4600 	strd	r4, r6, [sp]
 800ed26:	ab02      	add	r3, sp, #8
 800ed28:	4652      	mov	r2, sl
 800ed2a:	4629      	mov	r1, r5
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	f7ff fd89 	bl	800e844 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 800ed32:	e760      	b.n	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ed34:	4640      	mov	r0, r8
 800ed36:	f7fe fa95 	bl	800d264 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800ed3a:	b948      	cbnz	r0, 800ed50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	e9cd 6000 	strd	r6, r0, [sp]
 800ed42:	aa02      	add	r2, sp, #8
 800ed44:	68de      	ldr	r6, [r3, #12]
 800ed46:	4629      	mov	r1, r5
 800ed48:	4623      	mov	r3, r4
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	47b0      	blx	r6
 800ed4e:	e752      	b.n	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ed50:	f10d 0918 	add.w	r9, sp, #24
 800ed54:	4641      	mov	r1, r8
 800ed56:	4648      	mov	r0, r9
 800ed58:	f7fe fa32 	bl	800d1c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ed5c:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ed60:	f10d 0810 	add.w	r8, sp, #16
 800ed64:	e888 0003 	stmia.w	r8, {r0, r1}
 800ed68:	4640      	mov	r0, r8
 800ed6a:	4621      	mov	r1, r4
 800ed6c:	f7f9 fb26 	bl	80083bc <_ZN8touchgfx4RectaNERKS0_>
 800ed70:	4640      	mov	r0, r8
 800ed72:	f7f9 fb66 	bl	8008442 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ed76:	b138      	cbz	r0, 800ed88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 800ed78:	9600      	str	r6, [sp, #0]
 800ed7a:	4623      	mov	r3, r4
 800ed7c:	aa02      	add	r2, sp, #8
 800ed7e:	4651      	mov	r1, sl
 800ed80:	4628      	mov	r0, r5
 800ed82:	f7ff fdbd 	bl	800e900 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ed86:	e736      	b.n	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	e9cd 6000 	strd	r6, r0, [sp]
 800ed8e:	aa02      	add	r2, sp, #8
 800ed90:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 800ed94:	4629      	mov	r1, r5
 800ed96:	4643      	mov	r3, r8
 800ed98:	4638      	mov	r0, r7
 800ed9a:	47d8      	blx	fp
 800ed9c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800eda0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800eda4:	4293      	cmp	r3, r2
 800eda6:	dd13      	ble.n	800edd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 800eda8:	f9b4 0000 	ldrsh.w	r0, [r4]
 800edac:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800edb0:	f8ad 0018 	strh.w	r0, [sp, #24]
 800edb4:	1a9b      	subs	r3, r3, r2
 800edb6:	f8ad 201a 	strh.w	r2, [sp, #26]
 800edba:	f8ad 101c 	strh.w	r1, [sp, #28]
 800edbe:	f8ad 301e 	strh.w	r3, [sp, #30]
 800edc2:	9600      	str	r6, [sp, #0]
 800edc4:	464b      	mov	r3, r9
 800edc6:	aa02      	add	r2, sp, #8
 800edc8:	4651      	mov	r1, sl
 800edca:	4628      	mov	r0, r5
 800edcc:	f7ff fd98 	bl	800e900 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800edd0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800edd4:	f9b4 2000 	ldrsh.w	r2, [r4]
 800edd8:	4293      	cmp	r3, r2
 800edda:	dd13      	ble.n	800ee04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 800eddc:	1a9b      	subs	r3, r3, r2
 800edde:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800ede2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800ede6:	f8ad 2018 	strh.w	r2, [sp, #24]
 800edea:	f8ad 001a 	strh.w	r0, [sp, #26]
 800edee:	f8ad 301c 	strh.w	r3, [sp, #28]
 800edf2:	f8ad 101e 	strh.w	r1, [sp, #30]
 800edf6:	9600      	str	r6, [sp, #0]
 800edf8:	464b      	mov	r3, r9
 800edfa:	aa02      	add	r2, sp, #8
 800edfc:	4651      	mov	r1, sl
 800edfe:	4628      	mov	r0, r5
 800ee00:	f7ff fd7e 	bl	800e900 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ee04:	88a2      	ldrh	r2, [r4, #4]
 800ee06:	8823      	ldrh	r3, [r4, #0]
 800ee08:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ee12:	440a      	add	r2, r1
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	b292      	uxth	r2, r2
 800ee18:	b211      	sxth	r1, r2
 800ee1a:	b218      	sxth	r0, r3
 800ee1c:	4288      	cmp	r0, r1
 800ee1e:	dd13      	ble.n	800ee48 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 800ee20:	1a9b      	subs	r3, r3, r2
 800ee22:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800ee26:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 800ee2a:	f8ad 1018 	strh.w	r1, [sp, #24]
 800ee2e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ee32:	f8ad 001e 	strh.w	r0, [sp, #30]
 800ee36:	9600      	str	r6, [sp, #0]
 800ee38:	464b      	mov	r3, r9
 800ee3a:	aa02      	add	r2, sp, #8
 800ee3c:	4651      	mov	r1, sl
 800ee3e:	4628      	mov	r0, r5
 800ee40:	f8ad 701a 	strh.w	r7, [sp, #26]
 800ee44:	f7ff fd5c 	bl	800e900 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800ee48:	88e2      	ldrh	r2, [r4, #6]
 800ee4a:	8863      	ldrh	r3, [r4, #2]
 800ee4c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800ee50:	4413      	add	r3, r2
 800ee52:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ee56:	440a      	add	r2, r1
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	b292      	uxth	r2, r2
 800ee5c:	b211      	sxth	r1, r2
 800ee5e:	b218      	sxth	r0, r3
 800ee60:	4288      	cmp	r0, r1
 800ee62:	f77f aec8 	ble.w	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ee66:	f9b4 7000 	ldrsh.w	r7, [r4]
 800ee6a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800ee6e:	f8ad 7018 	strh.w	r7, [sp, #24]
 800ee72:	1a9b      	subs	r3, r3, r2
 800ee74:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ee78:	f8ad 101a 	strh.w	r1, [sp, #26]
 800ee7c:	f8ad 001c 	strh.w	r0, [sp, #28]
 800ee80:	9600      	str	r6, [sp, #0]
 800ee82:	464b      	mov	r3, r9
 800ee84:	e77a      	b.n	800ed7c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 800ee86:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	f43f aeb3 	beq.w	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800ee90:	6803      	ldr	r3, [r0, #0]
 800ee92:	9600      	str	r6, [sp, #0]
 800ee94:	68de      	ldr	r6, [r3, #12]
 800ee96:	4623      	mov	r3, r4
 800ee98:	aa02      	add	r2, sp, #8
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	47b0      	blx	r6
 800ee9e:	e6aa      	b.n	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800eea0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800eea4:	2800      	cmp	r0, #0
 800eea6:	f43f aea6 	beq.w	800ebf6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800eeaa:	6803      	ldr	r3, [r0, #0]
 800eeac:	9600      	str	r6, [sp, #0]
 800eeae:	689e      	ldr	r6, [r3, #8]
 800eeb0:	e7f1      	b.n	800ee96 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 800eeb2:	bf00      	nop
 800eeb4:	20012434 	.word	0x20012434

0800eeb8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 800eeb8:	b180      	cbz	r0, 800eedc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 800eeba:	2903      	cmp	r1, #3
 800eebc:	d81c      	bhi.n	800eef8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800eebe:	e8df f001 	tbb	[pc, r1]
 800eec2:	1d02      	.short	0x1d02
 800eec4:	1f08      	.short	0x1f08
 800eec6:	4b10      	ldr	r3, [pc, #64]	@ (800ef08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800eec8:	8818      	ldrh	r0, [r3, #0]
 800eeca:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800eece:	4240      	negs	r0, r0
 800eed0:	4770      	bx	lr
 800eed2:	4b0d      	ldr	r3, [pc, #52]	@ (800ef08 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800eed4:	8818      	ldrh	r0, [r3, #0]
 800eed6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800eeda:	4770      	bx	lr
 800eedc:	2903      	cmp	r1, #3
 800eede:	d80b      	bhi.n	800eef8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800eee0:	a301      	add	r3, pc, #4	@ (adr r3, 800eee8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 800eee2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800eee6:	bf00      	nop
 800eee8:	0800eefd 	.word	0x0800eefd
 800eeec:	0800eed3 	.word	0x0800eed3
 800eef0:	0800ef01 	.word	0x0800ef01
 800eef4:	0800eec7 	.word	0x0800eec7
 800eef8:	2000      	movs	r0, #0
 800eefa:	4770      	bx	lr
 800eefc:	2001      	movs	r0, #1
 800eefe:	4770      	bx	lr
 800ef00:	f04f 30ff 	mov.w	r0, #4294967295
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop
 800ef08:	2001242e 	.word	0x2001242e

0800ef0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 800ef0c:	b180      	cbz	r0, 800ef30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 800ef0e:	2903      	cmp	r1, #3
 800ef10:	d81c      	bhi.n	800ef4c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 800ef12:	e8df f001 	tbb	[pc, r1]
 800ef16:	021d      	.short	0x021d
 800ef18:	071f      	.short	0x071f
 800ef1a:	4b10      	ldr	r3, [pc, #64]	@ (800ef5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800ef1c:	8818      	ldrh	r0, [r3, #0]
 800ef1e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800ef22:	4770      	bx	lr
 800ef24:	4b0d      	ldr	r3, [pc, #52]	@ (800ef5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800ef26:	8818      	ldrh	r0, [r3, #0]
 800ef28:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800ef2c:	4240      	negs	r0, r0
 800ef2e:	4770      	bx	lr
 800ef30:	2903      	cmp	r1, #3
 800ef32:	d80b      	bhi.n	800ef4c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 800ef34:	a301      	add	r3, pc, #4	@ (adr r3, 800ef3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 800ef36:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800ef3a:	bf00      	nop
 800ef3c:	0800ef1b 	.word	0x0800ef1b
 800ef40:	0800ef55 	.word	0x0800ef55
 800ef44:	0800ef25 	.word	0x0800ef25
 800ef48:	0800ef51 	.word	0x0800ef51
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	4770      	bx	lr
 800ef50:	2001      	movs	r0, #1
 800ef52:	4770      	bx	lr
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	2001242e 	.word	0x2001242e

0800ef60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 800ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef64:	b099      	sub	sp, #100	@ 0x64
 800ef66:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ef68:	a914      	add	r1, sp, #80	@ 0x50
 800ef6a:	e881 000c 	stmia.w	r1, {r2, r3}
 800ef6e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 800ef72:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800ef76:	f891 900d 	ldrb.w	r9, [r1, #13]
 800ef7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef7c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 800ef80:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef82:	ea4f 1749 	mov.w	r7, r9, lsl #5
 800ef86:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 800ef8a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ef8c:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 800ef90:	798f      	ldrb	r7, [r1, #6]
 800ef92:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 800ef96:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 800ef9a:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 800ef9e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 800efa2:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 800efa6:	431f      	orrs	r7, r3
 800efa8:	f000 8195 	beq.w	800f2d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800efac:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800efb0:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800efb4:	f891 9007 	ldrb.w	r9, [r1, #7]
 800efb8:	ea59 0903 	orrs.w	r9, r9, r3
 800efbc:	f000 818b 	beq.w	800f2d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800efc0:	f991 3009 	ldrsb.w	r3, [r1, #9]
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	2d00      	cmp	r5, #0
 800efc8:	f000 812e 	beq.w	800f228 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 800efcc:	1aed      	subs	r5, r5, r3
 800efce:	b2ad      	uxth	r5, r5
 800efd0:	042b      	lsls	r3, r5, #16
 800efd2:	d502      	bpl.n	800efda <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 800efd4:	1b64      	subs	r4, r4, r5
 800efd6:	b224      	sxth	r4, r4
 800efd8:	2500      	movs	r5, #0
 800efda:	f9b2 1000 	ldrsh.w	r1, [r2]
 800efde:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 800efe2:	428c      	cmp	r4, r1
 800efe4:	b28b      	uxth	r3, r1
 800efe6:	bfbf      	itttt	lt
 800efe8:	18ed      	addlt	r5, r5, r3
 800efea:	1b2c      	sublt	r4, r5, r4
 800efec:	b2a5      	uxthlt	r5, r4
 800efee:	460c      	movlt	r4, r1
 800eff0:	8891      	ldrh	r1, [r2, #4]
 800eff2:	440b      	add	r3, r1
 800eff4:	b21b      	sxth	r3, r3
 800eff6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eff8:	88d3      	ldrh	r3, [r2, #6]
 800effa:	8852      	ldrh	r2, [r2, #2]
 800effc:	4413      	add	r3, r2
 800effe:	b21b      	sxth	r3, r3
 800f000:	930d      	str	r3, [sp, #52]	@ 0x34
 800f002:	4bbe      	ldr	r3, [pc, #760]	@ (800f2fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 800f004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f006:	f893 b000 	ldrb.w	fp, [r3]
 800f00a:	f10b 3cff 	add.w	ip, fp, #4294967295
 800f00e:	f1dc 0300 	rsbs	r3, ip, #0
 800f012:	eb43 030c 	adc.w	r3, r3, ip
 800f016:	930e      	str	r3, [sp, #56]	@ 0x38
 800f018:	4621      	mov	r1, r4
 800f01a:	4653      	mov	r3, sl
 800f01c:	a814      	add	r0, sp, #80	@ 0x50
 800f01e:	f7fb f86d 	bl	800a0fc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 800f022:	4621      	mov	r1, r4
 800f024:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 800f028:	4653      	mov	r3, sl
 800f02a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f02c:	a814      	add	r0, sp, #80	@ 0x50
 800f02e:	f7fb f882 	bl	800a136 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 800f032:	a918      	add	r1, sp, #96	@ 0x60
 800f034:	f821 0d02 	strh.w	r0, [r1, #-2]!
 800f038:	a817      	add	r0, sp, #92	@ 0x5c
 800f03a:	f7fb f9a9 	bl	800a390 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 800f03e:	f1ba 0f00 	cmp.w	sl, #0
 800f042:	f040 80f4 	bne.w	800f22e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 800f046:	f1bb 0f01 	cmp.w	fp, #1
 800f04a:	f040 80f8 	bne.w	800f23e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 800f04e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f050:	2b00      	cmp	r3, #0
 800f052:	f040 8145 	bne.w	800f2e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 800f056:	b2ba      	uxth	r2, r7
 800f058:	b905      	cbnz	r5, 800f05c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 800f05a:	b16e      	cbz	r6, 800f078 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 800f05c:	fb06 5302 	mla	r3, r6, r2, r5
 800f060:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 800f062:	fb08 f303 	mul.w	r3, r8, r3
 800f066:	4631      	mov	r1, r6
 800f068:	f003 0607 	and.w	r6, r3, #7
 800f06c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 800f070:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f072:	eba9 0301 	sub.w	r3, r9, r1
 800f076:	930a      	str	r3, [sp, #40]	@ 0x28
 800f078:	4651      	mov	r1, sl
 800f07a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f07c:	f7ff ff1c 	bl	800eeb8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 800f080:	4681      	mov	r9, r0
 800f082:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f084:	f7ff ff42 	bl	800ef0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 800f088:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f08a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f08c:	eba3 0a01 	sub.w	sl, r3, r1
 800f090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f092:	459a      	cmp	sl, r3
 800f094:	bfa8      	it	ge
 800f096:	469a      	movge	sl, r3
 800f098:	f1ba 0f00 	cmp.w	sl, #0
 800f09c:	4683      	mov	fp, r0
 800f09e:	f340 811a 	ble.w	800f2d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f0a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0a4:	1b64      	subs	r4, r4, r5
 800f0a6:	1b1c      	subs	r4, r3, r4
 800f0a8:	42bc      	cmp	r4, r7
 800f0aa:	bfd4      	ite	le
 800f0ac:	ebc5 0504 	rsble	r5, r5, r4
 800f0b0:	ebc5 0507 	rsbgt	r5, r5, r7
 800f0b4:	2d00      	cmp	r5, #0
 800f0b6:	f340 810e 	ble.w	800f2d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f0ba:	1b52      	subs	r2, r2, r5
 800f0bc:	fb08 f302 	mul.w	r3, r8, r2
 800f0c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f0c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f040 8116 	bne.w	800f2f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 800f0ca:	4b8d      	ldr	r3, [pc, #564]	@ (800f300 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 800f0cc:	6818      	ldr	r0, [r3, #0]
 800f0ce:	6803      	ldr	r3, [r0, #0]
 800f0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0d2:	4798      	blx	r3
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	fa03 f308 	lsl.w	r3, r3, r8
 800f0da:	4a8a      	ldr	r2, [pc, #552]	@ (800f304 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	8811      	ldrh	r1, [r2, #0]
 800f0e2:	930e      	str	r3, [sp, #56]	@ 0x38
 800f0e4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 800f0e8:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 800f0ec:	fb01 2303 	mla	r3, r1, r3, r2
 800f0f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f0f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0f6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f0f8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800f0fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0fe:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f100:	0a19      	lsrs	r1, r3, #8
 800f102:	b2cb      	uxtb	r3, r1
 800f104:	9312      	str	r3, [sp, #72]	@ 0x48
 800f106:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	9311      	str	r3, [sp, #68]	@ 0x44
 800f10c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f10e:	095a      	lsrs	r2, r3, #5
 800f110:	4b7d      	ldr	r3, [pc, #500]	@ (800f308 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 800f112:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800f116:	400b      	ands	r3, r1
 800f118:	4313      	orrs	r3, r2
 800f11a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 800f11c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800f120:	4313      	orrs	r3, r2
 800f122:	b29b      	uxth	r3, r3
 800f124:	9310      	str	r3, [sp, #64]	@ 0x40
 800f126:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f128:	781a      	ldrb	r2, [r3, #0]
 800f12a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800f12e:	4132      	asrs	r2, r6
 800f130:	fb05 b919 	mls	r9, r5, r9, fp
 800f134:	fb03 fb05 	mul.w	fp, r3, r5
 800f138:	b2d2      	uxtb	r2, r2
 800f13a:	930d      	str	r3, [sp, #52]	@ 0x34
 800f13c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 800f140:	f11a 3aff 	adds.w	sl, sl, #4294967295
 800f144:	f0c0 80f5 	bcc.w	800f332 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 800f148:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 800f14c:	46ae      	mov	lr, r5
 800f14e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 800f152:	f0c0 80dd 	bcc.w	800f310 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 800f156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f158:	4013      	ands	r3, r2
 800f15a:	d055      	beq.n	800f208 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 800f15c:	20ff      	movs	r0, #255	@ 0xff
 800f15e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f160:	fb90 f1f1 	sdiv	r1, r0, r1
 800f164:	434b      	muls	r3, r1
 800f166:	2bfe      	cmp	r3, #254	@ 0xfe
 800f168:	dd03      	ble.n	800f172 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 800f16a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f16c:	4281      	cmp	r1, r0
 800f16e:	f000 80cd 	beq.w	800f30c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 800f172:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f174:	f8bc 4000 	ldrh.w	r4, [ip]
 800f178:	fb11 f303 	smulbb	r3, r1, r3
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	1c59      	adds	r1, r3, #1
 800f180:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 800f184:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f188:	b29f      	uxth	r7, r3
 800f18a:	43db      	mvns	r3, r3
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f190:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f192:	1220      	asrs	r0, r4, #8
 800f194:	fb13 f907 	smulbb	r9, r3, r7
 800f198:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800f19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f19e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 800f1a2:	fb00 9003 	mla	r0, r0, r3, r9
 800f1a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f1a8:	10e1      	asrs	r1, r4, #3
 800f1aa:	fb13 f907 	smulbb	r9, r3, r7
 800f1ae:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 800f1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1b4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 800f1b8:	fb01 9103 	mla	r1, r1, r3, r9
 800f1bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f1be:	00e4      	lsls	r4, r4, #3
 800f1c0:	fb13 f707 	smulbb	r7, r3, r7
 800f1c4:	b2e4      	uxtb	r4, r4
 800f1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1c8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800f1cc:	fb04 7403 	mla	r4, r4, r3, r7
 800f1d0:	b280      	uxth	r0, r0
 800f1d2:	b2a4      	uxth	r4, r4
 800f1d4:	1c43      	adds	r3, r0, #1
 800f1d6:	f104 0901 	add.w	r9, r4, #1
 800f1da:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800f1de:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 800f1e2:	b289      	uxth	r1, r1
 800f1e4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 800f1e8:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 800f1ec:	ea49 0000 	orr.w	r0, r9, r0
 800f1f0:	f101 0901 	add.w	r9, r1, #1
 800f1f4:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 800f1f8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800f1fc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 800f200:	ea40 0009 	orr.w	r0, r0, r9
 800f204:	f8ac 0000 	strh.w	r0, [ip]
 800f208:	4446      	add	r6, r8
 800f20a:	b2b6      	uxth	r6, r6
 800f20c:	2e07      	cmp	r6, #7
 800f20e:	bf81      	itttt	hi
 800f210:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 800f212:	785a      	ldrbhi	r2, [r3, #1]
 800f214:	3301      	addhi	r3, #1
 800f216:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 800f218:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f21a:	bf9a      	itte	ls
 800f21c:	fa42 f208 	asrls.w	r2, r2, r8
 800f220:	b2d2      	uxtbls	r2, r2
 800f222:	2600      	movhi	r6, #0
 800f224:	449c      	add	ip, r3
 800f226:	e792      	b.n	800f14e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 800f228:	441c      	add	r4, r3
 800f22a:	b224      	sxth	r4, r4
 800f22c:	e6d5      	b.n	800efda <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 800f22e:	f1ba 0f01 	cmp.w	sl, #1
 800f232:	f47f af0c 	bne.w	800f04e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f236:	f1bb 0f01 	cmp.w	fp, #1
 800f23a:	f47f af08 	bne.w	800f04e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f23e:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 800f300 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 800f242:	f8db 0000 	ldr.w	r0, [fp]
 800f246:	6803      	ldr	r3, [r0, #0]
 800f248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f24a:	4798      	blx	r3
 800f24c:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 800f250:	465a      	mov	r2, fp
 800f252:	d006      	beq.n	800f262 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 800f254:	f1b8 0f04 	cmp.w	r8, #4
 800f258:	d140      	bne.n	800f2dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 800f25a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f25c:	3300      	adds	r3, #0
 800f25e:	bf18      	it	ne
 800f260:	2301      	movne	r3, #1
 800f262:	0580      	lsls	r0, r0, #22
 800f264:	d56e      	bpl.n	800f344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 800f266:	f1b8 0f08 	cmp.w	r8, #8
 800f26a:	d16b      	bne.n	800f344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	bf0c      	ite	eq
 800f270:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 800f274:	f44f 7180 	movne.w	r1, #256	@ 0x100
 800f278:	2d00      	cmp	r5, #0
 800f27a:	f47f aee8 	bne.w	800f04e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f27e:	2e00      	cmp	r6, #0
 800f280:	f47f aee5 	bne.w	800f04e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f284:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800f286:	19e3      	adds	r3, r4, r7
 800f288:	4283      	cmp	r3, r0
 800f28a:	f73f aee0 	bgt.w	800f04e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f290:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f292:	444b      	add	r3, r9
 800f294:	4283      	cmp	r3, r0
 800f296:	f73f aeda 	bgt.w	800f04e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f29a:	6810      	ldr	r0, [r2, #0]
 800f29c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 800f2a0:	6804      	ldr	r4, [r0, #0]
 800f2a2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 800f2a6:	b2bf      	uxth	r7, r7
 800f2a8:	f1b8 0f08 	cmp.w	r8, #8
 800f2ac:	f04f 0500 	mov.w	r5, #0
 800f2b0:	bf18      	it	ne
 800f2b2:	3701      	addne	r7, #1
 800f2b4:	e9cd 1505 	strd	r1, r5, [sp, #20]
 800f2b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f2ba:	9104      	str	r1, [sp, #16]
 800f2bc:	bf18      	it	ne
 800f2be:	f027 0701 	bicne.w	r7, r7, #1
 800f2c2:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800f2c4:	bf18      	it	ne
 800f2c6:	b2bf      	uxthne	r7, r7
 800f2c8:	e9cd 7102 	strd	r7, r1, [sp, #8]
 800f2cc:	e9cd 7900 	strd	r7, r9, [sp]
 800f2d0:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800f2d2:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 800f2d4:	47a0      	blx	r4
 800f2d6:	b019      	add	sp, #100	@ 0x64
 800f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2dc:	2300      	movs	r3, #0
 800f2de:	e7c0      	b.n	800f262 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 800f2e0:	2208      	movs	r2, #8
 800f2e2:	fb92 f3f8 	sdiv	r3, r2, r8
 800f2e6:	1e5a      	subs	r2, r3, #1
 800f2e8:	443a      	add	r2, r7
 800f2ea:	fb92 f2f3 	sdiv	r2, r2, r3
 800f2ee:	fb12 f203 	smulbb	r2, r2, r3
 800f2f2:	b292      	uxth	r2, r2
 800f2f4:	e6b0      	b.n	800f058 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 800f2f6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f2f8:	e6ec      	b.n	800f0d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 800f2fa:	bf00      	nop
 800f2fc:	2001242c 	.word	0x2001242c
 800f300:	20012434 	.word	0x20012434
 800f304:	2001242e 	.word	0x2001242e
 800f308:	00fff800 	.word	0x00fff800
 800f30c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f30e:	e779      	b.n	800f204 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 800f310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f312:	b153      	cbz	r3, 800f32a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 800f314:	441e      	add	r6, r3
 800f316:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f318:	b2b6      	uxth	r6, r6
 800f31a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 800f31e:	f006 0607 	and.w	r6, r6, #7
 800f322:	781a      	ldrb	r2, [r3, #0]
 800f324:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f326:	4132      	asrs	r2, r6
 800f328:	b2d2      	uxtb	r2, r2
 800f32a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f32c:	445b      	add	r3, fp
 800f32e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f330:	e706      	b.n	800f140 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 800f332:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f334:	2b00      	cmp	r3, #0
 800f336:	d1ce      	bne.n	800f2d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f338:	4b05      	ldr	r3, [pc, #20]	@ (800f350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 800f33a:	6818      	ldr	r0, [r3, #0]
 800f33c:	6803      	ldr	r3, [r0, #0]
 800f33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f340:	4798      	blx	r3
 800f342:	e7c8      	b.n	800f2d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f344:	2b00      	cmp	r3, #0
 800f346:	f43f ae82 	beq.w	800f04e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f34a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f34e:	e793      	b.n	800f278 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 800f350:	20012434 	.word	0x20012434

0800f354 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	4c0b      	ldr	r4, [pc, #44]	@ (800f384 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 800f358:	7823      	ldrb	r3, [r4, #0]
 800f35a:	f3bf 8f5b 	dmb	ish
 800f35e:	07db      	lsls	r3, r3, #31
 800f360:	4605      	mov	r5, r0
 800f362:	d40b      	bmi.n	800f37c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 800f364:	4620      	mov	r0, r4
 800f366:	f000 fd43 	bl	800fdf0 <__cxa_guard_acquire>
 800f36a:	b138      	cbz	r0, 800f37c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 800f36c:	4620      	mov	r0, r4
 800f36e:	f000 fd4b 	bl	800fe08 <__cxa_guard_release>
 800f372:	4a05      	ldr	r2, [pc, #20]	@ (800f388 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 800f374:	4905      	ldr	r1, [pc, #20]	@ (800f38c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 800f376:	4806      	ldr	r0, [pc, #24]	@ (800f390 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 800f378:	f000 fd33 	bl	800fde2 <__aeabi_atexit>
 800f37c:	4b04      	ldr	r3, [pc, #16]	@ (800f390 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 800f37e:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800f380:	bd38      	pop	{r3, r4, r5, pc}
 800f382:	bf00      	nop
 800f384:	200124c0 	.word	0x200124c0
 800f388:	20000000 	.word	0x20000000
 800f38c:	0800d60d 	.word	0x0800d60d
 800f390:	20000088 	.word	0x20000088

0800f394 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 800f394:	b570      	push	{r4, r5, r6, lr}
 800f396:	1208      	asrs	r0, r1, #8
 800f398:	b29e      	uxth	r6, r3
 800f39a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800f39e:	1213      	asrs	r3, r2, #8
 800f3a0:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800f3a4:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800f3a8:	fb13 f305 	smulbb	r3, r3, r5
 800f3ac:	fb10 f006 	smulbb	r0, r0, r6
 800f3b0:	4418      	add	r0, r3
 800f3b2:	10cc      	asrs	r4, r1, #3
 800f3b4:	10d3      	asrs	r3, r2, #3
 800f3b6:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 800f3ba:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 800f3be:	fb13 f305 	smulbb	r3, r3, r5
 800f3c2:	fb14 f406 	smulbb	r4, r4, r6
 800f3c6:	00c9      	lsls	r1, r1, #3
 800f3c8:	00d2      	lsls	r2, r2, #3
 800f3ca:	441c      	add	r4, r3
 800f3cc:	b2d2      	uxtb	r2, r2
 800f3ce:	b2cb      	uxtb	r3, r1
 800f3d0:	fb12 f205 	smulbb	r2, r2, r5
 800f3d4:	b280      	uxth	r0, r0
 800f3d6:	fb13 f306 	smulbb	r3, r3, r6
 800f3da:	4413      	add	r3, r2
 800f3dc:	1c42      	adds	r2, r0, #1
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 800f3e4:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 800f3e8:	1c58      	adds	r0, r3, #1
 800f3ea:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800f3ee:	b2a4      	uxth	r4, r4
 800f3f0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 800f3f4:	4310      	orrs	r0, r2
 800f3f6:	1c62      	adds	r2, r4, #1
 800f3f8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 800f3fc:	0964      	lsrs	r4, r4, #5
 800f3fe:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800f402:	4320      	orrs	r0, r4
 800f404:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f408 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 800f408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40c:	b08f      	sub	sp, #60	@ 0x3c
 800f40e:	461c      	mov	r4, r3
 800f410:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 800f414:	9004      	str	r0, [sp, #16]
 800f416:	460d      	mov	r5, r1
 800f418:	4616      	mov	r6, r2
 800f41a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f41c:	2f00      	cmp	r7, #0
 800f41e:	f000 80f6 	beq.w	800f60e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 800f422:	6820      	ldr	r0, [r4, #0]
 800f424:	6861      	ldr	r1, [r4, #4]
 800f426:	aa0a      	add	r2, sp, #40	@ 0x28
 800f428:	c203      	stmia	r2!, {r0, r1}
 800f42a:	6818      	ldr	r0, [r3, #0]
 800f42c:	6859      	ldr	r1, [r3, #4]
 800f42e:	aa0c      	add	r2, sp, #48	@ 0x30
 800f430:	c203      	stmia	r2!, {r0, r1}
 800f432:	a80a      	add	r0, sp, #40	@ 0x28
 800f434:	f7fa ffee 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f438:	4621      	mov	r1, r4
 800f43a:	a80c      	add	r0, sp, #48	@ 0x30
 800f43c:	f7fb f812 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f440:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 800f444:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 800f448:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 800f44c:	f002 0301 	and.w	r3, r2, #1
 800f450:	9306      	str	r3, [sp, #24]
 800f452:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800f456:	f003 0101 	and.w	r1, r3, #1
 800f45a:	9105      	str	r1, [sp, #20]
 800f45c:	9805      	ldr	r0, [sp, #20]
 800f45e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 800f462:	4403      	add	r3, r0
 800f464:	fb01 2303 	mla	r3, r1, r3, r2
 800f468:	f04f 0802 	mov.w	r8, #2
 800f46c:	fb93 f3f8 	sdiv	r3, r3, r8
 800f470:	441d      	add	r5, r3
 800f472:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800f476:	441a      	add	r2, r3
 800f478:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 800f47c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800f480:	4419      	add	r1, r3
 800f482:	4b64      	ldr	r3, [pc, #400]	@ (800f614 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 800f484:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 800f488:	6818      	ldr	r0, [r3, #0]
 800f48a:	6803      	ldr	r3, [r0, #0]
 800f48c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f48e:	4798      	blx	r3
 800f490:	4a61      	ldr	r2, [pc, #388]	@ (800f618 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 800f492:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 800f496:	8813      	ldrh	r3, [r2, #0]
 800f498:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 800f49c:	2fff      	cmp	r7, #255	@ 0xff
 800f49e:	fb03 a404 	mla	r4, r3, r4, sl
 800f4a2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f4a6:	f106 0604 	add.w	r6, r6, #4
 800f4aa:	4611      	mov	r1, r2
 800f4ac:	fb03 fb0b 	mul.w	fp, r3, fp
 800f4b0:	d06b      	beq.n	800f58a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 800f4b2:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 800f4b6:	9303      	str	r3, [sp, #12]
 800f4b8:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 800f4bc:	e9cd 3207 	strd	r3, r2, [sp, #28]
 800f4c0:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 800f4c4:	9b07      	ldr	r3, [sp, #28]
 800f4c6:	42a3      	cmp	r3, r4
 800f4c8:	f240 809c 	bls.w	800f604 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 800f4cc:	9b06      	ldr	r3, [sp, #24]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d039      	beq.n	800f546 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 800f4d2:	782b      	ldrb	r3, [r5, #0]
 800f4d4:	8822      	ldrh	r2, [r4, #0]
 800f4d6:	9804      	ldr	r0, [sp, #16]
 800f4d8:	f003 030f 	and.w	r3, r3, #15
 800f4dc:	f105 0801 	add.w	r8, r5, #1
 800f4e0:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f4e4:	9b03      	ldr	r3, [sp, #12]
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	463b      	mov	r3, r7
 800f4ea:	f7ff ff53 	bl	800f394 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f4ee:	f824 0b02 	strh.w	r0, [r4], #2
 800f4f2:	f109 3bff 	add.w	fp, r9, #4294967295
 800f4f6:	f1bb 0f01 	cmp.w	fp, #1
 800f4fa:	46a2      	mov	sl, r4
 800f4fc:	f104 0404 	add.w	r4, r4, #4
 800f500:	dd24      	ble.n	800f54c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 800f502:	f898 3000 	ldrb.w	r3, [r8]
 800f506:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 800f50a:	9804      	ldr	r0, [sp, #16]
 800f50c:	091b      	lsrs	r3, r3, #4
 800f50e:	f1ab 0b02 	sub.w	fp, fp, #2
 800f512:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f516:	9b03      	ldr	r3, [sp, #12]
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	463b      	mov	r3, r7
 800f51c:	f7ff ff3a 	bl	800f394 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f520:	f824 0c04 	strh.w	r0, [r4, #-4]
 800f524:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f528:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 800f52c:	9804      	ldr	r0, [sp, #16]
 800f52e:	f003 030f 	and.w	r3, r3, #15
 800f532:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f536:	9b03      	ldr	r3, [sp, #12]
 800f538:	9300      	str	r3, [sp, #0]
 800f53a:	463b      	mov	r3, r7
 800f53c:	f7ff ff2a 	bl	800f394 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f540:	f824 0c02 	strh.w	r0, [r4, #-2]
 800f544:	e7d7      	b.n	800f4f6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 800f546:	46a8      	mov	r8, r5
 800f548:	46cb      	mov	fp, r9
 800f54a:	e7d4      	b.n	800f4f6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 800f54c:	d10e      	bne.n	800f56c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 800f54e:	f898 3000 	ldrb.w	r3, [r8]
 800f552:	f8ba 2000 	ldrh.w	r2, [sl]
 800f556:	9804      	ldr	r0, [sp, #16]
 800f558:	091b      	lsrs	r3, r3, #4
 800f55a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f55e:	9b03      	ldr	r3, [sp, #12]
 800f560:	9300      	str	r3, [sp, #0]
 800f562:	463b      	mov	r3, r7
 800f564:	f7ff ff16 	bl	800f394 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f568:	f82a 0b02 	strh.w	r0, [sl], #2
 800f56c:	9b08      	ldr	r3, [sp, #32]
 800f56e:	9a05      	ldr	r2, [sp, #20]
 800f570:	881c      	ldrh	r4, [r3, #0]
 800f572:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800f576:	eba4 0409 	sub.w	r4, r4, r9
 800f57a:	4413      	add	r3, r2
 800f57c:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 800f580:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f582:	fb93 f3f2 	sdiv	r3, r3, r2
 800f586:	441d      	add	r5, r3
 800f588:	e79c      	b.n	800f4c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 800f58a:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 800f58e:	45a3      	cmp	fp, r4
 800f590:	d938      	bls.n	800f604 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 800f592:	9b06      	ldr	r3, [sp, #24]
 800f594:	b1f3      	cbz	r3, 800f5d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 800f596:	782b      	ldrb	r3, [r5, #0]
 800f598:	f003 030f 	and.w	r3, r3, #15
 800f59c:	1c6a      	adds	r2, r5, #1
 800f59e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800f5a2:	8023      	strh	r3, [r4, #0]
 800f5a4:	f109 30ff 	add.w	r0, r9, #4294967295
 800f5a8:	3402      	adds	r4, #2
 800f5aa:	2801      	cmp	r0, #1
 800f5ac:	4623      	mov	r3, r4
 800f5ae:	f104 0404 	add.w	r4, r4, #4
 800f5b2:	dd12      	ble.n	800f5da <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 800f5b4:	7813      	ldrb	r3, [r2, #0]
 800f5b6:	091b      	lsrs	r3, r3, #4
 800f5b8:	3802      	subs	r0, #2
 800f5ba:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800f5be:	f824 3c04 	strh.w	r3, [r4, #-4]
 800f5c2:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f5c6:	f003 030f 	and.w	r3, r3, #15
 800f5ca:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800f5ce:	f824 3c02 	strh.w	r3, [r4, #-2]
 800f5d2:	e7ea      	b.n	800f5aa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 800f5d4:	462a      	mov	r2, r5
 800f5d6:	4648      	mov	r0, r9
 800f5d8:	e7e7      	b.n	800f5aa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 800f5da:	d106      	bne.n	800f5ea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 800f5dc:	7812      	ldrb	r2, [r2, #0]
 800f5de:	0912      	lsrs	r2, r2, #4
 800f5e0:	3302      	adds	r3, #2
 800f5e2:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800f5e6:	f823 2c02 	strh.w	r2, [r3, #-2]
 800f5ea:	880c      	ldrh	r4, [r1, #0]
 800f5ec:	9a05      	ldr	r2, [sp, #20]
 800f5ee:	eba4 0409 	sub.w	r4, r4, r9
 800f5f2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800f5f6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800f5fa:	4413      	add	r3, r2
 800f5fc:	fb93 f3f8 	sdiv	r3, r3, r8
 800f600:	441d      	add	r5, r3
 800f602:	e7c4      	b.n	800f58e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 800f604:	4b03      	ldr	r3, [pc, #12]	@ (800f614 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 800f606:	6818      	ldr	r0, [r3, #0]
 800f608:	6803      	ldr	r3, [r0, #0]
 800f60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f60c:	4798      	blx	r3
 800f60e:	b00f      	add	sp, #60	@ 0x3c
 800f610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f614:	20012434 	.word	0x20012434
 800f618:	2001242e 	.word	0x2001242e

0800f61c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 800f61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f61e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800f622:	2dff      	cmp	r5, #255	@ 0xff
 800f624:	ea4f 2711 	mov.w	r7, r1, lsr #8
 800f628:	d10c      	bne.n	800f644 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 800f62a:	2bff      	cmp	r3, #255	@ 0xff
 800f62c:	d10a      	bne.n	800f644 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 800f62e:	4b25      	ldr	r3, [pc, #148]	@ (800f6c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 800f630:	0948      	lsrs	r0, r1, #5
 800f632:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800f636:	403b      	ands	r3, r7
 800f638:	4318      	orrs	r0, r3
 800f63a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800f63e:	4308      	orrs	r0, r1
 800f640:	b280      	uxth	r0, r0
 800f642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f644:	fb15 f503 	smulbb	r5, r5, r3
 800f648:	b2ab      	uxth	r3, r5
 800f64a:	1c5d      	adds	r5, r3, #1
 800f64c:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 800f650:	1214      	asrs	r4, r2, #8
 800f652:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800f656:	fa1f fc85 	uxth.w	ip, r5
 800f65a:	10d6      	asrs	r6, r2, #3
 800f65c:	00d0      	lsls	r0, r2, #3
 800f65e:	43ed      	mvns	r5, r5
 800f660:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 800f664:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800f668:	b2eb      	uxtb	r3, r5
 800f66a:	b2c0      	uxtb	r0, r0
 800f66c:	fb12 f20c 	smulbb	r2, r2, ip
 800f670:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800f674:	fb04 2403 	mla	r4, r4, r3, r2
 800f678:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 800f67c:	b2c8      	uxtb	r0, r1
 800f67e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800f682:	b2fd      	uxtb	r5, r7
 800f684:	fb10 f00c 	smulbb	r0, r0, ip
 800f688:	b2a4      	uxth	r4, r4
 800f68a:	fb02 0003 	mla	r0, r2, r3, r0
 800f68e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 800f692:	fb15 f50c 	smulbb	r5, r5, ip
 800f696:	fb06 5503 	mla	r5, r6, r3, r5
 800f69a:	b283      	uxth	r3, r0
 800f69c:	1c60      	adds	r0, r4, #1
 800f69e:	b2ad      	uxth	r5, r5
 800f6a0:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 800f6a4:	1c58      	adds	r0, r3, #1
 800f6a6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800f6aa:	1c6b      	adds	r3, r5, #1
 800f6ac:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 800f6b0:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 800f6b4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 800f6b8:	096d      	lsrs	r5, r5, #5
 800f6ba:	4320      	orrs	r0, r4
 800f6bc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800f6c0:	4328      	orrs	r0, r5
 800f6c2:	e7be      	b.n	800f642 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 800f6c4:	00fff800 	.word	0x00fff800

0800f6c8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 800f6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6cc:	461c      	mov	r4, r3
 800f6ce:	b08d      	sub	sp, #52	@ 0x34
 800f6d0:	460d      	mov	r5, r1
 800f6d2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f6d4:	6861      	ldr	r1, [r4, #4]
 800f6d6:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 800f6da:	4680      	mov	r8, r0
 800f6dc:	6820      	ldr	r0, [r4, #0]
 800f6de:	4616      	mov	r6, r2
 800f6e0:	aa08      	add	r2, sp, #32
 800f6e2:	c203      	stmia	r2!, {r0, r1}
 800f6e4:	6818      	ldr	r0, [r3, #0]
 800f6e6:	6859      	ldr	r1, [r3, #4]
 800f6e8:	aa0a      	add	r2, sp, #40	@ 0x28
 800f6ea:	c203      	stmia	r2!, {r0, r1}
 800f6ec:	a808      	add	r0, sp, #32
 800f6ee:	f7fa fe91 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f6f2:	4621      	mov	r1, r4
 800f6f4:	a80a      	add	r0, sp, #40	@ 0x28
 800f6f6:	f7fa feb5 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f6fa:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 800f6fe:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 800f702:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 800f706:	f002 0301 	and.w	r3, r2, #1
 800f70a:	9303      	str	r3, [sp, #12]
 800f70c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 800f710:	f003 0101 	and.w	r1, r3, #1
 800f714:	9102      	str	r1, [sp, #8]
 800f716:	9802      	ldr	r0, [sp, #8]
 800f718:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800f71c:	4403      	add	r3, r0
 800f71e:	fb01 2303 	mla	r3, r1, r3, r2
 800f722:	f04f 0a02 	mov.w	sl, #2
 800f726:	fb93 f3fa 	sdiv	r3, r3, sl
 800f72a:	441d      	add	r5, r3
 800f72c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f730:	441a      	add	r2, r3
 800f732:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f736:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 800f73a:	4a3f      	ldr	r2, [pc, #252]	@ (800f838 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 800f73c:	9205      	str	r2, [sp, #20]
 800f73e:	4419      	add	r1, r3
 800f740:	6810      	ldr	r0, [r2, #0]
 800f742:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 800f746:	6803      	ldr	r3, [r0, #0]
 800f748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f74a:	4798      	blx	r3
 800f74c:	4b3b      	ldr	r3, [pc, #236]	@ (800f83c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 800f74e:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 800f752:	8819      	ldrh	r1, [r3, #0]
 800f754:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 800f758:	fb01 c404 	mla	r4, r1, r4, ip
 800f75c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f760:	434f      	muls	r7, r1
 800f762:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 800f766:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 800f76a:	3604      	adds	r6, #4
 800f76c:	9204      	str	r2, [sp, #16]
 800f76e:	9b04      	ldr	r3, [sp, #16]
 800f770:	429c      	cmp	r4, r3
 800f772:	d258      	bcs.n	800f826 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 800f774:	9b03      	ldr	r3, [sp, #12]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d034      	beq.n	800f7e4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 800f77a:	782b      	ldrb	r3, [r5, #0]
 800f77c:	f003 030f 	and.w	r3, r3, #15
 800f780:	1c6f      	adds	r7, r5, #1
 800f782:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f786:	0e0b      	lsrs	r3, r1, #24
 800f788:	d006      	beq.n	800f798 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 800f78a:	8822      	ldrh	r2, [r4, #0]
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	4640      	mov	r0, r8
 800f790:	464b      	mov	r3, r9
 800f792:	f7ff ff43 	bl	800f61c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800f796:	8020      	strh	r0, [r4, #0]
 800f798:	3402      	adds	r4, #2
 800f79a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f79e:	f1ba 0f01 	cmp.w	sl, #1
 800f7a2:	dd22      	ble.n	800f7ea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 800f7a4:	783b      	ldrb	r3, [r7, #0]
 800f7a6:	091b      	lsrs	r3, r3, #4
 800f7a8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f7ac:	0e0b      	lsrs	r3, r1, #24
 800f7ae:	d006      	beq.n	800f7be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 800f7b0:	8822      	ldrh	r2, [r4, #0]
 800f7b2:	9300      	str	r3, [sp, #0]
 800f7b4:	4640      	mov	r0, r8
 800f7b6:	464b      	mov	r3, r9
 800f7b8:	f7ff ff30 	bl	800f61c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800f7bc:	8020      	strh	r0, [r4, #0]
 800f7be:	f817 3b01 	ldrb.w	r3, [r7], #1
 800f7c2:	f003 030f 	and.w	r3, r3, #15
 800f7c6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f7ca:	0e0b      	lsrs	r3, r1, #24
 800f7cc:	d006      	beq.n	800f7dc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 800f7ce:	8862      	ldrh	r2, [r4, #2]
 800f7d0:	9300      	str	r3, [sp, #0]
 800f7d2:	4640      	mov	r0, r8
 800f7d4:	464b      	mov	r3, r9
 800f7d6:	f7ff ff21 	bl	800f61c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800f7da:	8060      	strh	r0, [r4, #2]
 800f7dc:	3404      	adds	r4, #4
 800f7de:	f1aa 0a02 	sub.w	sl, sl, #2
 800f7e2:	e7dc      	b.n	800f79e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 800f7e4:	462f      	mov	r7, r5
 800f7e6:	46da      	mov	sl, fp
 800f7e8:	e7d9      	b.n	800f79e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 800f7ea:	d10d      	bne.n	800f808 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 800f7ec:	783b      	ldrb	r3, [r7, #0]
 800f7ee:	091b      	lsrs	r3, r3, #4
 800f7f0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f7f4:	0e0b      	lsrs	r3, r1, #24
 800f7f6:	d006      	beq.n	800f806 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 800f7f8:	8822      	ldrh	r2, [r4, #0]
 800f7fa:	9300      	str	r3, [sp, #0]
 800f7fc:	4640      	mov	r0, r8
 800f7fe:	464b      	mov	r3, r9
 800f800:	f7ff ff0c 	bl	800f61c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800f804:	8020      	strh	r0, [r4, #0]
 800f806:	3402      	adds	r4, #2
 800f808:	9b06      	ldr	r3, [sp, #24]
 800f80a:	9a02      	ldr	r2, [sp, #8]
 800f80c:	881b      	ldrh	r3, [r3, #0]
 800f80e:	eba3 030b 	sub.w	r3, r3, fp
 800f812:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f816:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 800f81a:	4413      	add	r3, r2
 800f81c:	9a07      	ldr	r2, [sp, #28]
 800f81e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f822:	441d      	add	r5, r3
 800f824:	e7a3      	b.n	800f76e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 800f826:	9b05      	ldr	r3, [sp, #20]
 800f828:	6818      	ldr	r0, [r3, #0]
 800f82a:	6803      	ldr	r3, [r0, #0]
 800f82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f82e:	4798      	blx	r3
 800f830:	b00d      	add	sp, #52	@ 0x34
 800f832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f836:	bf00      	nop
 800f838:	20012434 	.word	0x20012434
 800f83c:	2001242e 	.word	0x2001242e

0800f840 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	1214      	asrs	r4, r2, #8
 800f844:	788d      	ldrb	r5, [r1, #2]
 800f846:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800f84a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 800f84e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800f852:	fb15 f503 	smulbb	r5, r5, r3
 800f856:	fb04 5506 	mla	r5, r4, r6, r5
 800f85a:	10d0      	asrs	r0, r2, #3
 800f85c:	784c      	ldrb	r4, [r1, #1]
 800f85e:	7809      	ldrb	r1, [r1, #0]
 800f860:	00d2      	lsls	r2, r2, #3
 800f862:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 800f866:	b2d2      	uxtb	r2, r2
 800f868:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 800f86c:	fb14 f403 	smulbb	r4, r4, r3
 800f870:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800f874:	fb11 f303 	smulbb	r3, r1, r3
 800f878:	fb00 4406 	mla	r4, r0, r6, r4
 800f87c:	fb02 3306 	mla	r3, r2, r6, r3
 800f880:	b2ad      	uxth	r5, r5
 800f882:	b29b      	uxth	r3, r3
 800f884:	b2a4      	uxth	r4, r4
 800f886:	1c68      	adds	r0, r5, #1
 800f888:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 800f88c:	1c62      	adds	r2, r4, #1
 800f88e:	1c58      	adds	r0, r3, #1
 800f890:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800f894:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 800f898:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 800f89c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 800f8a0:	0964      	lsrs	r4, r4, #5
 800f8a2:	4328      	orrs	r0, r5
 800f8a4:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800f8a8:	4320      	orrs	r0, r4
 800f8aa:	bd70      	pop	{r4, r5, r6, pc}

0800f8ac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 800f8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b0:	b08f      	sub	sp, #60	@ 0x3c
 800f8b2:	461c      	mov	r4, r3
 800f8b4:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 800f8b8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f8ba:	4682      	mov	sl, r0
 800f8bc:	460e      	mov	r6, r1
 800f8be:	4615      	mov	r5, r2
 800f8c0:	2f00      	cmp	r7, #0
 800f8c2:	f000 8142 	beq.w	800fb4a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 800f8c6:	6820      	ldr	r0, [r4, #0]
 800f8c8:	6861      	ldr	r1, [r4, #4]
 800f8ca:	aa0a      	add	r2, sp, #40	@ 0x28
 800f8cc:	c203      	stmia	r2!, {r0, r1}
 800f8ce:	6818      	ldr	r0, [r3, #0]
 800f8d0:	6859      	ldr	r1, [r3, #4]
 800f8d2:	aa0c      	add	r2, sp, #48	@ 0x30
 800f8d4:	c203      	stmia	r2!, {r0, r1}
 800f8d6:	a80a      	add	r0, sp, #40	@ 0x28
 800f8d8:	f7fa fd9c 	bl	800a414 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f8dc:	4621      	mov	r1, r4
 800f8de:	a80c      	add	r0, sp, #48	@ 0x30
 800f8e0:	f7fa fdc0 	bl	800a464 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f8e4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 800f8e8:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 800f8ec:	f002 0301 	and.w	r3, r2, #1
 800f8f0:	9306      	str	r3, [sp, #24]
 800f8f2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800f8f6:	f003 0101 	and.w	r1, r3, #1
 800f8fa:	9105      	str	r1, [sp, #20]
 800f8fc:	9805      	ldr	r0, [sp, #20]
 800f8fe:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 800f902:	4403      	add	r3, r0
 800f904:	fb01 2303 	mla	r3, r1, r3, r2
 800f908:	f04f 0802 	mov.w	r8, #2
 800f90c:	fb93 f3f8 	sdiv	r3, r3, r8
 800f910:	441e      	add	r6, r3
 800f912:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800f916:	441a      	add	r2, r3
 800f918:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 800f91c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800f920:	4419      	add	r1, r3
 800f922:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800f926:	9303      	str	r3, [sp, #12]
 800f928:	4b89      	ldr	r3, [pc, #548]	@ (800fb50 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 800f92a:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 800f92e:	6818      	ldr	r0, [r3, #0]
 800f930:	6803      	ldr	r3, [r0, #0]
 800f932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f934:	4798      	blx	r3
 800f936:	4a87      	ldr	r2, [pc, #540]	@ (800fb54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 800f938:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 800f93c:	8813      	ldrh	r3, [r2, #0]
 800f93e:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 800f942:	2fff      	cmp	r7, #255	@ 0xff
 800f944:	fb03 9404 	mla	r4, r3, r4, r9
 800f948:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f94c:	f105 0504 	add.w	r5, r5, #4
 800f950:	4694      	mov	ip, r2
 800f952:	fb03 f30b 	mul.w	r3, r3, fp
 800f956:	d071      	beq.n	800fa3c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 800f958:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f95c:	43f9      	mvns	r1, r7
 800f95e:	e9cd 3207 	strd	r3, r2, [sp, #28]
 800f962:	b2c9      	uxtb	r1, r1
 800f964:	9104      	str	r1, [sp, #16]
 800f966:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 800f96a:	9b07      	ldr	r3, [sp, #28]
 800f96c:	42a3      	cmp	r3, r4
 800f96e:	f240 80e7 	bls.w	800fb40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 800f972:	9b06      	ldr	r3, [sp, #24]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d03d      	beq.n	800f9f4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 800f978:	7831      	ldrb	r1, [r6, #0]
 800f97a:	9b04      	ldr	r3, [sp, #16]
 800f97c:	8822      	ldrh	r2, [r4, #0]
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	f001 010f 	and.w	r1, r1, #15
 800f984:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f988:	463b      	mov	r3, r7
 800f98a:	4429      	add	r1, r5
 800f98c:	4650      	mov	r0, sl
 800f98e:	f7ff ff57 	bl	800f840 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800f992:	9b03      	ldr	r3, [sp, #12]
 800f994:	f824 0b02 	strh.w	r0, [r4], #2
 800f998:	f106 0801 	add.w	r8, r6, #1
 800f99c:	f103 3bff 	add.w	fp, r3, #4294967295
 800f9a0:	f1bb 0f01 	cmp.w	fp, #1
 800f9a4:	46a1      	mov	r9, r4
 800f9a6:	f104 0404 	add.w	r4, r4, #4
 800f9aa:	dd27      	ble.n	800f9fc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 800f9ac:	f898 1000 	ldrb.w	r1, [r8]
 800f9b0:	9b04      	ldr	r3, [sp, #16]
 800f9b2:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	0909      	lsrs	r1, r1, #4
 800f9ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f9be:	463b      	mov	r3, r7
 800f9c0:	4429      	add	r1, r5
 800f9c2:	4650      	mov	r0, sl
 800f9c4:	f7ff ff3c 	bl	800f840 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800f9c8:	f824 0c04 	strh.w	r0, [r4, #-4]
 800f9cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f9d0:	9b04      	ldr	r3, [sp, #16]
 800f9d2:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 800f9d6:	9300      	str	r3, [sp, #0]
 800f9d8:	f001 010f 	and.w	r1, r1, #15
 800f9dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f9e0:	463b      	mov	r3, r7
 800f9e2:	4429      	add	r1, r5
 800f9e4:	4650      	mov	r0, sl
 800f9e6:	f7ff ff2b 	bl	800f840 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800f9ea:	f1ab 0b02 	sub.w	fp, fp, #2
 800f9ee:	f824 0c02 	strh.w	r0, [r4, #-2]
 800f9f2:	e7d5      	b.n	800f9a0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 800f9f4:	46b0      	mov	r8, r6
 800f9f6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f9fa:	e7d1      	b.n	800f9a0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 800f9fc:	d10f      	bne.n	800fa1e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 800f9fe:	f898 1000 	ldrb.w	r1, [r8]
 800fa02:	9b04      	ldr	r3, [sp, #16]
 800fa04:	f8b9 2000 	ldrh.w	r2, [r9]
 800fa08:	9300      	str	r3, [sp, #0]
 800fa0a:	0909      	lsrs	r1, r1, #4
 800fa0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fa10:	463b      	mov	r3, r7
 800fa12:	4429      	add	r1, r5
 800fa14:	4650      	mov	r0, sl
 800fa16:	f7ff ff13 	bl	800f840 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800fa1a:	f829 0b02 	strh.w	r0, [r9], #2
 800fa1e:	9b08      	ldr	r3, [sp, #32]
 800fa20:	9a05      	ldr	r2, [sp, #20]
 800fa22:	881c      	ldrh	r4, [r3, #0]
 800fa24:	9b03      	ldr	r3, [sp, #12]
 800fa26:	1ae4      	subs	r4, r4, r3
 800fa28:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800fa2c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 800fa30:	4413      	add	r3, r2
 800fa32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa34:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa38:	441e      	add	r6, r3
 800fa3a:	e796      	b.n	800f96a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 800fa3c:	4f46      	ldr	r7, [pc, #280]	@ (800fb58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 800fa3e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fa42:	42a3      	cmp	r3, r4
 800fa44:	d97c      	bls.n	800fb40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 800fa46:	9a06      	ldr	r2, [sp, #24]
 800fa48:	2a00      	cmp	r2, #0
 800fa4a:	d054      	beq.n	800faf6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 800fa4c:	7830      	ldrb	r0, [r6, #0]
 800fa4e:	f000 000f 	and.w	r0, r0, #15
 800fa52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800fa56:	eb05 0e00 	add.w	lr, r5, r0
 800fa5a:	5c28      	ldrb	r0, [r5, r0]
 800fa5c:	f89e 2002 	ldrb.w	r2, [lr, #2]
 800fa60:	f89e e001 	ldrb.w	lr, [lr, #1]
 800fa64:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800fa68:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 800fa6c:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 800fa70:	ea42 020e 	orr.w	r2, r2, lr
 800fa74:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 800fa78:	f824 2b02 	strh.w	r2, [r4], #2
 800fa7c:	9a03      	ldr	r2, [sp, #12]
 800fa7e:	1c71      	adds	r1, r6, #1
 800fa80:	f102 3eff 	add.w	lr, r2, #4294967295
 800fa84:	f1be 0f01 	cmp.w	lr, #1
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f104 0404 	add.w	r4, r4, #4
 800fa8e:	dd36      	ble.n	800fafe <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 800fa90:	7808      	ldrb	r0, [r1, #0]
 800fa92:	0900      	lsrs	r0, r0, #4
 800fa94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800fa98:	eb05 0a00 	add.w	sl, r5, r0
 800fa9c:	f1ae 0e02 	sub.w	lr, lr, #2
 800faa0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800faa4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 800faa8:	00d2      	lsls	r2, r2, #3
 800faaa:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 800faae:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800fab2:	ea49 0202 	orr.w	r2, r9, r2
 800fab6:	f815 9000 	ldrb.w	r9, [r5, r0]
 800faba:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 800fabe:	f824 2c04 	strh.w	r2, [r4, #-4]
 800fac2:	f811 0b01 	ldrb.w	r0, [r1], #1
 800fac6:	f000 000f 	and.w	r0, r0, #15
 800faca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800face:	eb05 0a00 	add.w	sl, r5, r0
 800fad2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800fad6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 800fada:	00d2      	lsls	r2, r2, #3
 800fadc:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 800fae0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800fae4:	ea49 0202 	orr.w	r2, r9, r2
 800fae8:	f815 9000 	ldrb.w	r9, [r5, r0]
 800faec:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 800faf0:	f824 2c02 	strh.w	r2, [r4, #-2]
 800faf4:	e7c6      	b.n	800fa84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 800faf6:	4631      	mov	r1, r6
 800faf8:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800fafc:	e7c2      	b.n	800fa84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 800fafe:	d111      	bne.n	800fb24 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 800fb00:	7809      	ldrb	r1, [r1, #0]
 800fb02:	0909      	lsrs	r1, r1, #4
 800fb04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fb08:	186c      	adds	r4, r5, r1
 800fb0a:	5c69      	ldrb	r1, [r5, r1]
 800fb0c:	78a2      	ldrb	r2, [r4, #2]
 800fb0e:	7864      	ldrb	r4, [r4, #1]
 800fb10:	00e4      	lsls	r4, r4, #3
 800fb12:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 800fb16:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800fb1a:	4322      	orrs	r2, r4
 800fb1c:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 800fb20:	f820 2b02 	strh.w	r2, [r0], #2
 800fb24:	9a03      	ldr	r2, [sp, #12]
 800fb26:	f8bc 4000 	ldrh.w	r4, [ip]
 800fb2a:	9905      	ldr	r1, [sp, #20]
 800fb2c:	1aa4      	subs	r4, r4, r2
 800fb2e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800fb32:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800fb36:	440a      	add	r2, r1
 800fb38:	fb92 f2f8 	sdiv	r2, r2, r8
 800fb3c:	4416      	add	r6, r2
 800fb3e:	e780      	b.n	800fa42 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 800fb40:	4b03      	ldr	r3, [pc, #12]	@ (800fb50 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 800fb42:	6818      	ldr	r0, [r3, #0]
 800fb44:	6803      	ldr	r3, [r0, #0]
 800fb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb48:	4798      	blx	r3
 800fb4a:	b00f      	add	sp, #60	@ 0x3c
 800fb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb50:	20012434 	.word	0x20012434
 800fb54:	2001242e 	.word	0x2001242e
 800fb58:	fffff800 	.word	0xfffff800

0800fb5c <CRC_Lock>:
 800fb5c:	b530      	push	{r4, r5, lr}
 800fb5e:	4a2d      	ldr	r2, [pc, #180]	@ (800fc14 <CRC_Lock+0xb8>)
 800fb60:	6813      	ldr	r3, [r2, #0]
 800fb62:	f023 0301 	bic.w	r3, r3, #1
 800fb66:	6013      	str	r3, [r2, #0]
 800fb68:	4b2b      	ldr	r3, [pc, #172]	@ (800fc18 <CRC_Lock+0xbc>)
 800fb6a:	681c      	ldr	r4, [r3, #0]
 800fb6c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800fb70:	4014      	ands	r4, r2
 800fb72:	f24c 2540 	movw	r5, #49728	@ 0xc240
 800fb76:	42ac      	cmp	r4, r5
 800fb78:	d005      	beq.n	800fb86 <CRC_Lock+0x2a>
 800fb7a:	681c      	ldr	r4, [r3, #0]
 800fb7c:	f24c 2570 	movw	r5, #49776	@ 0xc270
 800fb80:	4014      	ands	r4, r2
 800fb82:	42ac      	cmp	r4, r5
 800fb84:	d125      	bne.n	800fbd2 <CRC_Lock+0x76>
 800fb86:	4b25      	ldr	r3, [pc, #148]	@ (800fc1c <CRC_Lock+0xc0>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d139      	bne.n	800fc02 <CRC_Lock+0xa6>
 800fb8e:	4b24      	ldr	r3, [pc, #144]	@ (800fc20 <CRC_Lock+0xc4>)
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800fb96:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 800fb9a:	d00d      	beq.n	800fbb8 <CRC_Lock+0x5c>
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	f240 4483 	movw	r4, #1155	@ 0x483
 800fba2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800fba6:	42a2      	cmp	r2, r4
 800fba8:	d006      	beq.n	800fbb8 <CRC_Lock+0x5c>
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	f240 4285 	movw	r2, #1157	@ 0x485
 800fbb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d124      	bne.n	800fc02 <CRC_Lock+0xa6>
 800fbb8:	4b1a      	ldr	r3, [pc, #104]	@ (800fc24 <CRC_Lock+0xc8>)
 800fbba:	2201      	movs	r2, #1
 800fbbc:	601a      	str	r2, [r3, #0]
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	2a00      	cmp	r2, #0
 800fbc2:	d1fc      	bne.n	800fbbe <CRC_Lock+0x62>
 800fbc4:	4b18      	ldr	r3, [pc, #96]	@ (800fc28 <CRC_Lock+0xcc>)
 800fbc6:	6018      	str	r0, [r3, #0]
 800fbc8:	6818      	ldr	r0, [r3, #0]
 800fbca:	1a43      	subs	r3, r0, r1
 800fbcc:	4258      	negs	r0, r3
 800fbce:	4158      	adcs	r0, r3
 800fbd0:	e00e      	b.n	800fbf0 <CRC_Lock+0x94>
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4013      	ands	r3, r2
 800fbd6:	f24d 2220 	movw	r2, #53792	@ 0xd220
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d111      	bne.n	800fc02 <CRC_Lock+0xa6>
 800fbde:	4b13      	ldr	r3, [pc, #76]	@ (800fc2c <CRC_Lock+0xd0>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f240 4286 	movw	r2, #1158	@ 0x486
 800fbe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d001      	beq.n	800fbf2 <CRC_Lock+0x96>
 800fbee:	2000      	movs	r0, #0
 800fbf0:	bd30      	pop	{r4, r5, pc}
 800fbf2:	4b0f      	ldr	r3, [pc, #60]	@ (800fc30 <CRC_Lock+0xd4>)
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	601a      	str	r2, [r3, #0]
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	2a00      	cmp	r2, #0
 800fbfc:	d1fc      	bne.n	800fbf8 <CRC_Lock+0x9c>
 800fbfe:	4b0d      	ldr	r3, [pc, #52]	@ (800fc34 <CRC_Lock+0xd8>)
 800fc00:	e7e1      	b.n	800fbc6 <CRC_Lock+0x6a>
 800fc02:	4b0d      	ldr	r3, [pc, #52]	@ (800fc38 <CRC_Lock+0xdc>)
 800fc04:	2201      	movs	r2, #1
 800fc06:	601a      	str	r2, [r3, #0]
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	2a00      	cmp	r2, #0
 800fc0c:	d1fc      	bne.n	800fc08 <CRC_Lock+0xac>
 800fc0e:	4b0b      	ldr	r3, [pc, #44]	@ (800fc3c <CRC_Lock+0xe0>)
 800fc10:	e7d9      	b.n	800fbc6 <CRC_Lock+0x6a>
 800fc12:	bf00      	nop
 800fc14:	e0002000 	.word	0xe0002000
 800fc18:	e000ed00 	.word	0xe000ed00
 800fc1c:	e0042000 	.word	0xe0042000
 800fc20:	5c001000 	.word	0x5c001000
 800fc24:	58024c08 	.word	0x58024c08
 800fc28:	58024c00 	.word	0x58024c00
 800fc2c:	46008ff0 	.word	0x46008ff0
 800fc30:	46024c08 	.word	0x46024c08
 800fc34:	46024c00 	.word	0x46024c00
 800fc38:	40023008 	.word	0x40023008
 800fc3c:	40023000 	.word	0x40023000

0800fc40 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 800fc40:	6101      	str	r1, [r0, #16]
 800fc42:	4770      	bx	lr

0800fc44 <_ZN8touchgfx8Gestures4tickEv>:
 800fc44:	7b83      	ldrb	r3, [r0, #14]
 800fc46:	b14b      	cbz	r3, 800fc5c <_ZN8touchgfx8Gestures4tickEv+0x18>
 800fc48:	8903      	ldrh	r3, [r0, #8]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	b29b      	uxth	r3, r3
 800fc4e:	2b07      	cmp	r3, #7
 800fc50:	8103      	strh	r3, [r0, #8]
 800fc52:	bf81      	itttt	hi
 800fc54:	2300      	movhi	r3, #0
 800fc56:	8143      	strhhi	r3, [r0, #10]
 800fc58:	8183      	strhhi	r3, [r0, #12]
 800fc5a:	7383      	strbhi	r3, [r0, #14]
 800fc5c:	4770      	bx	lr
	...

0800fc60 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 800fc60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800fc64:	4698      	mov	r8, r3
 800fc66:	8883      	ldrh	r3, [r0, #4]
 800fc68:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fc6c:	eba8 0303 	sub.w	r3, r8, r3
 800fc70:	b21b      	sxth	r3, r3
 800fc72:	4604      	mov	r4, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	4617      	mov	r7, r2
 800fc78:	4a18      	ldr	r2, [pc, #96]	@ (800fcdc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 800fc7a:	9200      	str	r2, [sp, #0]
 800fc7c:	bfb8      	it	lt
 800fc7e:	425b      	neglt	r3, r3
 800fc80:	8aa2      	ldrh	r2, [r4, #20]
 800fc82:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 800fc86:	f8ad 800a 	strh.w	r8, [sp, #10]
 800fc8a:	b21b      	sxth	r3, r3
 800fc8c:	460e      	mov	r6, r1
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	88c1      	ldrh	r1, [r0, #6]
 800fc92:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fc96:	f04f 0000 	mov.w	r0, #0
 800fc9a:	f88d 0004 	strb.w	r0, [sp, #4]
 800fc9e:	f8ad 500c 	strh.w	r5, [sp, #12]
 800fca2:	dc07      	bgt.n	800fcb4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 800fca4:	1a69      	subs	r1, r5, r1
 800fca6:	b209      	sxth	r1, r1
 800fca8:	2900      	cmp	r1, #0
 800fcaa:	bfb8      	it	lt
 800fcac:	4249      	neglt	r1, r1
 800fcae:	b209      	sxth	r1, r1
 800fcb0:	428a      	cmp	r2, r1
 800fcb2:	da10      	bge.n	800fcd6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 800fcb4:	6920      	ldr	r0, [r4, #16]
 800fcb6:	6803      	ldr	r3, [r0, #0]
 800fcb8:	4669      	mov	r1, sp
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	4798      	blx	r3
 800fcbe:	eba8 0606 	sub.w	r6, r8, r6
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	1bef      	subs	r7, r5, r7
 800fcc6:	2001      	movs	r0, #1
 800fcc8:	8123      	strh	r3, [r4, #8]
 800fcca:	8166      	strh	r6, [r4, #10]
 800fccc:	81a7      	strh	r7, [r4, #12]
 800fcce:	f8a4 8004 	strh.w	r8, [r4, #4]
 800fcd2:	80e5      	strh	r5, [r4, #6]
 800fcd4:	73a0      	strb	r0, [r4, #14]
 800fcd6:	b004      	add	sp, #16
 800fcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcdc:	0801242c 	.word	0x0801242c

0800fce0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 800fce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fce2:	461e      	mov	r6, r3
 800fce4:	1e4b      	subs	r3, r1, #1
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	b085      	sub	sp, #20
 800fcea:	4604      	mov	r4, r0
 800fcec:	460d      	mov	r5, r1
 800fcee:	4617      	mov	r7, r2
 800fcf0:	d84b      	bhi.n	800fd8a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 800fcf2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800fcf6:	1cd3      	adds	r3, r2, #3
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	2b06      	cmp	r3, #6
 800fcfc:	d916      	bls.n	800fd2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 800fcfe:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 800fda0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800fd02:	f8cd c004 	str.w	ip, [sp, #4]
 800fd06:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fd0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800fd0e:	6900      	ldr	r0, [r0, #16]
 800fd10:	f8ad 100c 	strh.w	r1, [sp, #12]
 800fd14:	f04f 0c00 	mov.w	ip, #0
 800fd18:	f88d c008 	strb.w	ip, [sp, #8]
 800fd1c:	f8ad 200a 	strh.w	r2, [sp, #10]
 800fd20:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fd24:	6803      	ldr	r3, [r0, #0]
 800fd26:	a901      	add	r1, sp, #4
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	4798      	blx	r3
 800fd2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd30:	1cd3      	adds	r3, r2, #3
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	2b06      	cmp	r3, #6
 800fd36:	d916      	bls.n	800fd66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800fd38:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800fda0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800fd3c:	f8cd c004 	str.w	ip, [sp, #4]
 800fd40:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fd44:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800fd48:	6920      	ldr	r0, [r4, #16]
 800fd4a:	f8ad 100c 	strh.w	r1, [sp, #12]
 800fd4e:	f04f 0c01 	mov.w	ip, #1
 800fd52:	f88d c008 	strb.w	ip, [sp, #8]
 800fd56:	f8ad 200a 	strh.w	r2, [sp, #10]
 800fd5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fd5e:	6803      	ldr	r3, [r0, #0]
 800fd60:	a901      	add	r1, sp, #4
 800fd62:	689b      	ldr	r3, [r3, #8]
 800fd64:	4798      	blx	r3
 800fd66:	4b0d      	ldr	r3, [pc, #52]	@ (800fd9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 800fd68:	9301      	str	r3, [sp, #4]
 800fd6a:	6920      	ldr	r0, [r4, #16]
 800fd6c:	f88d 5008 	strb.w	r5, [sp, #8]
 800fd70:	2300      	movs	r3, #0
 800fd72:	f8ad 700a 	strh.w	r7, [sp, #10]
 800fd76:	f8ad 600c 	strh.w	r6, [sp, #12]
 800fd7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fd7e:	6803      	ldr	r3, [r0, #0]
 800fd80:	a901      	add	r1, sp, #4
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4798      	blx	r3
 800fd86:	b005      	add	sp, #20
 800fd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd8a:	2900      	cmp	r1, #0
 800fd8c:	d1eb      	bne.n	800fd66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800fd8e:	80a2      	strh	r2, [r4, #4]
 800fd90:	80c6      	strh	r6, [r0, #6]
 800fd92:	60a1      	str	r1, [r4, #8]
 800fd94:	81a1      	strh	r1, [r4, #12]
 800fd96:	73a1      	strb	r1, [r4, #14]
 800fd98:	e7e5      	b.n	800fd66 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800fd9a:	bf00      	nop
 800fd9c:	08012418 	.word	0x08012418
 800fda0:	08012440 	.word	0x08012440

0800fda4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 800fda4:	b570      	push	{r4, r5, r6, lr}
 800fda6:	790b      	ldrb	r3, [r1, #4]
 800fda8:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	bf0c      	ite	eq
 800fdb0:	2301      	moveq	r3, #1
 800fdb2:	2300      	movne	r3, #0
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	460e      	mov	r6, r1
 800fdb8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 800fdbc:	d109      	bne.n	800fdd2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 800fdbe:	b14d      	cbz	r5, 800fdd4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 800fdc0:	7933      	ldrb	r3, [r6, #4]
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d10c      	bne.n	800fde0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800fdc6:	6823      	ldr	r3, [r4, #0]
 800fdc8:	4620      	mov	r0, r4
 800fdca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fdcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdd0:	4718      	bx	r3
 800fdd2:	b12d      	cbz	r5, 800fde0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	695b      	ldr	r3, [r3, #20]
 800fdda:	4798      	blx	r3
 800fddc:	2d00      	cmp	r5, #0
 800fdde:	d1ef      	bne.n	800fdc0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 800fde0:	bd70      	pop	{r4, r5, r6, pc}

0800fde2 <__aeabi_atexit>:
 800fde2:	460b      	mov	r3, r1
 800fde4:	4601      	mov	r1, r0
 800fde6:	4618      	mov	r0, r3
 800fde8:	f000 b910 	b.w	801000c <__cxa_atexit>

0800fdec <_ZdlPvj>:
 800fdec:	f000 b812 	b.w	800fe14 <_ZdlPv>

0800fdf0 <__cxa_guard_acquire>:
 800fdf0:	6802      	ldr	r2, [r0, #0]
 800fdf2:	07d2      	lsls	r2, r2, #31
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	d405      	bmi.n	800fe04 <__cxa_guard_acquire+0x14>
 800fdf8:	7842      	ldrb	r2, [r0, #1]
 800fdfa:	b102      	cbz	r2, 800fdfe <__cxa_guard_acquire+0xe>
 800fdfc:	deff      	udf	#255	@ 0xff
 800fdfe:	2001      	movs	r0, #1
 800fe00:	7058      	strb	r0, [r3, #1]
 800fe02:	4770      	bx	lr
 800fe04:	2000      	movs	r0, #0
 800fe06:	4770      	bx	lr

0800fe08 <__cxa_guard_release>:
 800fe08:	2301      	movs	r3, #1
 800fe0a:	6003      	str	r3, [r0, #0]
 800fe0c:	4770      	bx	lr

0800fe0e <__cxa_pure_virtual>:
 800fe0e:	b508      	push	{r3, lr}
 800fe10:	f000 f80e 	bl	800fe30 <_ZSt9terminatev>

0800fe14 <_ZdlPv>:
 800fe14:	f000 b844 	b.w	800fea0 <free>

0800fe18 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800fe18:	b508      	push	{r3, lr}
 800fe1a:	4780      	blx	r0
 800fe1c:	f000 f80d 	bl	800fe3a <abort>

0800fe20 <_ZSt13get_terminatev>:
 800fe20:	4b02      	ldr	r3, [pc, #8]	@ (800fe2c <_ZSt13get_terminatev+0xc>)
 800fe22:	6818      	ldr	r0, [r3, #0]
 800fe24:	f3bf 8f5b 	dmb	ish
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	2000008c 	.word	0x2000008c

0800fe30 <_ZSt9terminatev>:
 800fe30:	b508      	push	{r3, lr}
 800fe32:	f7ff fff5 	bl	800fe20 <_ZSt13get_terminatev>
 800fe36:	f7ff ffef 	bl	800fe18 <_ZN10__cxxabiv111__terminateEPFvvE>

0800fe3a <abort>:
 800fe3a:	b508      	push	{r3, lr}
 800fe3c:	2006      	movs	r0, #6
 800fe3e:	f000 fa3b 	bl	80102b8 <raise>
 800fe42:	2001      	movs	r0, #1
 800fe44:	f7f1 fff6 	bl	8001e34 <_exit>

0800fe48 <__assert_func>:
 800fe48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe4a:	4614      	mov	r4, r2
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	4b09      	ldr	r3, [pc, #36]	@ (800fe74 <__assert_func+0x2c>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4605      	mov	r5, r0
 800fe54:	68d8      	ldr	r0, [r3, #12]
 800fe56:	b954      	cbnz	r4, 800fe6e <__assert_func+0x26>
 800fe58:	4b07      	ldr	r3, [pc, #28]	@ (800fe78 <__assert_func+0x30>)
 800fe5a:	461c      	mov	r4, r3
 800fe5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe60:	9100      	str	r1, [sp, #0]
 800fe62:	462b      	mov	r3, r5
 800fe64:	4905      	ldr	r1, [pc, #20]	@ (800fe7c <__assert_func+0x34>)
 800fe66:	f000 f983 	bl	8010170 <fiprintf>
 800fe6a:	f7ff ffe6 	bl	800fe3a <abort>
 800fe6e:	4b04      	ldr	r3, [pc, #16]	@ (800fe80 <__assert_func+0x38>)
 800fe70:	e7f4      	b.n	800fe5c <__assert_func+0x14>
 800fe72:	bf00      	nop
 800fe74:	2000009c 	.word	0x2000009c
 800fe78:	0801252f 	.word	0x0801252f
 800fe7c:	08012501 	.word	0x08012501
 800fe80:	080124f4 	.word	0x080124f4

0800fe84 <atexit>:
 800fe84:	2300      	movs	r3, #0
 800fe86:	4601      	mov	r1, r0
 800fe88:	461a      	mov	r2, r3
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f000 bac2 	b.w	8010414 <__register_exitproc>

0800fe90 <malloc>:
 800fe90:	4b02      	ldr	r3, [pc, #8]	@ (800fe9c <malloc+0xc>)
 800fe92:	4601      	mov	r1, r0
 800fe94:	6818      	ldr	r0, [r3, #0]
 800fe96:	f000 b82d 	b.w	800fef4 <_malloc_r>
 800fe9a:	bf00      	nop
 800fe9c:	2000009c 	.word	0x2000009c

0800fea0 <free>:
 800fea0:	4b02      	ldr	r3, [pc, #8]	@ (800feac <free+0xc>)
 800fea2:	4601      	mov	r1, r0
 800fea4:	6818      	ldr	r0, [r3, #0]
 800fea6:	f000 bb11 	b.w	80104cc <_free_r>
 800feaa:	bf00      	nop
 800feac:	2000009c 	.word	0x2000009c

0800feb0 <sbrk_aligned>:
 800feb0:	b570      	push	{r4, r5, r6, lr}
 800feb2:	4e0f      	ldr	r6, [pc, #60]	@ (800fef0 <sbrk_aligned+0x40>)
 800feb4:	460c      	mov	r4, r1
 800feb6:	6831      	ldr	r1, [r6, #0]
 800feb8:	4605      	mov	r5, r0
 800feba:	b911      	cbnz	r1, 800fec2 <sbrk_aligned+0x12>
 800febc:	f000 fa4c 	bl	8010358 <_sbrk_r>
 800fec0:	6030      	str	r0, [r6, #0]
 800fec2:	4621      	mov	r1, r4
 800fec4:	4628      	mov	r0, r5
 800fec6:	f000 fa47 	bl	8010358 <_sbrk_r>
 800feca:	1c43      	adds	r3, r0, #1
 800fecc:	d103      	bne.n	800fed6 <sbrk_aligned+0x26>
 800fece:	f04f 34ff 	mov.w	r4, #4294967295
 800fed2:	4620      	mov	r0, r4
 800fed4:	bd70      	pop	{r4, r5, r6, pc}
 800fed6:	1cc4      	adds	r4, r0, #3
 800fed8:	f024 0403 	bic.w	r4, r4, #3
 800fedc:	42a0      	cmp	r0, r4
 800fede:	d0f8      	beq.n	800fed2 <sbrk_aligned+0x22>
 800fee0:	1a21      	subs	r1, r4, r0
 800fee2:	4628      	mov	r0, r5
 800fee4:	f000 fa38 	bl	8010358 <_sbrk_r>
 800fee8:	3001      	adds	r0, #1
 800feea:	d1f2      	bne.n	800fed2 <sbrk_aligned+0x22>
 800feec:	e7ef      	b.n	800fece <sbrk_aligned+0x1e>
 800feee:	bf00      	nop
 800fef0:	200124c4 	.word	0x200124c4

0800fef4 <_malloc_r>:
 800fef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef8:	1ccd      	adds	r5, r1, #3
 800fefa:	f025 0503 	bic.w	r5, r5, #3
 800fefe:	3508      	adds	r5, #8
 800ff00:	2d0c      	cmp	r5, #12
 800ff02:	bf38      	it	cc
 800ff04:	250c      	movcc	r5, #12
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	4606      	mov	r6, r0
 800ff0a:	db01      	blt.n	800ff10 <_malloc_r+0x1c>
 800ff0c:	42a9      	cmp	r1, r5
 800ff0e:	d904      	bls.n	800ff1a <_malloc_r+0x26>
 800ff10:	230c      	movs	r3, #12
 800ff12:	6033      	str	r3, [r6, #0]
 800ff14:	2000      	movs	r0, #0
 800ff16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fff0 <_malloc_r+0xfc>
 800ff1e:	f000 f869 	bl	800fff4 <__malloc_lock>
 800ff22:	f8d8 3000 	ldr.w	r3, [r8]
 800ff26:	461c      	mov	r4, r3
 800ff28:	bb44      	cbnz	r4, 800ff7c <_malloc_r+0x88>
 800ff2a:	4629      	mov	r1, r5
 800ff2c:	4630      	mov	r0, r6
 800ff2e:	f7ff ffbf 	bl	800feb0 <sbrk_aligned>
 800ff32:	1c43      	adds	r3, r0, #1
 800ff34:	4604      	mov	r4, r0
 800ff36:	d158      	bne.n	800ffea <_malloc_r+0xf6>
 800ff38:	f8d8 4000 	ldr.w	r4, [r8]
 800ff3c:	4627      	mov	r7, r4
 800ff3e:	2f00      	cmp	r7, #0
 800ff40:	d143      	bne.n	800ffca <_malloc_r+0xd6>
 800ff42:	2c00      	cmp	r4, #0
 800ff44:	d04b      	beq.n	800ffde <_malloc_r+0xea>
 800ff46:	6823      	ldr	r3, [r4, #0]
 800ff48:	4639      	mov	r1, r7
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	eb04 0903 	add.w	r9, r4, r3
 800ff50:	f000 fa02 	bl	8010358 <_sbrk_r>
 800ff54:	4581      	cmp	r9, r0
 800ff56:	d142      	bne.n	800ffde <_malloc_r+0xea>
 800ff58:	6821      	ldr	r1, [r4, #0]
 800ff5a:	1a6d      	subs	r5, r5, r1
 800ff5c:	4629      	mov	r1, r5
 800ff5e:	4630      	mov	r0, r6
 800ff60:	f7ff ffa6 	bl	800feb0 <sbrk_aligned>
 800ff64:	3001      	adds	r0, #1
 800ff66:	d03a      	beq.n	800ffde <_malloc_r+0xea>
 800ff68:	6823      	ldr	r3, [r4, #0]
 800ff6a:	442b      	add	r3, r5
 800ff6c:	6023      	str	r3, [r4, #0]
 800ff6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff72:	685a      	ldr	r2, [r3, #4]
 800ff74:	bb62      	cbnz	r2, 800ffd0 <_malloc_r+0xdc>
 800ff76:	f8c8 7000 	str.w	r7, [r8]
 800ff7a:	e00f      	b.n	800ff9c <_malloc_r+0xa8>
 800ff7c:	6822      	ldr	r2, [r4, #0]
 800ff7e:	1b52      	subs	r2, r2, r5
 800ff80:	d420      	bmi.n	800ffc4 <_malloc_r+0xd0>
 800ff82:	2a0b      	cmp	r2, #11
 800ff84:	d917      	bls.n	800ffb6 <_malloc_r+0xc2>
 800ff86:	1961      	adds	r1, r4, r5
 800ff88:	42a3      	cmp	r3, r4
 800ff8a:	6025      	str	r5, [r4, #0]
 800ff8c:	bf18      	it	ne
 800ff8e:	6059      	strne	r1, [r3, #4]
 800ff90:	6863      	ldr	r3, [r4, #4]
 800ff92:	bf08      	it	eq
 800ff94:	f8c8 1000 	streq.w	r1, [r8]
 800ff98:	5162      	str	r2, [r4, r5]
 800ff9a:	604b      	str	r3, [r1, #4]
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	f000 f82f 	bl	8010000 <__malloc_unlock>
 800ffa2:	f104 000b 	add.w	r0, r4, #11
 800ffa6:	1d23      	adds	r3, r4, #4
 800ffa8:	f020 0007 	bic.w	r0, r0, #7
 800ffac:	1ac2      	subs	r2, r0, r3
 800ffae:	bf1c      	itt	ne
 800ffb0:	1a1b      	subne	r3, r3, r0
 800ffb2:	50a3      	strne	r3, [r4, r2]
 800ffb4:	e7af      	b.n	800ff16 <_malloc_r+0x22>
 800ffb6:	6862      	ldr	r2, [r4, #4]
 800ffb8:	42a3      	cmp	r3, r4
 800ffba:	bf0c      	ite	eq
 800ffbc:	f8c8 2000 	streq.w	r2, [r8]
 800ffc0:	605a      	strne	r2, [r3, #4]
 800ffc2:	e7eb      	b.n	800ff9c <_malloc_r+0xa8>
 800ffc4:	4623      	mov	r3, r4
 800ffc6:	6864      	ldr	r4, [r4, #4]
 800ffc8:	e7ae      	b.n	800ff28 <_malloc_r+0x34>
 800ffca:	463c      	mov	r4, r7
 800ffcc:	687f      	ldr	r7, [r7, #4]
 800ffce:	e7b6      	b.n	800ff3e <_malloc_r+0x4a>
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	42a3      	cmp	r3, r4
 800ffd6:	d1fb      	bne.n	800ffd0 <_malloc_r+0xdc>
 800ffd8:	2300      	movs	r3, #0
 800ffda:	6053      	str	r3, [r2, #4]
 800ffdc:	e7de      	b.n	800ff9c <_malloc_r+0xa8>
 800ffde:	230c      	movs	r3, #12
 800ffe0:	6033      	str	r3, [r6, #0]
 800ffe2:	4630      	mov	r0, r6
 800ffe4:	f000 f80c 	bl	8010000 <__malloc_unlock>
 800ffe8:	e794      	b.n	800ff14 <_malloc_r+0x20>
 800ffea:	6005      	str	r5, [r0, #0]
 800ffec:	e7d6      	b.n	800ff9c <_malloc_r+0xa8>
 800ffee:	bf00      	nop
 800fff0:	200124c8 	.word	0x200124c8

0800fff4 <__malloc_lock>:
 800fff4:	4801      	ldr	r0, [pc, #4]	@ (800fffc <__malloc_lock+0x8>)
 800fff6:	f000 b9fc 	b.w	80103f2 <__retarget_lock_acquire_recursive>
 800fffa:	bf00      	nop
 800fffc:	2001260c 	.word	0x2001260c

08010000 <__malloc_unlock>:
 8010000:	4801      	ldr	r0, [pc, #4]	@ (8010008 <__malloc_unlock+0x8>)
 8010002:	f000 b9f7 	b.w	80103f4 <__retarget_lock_release_recursive>
 8010006:	bf00      	nop
 8010008:	2001260c 	.word	0x2001260c

0801000c <__cxa_atexit>:
 801000c:	b510      	push	{r4, lr}
 801000e:	4604      	mov	r4, r0
 8010010:	4804      	ldr	r0, [pc, #16]	@ (8010024 <__cxa_atexit+0x18>)
 8010012:	4613      	mov	r3, r2
 8010014:	b120      	cbz	r0, 8010020 <__cxa_atexit+0x14>
 8010016:	460a      	mov	r2, r1
 8010018:	2002      	movs	r0, #2
 801001a:	4621      	mov	r1, r4
 801001c:	f000 f9fa 	bl	8010414 <__register_exitproc>
 8010020:	bd10      	pop	{r4, pc}
 8010022:	bf00      	nop
 8010024:	08010415 	.word	0x08010415

08010028 <std>:
 8010028:	2300      	movs	r3, #0
 801002a:	b510      	push	{r4, lr}
 801002c:	4604      	mov	r4, r0
 801002e:	e9c0 3300 	strd	r3, r3, [r0]
 8010032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010036:	6083      	str	r3, [r0, #8]
 8010038:	8181      	strh	r1, [r0, #12]
 801003a:	6643      	str	r3, [r0, #100]	@ 0x64
 801003c:	81c2      	strh	r2, [r0, #14]
 801003e:	6183      	str	r3, [r0, #24]
 8010040:	4619      	mov	r1, r3
 8010042:	2208      	movs	r2, #8
 8010044:	305c      	adds	r0, #92	@ 0x5c
 8010046:	f000 f906 	bl	8010256 <memset>
 801004a:	4b0d      	ldr	r3, [pc, #52]	@ (8010080 <std+0x58>)
 801004c:	6263      	str	r3, [r4, #36]	@ 0x24
 801004e:	4b0d      	ldr	r3, [pc, #52]	@ (8010084 <std+0x5c>)
 8010050:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010052:	4b0d      	ldr	r3, [pc, #52]	@ (8010088 <std+0x60>)
 8010054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010056:	4b0d      	ldr	r3, [pc, #52]	@ (801008c <std+0x64>)
 8010058:	6323      	str	r3, [r4, #48]	@ 0x30
 801005a:	4b0d      	ldr	r3, [pc, #52]	@ (8010090 <std+0x68>)
 801005c:	6224      	str	r4, [r4, #32]
 801005e:	429c      	cmp	r4, r3
 8010060:	d006      	beq.n	8010070 <std+0x48>
 8010062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010066:	4294      	cmp	r4, r2
 8010068:	d002      	beq.n	8010070 <std+0x48>
 801006a:	33d0      	adds	r3, #208	@ 0xd0
 801006c:	429c      	cmp	r4, r3
 801006e:	d105      	bne.n	801007c <std+0x54>
 8010070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010078:	f000 b9ba 	b.w	80103f0 <__retarget_lock_init_recursive>
 801007c:	bd10      	pop	{r4, pc}
 801007e:	bf00      	nop
 8010080:	080101d1 	.word	0x080101d1
 8010084:	080101f3 	.word	0x080101f3
 8010088:	0801022b 	.word	0x0801022b
 801008c:	0801024f 	.word	0x0801024f
 8010090:	200124cc 	.word	0x200124cc

08010094 <stdio_exit_handler>:
 8010094:	4a02      	ldr	r2, [pc, #8]	@ (80100a0 <stdio_exit_handler+0xc>)
 8010096:	4903      	ldr	r1, [pc, #12]	@ (80100a4 <stdio_exit_handler+0x10>)
 8010098:	4803      	ldr	r0, [pc, #12]	@ (80100a8 <stdio_exit_handler+0x14>)
 801009a:	f000 b87b 	b.w	8010194 <_fwalk_sglue>
 801009e:	bf00      	nop
 80100a0:	20000090 	.word	0x20000090
 80100a4:	08010c09 	.word	0x08010c09
 80100a8:	200000a0 	.word	0x200000a0

080100ac <cleanup_stdio>:
 80100ac:	6841      	ldr	r1, [r0, #4]
 80100ae:	4b0c      	ldr	r3, [pc, #48]	@ (80100e0 <cleanup_stdio+0x34>)
 80100b0:	4299      	cmp	r1, r3
 80100b2:	b510      	push	{r4, lr}
 80100b4:	4604      	mov	r4, r0
 80100b6:	d001      	beq.n	80100bc <cleanup_stdio+0x10>
 80100b8:	f000 fda6 	bl	8010c08 <_fflush_r>
 80100bc:	68a1      	ldr	r1, [r4, #8]
 80100be:	4b09      	ldr	r3, [pc, #36]	@ (80100e4 <cleanup_stdio+0x38>)
 80100c0:	4299      	cmp	r1, r3
 80100c2:	d002      	beq.n	80100ca <cleanup_stdio+0x1e>
 80100c4:	4620      	mov	r0, r4
 80100c6:	f000 fd9f 	bl	8010c08 <_fflush_r>
 80100ca:	68e1      	ldr	r1, [r4, #12]
 80100cc:	4b06      	ldr	r3, [pc, #24]	@ (80100e8 <cleanup_stdio+0x3c>)
 80100ce:	4299      	cmp	r1, r3
 80100d0:	d004      	beq.n	80100dc <cleanup_stdio+0x30>
 80100d2:	4620      	mov	r0, r4
 80100d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100d8:	f000 bd96 	b.w	8010c08 <_fflush_r>
 80100dc:	bd10      	pop	{r4, pc}
 80100de:	bf00      	nop
 80100e0:	200124cc 	.word	0x200124cc
 80100e4:	20012534 	.word	0x20012534
 80100e8:	2001259c 	.word	0x2001259c

080100ec <global_stdio_init.part.0>:
 80100ec:	b510      	push	{r4, lr}
 80100ee:	4b0b      	ldr	r3, [pc, #44]	@ (801011c <global_stdio_init.part.0+0x30>)
 80100f0:	4c0b      	ldr	r4, [pc, #44]	@ (8010120 <global_stdio_init.part.0+0x34>)
 80100f2:	4a0c      	ldr	r2, [pc, #48]	@ (8010124 <global_stdio_init.part.0+0x38>)
 80100f4:	601a      	str	r2, [r3, #0]
 80100f6:	4620      	mov	r0, r4
 80100f8:	2200      	movs	r2, #0
 80100fa:	2104      	movs	r1, #4
 80100fc:	f7ff ff94 	bl	8010028 <std>
 8010100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010104:	2201      	movs	r2, #1
 8010106:	2109      	movs	r1, #9
 8010108:	f7ff ff8e 	bl	8010028 <std>
 801010c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010110:	2202      	movs	r2, #2
 8010112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010116:	2112      	movs	r1, #18
 8010118:	f7ff bf86 	b.w	8010028 <std>
 801011c:	20012604 	.word	0x20012604
 8010120:	200124cc 	.word	0x200124cc
 8010124:	08010095 	.word	0x08010095

08010128 <__sfp_lock_acquire>:
 8010128:	4801      	ldr	r0, [pc, #4]	@ (8010130 <__sfp_lock_acquire+0x8>)
 801012a:	f000 b962 	b.w	80103f2 <__retarget_lock_acquire_recursive>
 801012e:	bf00      	nop
 8010130:	2001260e 	.word	0x2001260e

08010134 <__sfp_lock_release>:
 8010134:	4801      	ldr	r0, [pc, #4]	@ (801013c <__sfp_lock_release+0x8>)
 8010136:	f000 b95d 	b.w	80103f4 <__retarget_lock_release_recursive>
 801013a:	bf00      	nop
 801013c:	2001260e 	.word	0x2001260e

08010140 <__sinit>:
 8010140:	b510      	push	{r4, lr}
 8010142:	4604      	mov	r4, r0
 8010144:	f7ff fff0 	bl	8010128 <__sfp_lock_acquire>
 8010148:	6a23      	ldr	r3, [r4, #32]
 801014a:	b11b      	cbz	r3, 8010154 <__sinit+0x14>
 801014c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010150:	f7ff bff0 	b.w	8010134 <__sfp_lock_release>
 8010154:	4b04      	ldr	r3, [pc, #16]	@ (8010168 <__sinit+0x28>)
 8010156:	6223      	str	r3, [r4, #32]
 8010158:	4b04      	ldr	r3, [pc, #16]	@ (801016c <__sinit+0x2c>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d1f5      	bne.n	801014c <__sinit+0xc>
 8010160:	f7ff ffc4 	bl	80100ec <global_stdio_init.part.0>
 8010164:	e7f2      	b.n	801014c <__sinit+0xc>
 8010166:	bf00      	nop
 8010168:	080100ad 	.word	0x080100ad
 801016c:	20012604 	.word	0x20012604

08010170 <fiprintf>:
 8010170:	b40e      	push	{r1, r2, r3}
 8010172:	b503      	push	{r0, r1, lr}
 8010174:	4601      	mov	r1, r0
 8010176:	ab03      	add	r3, sp, #12
 8010178:	4805      	ldr	r0, [pc, #20]	@ (8010190 <fiprintf+0x20>)
 801017a:	f853 2b04 	ldr.w	r2, [r3], #4
 801017e:	6800      	ldr	r0, [r0, #0]
 8010180:	9301      	str	r3, [sp, #4]
 8010182:	f000 fa17 	bl	80105b4 <_vfiprintf_r>
 8010186:	b002      	add	sp, #8
 8010188:	f85d eb04 	ldr.w	lr, [sp], #4
 801018c:	b003      	add	sp, #12
 801018e:	4770      	bx	lr
 8010190:	2000009c 	.word	0x2000009c

08010194 <_fwalk_sglue>:
 8010194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010198:	4607      	mov	r7, r0
 801019a:	4688      	mov	r8, r1
 801019c:	4614      	mov	r4, r2
 801019e:	2600      	movs	r6, #0
 80101a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101a4:	f1b9 0901 	subs.w	r9, r9, #1
 80101a8:	d505      	bpl.n	80101b6 <_fwalk_sglue+0x22>
 80101aa:	6824      	ldr	r4, [r4, #0]
 80101ac:	2c00      	cmp	r4, #0
 80101ae:	d1f7      	bne.n	80101a0 <_fwalk_sglue+0xc>
 80101b0:	4630      	mov	r0, r6
 80101b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101b6:	89ab      	ldrh	r3, [r5, #12]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d907      	bls.n	80101cc <_fwalk_sglue+0x38>
 80101bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101c0:	3301      	adds	r3, #1
 80101c2:	d003      	beq.n	80101cc <_fwalk_sglue+0x38>
 80101c4:	4629      	mov	r1, r5
 80101c6:	4638      	mov	r0, r7
 80101c8:	47c0      	blx	r8
 80101ca:	4306      	orrs	r6, r0
 80101cc:	3568      	adds	r5, #104	@ 0x68
 80101ce:	e7e9      	b.n	80101a4 <_fwalk_sglue+0x10>

080101d0 <__sread>:
 80101d0:	b510      	push	{r4, lr}
 80101d2:	460c      	mov	r4, r1
 80101d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101d8:	f000 f898 	bl	801030c <_read_r>
 80101dc:	2800      	cmp	r0, #0
 80101de:	bfab      	itete	ge
 80101e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80101e2:	89a3      	ldrhlt	r3, [r4, #12]
 80101e4:	181b      	addge	r3, r3, r0
 80101e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80101ea:	bfac      	ite	ge
 80101ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80101ee:	81a3      	strhlt	r3, [r4, #12]
 80101f0:	bd10      	pop	{r4, pc}

080101f2 <__swrite>:
 80101f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f6:	461f      	mov	r7, r3
 80101f8:	898b      	ldrh	r3, [r1, #12]
 80101fa:	05db      	lsls	r3, r3, #23
 80101fc:	4605      	mov	r5, r0
 80101fe:	460c      	mov	r4, r1
 8010200:	4616      	mov	r6, r2
 8010202:	d505      	bpl.n	8010210 <__swrite+0x1e>
 8010204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010208:	2302      	movs	r3, #2
 801020a:	2200      	movs	r2, #0
 801020c:	f000 f86c 	bl	80102e8 <_lseek_r>
 8010210:	89a3      	ldrh	r3, [r4, #12]
 8010212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010216:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801021a:	81a3      	strh	r3, [r4, #12]
 801021c:	4632      	mov	r2, r6
 801021e:	463b      	mov	r3, r7
 8010220:	4628      	mov	r0, r5
 8010222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010226:	f000 b8a7 	b.w	8010378 <_write_r>

0801022a <__sseek>:
 801022a:	b510      	push	{r4, lr}
 801022c:	460c      	mov	r4, r1
 801022e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010232:	f000 f859 	bl	80102e8 <_lseek_r>
 8010236:	1c43      	adds	r3, r0, #1
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	bf15      	itete	ne
 801023c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801023e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010242:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010246:	81a3      	strheq	r3, [r4, #12]
 8010248:	bf18      	it	ne
 801024a:	81a3      	strhne	r3, [r4, #12]
 801024c:	bd10      	pop	{r4, pc}

0801024e <__sclose>:
 801024e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010252:	f000 b839 	b.w	80102c8 <_close_r>

08010256 <memset>:
 8010256:	4402      	add	r2, r0
 8010258:	4603      	mov	r3, r0
 801025a:	4293      	cmp	r3, r2
 801025c:	d100      	bne.n	8010260 <memset+0xa>
 801025e:	4770      	bx	lr
 8010260:	f803 1b01 	strb.w	r1, [r3], #1
 8010264:	e7f9      	b.n	801025a <memset+0x4>

08010266 <_raise_r>:
 8010266:	291f      	cmp	r1, #31
 8010268:	b538      	push	{r3, r4, r5, lr}
 801026a:	4605      	mov	r5, r0
 801026c:	460c      	mov	r4, r1
 801026e:	d904      	bls.n	801027a <_raise_r+0x14>
 8010270:	2316      	movs	r3, #22
 8010272:	6003      	str	r3, [r0, #0]
 8010274:	f04f 30ff 	mov.w	r0, #4294967295
 8010278:	bd38      	pop	{r3, r4, r5, pc}
 801027a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801027c:	b112      	cbz	r2, 8010284 <_raise_r+0x1e>
 801027e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010282:	b94b      	cbnz	r3, 8010298 <_raise_r+0x32>
 8010284:	4628      	mov	r0, r5
 8010286:	f000 f865 	bl	8010354 <_getpid_r>
 801028a:	4622      	mov	r2, r4
 801028c:	4601      	mov	r1, r0
 801028e:	4628      	mov	r0, r5
 8010290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010294:	f000 b84c 	b.w	8010330 <_kill_r>
 8010298:	2b01      	cmp	r3, #1
 801029a:	d00a      	beq.n	80102b2 <_raise_r+0x4c>
 801029c:	1c59      	adds	r1, r3, #1
 801029e:	d103      	bne.n	80102a8 <_raise_r+0x42>
 80102a0:	2316      	movs	r3, #22
 80102a2:	6003      	str	r3, [r0, #0]
 80102a4:	2001      	movs	r0, #1
 80102a6:	e7e7      	b.n	8010278 <_raise_r+0x12>
 80102a8:	2100      	movs	r1, #0
 80102aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80102ae:	4620      	mov	r0, r4
 80102b0:	4798      	blx	r3
 80102b2:	2000      	movs	r0, #0
 80102b4:	e7e0      	b.n	8010278 <_raise_r+0x12>
	...

080102b8 <raise>:
 80102b8:	4b02      	ldr	r3, [pc, #8]	@ (80102c4 <raise+0xc>)
 80102ba:	4601      	mov	r1, r0
 80102bc:	6818      	ldr	r0, [r3, #0]
 80102be:	f7ff bfd2 	b.w	8010266 <_raise_r>
 80102c2:	bf00      	nop
 80102c4:	2000009c 	.word	0x2000009c

080102c8 <_close_r>:
 80102c8:	b538      	push	{r3, r4, r5, lr}
 80102ca:	4d06      	ldr	r5, [pc, #24]	@ (80102e4 <_close_r+0x1c>)
 80102cc:	2300      	movs	r3, #0
 80102ce:	4604      	mov	r4, r0
 80102d0:	4608      	mov	r0, r1
 80102d2:	602b      	str	r3, [r5, #0]
 80102d4:	f7f1 fdd0 	bl	8001e78 <_close>
 80102d8:	1c43      	adds	r3, r0, #1
 80102da:	d102      	bne.n	80102e2 <_close_r+0x1a>
 80102dc:	682b      	ldr	r3, [r5, #0]
 80102de:	b103      	cbz	r3, 80102e2 <_close_r+0x1a>
 80102e0:	6023      	str	r3, [r4, #0]
 80102e2:	bd38      	pop	{r3, r4, r5, pc}
 80102e4:	20012608 	.word	0x20012608

080102e8 <_lseek_r>:
 80102e8:	b538      	push	{r3, r4, r5, lr}
 80102ea:	4d07      	ldr	r5, [pc, #28]	@ (8010308 <_lseek_r+0x20>)
 80102ec:	4604      	mov	r4, r0
 80102ee:	4608      	mov	r0, r1
 80102f0:	4611      	mov	r1, r2
 80102f2:	2200      	movs	r2, #0
 80102f4:	602a      	str	r2, [r5, #0]
 80102f6:	461a      	mov	r2, r3
 80102f8:	f7f1 fdc8 	bl	8001e8c <_lseek>
 80102fc:	1c43      	adds	r3, r0, #1
 80102fe:	d102      	bne.n	8010306 <_lseek_r+0x1e>
 8010300:	682b      	ldr	r3, [r5, #0]
 8010302:	b103      	cbz	r3, 8010306 <_lseek_r+0x1e>
 8010304:	6023      	str	r3, [r4, #0]
 8010306:	bd38      	pop	{r3, r4, r5, pc}
 8010308:	20012608 	.word	0x20012608

0801030c <_read_r>:
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	4d07      	ldr	r5, [pc, #28]	@ (801032c <_read_r+0x20>)
 8010310:	4604      	mov	r4, r0
 8010312:	4608      	mov	r0, r1
 8010314:	4611      	mov	r1, r2
 8010316:	2200      	movs	r2, #0
 8010318:	602a      	str	r2, [r5, #0]
 801031a:	461a      	mov	r2, r3
 801031c:	f7f1 fd90 	bl	8001e40 <_read>
 8010320:	1c43      	adds	r3, r0, #1
 8010322:	d102      	bne.n	801032a <_read_r+0x1e>
 8010324:	682b      	ldr	r3, [r5, #0]
 8010326:	b103      	cbz	r3, 801032a <_read_r+0x1e>
 8010328:	6023      	str	r3, [r4, #0]
 801032a:	bd38      	pop	{r3, r4, r5, pc}
 801032c:	20012608 	.word	0x20012608

08010330 <_kill_r>:
 8010330:	b538      	push	{r3, r4, r5, lr}
 8010332:	4d07      	ldr	r5, [pc, #28]	@ (8010350 <_kill_r+0x20>)
 8010334:	2300      	movs	r3, #0
 8010336:	4604      	mov	r4, r0
 8010338:	4608      	mov	r0, r1
 801033a:	4611      	mov	r1, r2
 801033c:	602b      	str	r3, [r5, #0]
 801033e:	f7f1 fd71 	bl	8001e24 <_kill>
 8010342:	1c43      	adds	r3, r0, #1
 8010344:	d102      	bne.n	801034c <_kill_r+0x1c>
 8010346:	682b      	ldr	r3, [r5, #0]
 8010348:	b103      	cbz	r3, 801034c <_kill_r+0x1c>
 801034a:	6023      	str	r3, [r4, #0]
 801034c:	bd38      	pop	{r3, r4, r5, pc}
 801034e:	bf00      	nop
 8010350:	20012608 	.word	0x20012608

08010354 <_getpid_r>:
 8010354:	f7f1 bd64 	b.w	8001e20 <_getpid>

08010358 <_sbrk_r>:
 8010358:	b538      	push	{r3, r4, r5, lr}
 801035a:	4d06      	ldr	r5, [pc, #24]	@ (8010374 <_sbrk_r+0x1c>)
 801035c:	2300      	movs	r3, #0
 801035e:	4604      	mov	r4, r0
 8010360:	4608      	mov	r0, r1
 8010362:	602b      	str	r3, [r5, #0]
 8010364:	f7f1 fd94 	bl	8001e90 <_sbrk>
 8010368:	1c43      	adds	r3, r0, #1
 801036a:	d102      	bne.n	8010372 <_sbrk_r+0x1a>
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	b103      	cbz	r3, 8010372 <_sbrk_r+0x1a>
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	bd38      	pop	{r3, r4, r5, pc}
 8010374:	20012608 	.word	0x20012608

08010378 <_write_r>:
 8010378:	b538      	push	{r3, r4, r5, lr}
 801037a:	4d07      	ldr	r5, [pc, #28]	@ (8010398 <_write_r+0x20>)
 801037c:	4604      	mov	r4, r0
 801037e:	4608      	mov	r0, r1
 8010380:	4611      	mov	r1, r2
 8010382:	2200      	movs	r2, #0
 8010384:	602a      	str	r2, [r5, #0]
 8010386:	461a      	mov	r2, r3
 8010388:	f7f1 fd68 	bl	8001e5c <_write>
 801038c:	1c43      	adds	r3, r0, #1
 801038e:	d102      	bne.n	8010396 <_write_r+0x1e>
 8010390:	682b      	ldr	r3, [r5, #0]
 8010392:	b103      	cbz	r3, 8010396 <_write_r+0x1e>
 8010394:	6023      	str	r3, [r4, #0]
 8010396:	bd38      	pop	{r3, r4, r5, pc}
 8010398:	20012608 	.word	0x20012608

0801039c <__errno>:
 801039c:	4b01      	ldr	r3, [pc, #4]	@ (80103a4 <__errno+0x8>)
 801039e:	6818      	ldr	r0, [r3, #0]
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	2000009c 	.word	0x2000009c

080103a8 <__libc_init_array>:
 80103a8:	b570      	push	{r4, r5, r6, lr}
 80103aa:	4d0d      	ldr	r5, [pc, #52]	@ (80103e0 <__libc_init_array+0x38>)
 80103ac:	4c0d      	ldr	r4, [pc, #52]	@ (80103e4 <__libc_init_array+0x3c>)
 80103ae:	1b64      	subs	r4, r4, r5
 80103b0:	10a4      	asrs	r4, r4, #2
 80103b2:	2600      	movs	r6, #0
 80103b4:	42a6      	cmp	r6, r4
 80103b6:	d109      	bne.n	80103cc <__libc_init_array+0x24>
 80103b8:	4d0b      	ldr	r5, [pc, #44]	@ (80103e8 <__libc_init_array+0x40>)
 80103ba:	4c0c      	ldr	r4, [pc, #48]	@ (80103ec <__libc_init_array+0x44>)
 80103bc:	f000 fd64 	bl	8010e88 <_init>
 80103c0:	1b64      	subs	r4, r4, r5
 80103c2:	10a4      	asrs	r4, r4, #2
 80103c4:	2600      	movs	r6, #0
 80103c6:	42a6      	cmp	r6, r4
 80103c8:	d105      	bne.n	80103d6 <__libc_init_array+0x2e>
 80103ca:	bd70      	pop	{r4, r5, r6, pc}
 80103cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80103d0:	4798      	blx	r3
 80103d2:	3601      	adds	r6, #1
 80103d4:	e7ee      	b.n	80103b4 <__libc_init_array+0xc>
 80103d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80103da:	4798      	blx	r3
 80103dc:	3601      	adds	r6, #1
 80103de:	e7f2      	b.n	80103c6 <__libc_init_array+0x1e>
 80103e0:	080e42a0 	.word	0x080e42a0
 80103e4:	080e42a0 	.word	0x080e42a0
 80103e8:	080e42a0 	.word	0x080e42a0
 80103ec:	080e42b4 	.word	0x080e42b4

080103f0 <__retarget_lock_init_recursive>:
 80103f0:	4770      	bx	lr

080103f2 <__retarget_lock_acquire_recursive>:
 80103f2:	4770      	bx	lr

080103f4 <__retarget_lock_release_recursive>:
 80103f4:	4770      	bx	lr

080103f6 <memcpy>:
 80103f6:	440a      	add	r2, r1
 80103f8:	4291      	cmp	r1, r2
 80103fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80103fe:	d100      	bne.n	8010402 <memcpy+0xc>
 8010400:	4770      	bx	lr
 8010402:	b510      	push	{r4, lr}
 8010404:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010408:	f803 4f01 	strb.w	r4, [r3, #1]!
 801040c:	4291      	cmp	r1, r2
 801040e:	d1f9      	bne.n	8010404 <memcpy+0xe>
 8010410:	bd10      	pop	{r4, pc}
	...

08010414 <__register_exitproc>:
 8010414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010418:	4d27      	ldr	r5, [pc, #156]	@ (80104b8 <__register_exitproc+0xa4>)
 801041a:	4607      	mov	r7, r0
 801041c:	6828      	ldr	r0, [r5, #0]
 801041e:	4691      	mov	r9, r2
 8010420:	460e      	mov	r6, r1
 8010422:	4698      	mov	r8, r3
 8010424:	f7ff ffe5 	bl	80103f2 <__retarget_lock_acquire_recursive>
 8010428:	4a24      	ldr	r2, [pc, #144]	@ (80104bc <__register_exitproc+0xa8>)
 801042a:	6814      	ldr	r4, [r2, #0]
 801042c:	b93c      	cbnz	r4, 801043e <__register_exitproc+0x2a>
 801042e:	4b24      	ldr	r3, [pc, #144]	@ (80104c0 <__register_exitproc+0xac>)
 8010430:	6013      	str	r3, [r2, #0]
 8010432:	4a24      	ldr	r2, [pc, #144]	@ (80104c4 <__register_exitproc+0xb0>)
 8010434:	b112      	cbz	r2, 801043c <__register_exitproc+0x28>
 8010436:	6812      	ldr	r2, [r2, #0]
 8010438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 801043c:	4c20      	ldr	r4, [pc, #128]	@ (80104c0 <__register_exitproc+0xac>)
 801043e:	6863      	ldr	r3, [r4, #4]
 8010440:	2b1f      	cmp	r3, #31
 8010442:	dd06      	ble.n	8010452 <__register_exitproc+0x3e>
 8010444:	6828      	ldr	r0, [r5, #0]
 8010446:	f7ff ffd5 	bl	80103f4 <__retarget_lock_release_recursive>
 801044a:	f04f 30ff 	mov.w	r0, #4294967295
 801044e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010452:	b32f      	cbz	r7, 80104a0 <__register_exitproc+0x8c>
 8010454:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8010458:	b968      	cbnz	r0, 8010476 <__register_exitproc+0x62>
 801045a:	4b1b      	ldr	r3, [pc, #108]	@ (80104c8 <__register_exitproc+0xb4>)
 801045c:	2b00      	cmp	r3, #0
 801045e:	d0f1      	beq.n	8010444 <__register_exitproc+0x30>
 8010460:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8010464:	f7ff fd14 	bl	800fe90 <malloc>
 8010468:	2800      	cmp	r0, #0
 801046a:	d0eb      	beq.n	8010444 <__register_exitproc+0x30>
 801046c:	2300      	movs	r3, #0
 801046e:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8010472:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8010476:	6863      	ldr	r3, [r4, #4]
 8010478:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801047c:	2201      	movs	r2, #1
 801047e:	409a      	lsls	r2, r3
 8010480:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8010484:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8010488:	4313      	orrs	r3, r2
 801048a:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 801048e:	2f02      	cmp	r7, #2
 8010490:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8010494:	bf02      	ittt	eq
 8010496:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 801049a:	4313      	orreq	r3, r2
 801049c:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80104a0:	6863      	ldr	r3, [r4, #4]
 80104a2:	6828      	ldr	r0, [r5, #0]
 80104a4:	1c5a      	adds	r2, r3, #1
 80104a6:	3302      	adds	r3, #2
 80104a8:	6062      	str	r2, [r4, #4]
 80104aa:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80104ae:	f7ff ffa1 	bl	80103f4 <__retarget_lock_release_recursive>
 80104b2:	2000      	movs	r0, #0
 80104b4:	e7cb      	b.n	801044e <__register_exitproc+0x3a>
 80104b6:	bf00      	nop
 80104b8:	200000ec 	.word	0x200000ec
 80104bc:	2001269c 	.word	0x2001269c
 80104c0:	20012610 	.word	0x20012610
 80104c4:	08012530 	.word	0x08012530
 80104c8:	0800fe91 	.word	0x0800fe91

080104cc <_free_r>:
 80104cc:	b538      	push	{r3, r4, r5, lr}
 80104ce:	4605      	mov	r5, r0
 80104d0:	2900      	cmp	r1, #0
 80104d2:	d041      	beq.n	8010558 <_free_r+0x8c>
 80104d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104d8:	1f0c      	subs	r4, r1, #4
 80104da:	2b00      	cmp	r3, #0
 80104dc:	bfb8      	it	lt
 80104de:	18e4      	addlt	r4, r4, r3
 80104e0:	f7ff fd88 	bl	800fff4 <__malloc_lock>
 80104e4:	4a1d      	ldr	r2, [pc, #116]	@ (801055c <_free_r+0x90>)
 80104e6:	6813      	ldr	r3, [r2, #0]
 80104e8:	b933      	cbnz	r3, 80104f8 <_free_r+0x2c>
 80104ea:	6063      	str	r3, [r4, #4]
 80104ec:	6014      	str	r4, [r2, #0]
 80104ee:	4628      	mov	r0, r5
 80104f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104f4:	f7ff bd84 	b.w	8010000 <__malloc_unlock>
 80104f8:	42a3      	cmp	r3, r4
 80104fa:	d908      	bls.n	801050e <_free_r+0x42>
 80104fc:	6820      	ldr	r0, [r4, #0]
 80104fe:	1821      	adds	r1, r4, r0
 8010500:	428b      	cmp	r3, r1
 8010502:	bf01      	itttt	eq
 8010504:	6819      	ldreq	r1, [r3, #0]
 8010506:	685b      	ldreq	r3, [r3, #4]
 8010508:	1809      	addeq	r1, r1, r0
 801050a:	6021      	streq	r1, [r4, #0]
 801050c:	e7ed      	b.n	80104ea <_free_r+0x1e>
 801050e:	461a      	mov	r2, r3
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	b10b      	cbz	r3, 8010518 <_free_r+0x4c>
 8010514:	42a3      	cmp	r3, r4
 8010516:	d9fa      	bls.n	801050e <_free_r+0x42>
 8010518:	6811      	ldr	r1, [r2, #0]
 801051a:	1850      	adds	r0, r2, r1
 801051c:	42a0      	cmp	r0, r4
 801051e:	d10b      	bne.n	8010538 <_free_r+0x6c>
 8010520:	6820      	ldr	r0, [r4, #0]
 8010522:	4401      	add	r1, r0
 8010524:	1850      	adds	r0, r2, r1
 8010526:	4283      	cmp	r3, r0
 8010528:	6011      	str	r1, [r2, #0]
 801052a:	d1e0      	bne.n	80104ee <_free_r+0x22>
 801052c:	6818      	ldr	r0, [r3, #0]
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	6053      	str	r3, [r2, #4]
 8010532:	4408      	add	r0, r1
 8010534:	6010      	str	r0, [r2, #0]
 8010536:	e7da      	b.n	80104ee <_free_r+0x22>
 8010538:	d902      	bls.n	8010540 <_free_r+0x74>
 801053a:	230c      	movs	r3, #12
 801053c:	602b      	str	r3, [r5, #0]
 801053e:	e7d6      	b.n	80104ee <_free_r+0x22>
 8010540:	6820      	ldr	r0, [r4, #0]
 8010542:	1821      	adds	r1, r4, r0
 8010544:	428b      	cmp	r3, r1
 8010546:	bf04      	itt	eq
 8010548:	6819      	ldreq	r1, [r3, #0]
 801054a:	685b      	ldreq	r3, [r3, #4]
 801054c:	6063      	str	r3, [r4, #4]
 801054e:	bf04      	itt	eq
 8010550:	1809      	addeq	r1, r1, r0
 8010552:	6021      	streq	r1, [r4, #0]
 8010554:	6054      	str	r4, [r2, #4]
 8010556:	e7ca      	b.n	80104ee <_free_r+0x22>
 8010558:	bd38      	pop	{r3, r4, r5, pc}
 801055a:	bf00      	nop
 801055c:	200124c8 	.word	0x200124c8

08010560 <__sfputc_r>:
 8010560:	6893      	ldr	r3, [r2, #8]
 8010562:	3b01      	subs	r3, #1
 8010564:	2b00      	cmp	r3, #0
 8010566:	b410      	push	{r4}
 8010568:	6093      	str	r3, [r2, #8]
 801056a:	da08      	bge.n	801057e <__sfputc_r+0x1e>
 801056c:	6994      	ldr	r4, [r2, #24]
 801056e:	42a3      	cmp	r3, r4
 8010570:	db01      	blt.n	8010576 <__sfputc_r+0x16>
 8010572:	290a      	cmp	r1, #10
 8010574:	d103      	bne.n	801057e <__sfputc_r+0x1e>
 8010576:	f85d 4b04 	ldr.w	r4, [sp], #4
 801057a:	f000 bb6d 	b.w	8010c58 <__swbuf_r>
 801057e:	6813      	ldr	r3, [r2, #0]
 8010580:	1c58      	adds	r0, r3, #1
 8010582:	6010      	str	r0, [r2, #0]
 8010584:	7019      	strb	r1, [r3, #0]
 8010586:	4608      	mov	r0, r1
 8010588:	f85d 4b04 	ldr.w	r4, [sp], #4
 801058c:	4770      	bx	lr

0801058e <__sfputs_r>:
 801058e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010590:	4606      	mov	r6, r0
 8010592:	460f      	mov	r7, r1
 8010594:	4614      	mov	r4, r2
 8010596:	18d5      	adds	r5, r2, r3
 8010598:	42ac      	cmp	r4, r5
 801059a:	d101      	bne.n	80105a0 <__sfputs_r+0x12>
 801059c:	2000      	movs	r0, #0
 801059e:	e007      	b.n	80105b0 <__sfputs_r+0x22>
 80105a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105a4:	463a      	mov	r2, r7
 80105a6:	4630      	mov	r0, r6
 80105a8:	f7ff ffda 	bl	8010560 <__sfputc_r>
 80105ac:	1c43      	adds	r3, r0, #1
 80105ae:	d1f3      	bne.n	8010598 <__sfputs_r+0xa>
 80105b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080105b4 <_vfiprintf_r>:
 80105b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b8:	460d      	mov	r5, r1
 80105ba:	b09d      	sub	sp, #116	@ 0x74
 80105bc:	4614      	mov	r4, r2
 80105be:	4698      	mov	r8, r3
 80105c0:	4606      	mov	r6, r0
 80105c2:	b118      	cbz	r0, 80105cc <_vfiprintf_r+0x18>
 80105c4:	6a03      	ldr	r3, [r0, #32]
 80105c6:	b90b      	cbnz	r3, 80105cc <_vfiprintf_r+0x18>
 80105c8:	f7ff fdba 	bl	8010140 <__sinit>
 80105cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105ce:	07d9      	lsls	r1, r3, #31
 80105d0:	d405      	bmi.n	80105de <_vfiprintf_r+0x2a>
 80105d2:	89ab      	ldrh	r3, [r5, #12]
 80105d4:	059a      	lsls	r2, r3, #22
 80105d6:	d402      	bmi.n	80105de <_vfiprintf_r+0x2a>
 80105d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105da:	f7ff ff0a 	bl	80103f2 <__retarget_lock_acquire_recursive>
 80105de:	89ab      	ldrh	r3, [r5, #12]
 80105e0:	071b      	lsls	r3, r3, #28
 80105e2:	d501      	bpl.n	80105e8 <_vfiprintf_r+0x34>
 80105e4:	692b      	ldr	r3, [r5, #16]
 80105e6:	b99b      	cbnz	r3, 8010610 <_vfiprintf_r+0x5c>
 80105e8:	4629      	mov	r1, r5
 80105ea:	4630      	mov	r0, r6
 80105ec:	f000 fb72 	bl	8010cd4 <__swsetup_r>
 80105f0:	b170      	cbz	r0, 8010610 <_vfiprintf_r+0x5c>
 80105f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105f4:	07dc      	lsls	r4, r3, #31
 80105f6:	d504      	bpl.n	8010602 <_vfiprintf_r+0x4e>
 80105f8:	f04f 30ff 	mov.w	r0, #4294967295
 80105fc:	b01d      	add	sp, #116	@ 0x74
 80105fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010602:	89ab      	ldrh	r3, [r5, #12]
 8010604:	0598      	lsls	r0, r3, #22
 8010606:	d4f7      	bmi.n	80105f8 <_vfiprintf_r+0x44>
 8010608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801060a:	f7ff fef3 	bl	80103f4 <__retarget_lock_release_recursive>
 801060e:	e7f3      	b.n	80105f8 <_vfiprintf_r+0x44>
 8010610:	2300      	movs	r3, #0
 8010612:	9309      	str	r3, [sp, #36]	@ 0x24
 8010614:	2320      	movs	r3, #32
 8010616:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801061a:	f8cd 800c 	str.w	r8, [sp, #12]
 801061e:	2330      	movs	r3, #48	@ 0x30
 8010620:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80107d0 <_vfiprintf_r+0x21c>
 8010624:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010628:	f04f 0901 	mov.w	r9, #1
 801062c:	4623      	mov	r3, r4
 801062e:	469a      	mov	sl, r3
 8010630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010634:	b10a      	cbz	r2, 801063a <_vfiprintf_r+0x86>
 8010636:	2a25      	cmp	r2, #37	@ 0x25
 8010638:	d1f9      	bne.n	801062e <_vfiprintf_r+0x7a>
 801063a:	ebba 0b04 	subs.w	fp, sl, r4
 801063e:	d00b      	beq.n	8010658 <_vfiprintf_r+0xa4>
 8010640:	465b      	mov	r3, fp
 8010642:	4622      	mov	r2, r4
 8010644:	4629      	mov	r1, r5
 8010646:	4630      	mov	r0, r6
 8010648:	f7ff ffa1 	bl	801058e <__sfputs_r>
 801064c:	3001      	adds	r0, #1
 801064e:	f000 80a7 	beq.w	80107a0 <_vfiprintf_r+0x1ec>
 8010652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010654:	445a      	add	r2, fp
 8010656:	9209      	str	r2, [sp, #36]	@ 0x24
 8010658:	f89a 3000 	ldrb.w	r3, [sl]
 801065c:	2b00      	cmp	r3, #0
 801065e:	f000 809f 	beq.w	80107a0 <_vfiprintf_r+0x1ec>
 8010662:	2300      	movs	r3, #0
 8010664:	f04f 32ff 	mov.w	r2, #4294967295
 8010668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801066c:	f10a 0a01 	add.w	sl, sl, #1
 8010670:	9304      	str	r3, [sp, #16]
 8010672:	9307      	str	r3, [sp, #28]
 8010674:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010678:	931a      	str	r3, [sp, #104]	@ 0x68
 801067a:	4654      	mov	r4, sl
 801067c:	2205      	movs	r2, #5
 801067e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010682:	4853      	ldr	r0, [pc, #332]	@ (80107d0 <_vfiprintf_r+0x21c>)
 8010684:	f7ef fdb4 	bl	80001f0 <memchr>
 8010688:	9a04      	ldr	r2, [sp, #16]
 801068a:	b9d8      	cbnz	r0, 80106c4 <_vfiprintf_r+0x110>
 801068c:	06d1      	lsls	r1, r2, #27
 801068e:	bf44      	itt	mi
 8010690:	2320      	movmi	r3, #32
 8010692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010696:	0713      	lsls	r3, r2, #28
 8010698:	bf44      	itt	mi
 801069a:	232b      	movmi	r3, #43	@ 0x2b
 801069c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106a0:	f89a 3000 	ldrb.w	r3, [sl]
 80106a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80106a6:	d015      	beq.n	80106d4 <_vfiprintf_r+0x120>
 80106a8:	9a07      	ldr	r2, [sp, #28]
 80106aa:	4654      	mov	r4, sl
 80106ac:	2000      	movs	r0, #0
 80106ae:	f04f 0c0a 	mov.w	ip, #10
 80106b2:	4621      	mov	r1, r4
 80106b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106b8:	3b30      	subs	r3, #48	@ 0x30
 80106ba:	2b09      	cmp	r3, #9
 80106bc:	d94b      	bls.n	8010756 <_vfiprintf_r+0x1a2>
 80106be:	b1b0      	cbz	r0, 80106ee <_vfiprintf_r+0x13a>
 80106c0:	9207      	str	r2, [sp, #28]
 80106c2:	e014      	b.n	80106ee <_vfiprintf_r+0x13a>
 80106c4:	eba0 0308 	sub.w	r3, r0, r8
 80106c8:	fa09 f303 	lsl.w	r3, r9, r3
 80106cc:	4313      	orrs	r3, r2
 80106ce:	9304      	str	r3, [sp, #16]
 80106d0:	46a2      	mov	sl, r4
 80106d2:	e7d2      	b.n	801067a <_vfiprintf_r+0xc6>
 80106d4:	9b03      	ldr	r3, [sp, #12]
 80106d6:	1d19      	adds	r1, r3, #4
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	9103      	str	r1, [sp, #12]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	bfbb      	ittet	lt
 80106e0:	425b      	neglt	r3, r3
 80106e2:	f042 0202 	orrlt.w	r2, r2, #2
 80106e6:	9307      	strge	r3, [sp, #28]
 80106e8:	9307      	strlt	r3, [sp, #28]
 80106ea:	bfb8      	it	lt
 80106ec:	9204      	strlt	r2, [sp, #16]
 80106ee:	7823      	ldrb	r3, [r4, #0]
 80106f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80106f2:	d10a      	bne.n	801070a <_vfiprintf_r+0x156>
 80106f4:	7863      	ldrb	r3, [r4, #1]
 80106f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80106f8:	d132      	bne.n	8010760 <_vfiprintf_r+0x1ac>
 80106fa:	9b03      	ldr	r3, [sp, #12]
 80106fc:	1d1a      	adds	r2, r3, #4
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	9203      	str	r2, [sp, #12]
 8010702:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010706:	3402      	adds	r4, #2
 8010708:	9305      	str	r3, [sp, #20]
 801070a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80107e0 <_vfiprintf_r+0x22c>
 801070e:	7821      	ldrb	r1, [r4, #0]
 8010710:	2203      	movs	r2, #3
 8010712:	4650      	mov	r0, sl
 8010714:	f7ef fd6c 	bl	80001f0 <memchr>
 8010718:	b138      	cbz	r0, 801072a <_vfiprintf_r+0x176>
 801071a:	9b04      	ldr	r3, [sp, #16]
 801071c:	eba0 000a 	sub.w	r0, r0, sl
 8010720:	2240      	movs	r2, #64	@ 0x40
 8010722:	4082      	lsls	r2, r0
 8010724:	4313      	orrs	r3, r2
 8010726:	3401      	adds	r4, #1
 8010728:	9304      	str	r3, [sp, #16]
 801072a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801072e:	4829      	ldr	r0, [pc, #164]	@ (80107d4 <_vfiprintf_r+0x220>)
 8010730:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010734:	2206      	movs	r2, #6
 8010736:	f7ef fd5b 	bl	80001f0 <memchr>
 801073a:	2800      	cmp	r0, #0
 801073c:	d03f      	beq.n	80107be <_vfiprintf_r+0x20a>
 801073e:	4b26      	ldr	r3, [pc, #152]	@ (80107d8 <_vfiprintf_r+0x224>)
 8010740:	bb1b      	cbnz	r3, 801078a <_vfiprintf_r+0x1d6>
 8010742:	9b03      	ldr	r3, [sp, #12]
 8010744:	3307      	adds	r3, #7
 8010746:	f023 0307 	bic.w	r3, r3, #7
 801074a:	3308      	adds	r3, #8
 801074c:	9303      	str	r3, [sp, #12]
 801074e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010750:	443b      	add	r3, r7
 8010752:	9309      	str	r3, [sp, #36]	@ 0x24
 8010754:	e76a      	b.n	801062c <_vfiprintf_r+0x78>
 8010756:	fb0c 3202 	mla	r2, ip, r2, r3
 801075a:	460c      	mov	r4, r1
 801075c:	2001      	movs	r0, #1
 801075e:	e7a8      	b.n	80106b2 <_vfiprintf_r+0xfe>
 8010760:	2300      	movs	r3, #0
 8010762:	3401      	adds	r4, #1
 8010764:	9305      	str	r3, [sp, #20]
 8010766:	4619      	mov	r1, r3
 8010768:	f04f 0c0a 	mov.w	ip, #10
 801076c:	4620      	mov	r0, r4
 801076e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010772:	3a30      	subs	r2, #48	@ 0x30
 8010774:	2a09      	cmp	r2, #9
 8010776:	d903      	bls.n	8010780 <_vfiprintf_r+0x1cc>
 8010778:	2b00      	cmp	r3, #0
 801077a:	d0c6      	beq.n	801070a <_vfiprintf_r+0x156>
 801077c:	9105      	str	r1, [sp, #20]
 801077e:	e7c4      	b.n	801070a <_vfiprintf_r+0x156>
 8010780:	fb0c 2101 	mla	r1, ip, r1, r2
 8010784:	4604      	mov	r4, r0
 8010786:	2301      	movs	r3, #1
 8010788:	e7f0      	b.n	801076c <_vfiprintf_r+0x1b8>
 801078a:	ab03      	add	r3, sp, #12
 801078c:	9300      	str	r3, [sp, #0]
 801078e:	462a      	mov	r2, r5
 8010790:	4b12      	ldr	r3, [pc, #72]	@ (80107dc <_vfiprintf_r+0x228>)
 8010792:	a904      	add	r1, sp, #16
 8010794:	4630      	mov	r0, r6
 8010796:	f3af 8000 	nop.w
 801079a:	4607      	mov	r7, r0
 801079c:	1c78      	adds	r0, r7, #1
 801079e:	d1d6      	bne.n	801074e <_vfiprintf_r+0x19a>
 80107a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107a2:	07d9      	lsls	r1, r3, #31
 80107a4:	d405      	bmi.n	80107b2 <_vfiprintf_r+0x1fe>
 80107a6:	89ab      	ldrh	r3, [r5, #12]
 80107a8:	059a      	lsls	r2, r3, #22
 80107aa:	d402      	bmi.n	80107b2 <_vfiprintf_r+0x1fe>
 80107ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107ae:	f7ff fe21 	bl	80103f4 <__retarget_lock_release_recursive>
 80107b2:	89ab      	ldrh	r3, [r5, #12]
 80107b4:	065b      	lsls	r3, r3, #25
 80107b6:	f53f af1f 	bmi.w	80105f8 <_vfiprintf_r+0x44>
 80107ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107bc:	e71e      	b.n	80105fc <_vfiprintf_r+0x48>
 80107be:	ab03      	add	r3, sp, #12
 80107c0:	9300      	str	r3, [sp, #0]
 80107c2:	462a      	mov	r2, r5
 80107c4:	4b05      	ldr	r3, [pc, #20]	@ (80107dc <_vfiprintf_r+0x228>)
 80107c6:	a904      	add	r1, sp, #16
 80107c8:	4630      	mov	r0, r6
 80107ca:	f000 f879 	bl	80108c0 <_printf_i>
 80107ce:	e7e4      	b.n	801079a <_vfiprintf_r+0x1e6>
 80107d0:	08012534 	.word	0x08012534
 80107d4:	0801253e 	.word	0x0801253e
 80107d8:	00000000 	.word	0x00000000
 80107dc:	0801058f 	.word	0x0801058f
 80107e0:	0801253a 	.word	0x0801253a

080107e4 <_printf_common>:
 80107e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107e8:	4616      	mov	r6, r2
 80107ea:	4698      	mov	r8, r3
 80107ec:	688a      	ldr	r2, [r1, #8]
 80107ee:	690b      	ldr	r3, [r1, #16]
 80107f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80107f4:	4293      	cmp	r3, r2
 80107f6:	bfb8      	it	lt
 80107f8:	4613      	movlt	r3, r2
 80107fa:	6033      	str	r3, [r6, #0]
 80107fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010800:	4607      	mov	r7, r0
 8010802:	460c      	mov	r4, r1
 8010804:	b10a      	cbz	r2, 801080a <_printf_common+0x26>
 8010806:	3301      	adds	r3, #1
 8010808:	6033      	str	r3, [r6, #0]
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	0699      	lsls	r1, r3, #26
 801080e:	bf42      	ittt	mi
 8010810:	6833      	ldrmi	r3, [r6, #0]
 8010812:	3302      	addmi	r3, #2
 8010814:	6033      	strmi	r3, [r6, #0]
 8010816:	6825      	ldr	r5, [r4, #0]
 8010818:	f015 0506 	ands.w	r5, r5, #6
 801081c:	d106      	bne.n	801082c <_printf_common+0x48>
 801081e:	f104 0a19 	add.w	sl, r4, #25
 8010822:	68e3      	ldr	r3, [r4, #12]
 8010824:	6832      	ldr	r2, [r6, #0]
 8010826:	1a9b      	subs	r3, r3, r2
 8010828:	42ab      	cmp	r3, r5
 801082a:	dc26      	bgt.n	801087a <_printf_common+0x96>
 801082c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010830:	6822      	ldr	r2, [r4, #0]
 8010832:	3b00      	subs	r3, #0
 8010834:	bf18      	it	ne
 8010836:	2301      	movne	r3, #1
 8010838:	0692      	lsls	r2, r2, #26
 801083a:	d42b      	bmi.n	8010894 <_printf_common+0xb0>
 801083c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010840:	4641      	mov	r1, r8
 8010842:	4638      	mov	r0, r7
 8010844:	47c8      	blx	r9
 8010846:	3001      	adds	r0, #1
 8010848:	d01e      	beq.n	8010888 <_printf_common+0xa4>
 801084a:	6823      	ldr	r3, [r4, #0]
 801084c:	6922      	ldr	r2, [r4, #16]
 801084e:	f003 0306 	and.w	r3, r3, #6
 8010852:	2b04      	cmp	r3, #4
 8010854:	bf02      	ittt	eq
 8010856:	68e5      	ldreq	r5, [r4, #12]
 8010858:	6833      	ldreq	r3, [r6, #0]
 801085a:	1aed      	subeq	r5, r5, r3
 801085c:	68a3      	ldr	r3, [r4, #8]
 801085e:	bf0c      	ite	eq
 8010860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010864:	2500      	movne	r5, #0
 8010866:	4293      	cmp	r3, r2
 8010868:	bfc4      	itt	gt
 801086a:	1a9b      	subgt	r3, r3, r2
 801086c:	18ed      	addgt	r5, r5, r3
 801086e:	2600      	movs	r6, #0
 8010870:	341a      	adds	r4, #26
 8010872:	42b5      	cmp	r5, r6
 8010874:	d11a      	bne.n	80108ac <_printf_common+0xc8>
 8010876:	2000      	movs	r0, #0
 8010878:	e008      	b.n	801088c <_printf_common+0xa8>
 801087a:	2301      	movs	r3, #1
 801087c:	4652      	mov	r2, sl
 801087e:	4641      	mov	r1, r8
 8010880:	4638      	mov	r0, r7
 8010882:	47c8      	blx	r9
 8010884:	3001      	adds	r0, #1
 8010886:	d103      	bne.n	8010890 <_printf_common+0xac>
 8010888:	f04f 30ff 	mov.w	r0, #4294967295
 801088c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010890:	3501      	adds	r5, #1
 8010892:	e7c6      	b.n	8010822 <_printf_common+0x3e>
 8010894:	18e1      	adds	r1, r4, r3
 8010896:	1c5a      	adds	r2, r3, #1
 8010898:	2030      	movs	r0, #48	@ 0x30
 801089a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801089e:	4422      	add	r2, r4
 80108a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80108a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80108a8:	3302      	adds	r3, #2
 80108aa:	e7c7      	b.n	801083c <_printf_common+0x58>
 80108ac:	2301      	movs	r3, #1
 80108ae:	4622      	mov	r2, r4
 80108b0:	4641      	mov	r1, r8
 80108b2:	4638      	mov	r0, r7
 80108b4:	47c8      	blx	r9
 80108b6:	3001      	adds	r0, #1
 80108b8:	d0e6      	beq.n	8010888 <_printf_common+0xa4>
 80108ba:	3601      	adds	r6, #1
 80108bc:	e7d9      	b.n	8010872 <_printf_common+0x8e>
	...

080108c0 <_printf_i>:
 80108c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108c4:	7e0f      	ldrb	r7, [r1, #24]
 80108c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80108c8:	2f78      	cmp	r7, #120	@ 0x78
 80108ca:	4691      	mov	r9, r2
 80108cc:	4680      	mov	r8, r0
 80108ce:	460c      	mov	r4, r1
 80108d0:	469a      	mov	sl, r3
 80108d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80108d6:	d807      	bhi.n	80108e8 <_printf_i+0x28>
 80108d8:	2f62      	cmp	r7, #98	@ 0x62
 80108da:	d80a      	bhi.n	80108f2 <_printf_i+0x32>
 80108dc:	2f00      	cmp	r7, #0
 80108de:	f000 80d2 	beq.w	8010a86 <_printf_i+0x1c6>
 80108e2:	2f58      	cmp	r7, #88	@ 0x58
 80108e4:	f000 80b9 	beq.w	8010a5a <_printf_i+0x19a>
 80108e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80108ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80108f0:	e03a      	b.n	8010968 <_printf_i+0xa8>
 80108f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80108f6:	2b15      	cmp	r3, #21
 80108f8:	d8f6      	bhi.n	80108e8 <_printf_i+0x28>
 80108fa:	a101      	add	r1, pc, #4	@ (adr r1, 8010900 <_printf_i+0x40>)
 80108fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010900:	08010959 	.word	0x08010959
 8010904:	0801096d 	.word	0x0801096d
 8010908:	080108e9 	.word	0x080108e9
 801090c:	080108e9 	.word	0x080108e9
 8010910:	080108e9 	.word	0x080108e9
 8010914:	080108e9 	.word	0x080108e9
 8010918:	0801096d 	.word	0x0801096d
 801091c:	080108e9 	.word	0x080108e9
 8010920:	080108e9 	.word	0x080108e9
 8010924:	080108e9 	.word	0x080108e9
 8010928:	080108e9 	.word	0x080108e9
 801092c:	08010a6d 	.word	0x08010a6d
 8010930:	08010997 	.word	0x08010997
 8010934:	08010a27 	.word	0x08010a27
 8010938:	080108e9 	.word	0x080108e9
 801093c:	080108e9 	.word	0x080108e9
 8010940:	08010a8f 	.word	0x08010a8f
 8010944:	080108e9 	.word	0x080108e9
 8010948:	08010997 	.word	0x08010997
 801094c:	080108e9 	.word	0x080108e9
 8010950:	080108e9 	.word	0x080108e9
 8010954:	08010a2f 	.word	0x08010a2f
 8010958:	6833      	ldr	r3, [r6, #0]
 801095a:	1d1a      	adds	r2, r3, #4
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	6032      	str	r2, [r6, #0]
 8010960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010968:	2301      	movs	r3, #1
 801096a:	e09d      	b.n	8010aa8 <_printf_i+0x1e8>
 801096c:	6833      	ldr	r3, [r6, #0]
 801096e:	6820      	ldr	r0, [r4, #0]
 8010970:	1d19      	adds	r1, r3, #4
 8010972:	6031      	str	r1, [r6, #0]
 8010974:	0606      	lsls	r6, r0, #24
 8010976:	d501      	bpl.n	801097c <_printf_i+0xbc>
 8010978:	681d      	ldr	r5, [r3, #0]
 801097a:	e003      	b.n	8010984 <_printf_i+0xc4>
 801097c:	0645      	lsls	r5, r0, #25
 801097e:	d5fb      	bpl.n	8010978 <_printf_i+0xb8>
 8010980:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010984:	2d00      	cmp	r5, #0
 8010986:	da03      	bge.n	8010990 <_printf_i+0xd0>
 8010988:	232d      	movs	r3, #45	@ 0x2d
 801098a:	426d      	negs	r5, r5
 801098c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010990:	4859      	ldr	r0, [pc, #356]	@ (8010af8 <_printf_i+0x238>)
 8010992:	230a      	movs	r3, #10
 8010994:	e011      	b.n	80109ba <_printf_i+0xfa>
 8010996:	6821      	ldr	r1, [r4, #0]
 8010998:	6833      	ldr	r3, [r6, #0]
 801099a:	0608      	lsls	r0, r1, #24
 801099c:	f853 5b04 	ldr.w	r5, [r3], #4
 80109a0:	d402      	bmi.n	80109a8 <_printf_i+0xe8>
 80109a2:	0649      	lsls	r1, r1, #25
 80109a4:	bf48      	it	mi
 80109a6:	b2ad      	uxthmi	r5, r5
 80109a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80109aa:	4853      	ldr	r0, [pc, #332]	@ (8010af8 <_printf_i+0x238>)
 80109ac:	6033      	str	r3, [r6, #0]
 80109ae:	bf14      	ite	ne
 80109b0:	230a      	movne	r3, #10
 80109b2:	2308      	moveq	r3, #8
 80109b4:	2100      	movs	r1, #0
 80109b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80109ba:	6866      	ldr	r6, [r4, #4]
 80109bc:	60a6      	str	r6, [r4, #8]
 80109be:	2e00      	cmp	r6, #0
 80109c0:	bfa2      	ittt	ge
 80109c2:	6821      	ldrge	r1, [r4, #0]
 80109c4:	f021 0104 	bicge.w	r1, r1, #4
 80109c8:	6021      	strge	r1, [r4, #0]
 80109ca:	b90d      	cbnz	r5, 80109d0 <_printf_i+0x110>
 80109cc:	2e00      	cmp	r6, #0
 80109ce:	d04b      	beq.n	8010a68 <_printf_i+0x1a8>
 80109d0:	4616      	mov	r6, r2
 80109d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80109d6:	fb03 5711 	mls	r7, r3, r1, r5
 80109da:	5dc7      	ldrb	r7, [r0, r7]
 80109dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80109e0:	462f      	mov	r7, r5
 80109e2:	42bb      	cmp	r3, r7
 80109e4:	460d      	mov	r5, r1
 80109e6:	d9f4      	bls.n	80109d2 <_printf_i+0x112>
 80109e8:	2b08      	cmp	r3, #8
 80109ea:	d10b      	bne.n	8010a04 <_printf_i+0x144>
 80109ec:	6823      	ldr	r3, [r4, #0]
 80109ee:	07df      	lsls	r7, r3, #31
 80109f0:	d508      	bpl.n	8010a04 <_printf_i+0x144>
 80109f2:	6923      	ldr	r3, [r4, #16]
 80109f4:	6861      	ldr	r1, [r4, #4]
 80109f6:	4299      	cmp	r1, r3
 80109f8:	bfde      	ittt	le
 80109fa:	2330      	movle	r3, #48	@ 0x30
 80109fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010a00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010a04:	1b92      	subs	r2, r2, r6
 8010a06:	6122      	str	r2, [r4, #16]
 8010a08:	f8cd a000 	str.w	sl, [sp]
 8010a0c:	464b      	mov	r3, r9
 8010a0e:	aa03      	add	r2, sp, #12
 8010a10:	4621      	mov	r1, r4
 8010a12:	4640      	mov	r0, r8
 8010a14:	f7ff fee6 	bl	80107e4 <_printf_common>
 8010a18:	3001      	adds	r0, #1
 8010a1a:	d14a      	bne.n	8010ab2 <_printf_i+0x1f2>
 8010a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a20:	b004      	add	sp, #16
 8010a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a26:	6823      	ldr	r3, [r4, #0]
 8010a28:	f043 0320 	orr.w	r3, r3, #32
 8010a2c:	6023      	str	r3, [r4, #0]
 8010a2e:	4833      	ldr	r0, [pc, #204]	@ (8010afc <_printf_i+0x23c>)
 8010a30:	2778      	movs	r7, #120	@ 0x78
 8010a32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010a36:	6823      	ldr	r3, [r4, #0]
 8010a38:	6831      	ldr	r1, [r6, #0]
 8010a3a:	061f      	lsls	r7, r3, #24
 8010a3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010a40:	d402      	bmi.n	8010a48 <_printf_i+0x188>
 8010a42:	065f      	lsls	r7, r3, #25
 8010a44:	bf48      	it	mi
 8010a46:	b2ad      	uxthmi	r5, r5
 8010a48:	6031      	str	r1, [r6, #0]
 8010a4a:	07d9      	lsls	r1, r3, #31
 8010a4c:	bf44      	itt	mi
 8010a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8010a52:	6023      	strmi	r3, [r4, #0]
 8010a54:	b11d      	cbz	r5, 8010a5e <_printf_i+0x19e>
 8010a56:	2310      	movs	r3, #16
 8010a58:	e7ac      	b.n	80109b4 <_printf_i+0xf4>
 8010a5a:	4827      	ldr	r0, [pc, #156]	@ (8010af8 <_printf_i+0x238>)
 8010a5c:	e7e9      	b.n	8010a32 <_printf_i+0x172>
 8010a5e:	6823      	ldr	r3, [r4, #0]
 8010a60:	f023 0320 	bic.w	r3, r3, #32
 8010a64:	6023      	str	r3, [r4, #0]
 8010a66:	e7f6      	b.n	8010a56 <_printf_i+0x196>
 8010a68:	4616      	mov	r6, r2
 8010a6a:	e7bd      	b.n	80109e8 <_printf_i+0x128>
 8010a6c:	6833      	ldr	r3, [r6, #0]
 8010a6e:	6825      	ldr	r5, [r4, #0]
 8010a70:	6961      	ldr	r1, [r4, #20]
 8010a72:	1d18      	adds	r0, r3, #4
 8010a74:	6030      	str	r0, [r6, #0]
 8010a76:	062e      	lsls	r6, r5, #24
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	d501      	bpl.n	8010a80 <_printf_i+0x1c0>
 8010a7c:	6019      	str	r1, [r3, #0]
 8010a7e:	e002      	b.n	8010a86 <_printf_i+0x1c6>
 8010a80:	0668      	lsls	r0, r5, #25
 8010a82:	d5fb      	bpl.n	8010a7c <_printf_i+0x1bc>
 8010a84:	8019      	strh	r1, [r3, #0]
 8010a86:	2300      	movs	r3, #0
 8010a88:	6123      	str	r3, [r4, #16]
 8010a8a:	4616      	mov	r6, r2
 8010a8c:	e7bc      	b.n	8010a08 <_printf_i+0x148>
 8010a8e:	6833      	ldr	r3, [r6, #0]
 8010a90:	1d1a      	adds	r2, r3, #4
 8010a92:	6032      	str	r2, [r6, #0]
 8010a94:	681e      	ldr	r6, [r3, #0]
 8010a96:	6862      	ldr	r2, [r4, #4]
 8010a98:	2100      	movs	r1, #0
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	f7ef fba8 	bl	80001f0 <memchr>
 8010aa0:	b108      	cbz	r0, 8010aa6 <_printf_i+0x1e6>
 8010aa2:	1b80      	subs	r0, r0, r6
 8010aa4:	6060      	str	r0, [r4, #4]
 8010aa6:	6863      	ldr	r3, [r4, #4]
 8010aa8:	6123      	str	r3, [r4, #16]
 8010aaa:	2300      	movs	r3, #0
 8010aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ab0:	e7aa      	b.n	8010a08 <_printf_i+0x148>
 8010ab2:	6923      	ldr	r3, [r4, #16]
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	4649      	mov	r1, r9
 8010ab8:	4640      	mov	r0, r8
 8010aba:	47d0      	blx	sl
 8010abc:	3001      	adds	r0, #1
 8010abe:	d0ad      	beq.n	8010a1c <_printf_i+0x15c>
 8010ac0:	6823      	ldr	r3, [r4, #0]
 8010ac2:	079b      	lsls	r3, r3, #30
 8010ac4:	d413      	bmi.n	8010aee <_printf_i+0x22e>
 8010ac6:	68e0      	ldr	r0, [r4, #12]
 8010ac8:	9b03      	ldr	r3, [sp, #12]
 8010aca:	4298      	cmp	r0, r3
 8010acc:	bfb8      	it	lt
 8010ace:	4618      	movlt	r0, r3
 8010ad0:	e7a6      	b.n	8010a20 <_printf_i+0x160>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	4632      	mov	r2, r6
 8010ad6:	4649      	mov	r1, r9
 8010ad8:	4640      	mov	r0, r8
 8010ada:	47d0      	blx	sl
 8010adc:	3001      	adds	r0, #1
 8010ade:	d09d      	beq.n	8010a1c <_printf_i+0x15c>
 8010ae0:	3501      	adds	r5, #1
 8010ae2:	68e3      	ldr	r3, [r4, #12]
 8010ae4:	9903      	ldr	r1, [sp, #12]
 8010ae6:	1a5b      	subs	r3, r3, r1
 8010ae8:	42ab      	cmp	r3, r5
 8010aea:	dcf2      	bgt.n	8010ad2 <_printf_i+0x212>
 8010aec:	e7eb      	b.n	8010ac6 <_printf_i+0x206>
 8010aee:	2500      	movs	r5, #0
 8010af0:	f104 0619 	add.w	r6, r4, #25
 8010af4:	e7f5      	b.n	8010ae2 <_printf_i+0x222>
 8010af6:	bf00      	nop
 8010af8:	08012545 	.word	0x08012545
 8010afc:	08012556 	.word	0x08012556

08010b00 <__sflush_r>:
 8010b00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b08:	0716      	lsls	r6, r2, #28
 8010b0a:	4605      	mov	r5, r0
 8010b0c:	460c      	mov	r4, r1
 8010b0e:	d454      	bmi.n	8010bba <__sflush_r+0xba>
 8010b10:	684b      	ldr	r3, [r1, #4]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	dc02      	bgt.n	8010b1c <__sflush_r+0x1c>
 8010b16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	dd48      	ble.n	8010bae <__sflush_r+0xae>
 8010b1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b1e:	2e00      	cmp	r6, #0
 8010b20:	d045      	beq.n	8010bae <__sflush_r+0xae>
 8010b22:	2300      	movs	r3, #0
 8010b24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b28:	682f      	ldr	r7, [r5, #0]
 8010b2a:	6a21      	ldr	r1, [r4, #32]
 8010b2c:	602b      	str	r3, [r5, #0]
 8010b2e:	d030      	beq.n	8010b92 <__sflush_r+0x92>
 8010b30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b32:	89a3      	ldrh	r3, [r4, #12]
 8010b34:	0759      	lsls	r1, r3, #29
 8010b36:	d505      	bpl.n	8010b44 <__sflush_r+0x44>
 8010b38:	6863      	ldr	r3, [r4, #4]
 8010b3a:	1ad2      	subs	r2, r2, r3
 8010b3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b3e:	b10b      	cbz	r3, 8010b44 <__sflush_r+0x44>
 8010b40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b42:	1ad2      	subs	r2, r2, r3
 8010b44:	2300      	movs	r3, #0
 8010b46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b48:	6a21      	ldr	r1, [r4, #32]
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	47b0      	blx	r6
 8010b4e:	1c43      	adds	r3, r0, #1
 8010b50:	89a3      	ldrh	r3, [r4, #12]
 8010b52:	d106      	bne.n	8010b62 <__sflush_r+0x62>
 8010b54:	6829      	ldr	r1, [r5, #0]
 8010b56:	291d      	cmp	r1, #29
 8010b58:	d82b      	bhi.n	8010bb2 <__sflush_r+0xb2>
 8010b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8010c04 <__sflush_r+0x104>)
 8010b5c:	410a      	asrs	r2, r1
 8010b5e:	07d6      	lsls	r6, r2, #31
 8010b60:	d427      	bmi.n	8010bb2 <__sflush_r+0xb2>
 8010b62:	2200      	movs	r2, #0
 8010b64:	6062      	str	r2, [r4, #4]
 8010b66:	04d9      	lsls	r1, r3, #19
 8010b68:	6922      	ldr	r2, [r4, #16]
 8010b6a:	6022      	str	r2, [r4, #0]
 8010b6c:	d504      	bpl.n	8010b78 <__sflush_r+0x78>
 8010b6e:	1c42      	adds	r2, r0, #1
 8010b70:	d101      	bne.n	8010b76 <__sflush_r+0x76>
 8010b72:	682b      	ldr	r3, [r5, #0]
 8010b74:	b903      	cbnz	r3, 8010b78 <__sflush_r+0x78>
 8010b76:	6560      	str	r0, [r4, #84]	@ 0x54
 8010b78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b7a:	602f      	str	r7, [r5, #0]
 8010b7c:	b1b9      	cbz	r1, 8010bae <__sflush_r+0xae>
 8010b7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b82:	4299      	cmp	r1, r3
 8010b84:	d002      	beq.n	8010b8c <__sflush_r+0x8c>
 8010b86:	4628      	mov	r0, r5
 8010b88:	f7ff fca0 	bl	80104cc <_free_r>
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b90:	e00d      	b.n	8010bae <__sflush_r+0xae>
 8010b92:	2301      	movs	r3, #1
 8010b94:	4628      	mov	r0, r5
 8010b96:	47b0      	blx	r6
 8010b98:	4602      	mov	r2, r0
 8010b9a:	1c50      	adds	r0, r2, #1
 8010b9c:	d1c9      	bne.n	8010b32 <__sflush_r+0x32>
 8010b9e:	682b      	ldr	r3, [r5, #0]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d0c6      	beq.n	8010b32 <__sflush_r+0x32>
 8010ba4:	2b1d      	cmp	r3, #29
 8010ba6:	d001      	beq.n	8010bac <__sflush_r+0xac>
 8010ba8:	2b16      	cmp	r3, #22
 8010baa:	d11e      	bne.n	8010bea <__sflush_r+0xea>
 8010bac:	602f      	str	r7, [r5, #0]
 8010bae:	2000      	movs	r0, #0
 8010bb0:	e022      	b.n	8010bf8 <__sflush_r+0xf8>
 8010bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bb6:	b21b      	sxth	r3, r3
 8010bb8:	e01b      	b.n	8010bf2 <__sflush_r+0xf2>
 8010bba:	690f      	ldr	r7, [r1, #16]
 8010bbc:	2f00      	cmp	r7, #0
 8010bbe:	d0f6      	beq.n	8010bae <__sflush_r+0xae>
 8010bc0:	0793      	lsls	r3, r2, #30
 8010bc2:	680e      	ldr	r6, [r1, #0]
 8010bc4:	bf08      	it	eq
 8010bc6:	694b      	ldreq	r3, [r1, #20]
 8010bc8:	600f      	str	r7, [r1, #0]
 8010bca:	bf18      	it	ne
 8010bcc:	2300      	movne	r3, #0
 8010bce:	eba6 0807 	sub.w	r8, r6, r7
 8010bd2:	608b      	str	r3, [r1, #8]
 8010bd4:	f1b8 0f00 	cmp.w	r8, #0
 8010bd8:	dde9      	ble.n	8010bae <__sflush_r+0xae>
 8010bda:	6a21      	ldr	r1, [r4, #32]
 8010bdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010bde:	4643      	mov	r3, r8
 8010be0:	463a      	mov	r2, r7
 8010be2:	4628      	mov	r0, r5
 8010be4:	47b0      	blx	r6
 8010be6:	2800      	cmp	r0, #0
 8010be8:	dc08      	bgt.n	8010bfc <__sflush_r+0xfc>
 8010bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bf2:	81a3      	strh	r3, [r4, #12]
 8010bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8010bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bfc:	4407      	add	r7, r0
 8010bfe:	eba8 0800 	sub.w	r8, r8, r0
 8010c02:	e7e7      	b.n	8010bd4 <__sflush_r+0xd4>
 8010c04:	dfbffffe 	.word	0xdfbffffe

08010c08 <_fflush_r>:
 8010c08:	b538      	push	{r3, r4, r5, lr}
 8010c0a:	690b      	ldr	r3, [r1, #16]
 8010c0c:	4605      	mov	r5, r0
 8010c0e:	460c      	mov	r4, r1
 8010c10:	b913      	cbnz	r3, 8010c18 <_fflush_r+0x10>
 8010c12:	2500      	movs	r5, #0
 8010c14:	4628      	mov	r0, r5
 8010c16:	bd38      	pop	{r3, r4, r5, pc}
 8010c18:	b118      	cbz	r0, 8010c22 <_fflush_r+0x1a>
 8010c1a:	6a03      	ldr	r3, [r0, #32]
 8010c1c:	b90b      	cbnz	r3, 8010c22 <_fflush_r+0x1a>
 8010c1e:	f7ff fa8f 	bl	8010140 <__sinit>
 8010c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d0f3      	beq.n	8010c12 <_fflush_r+0xa>
 8010c2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c2c:	07d0      	lsls	r0, r2, #31
 8010c2e:	d404      	bmi.n	8010c3a <_fflush_r+0x32>
 8010c30:	0599      	lsls	r1, r3, #22
 8010c32:	d402      	bmi.n	8010c3a <_fflush_r+0x32>
 8010c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c36:	f7ff fbdc 	bl	80103f2 <__retarget_lock_acquire_recursive>
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	4621      	mov	r1, r4
 8010c3e:	f7ff ff5f 	bl	8010b00 <__sflush_r>
 8010c42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c44:	07da      	lsls	r2, r3, #31
 8010c46:	4605      	mov	r5, r0
 8010c48:	d4e4      	bmi.n	8010c14 <_fflush_r+0xc>
 8010c4a:	89a3      	ldrh	r3, [r4, #12]
 8010c4c:	059b      	lsls	r3, r3, #22
 8010c4e:	d4e1      	bmi.n	8010c14 <_fflush_r+0xc>
 8010c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c52:	f7ff fbcf 	bl	80103f4 <__retarget_lock_release_recursive>
 8010c56:	e7dd      	b.n	8010c14 <_fflush_r+0xc>

08010c58 <__swbuf_r>:
 8010c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5a:	460e      	mov	r6, r1
 8010c5c:	4614      	mov	r4, r2
 8010c5e:	4605      	mov	r5, r0
 8010c60:	b118      	cbz	r0, 8010c6a <__swbuf_r+0x12>
 8010c62:	6a03      	ldr	r3, [r0, #32]
 8010c64:	b90b      	cbnz	r3, 8010c6a <__swbuf_r+0x12>
 8010c66:	f7ff fa6b 	bl	8010140 <__sinit>
 8010c6a:	69a3      	ldr	r3, [r4, #24]
 8010c6c:	60a3      	str	r3, [r4, #8]
 8010c6e:	89a3      	ldrh	r3, [r4, #12]
 8010c70:	071a      	lsls	r2, r3, #28
 8010c72:	d501      	bpl.n	8010c78 <__swbuf_r+0x20>
 8010c74:	6923      	ldr	r3, [r4, #16]
 8010c76:	b943      	cbnz	r3, 8010c8a <__swbuf_r+0x32>
 8010c78:	4621      	mov	r1, r4
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	f000 f82a 	bl	8010cd4 <__swsetup_r>
 8010c80:	b118      	cbz	r0, 8010c8a <__swbuf_r+0x32>
 8010c82:	f04f 37ff 	mov.w	r7, #4294967295
 8010c86:	4638      	mov	r0, r7
 8010c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c8a:	6823      	ldr	r3, [r4, #0]
 8010c8c:	6922      	ldr	r2, [r4, #16]
 8010c8e:	1a98      	subs	r0, r3, r2
 8010c90:	6963      	ldr	r3, [r4, #20]
 8010c92:	b2f6      	uxtb	r6, r6
 8010c94:	4283      	cmp	r3, r0
 8010c96:	4637      	mov	r7, r6
 8010c98:	dc05      	bgt.n	8010ca6 <__swbuf_r+0x4e>
 8010c9a:	4621      	mov	r1, r4
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	f7ff ffb3 	bl	8010c08 <_fflush_r>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	d1ed      	bne.n	8010c82 <__swbuf_r+0x2a>
 8010ca6:	68a3      	ldr	r3, [r4, #8]
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	60a3      	str	r3, [r4, #8]
 8010cac:	6823      	ldr	r3, [r4, #0]
 8010cae:	1c5a      	adds	r2, r3, #1
 8010cb0:	6022      	str	r2, [r4, #0]
 8010cb2:	701e      	strb	r6, [r3, #0]
 8010cb4:	6962      	ldr	r2, [r4, #20]
 8010cb6:	1c43      	adds	r3, r0, #1
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d004      	beq.n	8010cc6 <__swbuf_r+0x6e>
 8010cbc:	89a3      	ldrh	r3, [r4, #12]
 8010cbe:	07db      	lsls	r3, r3, #31
 8010cc0:	d5e1      	bpl.n	8010c86 <__swbuf_r+0x2e>
 8010cc2:	2e0a      	cmp	r6, #10
 8010cc4:	d1df      	bne.n	8010c86 <__swbuf_r+0x2e>
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	4628      	mov	r0, r5
 8010cca:	f7ff ff9d 	bl	8010c08 <_fflush_r>
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	d0d9      	beq.n	8010c86 <__swbuf_r+0x2e>
 8010cd2:	e7d6      	b.n	8010c82 <__swbuf_r+0x2a>

08010cd4 <__swsetup_r>:
 8010cd4:	b538      	push	{r3, r4, r5, lr}
 8010cd6:	4b29      	ldr	r3, [pc, #164]	@ (8010d7c <__swsetup_r+0xa8>)
 8010cd8:	4605      	mov	r5, r0
 8010cda:	6818      	ldr	r0, [r3, #0]
 8010cdc:	460c      	mov	r4, r1
 8010cde:	b118      	cbz	r0, 8010ce8 <__swsetup_r+0x14>
 8010ce0:	6a03      	ldr	r3, [r0, #32]
 8010ce2:	b90b      	cbnz	r3, 8010ce8 <__swsetup_r+0x14>
 8010ce4:	f7ff fa2c 	bl	8010140 <__sinit>
 8010ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cec:	0719      	lsls	r1, r3, #28
 8010cee:	d422      	bmi.n	8010d36 <__swsetup_r+0x62>
 8010cf0:	06da      	lsls	r2, r3, #27
 8010cf2:	d407      	bmi.n	8010d04 <__swsetup_r+0x30>
 8010cf4:	2209      	movs	r2, #9
 8010cf6:	602a      	str	r2, [r5, #0]
 8010cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cfc:	81a3      	strh	r3, [r4, #12]
 8010cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8010d02:	e033      	b.n	8010d6c <__swsetup_r+0x98>
 8010d04:	0758      	lsls	r0, r3, #29
 8010d06:	d512      	bpl.n	8010d2e <__swsetup_r+0x5a>
 8010d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d0a:	b141      	cbz	r1, 8010d1e <__swsetup_r+0x4a>
 8010d0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d10:	4299      	cmp	r1, r3
 8010d12:	d002      	beq.n	8010d1a <__swsetup_r+0x46>
 8010d14:	4628      	mov	r0, r5
 8010d16:	f7ff fbd9 	bl	80104cc <_free_r>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d1e:	89a3      	ldrh	r3, [r4, #12]
 8010d20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010d24:	81a3      	strh	r3, [r4, #12]
 8010d26:	2300      	movs	r3, #0
 8010d28:	6063      	str	r3, [r4, #4]
 8010d2a:	6923      	ldr	r3, [r4, #16]
 8010d2c:	6023      	str	r3, [r4, #0]
 8010d2e:	89a3      	ldrh	r3, [r4, #12]
 8010d30:	f043 0308 	orr.w	r3, r3, #8
 8010d34:	81a3      	strh	r3, [r4, #12]
 8010d36:	6923      	ldr	r3, [r4, #16]
 8010d38:	b94b      	cbnz	r3, 8010d4e <__swsetup_r+0x7a>
 8010d3a:	89a3      	ldrh	r3, [r4, #12]
 8010d3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d44:	d003      	beq.n	8010d4e <__swsetup_r+0x7a>
 8010d46:	4621      	mov	r1, r4
 8010d48:	4628      	mov	r0, r5
 8010d4a:	f000 f83f 	bl	8010dcc <__smakebuf_r>
 8010d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d52:	f013 0201 	ands.w	r2, r3, #1
 8010d56:	d00a      	beq.n	8010d6e <__swsetup_r+0x9a>
 8010d58:	2200      	movs	r2, #0
 8010d5a:	60a2      	str	r2, [r4, #8]
 8010d5c:	6962      	ldr	r2, [r4, #20]
 8010d5e:	4252      	negs	r2, r2
 8010d60:	61a2      	str	r2, [r4, #24]
 8010d62:	6922      	ldr	r2, [r4, #16]
 8010d64:	b942      	cbnz	r2, 8010d78 <__swsetup_r+0xa4>
 8010d66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010d6a:	d1c5      	bne.n	8010cf8 <__swsetup_r+0x24>
 8010d6c:	bd38      	pop	{r3, r4, r5, pc}
 8010d6e:	0799      	lsls	r1, r3, #30
 8010d70:	bf58      	it	pl
 8010d72:	6962      	ldrpl	r2, [r4, #20]
 8010d74:	60a2      	str	r2, [r4, #8]
 8010d76:	e7f4      	b.n	8010d62 <__swsetup_r+0x8e>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	e7f7      	b.n	8010d6c <__swsetup_r+0x98>
 8010d7c:	2000009c 	.word	0x2000009c

08010d80 <__swhatbuf_r>:
 8010d80:	b570      	push	{r4, r5, r6, lr}
 8010d82:	460c      	mov	r4, r1
 8010d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d88:	2900      	cmp	r1, #0
 8010d8a:	b096      	sub	sp, #88	@ 0x58
 8010d8c:	4615      	mov	r5, r2
 8010d8e:	461e      	mov	r6, r3
 8010d90:	da0d      	bge.n	8010dae <__swhatbuf_r+0x2e>
 8010d92:	89a3      	ldrh	r3, [r4, #12]
 8010d94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010d98:	f04f 0100 	mov.w	r1, #0
 8010d9c:	bf14      	ite	ne
 8010d9e:	2340      	movne	r3, #64	@ 0x40
 8010da0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010da4:	2000      	movs	r0, #0
 8010da6:	6031      	str	r1, [r6, #0]
 8010da8:	602b      	str	r3, [r5, #0]
 8010daa:	b016      	add	sp, #88	@ 0x58
 8010dac:	bd70      	pop	{r4, r5, r6, pc}
 8010dae:	466a      	mov	r2, sp
 8010db0:	f000 f848 	bl	8010e44 <_fstat_r>
 8010db4:	2800      	cmp	r0, #0
 8010db6:	dbec      	blt.n	8010d92 <__swhatbuf_r+0x12>
 8010db8:	9901      	ldr	r1, [sp, #4]
 8010dba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010dbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010dc2:	4259      	negs	r1, r3
 8010dc4:	4159      	adcs	r1, r3
 8010dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010dca:	e7eb      	b.n	8010da4 <__swhatbuf_r+0x24>

08010dcc <__smakebuf_r>:
 8010dcc:	898b      	ldrh	r3, [r1, #12]
 8010dce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dd0:	079d      	lsls	r5, r3, #30
 8010dd2:	4606      	mov	r6, r0
 8010dd4:	460c      	mov	r4, r1
 8010dd6:	d507      	bpl.n	8010de8 <__smakebuf_r+0x1c>
 8010dd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010ddc:	6023      	str	r3, [r4, #0]
 8010dde:	6123      	str	r3, [r4, #16]
 8010de0:	2301      	movs	r3, #1
 8010de2:	6163      	str	r3, [r4, #20]
 8010de4:	b003      	add	sp, #12
 8010de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010de8:	ab01      	add	r3, sp, #4
 8010dea:	466a      	mov	r2, sp
 8010dec:	f7ff ffc8 	bl	8010d80 <__swhatbuf_r>
 8010df0:	9f00      	ldr	r7, [sp, #0]
 8010df2:	4605      	mov	r5, r0
 8010df4:	4639      	mov	r1, r7
 8010df6:	4630      	mov	r0, r6
 8010df8:	f7ff f87c 	bl	800fef4 <_malloc_r>
 8010dfc:	b948      	cbnz	r0, 8010e12 <__smakebuf_r+0x46>
 8010dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e02:	059a      	lsls	r2, r3, #22
 8010e04:	d4ee      	bmi.n	8010de4 <__smakebuf_r+0x18>
 8010e06:	f023 0303 	bic.w	r3, r3, #3
 8010e0a:	f043 0302 	orr.w	r3, r3, #2
 8010e0e:	81a3      	strh	r3, [r4, #12]
 8010e10:	e7e2      	b.n	8010dd8 <__smakebuf_r+0xc>
 8010e12:	89a3      	ldrh	r3, [r4, #12]
 8010e14:	6020      	str	r0, [r4, #0]
 8010e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e1a:	81a3      	strh	r3, [r4, #12]
 8010e1c:	9b01      	ldr	r3, [sp, #4]
 8010e1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e22:	b15b      	cbz	r3, 8010e3c <__smakebuf_r+0x70>
 8010e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e28:	4630      	mov	r0, r6
 8010e2a:	f000 f81d 	bl	8010e68 <_isatty_r>
 8010e2e:	b128      	cbz	r0, 8010e3c <__smakebuf_r+0x70>
 8010e30:	89a3      	ldrh	r3, [r4, #12]
 8010e32:	f023 0303 	bic.w	r3, r3, #3
 8010e36:	f043 0301 	orr.w	r3, r3, #1
 8010e3a:	81a3      	strh	r3, [r4, #12]
 8010e3c:	89a3      	ldrh	r3, [r4, #12]
 8010e3e:	431d      	orrs	r5, r3
 8010e40:	81a5      	strh	r5, [r4, #12]
 8010e42:	e7cf      	b.n	8010de4 <__smakebuf_r+0x18>

08010e44 <_fstat_r>:
 8010e44:	b538      	push	{r3, r4, r5, lr}
 8010e46:	4d07      	ldr	r5, [pc, #28]	@ (8010e64 <_fstat_r+0x20>)
 8010e48:	2300      	movs	r3, #0
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	4608      	mov	r0, r1
 8010e4e:	4611      	mov	r1, r2
 8010e50:	602b      	str	r3, [r5, #0]
 8010e52:	f7f1 f814 	bl	8001e7e <_fstat>
 8010e56:	1c43      	adds	r3, r0, #1
 8010e58:	d102      	bne.n	8010e60 <_fstat_r+0x1c>
 8010e5a:	682b      	ldr	r3, [r5, #0]
 8010e5c:	b103      	cbz	r3, 8010e60 <_fstat_r+0x1c>
 8010e5e:	6023      	str	r3, [r4, #0]
 8010e60:	bd38      	pop	{r3, r4, r5, pc}
 8010e62:	bf00      	nop
 8010e64:	20012608 	.word	0x20012608

08010e68 <_isatty_r>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	4d06      	ldr	r5, [pc, #24]	@ (8010e84 <_isatty_r+0x1c>)
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	4604      	mov	r4, r0
 8010e70:	4608      	mov	r0, r1
 8010e72:	602b      	str	r3, [r5, #0]
 8010e74:	f7f1 f808 	bl	8001e88 <_isatty>
 8010e78:	1c43      	adds	r3, r0, #1
 8010e7a:	d102      	bne.n	8010e82 <_isatty_r+0x1a>
 8010e7c:	682b      	ldr	r3, [r5, #0]
 8010e7e:	b103      	cbz	r3, 8010e82 <_isatty_r+0x1a>
 8010e80:	6023      	str	r3, [r4, #0]
 8010e82:	bd38      	pop	{r3, r4, r5, pc}
 8010e84:	20012608 	.word	0x20012608

08010e88 <_init>:
 8010e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e8a:	bf00      	nop
 8010e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e8e:	bc08      	pop	{r3}
 8010e90:	469e      	mov	lr, r3
 8010e92:	4770      	bx	lr

08010e94 <_fini>:
 8010e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e96:	bf00      	nop
 8010e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e9a:	bc08      	pop	{r3}
 8010e9c:	469e      	mov	lr, r3
 8010e9e:	4770      	bx	lr
